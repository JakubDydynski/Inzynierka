
STM32F401Nucleo-VL6180X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  0800c594  0800c594  0001c594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfe8  0800cfe8  00020824  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfe8  0800cfe8  0001cfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cff0  0800cff0  00020824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cff0  0800cff0  0001cff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cff4  0800cff4  0001cff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000824  20000000  0800cff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000824  0800d81c  00020824  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  0800d81c  00020c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020824  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d72e  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003560  00000000  00000000  0003df82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  000414e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  00042af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004aa6  00000000  00000000  00043fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7f7  00000000  00000000  00048a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982e5  00000000  00000000  00063275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb55a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006398  00000000  00000000  000fb5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000824 	.word	0x20000824
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c57c 	.word	0x0800c57c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000828 	.word	0x20000828
 80001dc:	0800c57c 	.word	0x0800c57c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TimeStamp_Get>:
void TimeStamp_Reset(){
    HAL_TIM_Base_Start(&htim5);
    htim5.Instance->CNT=0;
}

uint32_t TimeStamp_Get(){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
    return htim5.Instance->CNT;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <TimeStamp_Get+0x14>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800058e:	4618      	mov	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	200008e8 	.word	0x200008e8

0800059c <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"Er%d", err);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4905      	ldr	r1, [pc, #20]	; (80005c0 <HandleError+0x24>)
 80005ac:	4618      	mov	r0, r3
 80005ae:	f00b fb43 	bl	800bc38 <siprintf>
    XNUCLEO53L0A1_SetDisplayString(msg);
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f8f0 	bl	800179c <XNUCLEO53L0A1_SetDisplayString>
    while(1){};
 80005bc:	e7fe      	b.n	80005bc <HandleError+0x20>
 80005be:	bf00      	nop
 80005c0:	0800c5b0 	.word	0x0800c5b0

080005c4 <SetupSingleShot>:
}

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(RangingConfig_e rangingConfig){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
    int status;
    uint8_t VhvSettings;
    uint8_t PhaseCal;
    uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 80005ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d2:	62bb      	str	r3, [r7, #40]	; 0x28
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 80005d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timingBudget = 33000;
 80005da:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80005de:	623b      	str	r3, [r7, #32]
	uint8_t preRangeVcselPeriod = 14;
 80005e0:	230e      	movs	r3, #14
 80005e2:	77fb      	strb	r3, [r7, #31]
	uint8_t finalRangeVcselPeriod = 10;
 80005e4:	230a      	movs	r3, #10
 80005e6:	77bb      	strb	r3, [r7, #30]

    for( i=0; i<3; i++){
 80005e8:	2300      	movs	r3, #0
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ec:	e143      	b.n	8000876 <SetupSingleShot+0x2b2>
        if( VL53L0XDevs[i].Present){
 80005ee:	4aa6      	ldr	r2, [pc, #664]	; (8000888 <SetupSingleShot+0x2c4>)
 80005f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80005f6:	fb01 f303 	mul.w	r3, r1, r3
 80005fa:	4413      	add	r3, r2
 80005fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	f000 8134 	beq.w	8000870 <SetupSingleShot+0x2ac>
            status=VL53L0X_StaticInit(&VL53L0XDevs[i]);
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800060e:	fb02 f303 	mul.w	r3, r2, r3
 8000612:	4a9d      	ldr	r2, [pc, #628]	; (8000888 <SetupSingleShot+0x2c4>)
 8000614:	4413      	add	r3, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fdc6 	bl	80021a8 <VL53L0X_StaticInit>
 800061c:	4603      	mov	r3, r0
 800061e:	61bb      	str	r3, [r7, #24]
            if( status ){
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <SetupSingleShot+0x6a>
                debug_printf("VL53L0X_StaticInit %d failed\n",i);
 8000626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000628:	4898      	ldr	r0, [pc, #608]	; (800088c <SetupSingleShot+0x2c8>)
 800062a:	f001 f969 	bl	8001900 <uart_printf>
            }

            status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 800062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000630:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	4a93      	ldr	r2, [pc, #588]	; (8000888 <SetupSingleShot+0x2c4>)
 800063a:	4413      	add	r3, r2
 800063c:	f107 0216 	add.w	r2, r7, #22
 8000640:	f107 0117 	add.w	r1, r7, #23
 8000644:	4618      	mov	r0, r3
 8000646:	f002 ffcb 	bl	80035e0 <VL53L0X_PerformRefCalibration>
 800064a:	4603      	mov	r3, r0
 800064c:	61bb      	str	r3, [r7, #24]
			if( status ){
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <SetupSingleShot+0x96>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 8000654:	488e      	ldr	r0, [pc, #568]	; (8000890 <SetupSingleShot+0x2cc>)
 8000656:	f001 f953 	bl	8001900 <uart_printf>
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i], &refSpadCount, &isApertureSpads);
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000660:	fb02 f303 	mul.w	r3, r2, r3
 8000664:	4a88      	ldr	r2, [pc, #544]	; (8000888 <SetupSingleShot+0x2c4>)
 8000666:	4413      	add	r3, r2
 8000668:	f107 020f 	add.w	r2, r7, #15
 800066c:	f107 0110 	add.w	r1, r7, #16
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fdd1 	bl	8004218 <VL53L0X_PerformRefSpadManagement>
 8000676:	4603      	mov	r3, r0
 8000678:	61bb      	str	r3, [r7, #24]
			if( status ){
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <SetupSingleShot+0xc2>
			   debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
 8000680:	4884      	ldr	r0, [pc, #528]	; (8000894 <SetupSingleShot+0x2d0>)
 8000682:	f001 f93d 	bl	8001900 <uart_printf>
			}

            status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i], VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8000686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000688:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	4a7d      	ldr	r2, [pc, #500]	; (8000888 <SetupSingleShot+0x2c4>)
 8000692:	4413      	add	r3, r2
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fff4 	bl	8002684 <VL53L0X_SetDeviceMode>
 800069c:	4603      	mov	r3, r0
 800069e:	61bb      	str	r3, [r7, #24]
            if( status ){
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <SetupSingleShot+0xe8>
               debug_printf("VL53L0X_SetDeviceMode failed\n");
 80006a6:	487c      	ldr	r0, [pc, #496]	; (8000898 <SetupSingleShot+0x2d4>)
 80006a8:	f001 f92a 	bl	8001900 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 80006ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006b2:	fb02 f303 	mul.w	r3, r2, r3
 80006b6:	4a74      	ldr	r2, [pc, #464]	; (8000888 <SetupSingleShot+0x2c4>)
 80006b8:	4413      	add	r3, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fc88 	bl	8002fd4 <VL53L0X_SetLimitCheckEnable>
 80006c4:	4603      	mov	r3, r0
 80006c6:	61bb      	str	r3, [r7, #24]
			if( status ){
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <SetupSingleShot+0x110>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <SetupSingleShot+0x2d8>)
 80006d0:	f001 f916 	bl	8001900 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i], VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 80006d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4a6a      	ldr	r2, [pc, #424]	; (8000888 <SetupSingleShot+0x2c4>)
 80006e0:	4413      	add	r3, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fc74 	bl	8002fd4 <VL53L0X_SetLimitCheckEnable>
 80006ec:	4603      	mov	r3, r0
 80006ee:	61bb      	str	r3, [r7, #24]
			if( status ){
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <SetupSingleShot+0x138>
			   debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 80006f6:	4869      	ldr	r0, [pc, #420]	; (800089c <SetupSingleShot+0x2d8>)
 80006f8:	f001 f902 	bl	8001900 <uart_printf>
			}
			/* Ranging configuration */
            switch(rangingConfig) {
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d014      	beq.n	800072c <SetupSingleShot+0x168>
 8000702:	2b02      	cmp	r3, #2
 8000704:	dc2d      	bgt.n	8000762 <SetupSingleShot+0x19e>
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <SetupSingleShot+0x14c>
 800070a:	2b01      	cmp	r3, #1
 800070c:	d01b      	beq.n	8000746 <SetupSingleShot+0x182>
 800070e:	e028      	b.n	8000762 <SetupSingleShot+0x19e>
            case LONG_RANGE:
            	signalLimit = (FixPoint1616_t)(0.1*65536);
 8000710:	f641 1399 	movw	r3, #6553	; 0x1999
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
            	sigmaLimit = (FixPoint1616_t)(60*65536);
 8000716:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
            	timingBudget = 33000;
 800071c:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8000720:	623b      	str	r3, [r7, #32]
            	preRangeVcselPeriod = 18;
 8000722:	2312      	movs	r3, #18
 8000724:	77fb      	strb	r3, [r7, #31]
            	finalRangeVcselPeriod = 14;
 8000726:	230e      	movs	r3, #14
 8000728:	77bb      	strb	r3, [r7, #30]
            	break;
 800072a:	e01d      	b.n	8000768 <SetupSingleShot+0x1a4>
            case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 800072c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(18*65536);
 8000732:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 200000;
 8000738:	4b59      	ldr	r3, [pc, #356]	; (80008a0 <SetupSingleShot+0x2dc>)
 800073a:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 800073c:	230e      	movs	r3, #14
 800073e:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 8000740:	230a      	movs	r3, #10
 8000742:	77bb      	strb	r3, [r7, #30]
				break;
 8000744:	e010      	b.n	8000768 <SetupSingleShot+0x1a4>
            case HIGH_SPEED:
				signalLimit = (FixPoint1616_t)(0.25*65536);
 8000746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t)(32*65536);
 800074c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 20000;
 8000752:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000756:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 8000758:	230e      	movs	r3, #14
 800075a:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 800075c:	230a      	movs	r3, #10
 800075e:	77bb      	strb	r3, [r7, #30]
				break;
 8000760:	e002      	b.n	8000768 <SetupSingleShot+0x1a4>
            default:
            	debug_printf("Not Supported");
 8000762:	4850      	ldr	r0, [pc, #320]	; (80008a4 <SetupSingleShot+0x2e0>)
 8000764:	f001 f8cc 	bl	8001900 <uart_printf>
            }

            status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8000768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	4a45      	ldr	r2, [pc, #276]	; (8000888 <SetupSingleShot+0x2c4>)
 8000774:	4413      	add	r3, r2
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	2101      	movs	r1, #1
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fd2e 	bl	80031dc <VL53L0X_SetLimitCheckValue>
 8000780:	4603      	mov	r3, r0
 8000782:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <SetupSingleShot+0x1cc>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 800078a:	4847      	ldr	r0, [pc, #284]	; (80008a8 <SetupSingleShot+0x2e4>)
 800078c:	f001 f8b8 	bl	8001900 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8000790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000792:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000796:	fb02 f303 	mul.w	r3, r2, r3
 800079a:	4a3b      	ldr	r2, [pc, #236]	; (8000888 <SetupSingleShot+0x2c4>)
 800079c:	4413      	add	r3, r2
 800079e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fd1a 	bl	80031dc <VL53L0X_SetLimitCheckValue>
 80007a8:	4603      	mov	r3, r0
 80007aa:	61bb      	str	r3, [r7, #24]
			if( status ){
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d002      	beq.n	80007b8 <SetupSingleShot+0x1f4>
			   debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 80007b2:	483d      	ldr	r0, [pc, #244]	; (80008a8 <SetupSingleShot+0x2e4>)
 80007b4:	f001 f8a4 	bl	8001900 <uart_printf>
			}

            status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&VL53L0XDevs[i],  timingBudget);
 80007b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	4a31      	ldr	r2, [pc, #196]	; (8000888 <SetupSingleShot+0x2c4>)
 80007c4:	4413      	add	r3, r2
 80007c6:	6a39      	ldr	r1, [r7, #32]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 f837 	bl	800283c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80007ce:	4603      	mov	r3, r0
 80007d0:	61bb      	str	r3, [r7, #24]
            if( status ){
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <SetupSingleShot+0x21a>
               debug_printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80007d8:	4834      	ldr	r0, [pc, #208]	; (80008ac <SetupSingleShot+0x2e8>)
 80007da:	f001 f891 	bl	8001900 <uart_printf>
            }

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80007de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	4a27      	ldr	r2, [pc, #156]	; (8000888 <SetupSingleShot+0x2c4>)
 80007ea:	4413      	add	r3, r2
 80007ec:	7ffa      	ldrb	r2, [r7, #31]
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 f89f 	bl	8002934 <VL53L0X_SetVcselPulsePeriod>
 80007f6:	4603      	mov	r3, r0
 80007f8:	61bb      	str	r3, [r7, #24]
			if( status ){
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <SetupSingleShot+0x242>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8000800:	482b      	ldr	r0, [pc, #172]	; (80008b0 <SetupSingleShot+0x2ec>)
 8000802:	f001 f87d 	bl	8001900 <uart_printf>
			}

            status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8000806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000808:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800080c:	fb02 f303 	mul.w	r3, r2, r3
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <SetupSingleShot+0x2c4>)
 8000812:	4413      	add	r3, r2
 8000814:	7fba      	ldrb	r2, [r7, #30]
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f002 f88b 	bl	8002934 <VL53L0X_SetVcselPulsePeriod>
 800081e:	4603      	mov	r3, r0
 8000820:	61bb      	str	r3, [r7, #24]
			if( status ){
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <SetupSingleShot+0x26a>
			   debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8000828:	4821      	ldr	r0, [pc, #132]	; (80008b0 <SetupSingleShot+0x2ec>)
 800082a:	f001 f869 	bl	8001900 <uart_printf>
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i], &VhvSettings, &PhaseCal);
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000834:	fb02 f303 	mul.w	r3, r2, r3
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <SetupSingleShot+0x2c4>)
 800083a:	4413      	add	r3, r2
 800083c:	f107 0216 	add.w	r2, r7, #22
 8000840:	f107 0117 	add.w	r1, r7, #23
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fecb 	bl	80035e0 <VL53L0X_PerformRefCalibration>
 800084a:	4603      	mov	r3, r0
 800084c:	61bb      	str	r3, [r7, #24]
			if( status ){
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <SetupSingleShot+0x296>
			   debug_printf("VL53L0X_PerformRefCalibration failed\n");
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <SetupSingleShot+0x2cc>)
 8000856:	f001 f853 	bl	8001900 <uart_printf>
			}

            VL53L0XDevs[i].LeakyFirst=1;
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <SetupSingleShot+0x2c4>)
 800085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000862:	fb01 f303 	mul.w	r3, r1, r3
 8000866:	4413      	add	r3, r2
 8000868:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
    for( i=0; i<3; i++){
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	3301      	adds	r3, #1
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000878:	2b02      	cmp	r3, #2
 800087a:	f77f aeb8 	ble.w	80005ee <SetupSingleShot+0x2a>
        }
    }
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000008 	.word	0x20000008
 800088c:	0800c670 	.word	0x0800c670
 8000890:	0800c690 	.word	0x0800c690
 8000894:	0800c6b8 	.word	0x0800c6b8
 8000898:	0800c6e4 	.word	0x0800c6e4
 800089c:	0800c704 	.word	0x0800c704
 80008a0:	00030d40 	.word	0x00030d40
 80008a4:	0800c728 	.word	0x0800c728
 80008a8:	0800c738 	.word	0x0800c738
 80008ac:	0800c75c 	.word	0x0800c75c
 80008b0:	0800c794 	.word	0x0800c794

080008b4 <Sensor_SetNewRange>:
    }
    return c;
}

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev, VL53L0X_RangingMeasurementData_t *pRange){
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
    if( pRange->RangeStatus == 0 ){
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	7e1b      	ldrb	r3, [r3, #24]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d124      	bne.n	8000910 <Sensor_SetNewRange+0x5c>
        if( pDev->LeakyFirst ){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00a      	beq.n	80008e6 <Sensor_SetNewRange+0x32>
            pDev->LeakyFirst = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            pDev->LeakyRange = pRange->RangeMilliMeter;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	891b      	ldrh	r3, [r3, #8]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        }
    }
    else{
        pDev->LeakyFirst = 1;
    }
}
 80008e4:	e018      	b.n	8000918 <Sensor_SetNewRange+0x64>
            pDev->LeakyRange = (pDev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*pRange->RangeMilliMeter)>>8;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <Sensor_SetNewRange+0x70>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	fb03 f202 	mul.w	r2, r3, r2
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <Sensor_SetNewRange+0x70>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80008fc:	6839      	ldr	r1, [r7, #0]
 80008fe:	8909      	ldrh	r1, [r1, #8]
 8000900:	fb01 f303 	mul.w	r3, r1, r3
 8000904:	4413      	add	r3, r2
 8000906:	121a      	asrs	r2, r3, #8
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 800090e:	e003      	b.n	8000918 <Sensor_SetNewRange+0x64>
        pDev->LeakyFirst = 1;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2201      	movs	r2, #1
 8000914:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20000004 	.word	0x20000004

08000928 <RangeDemo>:
 * This function implements a while loop until the blue button is pressed
 * @param UseSensorsMask Mask of any sensors to use if not only one present
 * @param rangingConfig Ranging configuration to be used (same for all sensors)
 */
int RangeDemo(int UseSensorsMask, RangingConfig_e rangingConfig)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08d      	sub	sp, #52	; 0x34
 800092c:	af02      	add	r7, sp, #8
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
    int over=0;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
    int status;
    char StrDisplay[5];
    char c;
    int i;
    int nSensorToUse;
    int SingleSensorNo=0;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]

    /* Setup all sensors in Single Shot mode */
//    SetupSingleShot(rangingConfig);

    /* Which sensor to use ? */
    for(i=0, nSensorToUse=0; i<3; i++){
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	e01e      	b.n	8000984 <RangeDemo+0x5c>
        if(( UseSensorsMask& (1<<i) ) && VL53L0XDevs[i].Present ){
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	fa42 f303 	asr.w	r3, r2, r3
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d013      	beq.n	800097e <RangeDemo+0x56>
 8000956:	4a5f      	ldr	r2, [pc, #380]	; (8000ad4 <RangeDemo+0x1ac>)
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800095e:	fb01 f303 	mul.w	r3, r1, r3
 8000962:	4413      	add	r3, r2
 8000964:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d007      	beq.n	800097e <RangeDemo+0x56>
            nSensorToUse++;
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3301      	adds	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
            if( nSensorToUse==1 )
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d101      	bne.n	800097e <RangeDemo+0x56>
                SingleSensorNo=i;
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	61bb      	str	r3, [r7, #24]
    for(i=0, nSensorToUse=0; i<3; i++){
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	3301      	adds	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	2b02      	cmp	r3, #2
 8000988:	dddd      	ble.n	8000946 <RangeDemo+0x1e>
        }
    }
    if( nSensorToUse == 0 ){
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <RangeDemo+0x6e>
        return -1;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	e09a      	b.n	8000acc <RangeDemo+0x1a4>

//    SingleSensorNo=1;

    /* Start ranging until blue button is pressed */
//    do{
        if( nSensorToUse >1 ){
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	2b01      	cmp	r3, #1
 800099a:	dd59      	ble.n	8000a50 <RangeDemo+0x128>
        	/* Multiple devices */
            for( i=0; i<3; i++){
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
 80009a0:	e052      	b.n	8000a48 <RangeDemo+0x120>
                if( ! VL53L0XDevs[i].Present  || (UseSensorsMask & (1<<i))==0 )
 80009a2:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <RangeDemo+0x1ac>)
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d042      	beq.n	8000a40 <RangeDemo+0x118>
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	fa42 f303 	asr.w	r3, r2, r3
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d03a      	beq.n	8000a40 <RangeDemo+0x118>
                    continue;
                /* Call All-In-One blocking API function */
                status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[i],&RangingMeasurementData);
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <RangeDemo+0x1ac>)
 80009d6:	4413      	add	r3, r2
 80009d8:	493f      	ldr	r1, [pc, #252]	; (8000ad8 <RangeDemo+0x1b0>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 f952 	bl	8003c84 <VL53L0X_PerformSingleRangingMeasurement>
 80009e0:	4603      	mov	r3, r0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
                if( status ){
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <RangeDemo+0xc8>
                    HandleError(ERR_DEMO_RANGE_MULTI);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fdd6 	bl	800059c <HandleError>
                }
                /* Push data logging to UART */
                trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[i].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 80009f0:	4a38      	ldr	r2, [pc, #224]	; (8000ad4 <RangeDemo+0x1ac>)
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009f8:	fb01 f303 	mul.w	r3, r1, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	f7ff fdbe 	bl	8000584 <TimeStamp_Get>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a0c:	7e1b      	ldrb	r3, [r3, #24]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a12:	891b      	ldrh	r3, [r3, #8]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	9100      	str	r1, [sp, #0]
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4621      	mov	r1, r4
 8000a22:	482e      	ldr	r0, [pc, #184]	; (8000adc <RangeDemo+0x1b4>)
 8000a24:	f000 ff6c 	bl	8001900 <uart_printf>
                /* Store new ranging distance */
                Sensor_SetNewRange(&VL53L0XDevs[i],&RangingMeasurementData);
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <RangeDemo+0x1ac>)
 8000a34:	4413      	add	r3, r2
 8000a36:	4928      	ldr	r1, [pc, #160]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff3b 	bl	80008b4 <Sensor_SetNewRange>
 8000a3e:	e000      	b.n	8000a42 <RangeDemo+0x11a>
                    continue;
 8000a40:	bf00      	nop
            for( i=0; i<3; i++){
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	3301      	adds	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	dda9      	ble.n	80009a2 <RangeDemo+0x7a>
 8000a4e:	e03c      	b.n	8000aca <RangeDemo+0x1a2>
            }
        }
        else{
            /* only one sensor */
        	/* Call All-In-One blocking API function */
            status = VL53L0X_PerformSingleRangingMeasurement(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <RangeDemo+0x1ac>)
 8000a5c:	4413      	add	r3, r2
 8000a5e:	491e      	ldr	r1, [pc, #120]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 f90f 	bl	8003c84 <VL53L0X_PerformSingleRangingMeasurement>
 8000a66:	4603      	mov	r3, r0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
            if( status == 0 ){
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d127      	bne.n	8000ac0 <RangeDemo+0x198>
            	/* Push data logging to UART */
            	trace_printf("%d,%u,%d,%d,%d\n", VL53L0XDevs[SingleSensorNo].Id, TimeStamp_Get(), RangingMeasurementData.RangeStatus, RangingMeasurementData.RangeMilliMeter, RangingMeasurementData.SignalRateRtnMegaCps);
 8000a70:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <RangeDemo+0x1ac>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	f7ff fd7e 	bl	8000584 <TimeStamp_Get>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a8c:	7e1b      	ldrb	r3, [r3, #24]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a92:	891b      	ldrh	r3, [r3, #8]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <RangeDemo+0x1b0>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	9100      	str	r1, [sp, #0]
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4621      	mov	r1, r4
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <RangeDemo+0x1b4>)
 8000aa4:	f000 ff2c 	bl	8001900 <uart_printf>
            	Sensor_SetNewRange(&VL53L0XDevs[SingleSensorNo],&RangingMeasurementData);
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000aae:	fb02 f303 	mul.w	r3, r2, r3
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <RangeDemo+0x1ac>)
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <RangeDemo+0x1b0>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fefb 	bl	80008b4 <Sensor_SetNewRange>
 8000abe:	e002      	b.n	8000ac6 <RangeDemo+0x19e>
            }
            else{
                HandleError(ERR_DEMO_RANGE_ONE);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fd6b 	bl	800059c <HandleError>
            }
            return 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <RangeDemo+0x1a4>
//            break;
//        }
//    }while( !over);
//    /* Wait button to be un-pressed to decide if it is a short or long press */
//    status=PusbButton_WaitUnPress();
    return status;
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	372c      	adds	r7, #44	; 0x2c
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000a1c 	.word	0x20000a1c
 8000adc:	0800c7b8 	.word	0x0800c7b8

08000ae0 <ResetId>:
    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
        HandleError(ERR_DETECT);
    }
}
static int ResetId(int DevNo, GPIO_PinState state) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
//    if( status ){
//        XNUCLEO53L0A1_ErrLog("expander i/o error for DevNo %d state %d ",DevNo, state);
//    }
//done:
//    return status;
	switch( DevNo )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <ResetId+0x1a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d007      	beq.n	8000b08 <ResetId+0x28>
		case XNUCLEO53L0A1_DEV_CENTER :
//		case SENSOR_2_ID:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, state);
			break;
		default :
			break;
 8000af8:	e00d      	b.n	8000b16 <ResetId+0x36>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, state);
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	461a      	mov	r2, r3
 8000afe:	2110      	movs	r1, #16
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <ResetId+0x40>)
 8000b02:	f007 fee1 	bl	80088c8 <HAL_GPIO_WritePin>
			break;
 8000b06:	e006      	b.n	8000b16 <ResetId+0x36>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, state);
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <ResetId+0x40>)
 8000b10:	f007 feda 	bl	80088c8 <HAL_GPIO_WritePin>
			break;
 8000b14:	bf00      	nop
	}
	return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40020800 	.word	0x40020800

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int ExitWithLongPress;
  RangingConfig_e RangingConfig = LONG_RANGE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	75fb      	strb	r3, [r7, #23]
  DemoMode_e DemoMode = RANGE_VALUE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	75bb      	strb	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f006 ff9b 	bl	8007a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f917 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f000 faa5 	bl	8001088 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3e:	f000 fa83 	bl	8001048 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b42:	f000 f97d 	bl	8000e40 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000b46:	f000 fa55 	bl	8000ff4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000b4a:	f000 f9d5 	bl	8000ef8 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000b4e:	f000 fa2d 	bl	8000fac <MX_TIM10_Init>
  MX_I2C3_Init();
 8000b52:	f000 f9a3 	bl	8000e9c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  uart_printf(WelcomeMsg);
 8000b56:	4878      	ldr	r0, [pc, #480]	; (8000d38 <main+0x214>)
 8000b58:	f000 fed2 	bl	8001900 <uart_printf>
  HAL_Delay(WelcomeTime);
 8000b5c:	f44f 7025 	mov.w	r0, #660	; 0x294
 8000b60:	f006 fff6 	bl	8007b50 <HAL_Delay>
//  (void)ResetId( 0, 1);
//  Check_I2c_Channel(&hi2c3);

  /* Set VL53L0X API trace level */
  VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE, TRACE_FUNCTION_NONE); // No Trace
 8000b64:	2300      	movs	r3, #0
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f006 ff32 	bl	80079d4 <VL53L0X_trace_config>
  //VL53L0X_trace_config(NULL,TRACE_MODULE_ALL, TRACE_LEVEL_ALL, TRACE_FUNCTION_ALL); // Full trace
  {
	    int i;
	    uint16_t Id= 0xEEAA;
 8000b70:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 8000b74:	80fb      	strh	r3, [r7, #6]
	    int status;
	    int FinalAddress;

	    char PresentMsg[5]="    ";
 8000b76:	4a71      	ldr	r2, [pc, #452]	; (8000d3c <main+0x218>)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b7e:	6018      	str	r0, [r3, #0]
 8000b80:	3304      	adds	r3, #4
 8000b82:	7019      	strb	r1, [r3, #0]
	    /* Reset all */
	    nDevPresent = 0;
 8000b84:	4b6e      	ldr	r3, [pc, #440]	; (8000d40 <main+0x21c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
	    for (i = 0; i < 3; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	e007      	b.n	8000ba0 <main+0x7c>
	        status = ResetId(i, 0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	69f8      	ldr	r0, [r7, #28]
 8000b94:	f7ff ffa4 	bl	8000ae0 <ResetId>
 8000b98:	61b8      	str	r0, [r7, #24]
	    for (i = 0; i < 3; i++)
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	ddf4      	ble.n	8000b90 <main+0x6c>

	    HAL_Delay(2);
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f006 ffd2 	bl	8007b50 <HAL_Delay>
	    /* detect all sensors (even on-board)*/
	    for (i = 1; i >= 0; i--) {
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	e0a4      	b.n	8000cfc <main+0x1d8>
	        VL53L0X_Dev_t *pDev;
	        pDev = &VL53L0XDevs[i];
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000bb8:	fb02 f303 	mul.w	r3, r2, r3
 8000bbc:	4a61      	ldr	r2, [pc, #388]	; (8000d44 <main+0x220>)
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
	        pDev->I2cDevAddr = 0x52;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2252      	movs	r2, #82	; 0x52
 8000bc6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	        pDev->Present = 0;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	        status = ResetId( pDev->Id, 1); // XNUCLEO53L0A1_ResetId
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff80 	bl	8000ae0 <ResetId>
 8000be0:	61b8      	str	r0, [r7, #24]
	        HAL_Delay(2);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f006 ffb4 	bl	8007b50 <HAL_Delay>
	        FinalAddress=0x52+(i+1)*5;
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3352      	adds	r3, #82	; 0x52
 8000bf4:	60bb      	str	r3, [r7, #8]

	        do {
	        	/* Set I2C standard mode (400 KHz) before doing the first register access */
	        	if (status == VL53L0X_ERROR_NONE)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d106      	bne.n	8000c0a <main+0xe6>
	        		status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2188      	movs	r1, #136	; 0x88
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f000 ff79 	bl	8001af8 <VL53L0X_WrByte>
 8000c06:	4603      	mov	r3, r0
 8000c08:	61bb      	str	r3, [r7, #24]

	        	/* Try to read one register using default 0x52 address */
	            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000c0a:	1dbb      	adds	r3, r7, #6
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	21c0      	movs	r1, #192	; 0xc0
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f001 f81d 	bl	8001c50 <VL53L0X_RdWord>
 8000c16:	4603      	mov	r3, r0
 8000c18:	61bb      	str	r3, [r7, #24]
	            if (status) {
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d004      	beq.n	8000c2a <main+0x106>
	                debug_printf("#%d Read id fail\n", i);
 8000c20:	69f9      	ldr	r1, [r7, #28]
 8000c22:	4849      	ldr	r0, [pc, #292]	; (8000d48 <main+0x224>)
 8000c24:	f000 fe6c 	bl	8001900 <uart_printf>
	                break;
 8000c28:	e05e      	b.n	8000ce8 <main+0x1c4>
	            }
	            if (Id == 0xEEAA) {
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d151      	bne.n	8000cd8 <main+0x1b4>
					/* Sensor is found => Change its I2C address to final one */
	                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f001 f8e2 	bl	8001e04 <VL53L0X_SetDeviceAddress>
 8000c40:	4603      	mov	r3, r0
 8000c42:	61bb      	str	r3, [r7, #24]
	                if (status != 0) {
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d004      	beq.n	8000c54 <main+0x130>
	                    debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 8000c4a:	69f9      	ldr	r1, [r7, #28]
 8000c4c:	483f      	ldr	r0, [pc, #252]	; (8000d4c <main+0x228>)
 8000c4e:	f000 fe57 	bl	8001900 <uart_printf>
	                    break;
 8000c52:	e049      	b.n	8000ce8 <main+0x1c4>
	                }
	                pDev->I2cDevAddr = FinalAddress;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	                /* Check all is OK with the new I2C address and initialize the sensor */
	                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	461a      	mov	r2, r3
 8000c62:	21c0      	movs	r1, #192	; 0xc0
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 fff3 	bl	8001c50 <VL53L0X_RdWord>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	61bb      	str	r3, [r7, #24]
	                if (status != 0) {
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <main+0x15a>
						debug_printf("#i VL53L0X_RdWord fail\n", i);
 8000c74:	69f9      	ldr	r1, [r7, #28]
 8000c76:	4836      	ldr	r0, [pc, #216]	; (8000d50 <main+0x22c>)
 8000c78:	f000 fe42 	bl	8001900 <uart_printf>
						break;
 8000c7c:	e034      	b.n	8000ce8 <main+0x1c4>
					}

	                status = VL53L0X_DataInit(pDev);
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f001 f904 	bl	8001e8c <VL53L0X_DataInit>
 8000c84:	4603      	mov	r3, r0
 8000c86:	61bb      	str	r3, [r7, #24]
	                if( status == 0 ){
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d11f      	bne.n	8000cce <main+0x1aa>
	                    pDev->Present = 1;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	                }
	                else{
	                    debug_printf("VL53L0X_DataInit %d fail\n", i);
	                    break;
	                }
	                trace_printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	482b      	ldr	r0, [pc, #172]	; (8000d54 <main+0x230>)
 8000ca6:	f000 fe2b 	bl	8001900 <uart_printf>
	                nDevPresent++;
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <main+0x21c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <main+0x21c>)
 8000cb2:	6013      	str	r3, [r2, #0]
	                nDevMask |= 1 << i;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <main+0x234>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	4a25      	ldr	r2, [pc, #148]	; (8000d58 <main+0x234>)
 8000cc2:	6013      	str	r3, [r2, #0]
	                pDev->Present = 1;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8000ccc:	e00c      	b.n	8000ce8 <main+0x1c4>
	                    debug_printf("VL53L0X_DataInit %d fail\n", i);
 8000cce:	69f9      	ldr	r1, [r7, #28]
 8000cd0:	4822      	ldr	r0, [pc, #136]	; (8000d5c <main+0x238>)
 8000cd2:	f000 fe15 	bl	8001900 <uart_printf>
	                    break;
 8000cd6:	e007      	b.n	8000ce8 <main+0x1c4>
	            }
	            else {
	                debug_printf("#%d unknown ID %x\n", i, Id);
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	69f9      	ldr	r1, [r7, #28]
 8000cde:	4820      	ldr	r0, [pc, #128]	; (8000d60 <main+0x23c>)
 8000ce0:	f000 fe0e 	bl	8001900 <uart_printf>
	                status = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61bb      	str	r3, [r7, #24]
	            }

	        } while (0);
	        /* if fail r can't use for any reason then put the  device back to reset */
	        if (status) {
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <main+0x1d2>
	        	ResetId(i, 0);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	69f8      	ldr	r0, [r7, #28]
 8000cf2:	f7ff fef5 	bl	8000ae0 <ResetId>
	    for (i = 1; i >= 0; i--) {
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f6bf af57 	bge.w	8000bb2 <main+0x8e>
	        }
	    }
	    int nSensor = nDevPresent;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <main+0x21c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	613b      	str	r3, [r7, #16]
	    if( (nSensor <=0) ){
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dc03      	bgt.n	8000d18 <main+0x1f4>
	        HandleError(ERR_DETECT);
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f7ff fc42 	bl	800059c <HandleError>
	    }
  }


  SetupSingleShot(RangingConfig);
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc52 	bl	80005c4 <SetupSingleShot>
  {
//	  __WFI();



	  (void)RangeDemo(UseSensorsMask, LONG_RANGE);
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <main+0x240>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fdfe 	bl	8000928 <RangeDemo>
	  HAL_Delay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f006 ff0e 	bl	8007b50 <HAL_Delay>
	  (void)RangeDemo(UseSensorsMask, LONG_RANGE);
 8000d34:	e7f4      	b.n	8000d20 <main+0x1fc>
 8000d36:	bf00      	nop
 8000d38:	200004b8 	.word	0x200004b8
 8000d3c:	0800c668 	.word	0x0800c668
 8000d40:	20000a38 	.word	0x20000a38
 8000d44:	20000008 	.word	0x20000008
 8000d48:	0800c5b8 	.word	0x0800c5b8
 8000d4c:	0800c5cc 	.word	0x0800c5cc
 8000d50:	0800c5f0 	.word	0x0800c5f0
 8000d54:	0800c624 	.word	0x0800c624
 8000d58:	20000a3c 	.word	0x20000a3c
 8000d5c:	0800c608 	.word	0x0800c608
 8000d60:	0800c654 	.word	0x0800c654
 8000d64:	20000000 	.word	0x20000000

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	; 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	; 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f00a ff56 	bl	800bc28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <SystemClock_Config+0xd0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <SystemClock_Config+0xd0>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <SystemClock_Config+0xd0>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <SystemClock_Config+0xd4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd4>)
 8000db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000de6:	2304      	movs	r3, #4
 8000de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dea:	2307      	movs	r3, #7
 8000dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4618      	mov	r0, r3
 8000df4:	f008 fd30 	bl	8009858 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dfe:	f000 f9ef 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	230f      	movs	r3, #15
 8000e04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f008 ff92 	bl	8009d48 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e2a:	f000 f9d9 	bl	80011e0 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	; 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e46:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <MX_I2C1_Init+0x54>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <MX_I2C1_Init+0x58>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e7e:	f007 fd55 	bl	800892c <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e88:	f000 f9aa 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000840 	.word	0x20000840
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00061a80 	.word	0x00061a80

08000e9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C3_Init+0x50>)
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <MX_I2C3_Init+0x54>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C3_Init+0x50>)
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <MX_I2C3_Init+0x58>)
 8000eaa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C3_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_I2C3_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_I2C3_Init+0x50>)
 8000eba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ebe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_I2C3_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_I2C3_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_I2C3_Init+0x50>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_I2C3_Init+0x50>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_I2C3_Init+0x50>)
 8000eda:	f007 fd27 	bl	800892c <HAL_I2C_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ee4:	f000 f97c 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000894 	.word	0x20000894
 8000ef0:	40005c00 	.word	0x40005c00
 8000ef4:	00061a80 	.word	0x00061a80

08000ef8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
 8000f16:	615a      	str	r2, [r3, #20]
 8000f18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <MX_TIM5_Init+0xb0>)
 8000f1e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f22:	2253      	movs	r2, #83	; 0x53
 8000f24:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000f40:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f42:	f009 f970 	bl	800a226 <HAL_TIM_OC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000f4c:	f000 f948 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f60:	f009 fd48 	bl	800a9f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000f6a:	f000 f939 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	4619      	mov	r1, r3
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f86:	f009 faa5 	bl	800a4d4 <HAL_TIM_OC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000f90:	f000 f926 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <MX_TIM5_Init+0xac>)
 8000f96:	f000 fa3b 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200008e8 	.word	0x200008e8
 8000fa8:	40000c00 	.word	0x40000c00

08000fac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_TIM10_Init+0x40>)
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <MX_TIM10_Init+0x44>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <MX_TIM10_Init+0x40>)
 8000fb8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fbc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_TIM10_Init+0x40>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_TIM10_Init+0x40>)
 8000fc6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_TIM10_Init+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_TIM10_Init+0x40>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_TIM10_Init+0x40>)
 8000fda:	f009 f8d5 	bl	800a188 <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000fe4:	f000 f8fc 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000930 	.word	0x20000930
 8000ff0:	40014400 	.word	0x40014400

08000ff4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f009 fd64 	bl	800aaf8 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f8d3 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000978 	.word	0x20000978
 8001044:	40004400 	.word	0x40004400

08001048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_DMA_Init+0x3c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_DMA_Init+0x3c>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_DMA_Init+0x3c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2011      	movs	r0, #17
 8001070:	f006 fe6d 	bl	8007d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001074:	2011      	movs	r0, #17
 8001076:	f006 fe86 	bl	8007d86 <HAL_NVIC_EnableIRQ>

}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a39      	ldr	r2, [pc, #228]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a32      	ldr	r2, [pc, #200]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a2b      	ldr	r2, [pc, #172]	; (80011a8 <MX_GPIO_Init+0x120>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_GPIO_Init+0x120>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2__Chip_enable_GPIO_Port, LD2__Chip_enable_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2120      	movs	r1, #32
 8001112:	4826      	ldr	r0, [pc, #152]	; (80011ac <MX_GPIO_Init+0x124>)
 8001114:	f007 fbd8 	bl	80088c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_1_GPIO_Port, SENSOR_1_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2110      	movs	r1, #16
 800111c:	4824      	ldr	r0, [pc, #144]	; (80011b0 <MX_GPIO_Init+0x128>)
 800111e:	f007 fbd3 	bl	80088c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Blue_Push_Button_Pin SENSOR_2_Pin */
  GPIO_InitStruct.Pin = Blue_Push_Button_Pin|SENSOR_2_Pin;
 8001122:	f242 0320 	movw	r3, #8224	; 0x2020
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	481e      	ldr	r0, [pc, #120]	; (80011b0 <MX_GPIO_Init+0x128>)
 8001138:	f007 fa42 	bl	80085c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113c:	2310      	movs	r3, #16
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001140:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <MX_GPIO_Init+0x124>)
 8001152:	f007 fa35 	bl	80085c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2__Chip_enable_Pin */
  GPIO_InitStruct.Pin = LD2__Chip_enable_Pin;
 8001156:	2320      	movs	r3, #32
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2__Chip_enable_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <MX_GPIO_Init+0x124>)
 800116e:	f007 fa27 	bl	80085c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_1_Pin */
  GPIO_InitStruct.Pin = SENSOR_1_Pin;
 8001172:	2310      	movs	r3, #16
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SENSOR_1_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <MX_GPIO_Init+0x128>)
 800118a:	f007 fa19 	bl	80085c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	200a      	movs	r0, #10
 8001194:	f006 fddb 	bl	8007d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001198:	200a      	movs	r0, #10
 800119a:	f006 fdf4 	bl	8007d86 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020800 	.word	0x40020800

080011b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if (htim == &htim10) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d105      	bne.n	80011d0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  (void)RangeDemo(UseSensorsMask, LONG_RANGE); // hall delay 2 blocking doesnt work in callback
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fbac 	bl	8000928 <RangeDemo>
	  // obecnie można zrobić z flagą i wydajność zbadać przy pomocy analizatora.

//	  __HAL_TIM_ENABLE(&htim10);
  }
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000930 	.word	0x20000930
 80011dc:	20000000 	.word	0x20000000

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>
	...

080011ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_MspInit+0x4c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_MspInit+0x4c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_MspInit+0x4c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_MspInit+0x4c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800122a:	2007      	movs	r0, #7
 800122c:	f006 fd84 	bl	8007d38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_I2C_MspInit+0x128>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12d      	bne.n	80012ba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800127a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001280:	2312      	movs	r3, #18
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128c:	2304      	movs	r3, #4
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4835      	ldr	r0, [pc, #212]	; (800136c <HAL_I2C_MspInit+0x130>)
 8001298:	f007 f992 	bl	80085c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a30      	ldr	r2, [pc, #192]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012b8:	e050      	b.n	800135c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <HAL_I2C_MspInit+0x134>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d14b      	bne.n	800135c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001302:	2312      	movs	r3, #18
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800130e:	2304      	movs	r3, #4
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <HAL_I2C_MspInit+0x138>)
 800131a:	f007 f951 	bl	80085c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800131e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001324:	2312      	movs	r3, #18
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001330:	2304      	movs	r3, #4
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	480f      	ldr	r0, [pc, #60]	; (8001378 <HAL_I2C_MspInit+0x13c>)
 800133c:	f007 f940 	bl	80085c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 800134a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_I2C_MspInit+0x12c>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
}
 800135c:	bf00      	nop
 800135e:	3730      	adds	r7, #48	; 0x30
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40005400 	.word	0x40005400
 8001368:	40023800 	.word	0x40023800
 800136c:	40020400 	.word	0x40020400
 8001370:	40005c00 	.word	0x40005c00
 8001374:	40020800 	.word	0x40020800
 8001378:	40020000 	.word	0x40020000

0800137c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_TIM_OC_MspInit+0x3c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_TIM_OC_MspInit+0x40>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_TIM_OC_MspInit+0x40>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_TIM_OC_MspInit+0x40>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40000c00 	.word	0x40000c00
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_TIM_Base_MspInit+0x48>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d115      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2019      	movs	r0, #25
 80013f4:	f006 fcab 	bl	8007d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013f8:	2019      	movs	r0, #25
 80013fa:	f006 fcc4 	bl	8007d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40014400 	.word	0x40014400
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_TIM_MspPostInit+0x68>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d11d      	bne.n	800146e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_TIM_MspPostInit+0x6c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144e:	2301      	movs	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800145e:	2302      	movs	r3, #2
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_TIM_MspPostInit+0x70>)
 800146a:	f007 f8a9 	bl	80085c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40000c00 	.word	0x40000c00
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a34      	ldr	r2, [pc, #208]	; (8001574 <HAL_UART_MspInit+0xf0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d161      	bne.n	800156a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <HAL_UART_MspInit+0xf4>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <HAL_UART_MspInit+0xf4>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_UART_MspInit+0xf4>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <HAL_UART_MspInit+0xf4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <HAL_UART_MspInit+0xf4>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_UART_MspInit+0xf4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ee:	2307      	movs	r3, #7
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4820      	ldr	r0, [pc, #128]	; (800157c <HAL_UART_MspInit+0xf8>)
 80014fa:	f007 f861 	bl	80085c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_UART_MspInit+0x100>)
 8001502:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800153e:	4810      	ldr	r0, [pc, #64]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001540:	f006 fc3c 	bl	8007dbc <HAL_DMA_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800154a:	f7ff fe49 	bl	80011e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001552:	635a      	str	r2, [r3, #52]	; 0x34
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	f006 fbf5 	bl	8007d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001564:	2026      	movs	r0, #38	; 0x26
 8001566:	f006 fc0e 	bl	8007d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40004400 	.word	0x40004400
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	200009bc 	.word	0x200009bc
 8001584:	400260a0 	.word	0x400260a0

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f006 fa9c 	bl	8007b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80015e0:	2010      	movs	r0, #16
 80015e2:	f007 f98b 	bl	80088fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA1_Stream6_IRQHandler+0x10>)
 80015f2:	f006 fd7b 	bl	80080ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200009bc 	.word	0x200009bc

08001600 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001606:	f008 fe5d 	bl	800a2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000930 	.word	0x20000930

08001614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <USART2_IRQHandler+0x10>)
 800161a:	f009 fb39 	bl	800ac90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000978 	.word	0x20000978

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f00a faae 	bl	800bbb8 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20018000 	.word	0x20018000
 8001688:	00000400 	.word	0x00000400
 800168c:	20000a40 	.word	0x20000a40
 8001690:	20000c00 	.word	0x20000c00

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d4:	4c0b      	ldr	r4, [pc, #44]	; (8001704 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd7 	bl	8001694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f00a fa6d 	bl	800bbc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fa1b 	bl	8000b24 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000824 	.word	0x20000824
  ldr r2, =_sidata
 80016fc:	0800cff8 	.word	0x0800cff8
  ldr r2, =_sbss
 8001700:	20000824 	.word	0x20000824
  ldr r4, =_ebss
 8001704:	20000c00 	.word	0x20000c00

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <_ExpandersSetAllIO>:
}
/**
 * Set all i2c expended gpio in one go
 * @return i/o operation status
 */
static int _ExpandersSetAllIO(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
    int status;
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 8001712:	2302      	movs	r3, #2
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <_ExpandersSetAllIO+0x38>)
 8001716:	2112      	movs	r1, #18
 8001718:	2086      	movs	r0, #134	; 0x86
 800171a:	f000 f817 	bl	800174c <_ExpanderWR>
 800171e:	6078      	str	r0, [r7, #4]
    if( status ){
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <_ExpandersSetAllIO+0x2a>
        goto done_err;
    }
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 8001726:	2302      	movs	r3, #2
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <_ExpandersSetAllIO+0x3c>)
 800172a:	2112      	movs	r1, #18
 800172c:	2084      	movs	r0, #132	; 0x84
 800172e:	f000 f80d 	bl	800174c <_ExpanderWR>
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	e000      	b.n	8001738 <_ExpandersSetAllIO+0x2c>
        goto done_err;
 8001736:	bf00      	nop
done_err:
    return status;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000a98 	.word	0x20000a98
 8001748:	20000a9a 	.word	0x20000a9a

0800174c <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	b2db      	uxtb	r3, r3
 800175e:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr + 1, data, n_data);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	3301      	adds	r3, #1
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	f00a fa4e 	bl	800bc0c <memcpy>
    XNUCLEO53L0A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L0A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	b299      	uxth	r1, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	f107 0214 	add.w	r2, r7, #20
 8001780:	2064      	movs	r0, #100	; 0x64
 8001782:	9000      	str	r0, [sp, #0]
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <_ExpanderWR+0x4c>)
 8001786:	f007 fa15 	bl	8008bb4 <HAL_I2C_Master_Transmit>
 800178a:	4603      	mov	r3, r0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    XNUCLEO53L0A1_PutI2cBus();
    return status;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001790:	4618      	mov	r0, r3
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000a44 	.word	0x20000a44

0800179c <XNUCLEO53L0A1_SetDisplayString>:
#undef S6
#undef DP

/** @} */

int XNUCLEO53L0A1_SetDisplayString(const char *str) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    int status;
    uint32_t Segments;
    int BitPos;
    int i;

    for( i=0; i<4 && str[i]!=0; i++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e027      	b.n	80017fa <XNUCLEO53L0A1_SetDisplayString+0x5e>
        Segments = (uint32_t)ascii_to_display_lut[(uint8_t)str[i]];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <XNUCLEO53L0A1_SetDisplayString+0xbc>)
 80017b6:	5c9b      	ldrb	r3, [r3, r2]
 80017b8:	613b      	str	r3, [r7, #16]
        Segments =(~Segments)&0x7F;
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c2:	613b      	str	r3, [r7, #16]
        BitPos=DisplayBitPos[i];
 80017c4:	4a25      	ldr	r2, [pc, #148]	; (800185c <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 &=~(0x7F<<BitPos);
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	217f      	movs	r1, #127	; 0x7f
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	43d2      	mvns	r2, r2
 80017dc:	4013      	ands	r3, r2
 80017de:	4a20      	ldr	r2, [pc, #128]	; (8001860 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80017e0:	6013      	str	r3, [r2, #0]
        CurIOVal.u32 |= Segments<<BitPos;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	6939      	ldr	r1, [r7, #16]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 80017f2:	6013      	str	r3, [r2, #0]
    for( i=0; i<4 && str[i]!=0; i++){
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	dc17      	bgt.n	8001830 <XNUCLEO53L0A1_SetDisplayString+0x94>
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ce      	bne.n	80017aa <XNUCLEO53L0A1_SetDisplayString+0xe>
    }
    /* clear unused digit */
    for( ; i<4;i++){
 800180c:	e010      	b.n	8001830 <XNUCLEO53L0A1_SetDisplayString+0x94>
        BitPos=DisplayBitPos[i];
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <XNUCLEO53L0A1_SetDisplayString+0xc0>)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	60fb      	str	r3, [r7, #12]
        CurIOVal.u32 |=0x7F<<BitPos;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	217f      	movs	r1, #127	; 0x7f
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	4313      	orrs	r3, r2
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <XNUCLEO53L0A1_SetDisplayString+0xc4>)
 8001828:	6013      	str	r3, [r2, #0]
    for( ; i<4;i++){
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b03      	cmp	r3, #3
 8001834:	ddeb      	ble.n	800180e <XNUCLEO53L0A1_SetDisplayString+0x72>
    }
    status = _ExpandersSetAllIO();
 8001836:	f7ff ff69 	bl	800170c <_ExpandersSetAllIO>
 800183a:	60b8      	str	r0, [r7, #8]
    if( status ){
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <XNUCLEO53L0A1_SetDisplayString+0xb2>
        XNUCLEO53L0A1_ErrLog("Set i/o");
 8001842:	f44f 7244 	mov.w	r2, #784	; 0x310
 8001846:	4907      	ldr	r1, [pc, #28]	; (8001864 <XNUCLEO53L0A1_SetDisplayString+0xc8>)
 8001848:	4807      	ldr	r0, [pc, #28]	; (8001868 <XNUCLEO53L0A1_SetDisplayString+0xcc>)
 800184a:	f000 f859 	bl	8001900 <uart_printf>
    }
    return status;
 800184e:	68bb      	ldr	r3, [r7, #8]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	0800c8d4 	.word	0x0800c8d4
 800185c:	200004e8 	.word	0x200004e8
 8001860:	20000a98 	.word	0x20000a98
 8001864:	0800c9d4 	.word	0x0800c9d4
 8001868:	0800c844 	.word	0x0800c844

0800186c <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_UART_TxCpltCallback+0x1c>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000a9c 	.word	0x20000a9c

0800188c <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 8001896:	e000      	b.n	800189a <uart_vprintf+0xe>
           //
        __WFI();
 8001898:	bf30      	wfi
    while( InUsed ){
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <uart_vprintf+0x64>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1fa      	bne.n	8001898 <uart_vprintf+0xc>
    }
    InUsed|=1;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <uart_vprintf+0x64>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <uart_vprintf+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b6:	480f      	ldr	r0, [pc, #60]	; (80018f4 <uart_vprintf+0x68>)
 80018b8:	f00a fa12 	bl	800bce0 <vsniprintf>
 80018bc:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	490b      	ldr	r1, [pc, #44]	; (80018f4 <uart_vprintf+0x68>)
 80018c6:	480c      	ldr	r0, [pc, #48]	; (80018f8 <uart_vprintf+0x6c>)
 80018c8:	f009 f964 	bl	800ab94 <HAL_UART_Transmit_DMA>
 80018cc:	4603      	mov	r3, r0
 80018ce:	60bb      	str	r3, [r7, #8]
    if( status ){
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <uart_vprintf+0x5a>
        UartErrCnt++;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <uart_vprintf+0x70>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <uart_vprintf+0x70>)
 80018de:	6013      	str	r3, [r2, #0]
        InUsed=0;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <uart_vprintf+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
    }
    return n;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000a9c 	.word	0x20000a9c
 80018f4:	20000aa0 	.word	0x20000aa0
 80018f8:	20000978 	.word	0x20000978
 80018fc:	20000ba0 	.word	0x20000ba0

08001900 <uart_printf>:

int uart_printf(const char *msg, ...){
 8001900:	b40f      	push	{r0, r1, r2, r3}
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 8001908:	e000      	b.n	800190c <uart_printf+0xc>
        //
        __WFI();
 800190a:	bf30      	wfi
    while( InUsed ){
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <uart_printf+0x34>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1fa      	bne.n	800190a <uart_printf+0xa>
    }
    va_start(ap, msg);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7ff ffb5 	bl	800188c <uart_vprintf>
 8001922:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001930:	b004      	add	sp, #16
 8001932:	4770      	bx	lr
 8001934:	20000a9c 	.word	0x20000a9c

08001938 <VL53L0A1_EXTI_Callback>:
 */

#include  "X-NUCLEO-53L0A1.h"


__weak void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d013      	beq.n	8001988 <HAL_GPIO_EXTI_Callback+0x3a>
 8001960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001964:	dc16      	bgt.n	8001994 <HAL_GPIO_EXTI_Callback+0x46>
 8001966:	2b10      	cmp	r3, #16
 8001968:	d002      	beq.n	8001970 <HAL_GPIO_EXTI_Callback+0x22>
 800196a:	2b80      	cmp	r3, #128	; 0x80
 800196c:	d006      	beq.n	800197c <HAL_GPIO_EXTI_Callback+0x2e>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 800196e:	e011      	b.n	8001994 <HAL_GPIO_EXTI_Callback+0x46>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	4619      	mov	r1, r3
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff ffdf 	bl	8001938 <VL53L0A1_EXTI_Callback>
        break;
 800197a:	e00c      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x48>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	4619      	mov	r1, r3
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ffd9 	bl	8001938 <VL53L0A1_EXTI_Callback>
        break;
 8001986:	e006      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x48>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	4619      	mov	r1, r3
 800198c:	2002      	movs	r0, #2
 800198e:	f7ff ffd3 	bl	8001938 <VL53L0A1_EXTI_Callback>
        break;
 8001992:	e000      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x48>
        break;
 8001994:	bf00      	nop
    }
#endif
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 80019a2:	2080      	movs	r0, #128	; 0x80
 80019a4:	f006 ffaa 	bl	80088fc <HAL_GPIO_EXTI_IRQHandler>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 80019b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019b4:	f006 ffa2 	bl	80088fc <HAL_GPIO_EXTI_IRQHandler>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	330a      	adds	r3, #10
 80019cc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80019da:	b299      	uxth	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f007 f8e4 	bl	8008bb4 <HAL_I2C_Master_Transmit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
//    	__BKPT();
    }
    return status;
 80019f0:	693b      	ldr	r3, [r7, #16]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b088      	sub	sp, #32
 80019fe:	af02      	add	r7, sp, #8
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	330a      	adds	r3, #10
 8001a0a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f007 f9c0 	bl	8008db0 <HAL_I2C_Master_Receive>
 8001a30:	4603      	mov	r3, r0
 8001a32:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
//    	__BKPT();
    }
    return status;
 8001a34:	693b      	ldr	r3, [r7, #16]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b3f      	cmp	r3, #63	; 0x3f
 8001a58:	d902      	bls.n	8001a60 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8001a5a:	f06f 0303 	mvn.w	r3, #3
 8001a5e:	e016      	b.n	8001a8e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <VL53L0X_WriteMulti+0x58>)
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <VL53L0X_WriteMulti+0x5c>)
 8001a6c:	f00a f8ce 	bl	800bc0c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	461a      	mov	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <VL53L0X_WriteMulti+0x58>)
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f7ff ff9f 	bl	80019bc <_I2CWrite>
 8001a7e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001a86:	23ec      	movs	r3, #236	; 0xec
 8001a88:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000ba4 	.word	0x20000ba4
 8001a9c:	20000ba5 	.word	0x20000ba5

08001aa0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	460b      	mov	r3, r1
 8001aae:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001ab4:	f107 030b 	add.w	r3, r7, #11
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4619      	mov	r1, r3
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7ff ff7d 	bl	80019bc <_I2CWrite>
 8001ac2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001aca:	23ec      	movs	r3, #236	; 0xec
 8001acc:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001ace:	e00c      	b.n	8001aea <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f7ff ff90 	bl	80019fa <_I2CRead>
 8001ada:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001ae2:	23ec      	movs	r3, #236	; 0xec
 8001ae4:	75fb      	strb	r3, [r7, #23]
 8001ae6:	e000      	b.n	8001aea <VL53L0X_ReadMulti+0x4a>
    }
done:
 8001ae8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8001aea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
 8001b04:	4613      	mov	r3, r2
 8001b06:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <VL53L0X_WrByte+0x44>)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <VL53L0X_WrByte+0x44>)
 8001b14:	78bb      	ldrb	r3, [r7, #2]
 8001b16:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <VL53L0X_WrByte+0x44>)
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff4d 	bl	80019bc <_I2CWrite>
 8001b22:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b2a:	23ec      	movs	r3, #236	; 0xec
 8001b2c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000ba4 	.word	0x20000ba4

08001b40 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <VL53L0X_WrWord+0x50>)
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8001b5a:	883b      	ldrh	r3, [r7, #0]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <VL53L0X_WrWord+0x50>)
 8001b64:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8001b66:	883b      	ldrh	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <VL53L0X_WrWord+0x50>)
 8001b6c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8001b6e:	2203      	movs	r2, #3
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <VL53L0X_WrWord+0x50>)
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff22 	bl	80019bc <_I2CWrite>
 8001b78:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001b80:	23ec      	movs	r3, #236	; 0xec
 8001b82:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8001b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000ba4 	.word	0x20000ba4

08001b94 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70bb      	strb	r3, [r7, #2]
 8001baa:	4613      	mov	r3, r2
 8001bac:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8001bb2:	f107 020e 	add.w	r2, r7, #14
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f81e 	bl	8001bfc <VL53L0X_RdByte>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8001bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d110      	bne.n	8001bee <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8001bcc:	7bba      	ldrb	r2, [r7, #14]
 8001bce:	78bb      	ldrb	r3, [r7, #2]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8001bdc:	7bba      	ldrb	r2, [r7, #14]
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff88 	bl	8001af8 <VL53L0X_WrByte>
 8001be8:	4603      	mov	r3, r0
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e000      	b.n	8001bf0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8001bee:	bf00      	nop
done:
    return Status;
 8001bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	460b      	mov	r3, r1
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001c0e:	f107 030b 	add.w	r3, r7, #11
 8001c12:	2201      	movs	r2, #1
 8001c14:	4619      	mov	r1, r3
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f7ff fed0 	bl	80019bc <_I2CWrite>
 8001c1c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001c24:	23ec      	movs	r3, #236	; 0xec
 8001c26:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001c28:	e00c      	b.n	8001c44 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fee3 	bl	80019fa <_I2CRead>
 8001c34:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001c3c:	23ec      	movs	r3, #236	; 0xec
 8001c3e:	75fb      	strb	r3, [r7, #23]
 8001c40:	e000      	b.n	8001c44 <VL53L0X_RdByte+0x48>
    }
done:
 8001c42:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8001c44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001c62:	f107 030b 	add.w	r3, r7, #11
 8001c66:	2201      	movs	r2, #1
 8001c68:	4619      	mov	r1, r3
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff fea6 	bl	80019bc <_I2CWrite>
 8001c70:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001c78:	23ec      	movs	r3, #236	; 0xec
 8001c7a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001c7c:	e017      	b.n	8001cae <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8001c7e:	2202      	movs	r2, #2
 8001c80:	490e      	ldr	r1, [pc, #56]	; (8001cbc <VL53L0X_RdWord+0x6c>)
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff feb9 	bl	80019fa <_I2CRead>
 8001c88:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001c90:	23ec      	movs	r3, #236	; 0xec
 8001c92:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001c94:	e00b      	b.n	8001cae <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <VL53L0X_RdWord+0x6c>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <VL53L0X_RdWord+0x6c>)
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8001cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000ba4 	.word	0x20000ba4

08001cc0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8001cd2:	f107 030b 	add.w	r3, r7, #11
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff fe6e 	bl	80019bc <_I2CWrite>
 8001ce0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001ce8:	23ec      	movs	r3, #236	; 0xec
 8001cea:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001cec:	e01b      	b.n	8001d26 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4910      	ldr	r1, [pc, #64]	; (8001d34 <VL53L0X_RdDWord+0x74>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff fe81 	bl	80019fa <_I2CRead>
 8001cf8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8001d00:	23ec      	movs	r3, #236	; 0xec
 8001d02:	75fb      	strb	r3, [r7, #23]
        goto done;
 8001d04:	e00f      	b.n	8001d26 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <VL53L0X_RdDWord+0x74>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	061a      	lsls	r2, r3, #24
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <VL53L0X_RdDWord+0x74>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	441a      	add	r2, r3
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <VL53L0X_RdDWord+0x74>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <VL53L0X_RdDWord+0x74>)
 8001d1e:	78d2      	ldrb	r2, [r2, #3]
 8001d20:	441a      	add	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8001d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000ba4 	.word	0x20000ba4

08001d38 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <VL53L0X_PollingDelay+0x4c>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <VL53L0X_PollingDelay+0x4c>)
 8001d4a:	f083 0320 	eor.w	r3, r3, #32
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	e002      	b.n	8001d5c <VL53L0X_PollingDelay+0x24>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f643 42ef 	movw	r2, #15599	; 0x3cef
 8001d62:	4293      	cmp	r3, r2
 8001d64:	ddf7      	ble.n	8001d56 <VL53L0X_PollingDelay+0x1e>
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <VL53L0X_PollingDelay+0x4c>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <VL53L0X_PollingDelay+0x4c>)
 8001d6c:	f483 1300 	eor.w	r3, r3, #2097152	; 0x200000
 8001d70:	6193      	str	r3, [r2, #24]
    return status;
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40020000 	.word	0x40020000

08001d88 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af04      	add	r7, sp, #16
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8001d98:	681c      	ldr	r4, [r3, #0]
 8001d9a:	f005 fecd 	bl	8007b38 <HAL_GetTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	9200      	str	r2, [sp, #0]
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x74>)
 8001daa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001dae:	4621      	mov	r1, r4
 8001db0:	2001      	movs	r0, #1
 8001db2:	f005 fe2f 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f002 fa6d 	bl	8004298 <VL53L0X_get_offset_calibration_data_micro_meter>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8001dc4:	681c      	ldr	r4, [r3, #0]
 8001dc6:	f005 feb7 	bl	8007b38 <HAL_GetTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	9302      	str	r3, [sp, #8]
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8001dd6:	9301      	str	r3, [sp, #4]
 8001dd8:	9200      	str	r2, [sp, #0]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x78>)
 8001ddc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001de0:	4621      	mov	r1, r4
 8001de2:	2001      	movs	r0, #1
 8001de4:	f005 fe16 	bl	8007a14 <trace_print_module_function>
	return Status;
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}
 8001df4:	200007b4 	.word	0x200007b4
 8001df8:	0800c9f4 	.word	0x0800c9f4
 8001dfc:	0800c85c 	.word	0x0800c85c
 8001e00:	0800c870 	.word	0x0800c870

08001e04 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <VL53L0X_SetDeviceAddress+0x78>)
 8001e16:	681c      	ldr	r4, [r3, #0]
 8001e18:	f005 fe8e 	bl	8007b38 <HAL_GetTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <VL53L0X_SetDeviceAddress+0x7c>)
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	9200      	str	r2, [sp, #0]
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <VL53L0X_SetDeviceAddress+0x80>)
 8001e28:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f005 fdf0 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	218a      	movs	r1, #138	; 0x8a
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fe5a 	bl	8001af8 <VL53L0X_WrByte>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <VL53L0X_SetDeviceAddress+0x78>)
 8001e4a:	681c      	ldr	r4, [r3, #0]
 8001e4c:	f005 fe74 	bl	8007b38 <HAL_GetTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	9302      	str	r3, [sp, #8]
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <VL53L0X_SetDeviceAddress+0x7c>)
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	9200      	str	r2, [sp, #0]
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <VL53L0X_SetDeviceAddress+0x84>)
 8001e62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e66:	4621      	mov	r1, r4
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f005 fdd3 	bl	8007a14 <trace_print_module_function>
	return Status;
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200007b4 	.word	0x200007b4
 8001e80:	0800ca20 	.word	0x0800ca20
 8001e84:	0800c85c 	.word	0x0800c85c
 8001e88:	0800c870 	.word	0x0800c870

08001e8c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b09a      	sub	sp, #104	; 0x68
 8001e90:	af04      	add	r7, sp, #16
 8001e92:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	VL53L0X_DeviceParameters_t CurrentParameters;
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");
 8001e9a:	4bbd      	ldr	r3, [pc, #756]	; (8002190 <VL53L0X_DataInit+0x304>)
 8001e9c:	681c      	ldr	r4, [r3, #0]
 8001e9e:	f005 fe4b 	bl	8007b38 <HAL_GetTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4bbb      	ldr	r3, [pc, #748]	; (8002194 <VL53L0X_DataInit+0x308>)
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	9200      	str	r2, [sp, #0]
 8001eac:	4bba      	ldr	r3, [pc, #744]	; (8002198 <VL53L0X_DataInit+0x30c>)
 8001eae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f005 fdad 	bl	8007a14 <trace_print_module_function>
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8001eba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <VL53L0X_DataInit+0x46>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2188      	movs	r1, #136	; 0x88
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fe16 	bl	8001af8 <VL53L0X_WrByte>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001eea:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4aaa      	ldr	r2, [pc, #680]	; (800219c <VL53L0X_DataInit+0x310>)
 8001ef2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4aa9      	ldr	r2, [pc, #676]	; (80021a0 <VL53L0X_DataInit+0x314>)
 8001efa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fafe 	bl	800250c <VL53L0X_GetDeviceParameters>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001f16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d112      	bne.n	8001f44 <VL53L0X_DataInit+0xb8>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001f22:	2300      	movs	r3, #0
 8001f24:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0410 	add.w	r4, r3, #16
 8001f2c:	f107 0510 	add.w	r5, r7, #16
 8001f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2264      	movs	r2, #100	; 0x64
 8001f48:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001f52:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f5c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001f66:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001f72:	2201      	movs	r2, #1
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fdbe 	bl	8001af8 <VL53L0X_WrByte>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	21ff      	movs	r1, #255	; 0xff
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fdb2 	bl	8001af8 <VL53L0X_WrByte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fda6 	bl	8001af8 <VL53L0X_WrByte>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001fba:	f107 030f 	add.w	r3, r7, #15
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2191      	movs	r1, #145	; 0x91
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff fe1a 	bl	8001bfc <VL53L0X_RdByte>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd88 	bl	8001af8 <VL53L0X_WrByte>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	21ff      	movs	r1, #255	; 0xff
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fd7c 	bl	8001af8 <VL53L0X_WrByte>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002008:	4313      	orrs	r3, r2
 800200a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800200e:	2200      	movs	r2, #0
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fd70 	bl	8001af8 <VL53L0X_WrByte>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002020:	4313      	orrs	r3, r2
 8002022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002026:	2300      	movs	r3, #0
 8002028:	653b      	str	r3, [r7, #80]	; 0x50
 800202a:	e014      	b.n	8002056 <VL53L0X_DataInit+0x1ca>
		if (Status == VL53L0X_ERROR_NONE)
 800202c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002030:	2b00      	cmp	r3, #0
 8002032:	d114      	bne.n	800205e <VL53L0X_DataInit+0x1d2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002036:	b29b      	uxth	r3, r3
 8002038:	2201      	movs	r2, #1
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 ffc9 	bl	8002fd4 <VL53L0X_SetLimitCheckEnable>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800204a:	4313      	orrs	r3, r2
 800204c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002052:	3301      	adds	r3, #1
 8002054:	653b      	str	r3, [r7, #80]	; 0x50
 8002056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002058:	2b05      	cmp	r3, #5
 800205a:	dde7      	ble.n	800202c <VL53L0X_DataInit+0x1a0>
 800205c:	e000      	b.n	8002060 <VL53L0X_DataInit+0x1d4>
		else
			break;
 800205e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002060:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <VL53L0X_DataInit+0x1ec>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002068:	2200      	movs	r2, #0
 800206a:	2102      	movs	r1, #2
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 ffb1 	bl	8002fd4 <VL53L0X_SetLimitCheckEnable>
 8002072:	4603      	mov	r3, r0
 8002074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002078:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <VL53L0X_DataInit+0x204>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002080:	2200      	movs	r2, #0
 8002082:	2103      	movs	r1, #3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 ffa5 	bl	8002fd4 <VL53L0X_SetLimitCheckEnable>
 800208a:	4603      	mov	r3, r0
 800208c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002090:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <VL53L0X_DataInit+0x21c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002098:	2200      	movs	r2, #0
 800209a:	2104      	movs	r1, #4
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 ff99 	bl	8002fd4 <VL53L0X_SetLimitCheckEnable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80020a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <VL53L0X_DataInit+0x234>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80020b0:	2200      	movs	r2, #0
 80020b2:	2105      	movs	r1, #5
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 ff8d 	bl	8002fd4 <VL53L0X_SetLimitCheckEnable>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80020c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <VL53L0X_DataInit+0x24e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80020c8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80020cc:	2100      	movs	r1, #0
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f001 f884 	bl	80031dc <VL53L0X_SetLimitCheckValue>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80020da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <VL53L0X_DataInit+0x268>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80020e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020e6:	2101      	movs	r1, #1
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f001 f877 	bl	80031dc <VL53L0X_SetLimitCheckValue>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80020f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <VL53L0X_DataInit+0x282>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80020fc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002100:	2102      	movs	r1, #2
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 f86a 	bl	80031dc <VL53L0X_SetLimitCheckValue>
 8002108:	4603      	mov	r3, r0
 800210a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800210e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002112:	2b00      	cmp	r3, #0
 8002114:	d107      	bne.n	8002126 <VL53L0X_DataInit+0x29a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002116:	2200      	movs	r2, #0
 8002118:	2103      	movs	r1, #3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f001 f85e 	bl	80031dc <VL53L0X_SetLimitCheckValue>
 8002120:	4603      	mov	r3, r0
 8002122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002126:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <VL53L0X_DataInit+0x2c2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	22ff      	movs	r2, #255	; 0xff
 8002132:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	2101      	movs	r1, #1
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fcdc 	bl	8001af8 <VL53L0X_WrByte>
 8002140:	4603      	mov	r3, r0
 8002142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800214e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <VL53L0X_DataInit+0x2d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <VL53L0X_DataInit+0x304>)
 8002160:	681c      	ldr	r4, [r3, #0]
 8002162:	f005 fce9 	bl	8007b38 <HAL_GetTick>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800216e:	9302      	str	r3, [sp, #8]
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <VL53L0X_DataInit+0x308>)
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	9200      	str	r2, [sp, #0]
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <VL53L0X_DataInit+0x318>)
 8002178:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800217c:	4621      	mov	r1, r4
 800217e:	2001      	movs	r0, #1
 8002180:	f005 fc48 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002184:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002188:	4618      	mov	r0, r3
 800218a:	3758      	adds	r7, #88	; 0x58
 800218c:	46bd      	mov	sp, r7
 800218e:	bdb0      	pop	{r4, r5, r7, pc}
 8002190:	200007b4 	.word	0x200007b4
 8002194:	0800ca3c 	.word	0x0800ca3c
 8002198:	0800c85c 	.word	0x0800c85c
 800219c:	00016b85 	.word	0x00016b85
 80021a0:	000970a4 	.word	0x000970a4
 80021a4:	0800c870 	.word	0x0800c870

080021a8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b0a0      	sub	sp, #128	; 0x80
 80021ac:	af04      	add	r7, sp, #16
 80021ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f009 fd32 	bl	800bc28 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <VL53L0X_StaticInit+0xf4>)
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	f005 fca6 	bl	8007b38 <HAL_GetTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <VL53L0X_StaticInit+0xf8>)
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	9200      	str	r2, [sp, #0]
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <VL53L0X_StaticInit+0xfc>)
 80021f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80021fc:	4621      	mov	r1, r4
 80021fe:	2001      	movs	r0, #1
 8002200:	f005 fc08 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002204:	2101      	movs	r1, #1
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f002 fff4 	bl	80051f4 <VL53L0X_get_info_from_device>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002218:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002228:	2b01      	cmp	r3, #1
 800222a:	d80d      	bhi.n	8002248 <VL53L0X_StaticInit+0xa0>
 800222c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <VL53L0X_StaticInit+0x92>
		((ApertureSpads == 1) && (count > 32)) ||
 8002234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002236:	2b20      	cmp	r3, #32
 8002238:	d806      	bhi.n	8002248 <VL53L0X_StaticInit+0xa0>
 800223a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10e      	bne.n	8002260 <VL53L0X_StaticInit+0xb8>
		((ApertureSpads == 0) && (count > 12)))
 8002242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d90b      	bls.n	8002260 <VL53L0X_StaticInit+0xb8>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002248:	f107 0218 	add.w	r2, r7, #24
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f002 fa1c 	bl	8004690 <VL53L0X_perform_ref_spad_management>
 8002258:	4603      	mov	r3, r0
 800225a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800225e:	e009      	b.n	8002274 <VL53L0X_StaticInit+0xcc>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002260:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002264:	461a      	mov	r2, r3
 8002266:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f002 fc1d 	bl	8004aa8 <VL53L0X_set_reference_spads>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <VL53L0X_StaticInit+0x100>)
 8002276:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002278:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800227c:	2b00      	cmp	r3, #0
 800227e:	d117      	bne.n	80022b0 <VL53L0X_StaticInit+0x108>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8002286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800228a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <VL53L0X_StaticInit+0x104>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002298:	66bb      	str	r3, [r7, #104]	; 0x68
 800229a:	e009      	b.n	80022b0 <VL53L0X_StaticInit+0x108>
 800229c:	200007b4 	.word	0x200007b4
 80022a0:	0800ca50 	.word	0x0800ca50
 80022a4:	0800c85c 	.word	0x0800c85c
 80022a8:	200004f8 	.word	0x200004f8
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80022ac:	4b93      	ldr	r3, [pc, #588]	; (80024fc <VL53L0X_StaticInit+0x354>)
 80022ae:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80022b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80022b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f004 fc2c 	bl	8006b18 <VL53L0X_load_tuning_settings>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80022c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <VL53L0X_StaticInit+0x13c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80022ce:	2300      	movs	r3, #0
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2304      	movs	r3, #4
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f001 fd2f 	bl	8003d3c <VL53L0X_SetGpioConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d121      	bne.n	8002330 <VL53L0X_StaticInit+0x188>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80022ec:	2201      	movs	r2, #1
 80022ee:	21ff      	movs	r1, #255	; 0xff
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fc01 	bl	8001af8 <VL53L0X_WrByte>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80022fc:	f107 031a 	add.w	r3, r7, #26
 8002300:	461a      	mov	r2, r3
 8002302:	2184      	movs	r1, #132	; 0x84
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fca3 	bl	8001c50 <VL53L0X_RdWord>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002312:	4313      	orrs	r3, r2
 8002314:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002318:	2200      	movs	r2, #0
 800231a:	21ff      	movs	r1, #255	; 0xff
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff fbeb 	bl	8001af8 <VL53L0X_WrByte>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800232a:	4313      	orrs	r3, r2
 800232c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002330:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <VL53L0X_StaticInit+0x19c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002338:	8b7b      	ldrh	r3, [r7, #26]
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8002344:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002348:	2b00      	cmp	r3, #0
 800234a:	d108      	bne.n	800235e <VL53L0X_StaticInit+0x1b6>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8da 	bl	800250c <VL53L0X_GetDeviceParameters>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800235e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002362:	2b00      	cmp	r3, #0
 8002364:	d110      	bne.n	8002388 <VL53L0X_StaticInit+0x1e0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002366:	f107 0319 	add.w	r3, r7, #25
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fa1b 	bl	80027a8 <VL53L0X_GetFractionEnable>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8002378:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800237c:	2b00      	cmp	r3, #0
 800237e:	d103      	bne.n	8002388 <VL53L0X_StaticInit+0x1e0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002380:	7e7a      	ldrb	r2, [r7, #25]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002388:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10e      	bne.n	80023ae <VL53L0X_StaticInit+0x206>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0410 	add.w	r4, r3, #16
 8002396:	f107 051c 	add.w	r5, r7, #28
 800239a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800239c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80023ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d111      	bne.n	80023da <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_RdByte(Dev,
 80023b6:	f107 0319 	add.w	r3, r7, #25
 80023ba:	461a      	mov	r2, r3
 80023bc:	2101      	movs	r1, #1
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fc1c 	bl	8001bfc <VL53L0X_RdByte>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80023ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <VL53L0X_StaticInit+0x232>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80023d2:	7e7a      	ldrb	r2, [r7, #25]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80023da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d107      	bne.n	80023f2 <VL53L0X_StaticInit+0x24a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fb2a 	bl	8002a40 <VL53L0X_SetSequenceStepEnable>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80023f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80023fa:	2200      	movs	r2, #0
 80023fc:	2102      	movs	r1, #2
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fb1e 	bl	8002a40 <VL53L0X_SetSequenceStepEnable>
 8002404:	4603      	mov	r3, r0
 8002406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800240a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <VL53L0X_StaticInit+0x272>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800241a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002422:	f107 0313 	add.w	r3, r7, #19
 8002426:	461a      	mov	r2, r3
 8002428:	2100      	movs	r1, #0
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fac6 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8002430:	4603      	mov	r3, r0
 8002432:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002436:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <VL53L0X_StaticInit+0x29e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800243e:	7cfa      	ldrb	r2, [r7, #19]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002446:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <VL53L0X_StaticInit+0x2ba>
		Status = VL53L0X_GetVcselPulsePeriod(
 800244e:	f107 0313 	add.w	r3, r7, #19
 8002452:	461a      	mov	r2, r3
 8002454:	2101      	movs	r1, #1
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fab0 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002462:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002466:	2b00      	cmp	r3, #0
 8002468:	d103      	bne.n	8002472 <VL53L0X_StaticInit+0x2ca>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800246a:	7cfa      	ldrb	r2, [r7, #19]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002472:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	461a      	mov	r2, r3
 8002480:	2103      	movs	r1, #3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f003 fc92 	bl	8005dac <get_sequence_step_timeout>
 8002488:	4603      	mov	r3, r0
 800248a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800248e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800249e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <VL53L0X_StaticInit+0x312>
		Status = get_sequence_step_timeout(
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	461a      	mov	r2, r3
 80024ac:	2104      	movs	r1, #4
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f003 fc7c 	bl	8005dac <get_sequence_step_timeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80024ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <VL53L0X_StaticInit+0x322>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			Dev,
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <VL53L0X_StaticInit+0x358>)
 80024cc:	681c      	ldr	r4, [r3, #0]
 80024ce:	f005 fb33 	bl	8007b38 <HAL_GetTick>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <VL53L0X_StaticInit+0x35c>)
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	9200      	str	r2, [sp, #0]
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <VL53L0X_StaticInit+0x360>)
 80024e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024e8:	4621      	mov	r1, r4
 80024ea:	2001      	movs	r0, #1
 80024ec:	f005 fa92 	bl	8007a14 <trace_print_module_function>
	return Status;
 80024f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3770      	adds	r7, #112	; 0x70
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bdb0      	pop	{r4, r5, r7, pc}
 80024fc:	200004f8 	.word	0x200004f8
 8002500:	200007b4 	.word	0x200007b4
 8002504:	0800ca50 	.word	0x0800ca50
 8002508:	0800c870 	.word	0x0800c870

0800250c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af04      	add	r7, sp, #16
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");
 800251a:	4b56      	ldr	r3, [pc, #344]	; (8002674 <VL53L0X_GetDeviceParameters+0x168>)
 800251c:	681c      	ldr	r4, [r3, #0]
 800251e:	f005 fb0b 	bl	8007b38 <HAL_GetTick>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4b54      	ldr	r3, [pc, #336]	; (8002678 <VL53L0X_GetDeviceParameters+0x16c>)
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	9200      	str	r2, [sp, #0]
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <VL53L0X_GetDeviceParameters+0x170>)
 800252e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002532:	4621      	mov	r1, r4
 8002534:	2001      	movs	r0, #1
 8002536:	f005 fa6d 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8f6 	bl	8002730 <VL53L0X_GetDeviceMode>
 8002544:	4603      	mov	r3, r0
 8002546:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <VL53L0X_GetDeviceParameters+0x54>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	3308      	adds	r3, #8
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fc40 	bl	8002ddc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8002560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <VL53L0X_GetDeviceParameters+0x62>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	3310      	adds	r3, #16
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fccb 	bl	8002f18 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d107      	bne.n	800259e <VL53L0X_GetDeviceParameters+0x92>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fbf7 	bl	8001d88 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d134      	bne.n	8002610 <VL53L0X_GetDeviceParameters+0x104>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	e02a      	b.n	8002602 <VL53L0X_GetDeviceParameters+0xf6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80025ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d12a      	bne.n	800260a <VL53L0X_GetDeviceParameters+0xfe>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	b299      	uxth	r1, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3308      	adds	r3, #8
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	461a      	mov	r2, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fe94 	bl	80032f4 <VL53L0X_GetLimitCheckValue>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d117      	bne.n	800260e <VL53L0X_GetDeviceParameters+0x102>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	b299      	uxth	r1, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3318      	adds	r3, #24
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	461a      	mov	r2, r3
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fda9 	bl	8003144 <VL53L0X_GetLimitCheckEnable>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3301      	adds	r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b05      	cmp	r3, #5
 8002606:	ddd1      	ble.n	80025ac <VL53L0X_GetDeviceParameters+0xa0>
 8002608:	e002      	b.n	8002610 <VL53L0X_GetDeviceParameters+0x104>
				break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <VL53L0X_GetDeviceParameters+0x104>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800260e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <VL53L0X_GetDeviceParameters+0x11c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	333c      	adds	r3, #60	; 0x3c
 800261c:	4619      	mov	r1, r3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 ff20 	bl	8003464 <VL53L0X_GetWrapAroundCheckEnable>
 8002624:	4603      	mov	r3, r0
 8002626:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8002628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <VL53L0X_GetDeviceParameters+0x134>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	3304      	adds	r3, #4
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f93e 	bl	80028b8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800263c:	4603      	mov	r3, r0
 800263e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <VL53L0X_GetDeviceParameters+0x168>)
 8002642:	681c      	ldr	r4, [r3, #0]
 8002644:	f005 fa78 	bl	8007b38 <HAL_GetTick>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <VL53L0X_GetDeviceParameters+0x16c>)
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	9200      	str	r2, [sp, #0]
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <VL53L0X_GetDeviceParameters+0x174>)
 800265a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800265e:	4621      	mov	r1, r4
 8002660:	2001      	movs	r0, #1
 8002662:	f005 f9d7 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bd90      	pop	{r4, r7, pc}
 8002672:	bf00      	nop
 8002674:	200007b4 	.word	0x200007b4
 8002678:	0800ca64 	.word	0x0800ca64
 800267c:	0800c85c 	.word	0x0800c85c
 8002680:	0800c870 	.word	0x0800c870

08002684 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af04      	add	r7, sp, #16
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <VL53L0X_SetDeviceMode+0x98>)
 8002696:	681c      	ldr	r4, [r3, #0]
 8002698:	f005 fa4e 	bl	8007b38 <HAL_GetTick>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	9302      	str	r3, [sp, #8]
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <VL53L0X_SetDeviceMode+0x9c>)
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <VL53L0X_SetDeviceMode+0xa0>)
 80026ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80026b0:	4621      	mov	r1, r4
 80026b2:	2001      	movs	r0, #1
 80026b4:	f005 f9ae 	bl	8007a14 <trace_print_module_function>

	switch (DeviceMode) {
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	2b15      	cmp	r3, #21
 80026bc:	bf8c      	ite	hi
 80026be:	2201      	movhi	r2, #1
 80026c0:	2200      	movls	r2, #0
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	2a00      	cmp	r2, #0
 80026c6:	d10e      	bne.n	80026e6 <VL53L0X_SetDeviceMode+0x62>
 80026c8:	2201      	movs	r2, #1
 80026ca:	409a      	lsls	r2, r3
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <VL53L0X_SetDeviceMode+0xa4>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <VL53L0X_SetDeviceMode+0x62>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	741a      	strb	r2, [r3, #16]
		break;
 80026e4:	e001      	b.n	80026ea <VL53L0X_SetDeviceMode+0x66>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80026e6:	23f8      	movs	r3, #248	; 0xf8
 80026e8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <VL53L0X_SetDeviceMode+0x98>)
 80026ec:	681c      	ldr	r4, [r3, #0]
 80026ee:	f005 fa23 	bl	8007b38 <HAL_GetTick>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	9302      	str	r3, [sp, #8]
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <VL53L0X_SetDeviceMode+0x9c>)
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	9200      	str	r2, [sp, #0]
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <VL53L0X_SetDeviceMode+0xa8>)
 8002704:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002708:	4621      	mov	r1, r4
 800270a:	2001      	movs	r0, #1
 800270c:	f005 f982 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	200007b4 	.word	0x200007b4
 8002720:	0800ca80 	.word	0x0800ca80
 8002724:	0800c880 	.word	0x0800c880
 8002728:	0030000b 	.word	0x0030000b
 800272c:	0800c870 	.word	0x0800c870

08002730 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af04      	add	r7, sp, #16
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <VL53L0X_GetDeviceMode+0x68>)
 8002740:	681c      	ldr	r4, [r3, #0]
 8002742:	f005 f9f9 	bl	8007b38 <HAL_GetTick>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <VL53L0X_GetDeviceMode+0x6c>)
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <VL53L0X_GetDeviceMode+0x70>)
 8002752:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002756:	4621      	mov	r1, r4
 8002758:	2001      	movs	r0, #1
 800275a:	f005 f95b 	bl	8007a14 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	7c1a      	ldrb	r2, [r3, #16]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <VL53L0X_GetDeviceMode+0x68>)
 8002768:	681c      	ldr	r4, [r3, #0]
 800276a:	f005 f9e5 	bl	8007b38 <HAL_GetTick>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <VL53L0X_GetDeviceMode+0x6c>)
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	9200      	str	r2, [sp, #0]
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <VL53L0X_GetDeviceMode+0x74>)
 8002780:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002784:	4621      	mov	r1, r4
 8002786:	2001      	movs	r0, #1
 8002788:	f005 f944 	bl	8007a14 <trace_print_module_function>
	return Status;
 800278c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}
 8002798:	200007b4 	.word	0x200007b4
 800279c:	0800ca98 	.word	0x0800ca98
 80027a0:	0800c85c 	.word	0x0800c85c
 80027a4:	0800c870 	.word	0x0800c870

080027a8 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af04      	add	r7, sp, #16
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <VL53L0X_GetFractionEnable+0x84>)
 80027b8:	681c      	ldr	r4, [r3, #0]
 80027ba:	f005 f9bd 	bl	8007b38 <HAL_GetTick>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <VL53L0X_GetFractionEnable+0x88>)
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <VL53L0X_GetFractionEnable+0x8c>)
 80027ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80027ce:	4621      	mov	r1, r4
 80027d0:	2001      	movs	r0, #1
 80027d2:	f005 f91f 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	2109      	movs	r1, #9
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fa0e 	bl	8001bfc <VL53L0X_RdByte>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80027e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <VL53L0X_GetFractionEnable+0x52>
		*pEnabled = (*pEnabled & 1);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <VL53L0X_GetFractionEnable+0x84>)
 80027fc:	681c      	ldr	r4, [r3, #0]
 80027fe:	f005 f99b 	bl	8007b38 <HAL_GetTick>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <VL53L0X_GetFractionEnable+0x88>)
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	9200      	str	r2, [sp, #0]
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <VL53L0X_GetFractionEnable+0x90>)
 8002814:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002818:	4621      	mov	r1, r4
 800281a:	2001      	movs	r0, #1
 800281c:	f005 f8fa 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	200007b4 	.word	0x200007b4
 8002830:	0800cab0 	.word	0x0800cab0
 8002834:	0800c85c 	.word	0x0800c85c
 8002838:	0800c870 	.word	0x0800c870

0800283c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af04      	add	r7, sp, #16
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 800284c:	681c      	ldr	r4, [r3, #0]
 800284e:	f005 f973 	bl	8007b38 <HAL_GetTick>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	9200      	str	r2, [sp, #0]
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x74>)
 800285e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002862:	4621      	mov	r1, r4
 8002864:	2001      	movs	r0, #1
 8002866:	f005 f8d5 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800286a:	6839      	ldr	r1, [r7, #0]
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f003 ff31 	bl	80066d4 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8002878:	681c      	ldr	r4, [r3, #0]
 800287a:	f005 f95d 	bl	8007b38 <HAL_GetTick>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	9200      	str	r2, [sp, #0]
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x78>)
 8002890:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002894:	4621      	mov	r1, r4
 8002896:	2001      	movs	r0, #1
 8002898:	f005 f8bc 	bl	8007a14 <trace_print_module_function>

	return Status;
 800289c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	200007b4 	.word	0x200007b4
 80028ac:	0800cacc 	.word	0x0800cacc
 80028b0:	0800c85c 	.word	0x0800c85c
 80028b4:	0800c870 	.word	0x0800c870

080028b8 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af04      	add	r7, sp, #16
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 80028c8:	681c      	ldr	r4, [r3, #0]
 80028ca:	f005 f935 	bl	8007b38 <HAL_GetTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	9200      	str	r2, [sp, #0]
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x74>)
 80028da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028de:	4621      	mov	r1, r4
 80028e0:	2001      	movs	r0, #1
 80028e2:	f005 f897 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80028e6:	6839      	ldr	r1, [r7, #0]
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f004 f825 	bl	8006938 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 80028f4:	681c      	ldr	r4, [r3, #0]
 80028f6:	f005 f91f 	bl	8007b38 <HAL_GetTick>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	9302      	str	r3, [sp, #8]
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	9200      	str	r2, [sp, #0]
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x78>)
 800290c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002910:	4621      	mov	r1, r4
 8002912:	2001      	movs	r0, #1
 8002914:	f005 f87e 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	200007b4 	.word	0x200007b4
 8002928:	0800cafc 	.word	0x0800cafc
 800292c:	0800c85c 	.word	0x0800c85c
 8002930:	0800c870 	.word	0x0800c870

08002934 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af04      	add	r7, sp, #16
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	70fb      	strb	r3, [r7, #3]
 8002940:	4613      	mov	r3, r2
 8002942:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <VL53L0X_SetVcselPulsePeriod+0x78>)
 800294a:	681c      	ldr	r4, [r3, #0]
 800294c:	f005 f8f4 	bl	8007b38 <HAL_GetTick>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	9200      	str	r2, [sp, #0]
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <VL53L0X_SetVcselPulsePeriod+0x80>)
 800295c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002960:	4621      	mov	r1, r4
 8002962:	2001      	movs	r0, #1
 8002964:	f005 f856 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8002968:	78ba      	ldrb	r2, [r7, #2]
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f003 fbef 	bl	8006152 <VL53L0X_set_vcsel_pulse_period>
 8002974:	4603      	mov	r3, r0
 8002976:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <VL53L0X_SetVcselPulsePeriod+0x78>)
 800297a:	681c      	ldr	r4, [r3, #0]
 800297c:	f005 f8dc 	bl	8007b38 <HAL_GetTick>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002988:	9302      	str	r3, [sp, #8]
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <VL53L0X_SetVcselPulsePeriod+0x7c>)
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <VL53L0X_SetVcselPulsePeriod+0x84>)
 8002992:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002996:	4621      	mov	r1, r4
 8002998:	2001      	movs	r0, #1
 800299a:	f005 f83b 	bl	8007a14 <trace_print_module_function>
	return Status;
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200007b4 	.word	0x200007b4
 80029b0:	0800cb2c 	.word	0x0800cb2c
 80029b4:	0800c85c 	.word	0x0800c85c
 80029b8:	0800c870 	.word	0x0800c870

080029bc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b08b      	sub	sp, #44	; 0x2c
 80029c0:	af04      	add	r7, sp, #16
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	460b      	mov	r3, r1
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <VL53L0X_GetVcselPulsePeriod+0x74>)
 80029d0:	681c      	ldr	r4, [r3, #0]
 80029d2:	f005 f8b1 	bl	8007b38 <HAL_GetTick>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <VL53L0X_GetVcselPulsePeriod+0x78>)
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	9200      	str	r2, [sp, #0]
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <VL53L0X_GetVcselPulsePeriod+0x7c>)
 80029e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80029e6:	4621      	mov	r1, r4
 80029e8:	2001      	movs	r0, #1
 80029ea:	f005 f813 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80029ee:	7afb      	ldrb	r3, [r7, #11]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4619      	mov	r1, r3
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f003 fe35 	bl	8006664 <VL53L0X_get_vcsel_pulse_period>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <VL53L0X_GetVcselPulsePeriod+0x74>)
 8002a00:	681c      	ldr	r4, [r3, #0]
 8002a02:	f005 f899 	bl	8007b38 <HAL_GetTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a0e:	9302      	str	r3, [sp, #8]
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <VL53L0X_GetVcselPulsePeriod+0x78>)
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	9200      	str	r2, [sp, #0]
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <VL53L0X_GetVcselPulsePeriod+0x80>)
 8002a18:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f004 fff8 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd90      	pop	{r4, r7, pc}
 8002a30:	200007b4 	.word	0x200007b4
 8002a34:	0800cb48 	.word	0x0800cb48
 8002a38:	0800c85c 	.word	0x0800c85c
 8002a3c:	0800c870 	.word	0x0800c870

08002a40 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b08b      	sub	sp, #44	; 0x2c
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");
 8002a5c:	4b5b      	ldr	r3, [pc, #364]	; (8002bcc <VL53L0X_SetSequenceStepEnable+0x18c>)
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	f005 f86a 	bl	8007b38 <HAL_GetTick>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <VL53L0X_SetSequenceStepEnable+0x190>)
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	9200      	str	r2, [sp, #0]
 8002a6e:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <VL53L0X_SetSequenceStepEnable+0x194>)
 8002a70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002a74:	4621      	mov	r1, r4
 8002a76:	2001      	movs	r0, #1
 8002a78:	f004 ffcc 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002a7c:	f107 030f 	add.w	r3, r7, #15
 8002a80:	461a      	mov	r2, r3
 8002a82:	2101      	movs	r1, #1
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff f8b9 	bl	8001bfc <VL53L0X_RdByte>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8002a92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d15a      	bne.n	8002b50 <VL53L0X_SetSequenceStepEnable+0x110>
		if (SequenceStepEnabled == 1) {
 8002a9a:	78bb      	ldrb	r3, [r7, #2]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d12b      	bne.n	8002af8 <VL53L0X_SetSequenceStepEnable+0xb8>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d825      	bhi.n	8002af2 <VL53L0X_SetSequenceStepEnable+0xb2>
 8002aa6:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <VL53L0X_SetSequenceStepEnable+0x6c>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002ac1 	.word	0x08002ac1
 8002ab0:	08002acb 	.word	0x08002acb
 8002ab4:	08002ad5 	.word	0x08002ad5
 8002ab8:	08002adf 	.word	0x08002adf
 8002abc:	08002ae9 	.word	0x08002ae9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002ac0:	7dbb      	ldrb	r3, [r7, #22]
 8002ac2:	f043 0310 	orr.w	r3, r3, #16
 8002ac6:	75bb      	strb	r3, [r7, #22]
				break;
 8002ac8:	e043      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8002aca:	7dbb      	ldrb	r3, [r7, #22]
 8002acc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002ad0:	75bb      	strb	r3, [r7, #22]
				break;
 8002ad2:	e03e      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8002ad4:	7dbb      	ldrb	r3, [r7, #22]
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	75bb      	strb	r3, [r7, #22]
				break;
 8002adc:	e039      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8002ade:	7dbb      	ldrb	r3, [r7, #22]
 8002ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae4:	75bb      	strb	r3, [r7, #22]
				break;
 8002ae6:	e034      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8002ae8:	7dbb      	ldrb	r3, [r7, #22]
 8002aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aee:	75bb      	strb	r3, [r7, #22]
				break;
 8002af0:	e02f      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002af2:	23fc      	movs	r3, #252	; 0xfc
 8002af4:	75fb      	strb	r3, [r7, #23]
 8002af6:	e02c      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d825      	bhi.n	8002b4a <VL53L0X_SetSequenceStepEnable+0x10a>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <VL53L0X_SetSequenceStepEnable+0xc4>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b19 	.word	0x08002b19
 8002b08:	08002b23 	.word	0x08002b23
 8002b0c:	08002b2d 	.word	0x08002b2d
 8002b10:	08002b37 	.word	0x08002b37
 8002b14:	08002b41 	.word	0x08002b41
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002b18:	7dbb      	ldrb	r3, [r7, #22]
 8002b1a:	f023 0310 	bic.w	r3, r3, #16
 8002b1e:	75bb      	strb	r3, [r7, #22]
				break;
 8002b20:	e017      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8002b22:	7dbb      	ldrb	r3, [r7, #22]
 8002b24:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002b28:	75bb      	strb	r3, [r7, #22]
				break;
 8002b2a:	e012      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8002b2c:	7dbb      	ldrb	r3, [r7, #22]
 8002b2e:	f023 0304 	bic.w	r3, r3, #4
 8002b32:	75bb      	strb	r3, [r7, #22]
				break;
 8002b34:	e00d      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8002b36:	7dbb      	ldrb	r3, [r7, #22]
 8002b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3c:	75bb      	strb	r3, [r7, #22]
				break;
 8002b3e:	e008      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8002b40:	7dbb      	ldrb	r3, [r7, #22]
 8002b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b46:	75bb      	strb	r3, [r7, #22]
				break;
 8002b48:	e003      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002b4a:	23fc      	movs	r3, #252	; 0xfc
 8002b4c:	75fb      	strb	r3, [r7, #23]
 8002b4e:	e000      	b.n	8002b52 <VL53L0X_SetSequenceStepEnable+0x112>
			}
		}
 8002b50:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	7dba      	ldrb	r2, [r7, #22]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d01e      	beq.n	8002b98 <VL53L0X_SetSequenceStepEnable+0x158>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8002b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <VL53L0X_SetSequenceStepEnable+0x132>
			Status = VL53L0X_WrByte(Dev,
 8002b62:	7dbb      	ldrb	r3, [r7, #22]
 8002b64:	461a      	mov	r2, r3
 8002b66:	2101      	movs	r1, #1
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fe ffc5 	bl	8001af8 <VL53L0X_WrByte>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8002b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <VL53L0X_SetSequenceStepEnable+0x142>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7dba      	ldrb	r2, [r7, #22]
 8002b7e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8002b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <VL53L0X_SetSequenceStepEnable+0x158>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002b90:	6939      	ldr	r1, [r7, #16]
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fe52 	bl	800283c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
				MeasurementTimingBudgetMicroSeconds);
		}
	}

	LOG_FUNCTION_END(Status);
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <VL53L0X_SetSequenceStepEnable+0x18c>)
 8002b9a:	681c      	ldr	r4, [r3, #0]
 8002b9c:	f004 ffcc 	bl	8007b38 <HAL_GetTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ba8:	9302      	str	r3, [sp, #8]
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <VL53L0X_SetSequenceStepEnable+0x190>)
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	9200      	str	r2, [sp, #0]
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <VL53L0X_SetSequenceStepEnable+0x198>)
 8002bb2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f004 ff2b 	bl	8007a14 <trace_print_module_function>

	return Status;
 8002bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200007b4 	.word	0x200007b4
 8002bd0:	0800cb64 	.word	0x0800cb64
 8002bd4:	0800c85c 	.word	0x0800c85c
 8002bd8:	0800c870 	.word	0x0800c870

08002bdc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	af04      	add	r7, sp, #16
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	72fb      	strb	r3, [r7, #11]
 8002bea:	4613      	mov	r3, r2
 8002bec:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");
 8002bf8:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <sequence_step_enabled+0xe8>)
 8002bfa:	681c      	ldr	r4, [r3, #0]
 8002bfc:	f004 ff9c 	bl	8007b38 <HAL_GetTick>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b30      	ldr	r3, [pc, #192]	; (8002cc8 <sequence_step_enabled+0xec>)
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	9200      	str	r2, [sp, #0]
 8002c0a:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <sequence_step_enabled+0xf0>)
 8002c0c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002c10:	4621      	mov	r1, r4
 8002c12:	2001      	movs	r0, #1
 8002c14:	f004 fefe 	bl	8007a14 <trace_print_module_function>

	switch (SequenceStepId) {
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d836      	bhi.n	8002c8c <sequence_step_enabled+0xb0>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <sequence_step_enabled+0x48>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c39 	.word	0x08002c39
 8002c28:	08002c4b 	.word	0x08002c4b
 8002c2c:	08002c5d 	.word	0x08002c5d
 8002c30:	08002c6f 	.word	0x08002c6f
 8002c34:	08002c81 	.word	0x08002c81
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002c38:	7abb      	ldrb	r3, [r7, #10]
 8002c3a:	111b      	asrs	r3, r3, #4
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	701a      	strb	r2, [r3, #0]
		break;
 8002c48:	e022      	b.n	8002c90 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002c4a:	7abb      	ldrb	r3, [r7, #10]
 8002c4c:	10db      	asrs	r3, r3, #3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	701a      	strb	r2, [r3, #0]
		break;
 8002c5a:	e019      	b.n	8002c90 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002c5c:	7abb      	ldrb	r3, [r7, #10]
 8002c5e:	109b      	asrs	r3, r3, #2
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	701a      	strb	r2, [r3, #0]
		break;
 8002c6c:	e010      	b.n	8002c90 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002c6e:	7abb      	ldrb	r3, [r7, #10]
 8002c70:	119b      	asrs	r3, r3, #6
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	701a      	strb	r2, [r3, #0]
		break;
 8002c7e:	e007      	b.n	8002c90 <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002c80:	7abb      	ldrb	r3, [r7, #10]
 8002c82:	09db      	lsrs	r3, r3, #7
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	701a      	strb	r2, [r3, #0]
		break;
 8002c8a:	e001      	b.n	8002c90 <sequence_step_enabled+0xb4>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002c8c:	23fc      	movs	r3, #252	; 0xfc
 8002c8e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <sequence_step_enabled+0xe8>)
 8002c92:	681c      	ldr	r4, [r3, #0]
 8002c94:	f004 ff50 	bl	8007b38 <HAL_GetTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca0:	9302      	str	r3, [sp, #8]
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <sequence_step_enabled+0xec>)
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	9200      	str	r2, [sp, #0]
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <sequence_step_enabled+0xf4>)
 8002caa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002cae:	4621      	mov	r1, r4
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f004 feaf 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200007b4 	.word	0x200007b4
 8002cc8:	0800cb84 	.word	0x0800cb84
 8002ccc:	0800c85c 	.word	0x0800c85c
 8002cd0:	0800c870 	.word	0x0800c870

08002cd4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af04      	add	r7, sp, #16
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002ce8:	681c      	ldr	r4, [r3, #0]
 8002cea:	f004 ff25 	bl	8007b38 <HAL_GetTick>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	9200      	str	r2, [sp, #0]
 8002cf8:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <VL53L0X_GetSequenceStepEnables+0x100>)
 8002cfa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002cfe:	4621      	mov	r1, r4
 8002d00:	2001      	movs	r0, #1
 8002d02:	f004 fe87 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002d06:	f107 030e 	add.w	r3, r7, #14
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe ff74 	bl	8001bfc <VL53L0X_RdByte>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <VL53L0X_GetSequenceStepEnables+0x5c>
		Status = sequence_step_enabled(Dev,
 8002d20:	7bba      	ldrb	r2, [r7, #14]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2100      	movs	r1, #0
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ff58 	bl	8002bdc <sequence_step_enabled>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d108      	bne.n	8002d4a <VL53L0X_GetSequenceStepEnables+0x76>
		Status = sequence_step_enabled(Dev,
 8002d38:	7bba      	ldrb	r2, [r7, #14]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	2101      	movs	r1, #1
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff4b 	bl	8002bdc <sequence_step_enabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <VL53L0X_GetSequenceStepEnables+0x90>
		Status = sequence_step_enabled(Dev,
 8002d52:	7bba      	ldrb	r2, [r7, #14]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	2102      	movs	r1, #2
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ff3e 	bl	8002bdc <sequence_step_enabled>
 8002d60:	4603      	mov	r3, r0
 8002d62:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d108      	bne.n	8002d7e <VL53L0X_GetSequenceStepEnables+0xaa>
		Status = sequence_step_enabled(Dev,
 8002d6c:	7bba      	ldrb	r2, [r7, #14]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	3303      	adds	r3, #3
 8002d72:	2103      	movs	r1, #3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff31 	bl	8002bdc <sequence_step_enabled>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d108      	bne.n	8002d98 <VL53L0X_GetSequenceStepEnables+0xc4>
		Status = sequence_step_enabled(Dev,
 8002d86:	7bba      	ldrb	r2, [r7, #14]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ff24 	bl	8002bdc <sequence_step_enabled>
 8002d94:	4603      	mov	r3, r0
 8002d96:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <VL53L0X_GetSequenceStepEnables+0xf8>)
 8002d9a:	681c      	ldr	r4, [r3, #0]
 8002d9c:	f004 fecc 	bl	8007b38 <HAL_GetTick>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da8:	9302      	str	r3, [sp, #8]
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <VL53L0X_GetSequenceStepEnables+0xfc>)
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	9200      	str	r2, [sp, #0]
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <VL53L0X_GetSequenceStepEnables+0x104>)
 8002db2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002db6:	4621      	mov	r1, r4
 8002db8:	2001      	movs	r0, #1
 8002dba:	f004 fe2b 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200007b4 	.word	0x200007b4
 8002dd0:	0800cb9c 	.word	0x0800cb9c
 8002dd4:	0800c85c 	.word	0x0800c85c
 8002dd8:	0800c870 	.word	0x0800c870

08002ddc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af04      	add	r7, sp, #16
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");
 8002dea:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002dec:	681c      	ldr	r4, [r3, #0]
 8002dee:	f004 fea3 	bl	8007b38 <HAL_GetTick>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	9200      	str	r2, [sp, #0]
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb8>)
 8002dfe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e02:	4621      	mov	r1, r4
 8002e04:	2001      	movs	r0, #1
 8002e06:	f004 fe05 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	461a      	mov	r2, r3
 8002e10:	21f8      	movs	r1, #248	; 0xf8
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe ff1c 	bl	8001c50 <VL53L0X_RdWord>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5a>
		Status = VL53L0X_RdDWord(Dev,
 8002e24:	f107 0308 	add.w	r3, r7, #8
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fe ff47 	bl	8001cc0 <VL53L0X_RdDWord>
 8002e32:	4603      	mov	r3, r0
 8002e34:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7c>
		if (osc_calibrate_val != 0) {
 8002e3e:	89bb      	ldrh	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x74>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	89ba      	ldrh	r2, [r7, #12]
 8002e48:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8002e5a:	681c      	ldr	r4, [r3, #0]
 8002e5c:	f004 fe6c 	bl	8007b38 <HAL_GetTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	9200      	str	r2, [sp, #0]
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xbc>)
 8002e72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002e76:	4621      	mov	r1, r4
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f004 fdcb 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200007b4 	.word	0x200007b4
 8002e90:	0800cbbc 	.word	0x0800cbbc
 8002e94:	0800c85c 	.word	0x0800c85c
 8002e98:	0800c870 	.word	0x0800c870

08002e9c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af04      	add	r7, sp, #16
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");
 8002eaa:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002eac:	681c      	ldr	r4, [r3, #0]
 8002eae:	f004 fe43 	bl	8007b38 <HAL_GetTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	9200      	str	r2, [sp, #0]
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <VL53L0X_GetXTalkCompensationEnable+0x74>)
 8002ebe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	f004 fda5 	bl	8007a14 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7f1b      	ldrb	r3, [r3, #28]
 8002ece:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	7bba      	ldrb	r2, [r7, #14]
 8002ed4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8002ed8:	681c      	ldr	r4, [r3, #0]
 8002eda:	f004 fe2d 	bl	8007b38 <HAL_GetTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	9200      	str	r2, [sp, #0]
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <VL53L0X_GetXTalkCompensationEnable+0x78>)
 8002ef0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f004 fd8c 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}
 8002f08:	200007b4 	.word	0x200007b4
 8002f0c:	0800cbec 	.word	0x0800cbec
 8002f10:	0800c85c 	.word	0x0800c85c
 8002f14:	0800c870 	.word	0x0800c870

08002f18 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b08b      	sub	sp, #44	; 0x2c
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 8002f26:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002f28:	681c      	ldr	r4, [r3, #0]
 8002f2a:	f004 fe05 	bl	8007b38 <HAL_GetTick>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	9200      	str	r2, [sp, #0]
 8002f38:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <VL53L0X_GetXTalkCompensationRateMegaCps+0xb4>)
 8002f3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002f3e:	4621      	mov	r1, r4
 8002f40:	2001      	movs	r0, #1
 8002f42:	f004 fd67 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev,
 8002f46:	f107 030e 	add.w	r3, r7, #14
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fe7e 	bl	8001c50 <VL53L0X_RdWord>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d118      	bne.n	8002f92 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
		if (Value == 0) {
 8002f60:	89fb      	ldrh	r3, [r7, #14]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <VL53L0X_GetXTalkCompensationRateMegaCps+0x62>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
 8002f78:	e00b      	b.n	8002f92 <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8002f94:	681c      	ldr	r4, [r3, #0]
 8002f96:	f004 fdcf 	bl	8007b38 <HAL_GetTick>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fa2:	9302      	str	r3, [sp, #8]
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	9200      	str	r2, [sp, #0]
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb8>)
 8002fac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f004 fd2e 	bl	8007a14 <trace_print_module_function>
	return Status;
 8002fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	200007b4 	.word	0x200007b4
 8002fc8:	0800cc10 	.word	0x0800cc10
 8002fcc:	0800c85c 	.word	0x0800c85c
 8002fd0:	0800c870 	.word	0x0800c870

08002fd4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b08b      	sub	sp, #44	; 0x2c
 8002fd8:	af04      	add	r7, sp, #16
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8002ff4:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <VL53L0X_SetLimitCheckEnable+0x160>)
 8002ff6:	681c      	ldr	r4, [r3, #0]
 8002ff8:	f004 fd9e 	bl	8007b38 <HAL_GetTick>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <VL53L0X_SetLimitCheckEnable+0x164>)
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	9200      	str	r2, [sp, #0]
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <VL53L0X_SetLimitCheckEnable+0x168>)
 8003008:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800300c:	4621      	mov	r1, r4
 800300e:	2001      	movs	r0, #1
 8003010:	f004 fd00 	bl	8007a14 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	2b05      	cmp	r3, #5
 8003018:	d902      	bls.n	8003020 <VL53L0X_SetLimitCheckEnable+0x4c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800301a:	23fc      	movs	r3, #252	; 0xfc
 800301c:	75fb      	strb	r3, [r7, #23]
 800301e:	e05b      	b.n	80030d8 <VL53L0X_SetLimitCheckEnable+0x104>
	} else {
		if (LimitCheckEnable == 0) {
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <VL53L0X_SetLimitCheckEnable+0x60>
			TempFix1616 = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	73bb      	strb	r3, [r7, #14]
 8003032:	e00a      	b.n	800304a <VL53L0X_SetLimitCheckEnable+0x76>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	330c      	adds	r3, #12
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d841      	bhi.n	80030d4 <VL53L0X_SetLimitCheckEnable+0x100>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <VL53L0X_SetLimitCheckEnable+0x84>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003071 	.word	0x08003071
 800305c:	0800307b 	.word	0x0800307b
 8003060:	08003091 	.word	0x08003091
 8003064:	0800309b 	.word	0x0800309b
 8003068:	080030a5 	.word	0x080030a5
 800306c:	080030bd 	.word	0x080030bd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003078:	e02e      	b.n	80030d8 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	2144      	movs	r1, #68	; 0x44
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fe fd5b 	bl	8001b40 <VL53L0X_WrWord>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]

			break;
 800308e:	e023      	b.n	80030d8 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003098:	e01e      	b.n	80030d8 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80030a2:	e019      	b.n	80030d8 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80030aa:	7b7b      	ldrb	r3, [r7, #13]
 80030ac:	22fe      	movs	r2, #254	; 0xfe
 80030ae:	2160      	movs	r1, #96	; 0x60
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe fd6f 	bl	8001b94 <VL53L0X_UpdateByte>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80030ba:	e00d      	b.n	80030d8 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80030bc:	7bbb      	ldrb	r3, [r7, #14]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80030c2:	7b7b      	ldrb	r3, [r7, #13]
 80030c4:	22ef      	movs	r2, #239	; 0xef
 80030c6:	2160      	movs	r1, #96	; 0x60
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fe fd63 	bl	8001b94 <VL53L0X_UpdateByte>
 80030ce:	4603      	mov	r3, r0
 80030d0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80030d2:	e001      	b.n	80030d8 <VL53L0X_SetLimitCheckEnable+0x104>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80030d4:	23fc      	movs	r3, #252	; 0xfc
 80030d6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80030d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10f      	bne.n	8003100 <VL53L0X_SetLimitCheckEnable+0x12c>
		if (LimitCheckEnable == 0) {
 80030e0:	787b      	ldrb	r3, [r7, #1]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <VL53L0X_SetLimitCheckEnable+0x120>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80030f2:	e005      	b.n	8003100 <VL53L0X_SetLimitCheckEnable+0x12c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <VL53L0X_SetLimitCheckEnable+0x160>)
 8003102:	681c      	ldr	r4, [r3, #0]
 8003104:	f004 fd18 	bl	8007b38 <HAL_GetTick>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003110:	9302      	str	r3, [sp, #8]
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <VL53L0X_SetLimitCheckEnable+0x164>)
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	9200      	str	r2, [sp, #0]
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <VL53L0X_SetLimitCheckEnable+0x16c>)
 800311a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800311e:	4621      	mov	r1, r4
 8003120:	2001      	movs	r0, #1
 8003122:	f004 fc77 	bl	8007a14 <trace_print_module_function>
	return Status;
 8003126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800312a:	4618      	mov	r0, r3
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	bf00      	nop
 8003134:	200007b4 	.word	0x200007b4
 8003138:	0800cc38 	.word	0x0800cc38
 800313c:	0800c85c 	.word	0x0800c85c
 8003140:	0800c870 	.word	0x0800c870

08003144 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b08b      	sub	sp, #44	; 0x2c
 8003148:	af04      	add	r7, sp, #16
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	460b      	mov	r3, r1
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <VL53L0X_GetLimitCheckEnable+0x88>)
 8003158:	681c      	ldr	r4, [r3, #0]
 800315a:	f004 fced 	bl	8007b38 <HAL_GetTick>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <VL53L0X_GetLimitCheckEnable+0x8c>)
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	9200      	str	r2, [sp, #0]
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <VL53L0X_GetLimitCheckEnable+0x90>)
 800316a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800316e:	4621      	mov	r1, r4
 8003170:	2001      	movs	r0, #1
 8003172:	f004 fc4f 	bl	8007a14 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d905      	bls.n	8003188 <VL53L0X_GetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800317c:	23fc      	movs	r3, #252	; 0xfc
 800317e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e008      	b.n	800319a <VL53L0X_GetLimitCheckEnable+0x56>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003188:	897b      	ldrh	r3, [r7, #10]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003192:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	7dba      	ldrb	r2, [r7, #22]
 8003198:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <VL53L0X_GetLimitCheckEnable+0x88>)
 800319c:	681c      	ldr	r4, [r3, #0]
 800319e:	f004 fccb 	bl	8007b38 <HAL_GetTick>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031aa:	9302      	str	r3, [sp, #8]
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <VL53L0X_GetLimitCheckEnable+0x8c>)
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	9200      	str	r2, [sp, #0]
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <VL53L0X_GetLimitCheckEnable+0x94>)
 80031b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80031b8:	4621      	mov	r1, r4
 80031ba:	2001      	movs	r0, #1
 80031bc:	f004 fc2a 	bl	8007a14 <trace_print_module_function>
	return Status;
 80031c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	200007b4 	.word	0x200007b4
 80031d0:	0800cc54 	.word	0x0800cc54
 80031d4:	0800c85c 	.word	0x0800c85c
 80031d8:	0800c870 	.word	0x0800c870

080031dc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b08b      	sub	sp, #44	; 0x2c
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	460b      	mov	r3, r1
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <VL53L0X_SetLimitCheckValue+0x108>)
 80031f0:	681c      	ldr	r4, [r3, #0]
 80031f2:	f004 fca1 	bl	8007b38 <HAL_GetTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <VL53L0X_SetLimitCheckValue+0x10c>)
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	9200      	str	r2, [sp, #0]
 8003200:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <VL53L0X_SetLimitCheckValue+0x110>)
 8003202:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003206:	4621      	mov	r1, r4
 8003208:	2001      	movs	r0, #1
 800320a:	f004 fc03 	bl	8007a14 <trace_print_module_function>

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003218:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800321a:	7dbb      	ldrb	r3, [r7, #22]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d107      	bne.n	8003230 <VL53L0X_SetLimitCheckValue+0x54>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003220:	897b      	ldrh	r3, [r7, #10]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	330c      	adds	r3, #12
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	e040      	b.n	80032b2 <VL53L0X_SetLimitCheckValue+0xd6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003230:	897b      	ldrh	r3, [r7, #10]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d830      	bhi.n	8003298 <VL53L0X_SetLimitCheckValue+0xbc>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <VL53L0X_SetLimitCheckValue+0x60>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003255 	.word	0x08003255
 8003240:	0800325d 	.word	0x0800325d
 8003244:	08003273 	.word	0x08003273
 8003248:	0800327b 	.word	0x0800327b
 800324c:	08003283 	.word	0x08003283
 8003250:	08003283 	.word	0x08003283

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800325a:	e01f      	b.n	800329c <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003260:	b29b      	uxth	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	2144      	movs	r1, #68	; 0x44
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7fe fc6a 	bl	8001b40 <VL53L0X_WrWord>
 800326c:	4603      	mov	r3, r0
 800326e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003270:	e014      	b.n	800329c <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003278:	e010      	b.n	800329c <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003280:	e00c      	b.n	800329c <VL53L0X_SetLimitCheckValue+0xc0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	2164      	movs	r1, #100	; 0x64
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7fe fc57 	bl	8001b40 <VL53L0X_WrWord>
 8003292:	4603      	mov	r3, r0
 8003294:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003296:	e001      	b.n	800329c <VL53L0X_SetLimitCheckValue+0xc0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003298:	23fc      	movs	r3, #252	; 0xfc
 800329a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800329c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <VL53L0X_SetLimitCheckValue+0xd6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80032a4:	897b      	ldrh	r3, [r7, #10]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	330c      	adds	r3, #12
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <VL53L0X_SetLimitCheckValue+0x108>)
 80032b4:	681c      	ldr	r4, [r3, #0]
 80032b6:	f004 fc3f 	bl	8007b38 <HAL_GetTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <VL53L0X_SetLimitCheckValue+0x10c>)
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	9200      	str	r2, [sp, #0]
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <VL53L0X_SetLimitCheckValue+0x114>)
 80032cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80032d0:	4621      	mov	r1, r4
 80032d2:	2001      	movs	r0, #1
 80032d4:	f004 fb9e 	bl	8007a14 <trace_print_module_function>
	return Status;
 80032d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	200007b4 	.word	0x200007b4
 80032e8:	0800cc70 	.word	0x0800cc70
 80032ec:	0800c85c 	.word	0x0800c85c
 80032f0:	0800c870 	.word	0x0800c870

080032f4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b08d      	sub	sp, #52	; 0x34
 80032f8:	af04      	add	r7, sp, #16
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	460b      	mov	r3, r1
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003302:	2300      	movs	r3, #0
 8003304:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 800330a:	4b52      	ldr	r3, [pc, #328]	; (8003454 <VL53L0X_GetLimitCheckValue+0x160>)
 800330c:	681c      	ldr	r4, [r3, #0]
 800330e:	f004 fc13 	bl	8007b38 <HAL_GetTick>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <VL53L0X_GetLimitCheckValue+0x164>)
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	9200      	str	r2, [sp, #0]
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <VL53L0X_GetLimitCheckValue+0x168>)
 800331e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003322:	4621      	mov	r1, r4
 8003324:	2001      	movs	r0, #1
 8003326:	f004 fb75 	bl	8007a14 <trace_print_module_function>

	switch (LimitCheckId) {
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d847      	bhi.n	80033c0 <VL53L0X_GetLimitCheckValue+0xcc>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <VL53L0X_GetLimitCheckValue+0x44>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003351 	.word	0x08003351
 800333c:	0800335d 	.word	0x0800335d
 8003340:	08003383 	.word	0x08003383
 8003344:	0800338f 	.word	0x0800338f
 8003348:	0800339b 	.word	0x0800339b
 800334c:	0800339b 	.word	0x0800339b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	77bb      	strb	r3, [r7, #30]
		break;
 800335a:	e033      	b.n	80033c4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800335c:	f107 0316 	add.w	r3, r7, #22
 8003360:	461a      	mov	r2, r3
 8003362:	2144      	movs	r1, #68	; 0x44
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7fe fc73 	bl	8001c50 <VL53L0X_RdWord>
 800336a:	4603      	mov	r3, r0
 800336c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800336e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <VL53L0X_GetLimitCheckValue+0x88>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003376:	8afb      	ldrh	r3, [r7, #22]
 8003378:	025b      	lsls	r3, r3, #9
 800337a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800337c:	2301      	movs	r3, #1
 800337e:	77bb      	strb	r3, [r7, #30]
		break;
 8003380:	e020      	b.n	80033c4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003386:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	77bb      	strb	r3, [r7, #30]
		break;
 800338c:	e01a      	b.n	80033c4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	77bb      	strb	r3, [r7, #30]
		break;
 8003398:	e014      	b.n	80033c4 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800339a:	f107 0316 	add.w	r3, r7, #22
 800339e:	461a      	mov	r2, r3
 80033a0:	2164      	movs	r1, #100	; 0x64
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7fe fc54 	bl	8001c50 <VL53L0X_RdWord>
 80033a8:	4603      	mov	r3, r0
 80033aa:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80033ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <VL53L0X_GetLimitCheckValue+0xc6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80033b4:	8afb      	ldrh	r3, [r7, #22]
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	77bb      	strb	r3, [r7, #30]
		break;
 80033be:	e001      	b.n	80033c4 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80033c0:	23fc      	movs	r3, #252	; 0xfc
 80033c2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80033c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d12a      	bne.n	8003422 <VL53L0X_GetLimitCheckValue+0x12e>

		if (EnableZeroValue == 1) {
 80033cc:	7fbb      	ldrb	r3, [r7, #30]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d124      	bne.n	800341c <VL53L0X_GetLimitCheckValue+0x128>

			if (TempFix1616 == 0) {
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d110      	bne.n	80033fa <VL53L0X_GetLimitCheckValue+0x106>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	330c      	adds	r3, #12
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80033ec:	897b      	ldrh	r3, [r7, #10]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80033f8:	e013      	b.n	8003422 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	330c      	adds	r3, #12
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800341a:	e002      	b.n	8003422 <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <VL53L0X_GetLimitCheckValue+0x160>)
 8003424:	681c      	ldr	r4, [r3, #0]
 8003426:	f004 fb87 	bl	8007b38 <HAL_GetTick>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <VL53L0X_GetLimitCheckValue+0x164>)
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	9200      	str	r2, [sp, #0]
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <VL53L0X_GetLimitCheckValue+0x16c>)
 800343c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003440:	4621      	mov	r1, r4
 8003442:	2001      	movs	r0, #1
 8003444:	f004 fae6 	bl	8007a14 <trace_print_module_function>
	return Status;
 8003448:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800344c:	4618      	mov	r0, r3
 800344e:	3724      	adds	r7, #36	; 0x24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	200007b4 	.word	0x200007b4
 8003458:	0800cc8c 	.word	0x0800cc8c
 800345c:	0800c85c 	.word	0x0800c85c
 8003460:	0800c870 	.word	0x0800c870

08003464 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af04      	add	r7, sp, #16
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8003472:	4b27      	ldr	r3, [pc, #156]	; (8003510 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	f004 fb5f 	bl	8007b38 <HAL_GetTick>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	4b25      	ldr	r3, [pc, #148]	; (8003514 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	9200      	str	r2, [sp, #0]
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <VL53L0X_GetWrapAroundCheckEnable+0xb4>)
 8003486:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800348a:	4621      	mov	r1, r4
 800348c:	2001      	movs	r0, #1
 800348e:	f004 fac1 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003492:	f107 030e 	add.w	r3, r7, #14
 8003496:	461a      	mov	r2, r3
 8003498:	2101      	movs	r1, #1
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe fbae 	bl	8001bfc <VL53L0X_RdByte>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80034a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10e      	bne.n	80034ca <VL53L0X_GetWrapAroundCheckEnable+0x66>
		PALDevDataSet(Dev, SequenceConfig, data);
 80034ac:	7bba      	ldrb	r2, [r7, #14]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80034b4:	7bbb      	ldrb	r3, [r7, #14]
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	da03      	bge.n	80034c4 <VL53L0X_GetWrapAroundCheckEnable+0x60>
			*pWrapAroundCheckEnable = 0x01;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e002      	b.n	80034ca <VL53L0X_GetWrapAroundCheckEnable+0x66>
		else
			*pWrapAroundCheckEnable = 0x00;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80034ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <VL53L0X_GetWrapAroundCheckEnable+0x78>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 80034de:	681c      	ldr	r4, [r3, #0]
 80034e0:	f004 fb2a 	bl	8007b38 <HAL_GetTick>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ec:	9302      	str	r3, [sp, #8]
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	9200      	str	r2, [sp, #0]
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <VL53L0X_GetWrapAroundCheckEnable+0xb8>)
 80034f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80034fa:	4621      	mov	r1, r4
 80034fc:	2001      	movs	r0, #1
 80034fe:	f004 fa89 	bl	8007a14 <trace_print_module_function>
	return Status;
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bd90      	pop	{r4, r7, pc}
 800350e:	bf00      	nop
 8003510:	200007b4 	.word	0x200007b4
 8003514:	0800cca8 	.word	0x0800cca8
 8003518:	0800c85c 	.word	0x0800c85c
 800351c:	0800c870 	.word	0x0800c870

08003520 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af04      	add	r7, sp, #16
 8003526:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <VL53L0X_PerformSingleMeasurement+0xb0>)
 800352e:	681c      	ldr	r4, [r3, #0]
 8003530:	f004 fb02 	bl	8007b38 <HAL_GetTick>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <VL53L0X_PerformSingleMeasurement+0xb4>)
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	9200      	str	r2, [sp, #0]
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <VL53L0X_PerformSingleMeasurement+0xb8>)
 8003540:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003544:	4621      	mov	r1, r4
 8003546:	2001      	movs	r0, #1
 8003548:	f004 fa64 	bl	8007a14 <trace_print_module_function>

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800354c:	f107 030e 	add.w	r3, r7, #14
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff f8ec 	bl	8002730 <VL53L0X_GetDeviceMode>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800355c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <VL53L0X_PerformSingleMeasurement+0x54>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003564:	7bbb      	ldrb	r3, [r7, #14]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <VL53L0X_PerformSingleMeasurement+0x54>
		Status = VL53L0X_StartMeasurement(Dev);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8e0 	bl	8003730 <VL53L0X_StartMeasurement>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <VL53L0X_PerformSingleMeasurement+0x66>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f001 fd15 	bl	8004fac <VL53L0X_measurement_poll_for_completion>
 8003582:	4603      	mov	r3, r0
 8003584:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <VL53L0X_PerformSingleMeasurement+0x7c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800358e:	7bbb      	ldrb	r3, [r7, #14]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <VL53L0X_PerformSingleMeasurement+0x7c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <VL53L0X_PerformSingleMeasurement+0xb0>)
 800359e:	681c      	ldr	r4, [r3, #0]
 80035a0:	f004 faca 	bl	8007b38 <HAL_GetTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ac:	9302      	str	r3, [sp, #8]
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <VL53L0X_PerformSingleMeasurement+0xb4>)
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	9200      	str	r2, [sp, #0]
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <VL53L0X_PerformSingleMeasurement+0xbc>)
 80035b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80035ba:	4621      	mov	r1, r4
 80035bc:	2001      	movs	r0, #1
 80035be:	f004 fa29 	bl	8007a14 <trace_print_module_function>
	return Status;
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd90      	pop	{r4, r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200007b4 	.word	0x200007b4
 80035d4:	0800cccc 	.word	0x0800cccc
 80035d8:	0800c85c 	.word	0x0800c85c
 80035dc:	0800c870 	.word	0x0800c870

080035e0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b08b      	sub	sp, #44	; 0x2c
 80035e4:	af04      	add	r7, sp, #16
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <VL53L0X_PerformRefCalibration+0x74>)
 80035f2:	681c      	ldr	r4, [r3, #0]
 80035f4:	f004 faa0 	bl	8007b38 <HAL_GetTick>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <VL53L0X_PerformRefCalibration+0x78>)
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	9200      	str	r2, [sp, #0]
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <VL53L0X_PerformRefCalibration+0x7c>)
 8003604:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003608:	4621      	mov	r1, r4
 800360a:	2001      	movs	r0, #1
 800360c:	f004 fa02 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003610:	2301      	movs	r3, #1
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f001 fc8b 	bl	8004f32 <VL53L0X_perform_ref_calibration>
 800361c:	4603      	mov	r3, r0
 800361e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <VL53L0X_PerformRefCalibration+0x74>)
 8003622:	681c      	ldr	r4, [r3, #0]
 8003624:	f004 fa88 	bl	8007b38 <HAL_GetTick>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003630:	9302      	str	r3, [sp, #8]
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <VL53L0X_PerformRefCalibration+0x78>)
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	9200      	str	r2, [sp, #0]
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <VL53L0X_PerformRefCalibration+0x80>)
 800363a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800363e:	4621      	mov	r1, r4
 8003640:	2001      	movs	r0, #1
 8003642:	f004 f9e7 	bl	8007a14 <trace_print_module_function>
	return Status;
 8003646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800364a:	4618      	mov	r0, r3
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}
 8003652:	bf00      	nop
 8003654:	200007b4 	.word	0x200007b4
 8003658:	0800ccf0 	.word	0x0800ccf0
 800365c:	0800c85c 	.word	0x0800c85c
 8003660:	0800c870 	.word	0x0800c870

08003664 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003670:	2300      	movs	r3, #0
 8003672:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800367a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800367c:	7dbb      	ldrb	r3, [r7, #22]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d005      	beq.n	800368e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003682:	7dbb      	ldrb	r3, [r7, #22]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d002      	beq.n	800368e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003688:	7dbb      	ldrb	r3, [r7, #22]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d147      	bne.n	800371e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800368e:	f107 030c 	add.w	r3, r7, #12
 8003692:	f107 0210 	add.w	r2, r7, #16
 8003696:	2101      	movs	r1, #1
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fca1 	bl	8003fe0 <VL53L0X_GetInterruptThresholds>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80036a8:	d803      	bhi.n	80036b2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80036aa:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80036ac:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80036b0:	d935      	bls.n	800371e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80036b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d131      	bne.n	800371e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80036c0:	491a      	ldr	r1, [pc, #104]	; (800372c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f003 fa28 	bl	8006b18 <VL53L0X_load_tuning_settings>
 80036c8:	4603      	mov	r3, r0
 80036ca:	75fb      	strb	r3, [r7, #23]
 80036cc:	e027      	b.n	800371e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80036ce:	2204      	movs	r2, #4
 80036d0:	21ff      	movs	r1, #255	; 0xff
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fe fa10 	bl	8001af8 <VL53L0X_WrByte>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	4313      	orrs	r3, r2
 80036e0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2170      	movs	r1, #112	; 0x70
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fa06 	bl	8001af8 <VL53L0X_WrByte>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80036f6:	2200      	movs	r2, #0
 80036f8:	21ff      	movs	r1, #255	; 0xff
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe f9fc 	bl	8001af8 <VL53L0X_WrByte>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	4313      	orrs	r3, r2
 8003708:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800370a:	2200      	movs	r2, #0
 800370c:	2180      	movs	r1, #128	; 0x80
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe f9f2 	bl	8001af8 <VL53L0X_WrByte>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	4313      	orrs	r3, r2
 800371c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800371e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200005ec 	.word	0x200005ec

08003730 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b08b      	sub	sp, #44	; 0x2c
 8003734:	af04      	add	r7, sp, #16
 8003736:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003738:	2300      	movs	r3, #0
 800373a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8003740:	4b6e      	ldr	r3, [pc, #440]	; (80038fc <VL53L0X_StartMeasurement+0x1cc>)
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	f004 f9f8 	bl	8007b38 <HAL_GetTick>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <VL53L0X_StartMeasurement+0x1d0>)
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	9200      	str	r2, [sp, #0]
 8003752:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <VL53L0X_StartMeasurement+0x1d4>)
 8003754:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003758:	4621      	mov	r1, r4
 800375a:	2001      	movs	r0, #1
 800375c:	f004 f95a 	bl	8007a14 <trace_print_module_function>

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003760:	f107 030e 	add.w	r3, r7, #14
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fe ffe2 	bl	8002730 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800376c:	2201      	movs	r2, #1
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fe f9c1 	bl	8001af8 <VL53L0X_WrByte>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800377a:	2201      	movs	r2, #1
 800377c:	21ff      	movs	r1, #255	; 0xff
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f9ba 	bl	8001af8 <VL53L0X_WrByte>
 8003784:	4603      	mov	r3, r0
 8003786:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003788:	2200      	movs	r2, #0
 800378a:	2100      	movs	r1, #0
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fe f9b3 	bl	8001af8 <VL53L0X_WrByte>
 8003792:	4603      	mov	r3, r0
 8003794:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800379c:	461a      	mov	r2, r3
 800379e:	2191      	movs	r1, #145	; 0x91
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fe f9a9 	bl	8001af8 <VL53L0X_WrByte>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80037aa:	2201      	movs	r2, #1
 80037ac:	2100      	movs	r1, #0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe f9a2 	bl	8001af8 <VL53L0X_WrByte>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80037b8:	2200      	movs	r2, #0
 80037ba:	21ff      	movs	r1, #255	; 0xff
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fe f99b 	bl	8001af8 <VL53L0X_WrByte>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe f994 	bl	8001af8 <VL53L0X_WrByte>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80037d4:	7bbb      	ldrb	r3, [r7, #14]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d054      	beq.n	8003884 <VL53L0X_StartMeasurement+0x154>
 80037da:	2b03      	cmp	r3, #3
 80037dc:	dc6c      	bgt.n	80038b8 <VL53L0X_StartMeasurement+0x188>
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <VL53L0X_StartMeasurement+0xb8>
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d034      	beq.n	8003850 <VL53L0X_StartMeasurement+0x120>
 80037e6:	e067      	b.n	80038b8 <VL53L0X_StartMeasurement+0x188>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80037e8:	2201      	movs	r2, #1
 80037ea:	2100      	movs	r1, #0
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fe f983 	bl	8001af8 <VL53L0X_WrByte>
 80037f2:	4603      	mov	r3, r0
 80037f4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80037fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d15d      	bne.n	80038be <VL53L0X_StartMeasurement+0x18e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <VL53L0X_StartMeasurement+0xee>
					Status = VL53L0X_RdByte(Dev,
 800380c:	f107 030d 	add.w	r3, r7, #13
 8003810:	461a      	mov	r2, r3
 8003812:	2100      	movs	r1, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fe f9f1 	bl	8001bfc <VL53L0X_RdByte>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3301      	adds	r3, #1
 8003822:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003824:	7b7a      	ldrb	r2, [r7, #13]
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	4013      	ands	r3, r2
 800382a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	429a      	cmp	r2, r3
 8003830:	d107      	bne.n	8003842 <VL53L0X_StartMeasurement+0x112>
				&& (Status == VL53L0X_ERROR_NONE)
 8003832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <VL53L0X_StartMeasurement+0x112>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003840:	d3e1      	bcc.n	8003806 <VL53L0X_StartMeasurement+0xd6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003848:	d339      	bcc.n	80038be <VL53L0X_StartMeasurement+0x18e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800384a:	23f9      	movs	r3, #249	; 0xf9
 800384c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800384e:	e036      	b.n	80038be <VL53L0X_StartMeasurement+0x18e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <VL53L0X_StartMeasurement+0x134>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003858:	2101      	movs	r1, #1
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ff02 	bl	8003664 <VL53L0X_CheckAndLoadInterruptSettings>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003864:	2202      	movs	r2, #2
 8003866:	2100      	movs	r1, #0
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fe f945 	bl	8001af8 <VL53L0X_WrByte>
 800386e:	4603      	mov	r3, r0
 8003870:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d123      	bne.n	80038c2 <VL53L0X_StartMeasurement+0x192>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2204      	movs	r2, #4
 800387e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003882:	e01e      	b.n	80038c2 <VL53L0X_StartMeasurement+0x192>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <VL53L0X_StartMeasurement+0x168>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800388c:	2101      	movs	r1, #1
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff fee8 	bl	8003664 <VL53L0X_CheckAndLoadInterruptSettings>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003898:	2204      	movs	r2, #4
 800389a:	2100      	movs	r1, #0
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fe f92b 	bl	8001af8 <VL53L0X_WrByte>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80038a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <VL53L0X_StartMeasurement+0x196>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80038b6:	e006      	b.n	80038c6 <VL53L0X_StartMeasurement+0x196>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80038b8:	23f8      	movs	r3, #248	; 0xf8
 80038ba:	75fb      	strb	r3, [r7, #23]
 80038bc:	e004      	b.n	80038c8 <VL53L0X_StartMeasurement+0x198>
		break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <VL53L0X_StartMeasurement+0x198>
		break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <VL53L0X_StartMeasurement+0x198>
		break;
 80038c6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <VL53L0X_StartMeasurement+0x1cc>)
 80038ca:	681c      	ldr	r4, [r3, #0]
 80038cc:	f004 f934 	bl	8007b38 <HAL_GetTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038d8:	9302      	str	r3, [sp, #8]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <VL53L0X_StartMeasurement+0x1d0>)
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	9200      	str	r2, [sp, #0]
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <VL53L0X_StartMeasurement+0x1d8>)
 80038e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80038e6:	4621      	mov	r1, r4
 80038e8:	2001      	movs	r0, #1
 80038ea:	f004 f893 	bl	8007a14 <trace_print_module_function>
	return Status;
 80038ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200007b4 	.word	0x200007b4
 8003900:	0800cd10 	.word	0x0800cd10
 8003904:	0800c85c 	.word	0x0800c85c
 8003908:	0800c870 	.word	0x0800c870

0800390c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af04      	add	r7, sp, #16
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <VL53L0X_GetMeasurementDataReady+0xc8>)
 800391c:	681c      	ldr	r4, [r3, #0]
 800391e:	f004 f90b 	bl	8007b38 <HAL_GetTick>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <VL53L0X_GetMeasurementDataReady+0xcc>)
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <VL53L0X_GetMeasurementDataReady+0xd0>)
 800392e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003932:	4621      	mov	r1, r4
 8003934:	2001      	movs	r0, #1
 8003936:	f004 f86d 	bl	8007a14 <trace_print_module_function>

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003940:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d112      	bne.n	800396e <VL53L0X_GetMeasurementDataReady+0x62>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fc14 	bl	800417c <VL53L0X_GetInterruptMaskStatus>
 8003954:	4603      	mov	r3, r0
 8003956:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b04      	cmp	r3, #4
 800395c:	d103      	bne.n	8003966 <VL53L0X_GetMeasurementDataReady+0x5a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e01c      	b.n	80039a0 <VL53L0X_GetMeasurementDataReady+0x94>
		else
			*pMeasurementDataReady = 0;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e018      	b.n	80039a0 <VL53L0X_GetMeasurementDataReady+0x94>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800396e:	f107 030d 	add.w	r3, r7, #13
 8003972:	461a      	mov	r2, r3
 8003974:	2114      	movs	r1, #20
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fe f940 	bl	8001bfc <VL53L0X_RdByte>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10b      	bne.n	80039a0 <VL53L0X_GetMeasurementDataReady+0x94>
			if (SysRangeStatusRegister & 0x01)
 8003988:	7b7b      	ldrb	r3, [r7, #13]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <VL53L0X_GetMeasurementDataReady+0x8e>
				*pMeasurementDataReady = 1;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e002      	b.n	80039a0 <VL53L0X_GetMeasurementDataReady+0x94>
			else
				*pMeasurementDataReady = 0;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <VL53L0X_GetMeasurementDataReady+0xc8>)
 80039a2:	681c      	ldr	r4, [r3, #0]
 80039a4:	f004 f8c8 	bl	8007b38 <HAL_GetTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461a      	mov	r2, r3
 80039ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <VL53L0X_GetMeasurementDataReady+0xcc>)
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	9200      	str	r2, [sp, #0]
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <VL53L0X_GetMeasurementDataReady+0xd4>)
 80039ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80039be:	4621      	mov	r1, r4
 80039c0:	2001      	movs	r0, #1
 80039c2:	f004 f827 	bl	8007a14 <trace_print_module_function>
	return Status;
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	200007b4 	.word	0x200007b4
 80039d8:	0800cd2c 	.word	0x0800cd2c
 80039dc:	0800c85c 	.word	0x0800c85c
 80039e0:	0800c870 	.word	0x0800c870

080039e4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80039e4:	b5b0      	push	{r4, r5, r7, lr}
 80039e6:	b098      	sub	sp, #96	; 0x60
 80039e8:	af04      	add	r7, sp, #16
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t XtalkRangeMilliMeter;
	uint16_t LinearityCorrectiveGain;
	uint8_t localBuffer[12];
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");
 80039f4:	4b9e      	ldr	r3, [pc, #632]	; (8003c70 <VL53L0X_GetRangingMeasurementData+0x28c>)
 80039f6:	681c      	ldr	r4, [r3, #0]
 80039f8:	f004 f89e 	bl	8007b38 <HAL_GetTick>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b9c      	ldr	r3, [pc, #624]	; (8003c74 <VL53L0X_GetRangingMeasurementData+0x290>)
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	9200      	str	r2, [sp, #0]
 8003a06:	4b9c      	ldr	r3, [pc, #624]	; (8003c78 <VL53L0X_GetRangingMeasurementData+0x294>)
 8003a08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f004 f800 	bl	8007a14 <trace_print_module_function>
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003a14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a18:	230c      	movs	r3, #12
 8003a1a:	2114      	movs	r1, #20
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fe f83f 	bl	8001aa0 <VL53L0X_ReadMulti>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003a28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 80d1 	bne.w	8003bd4 <VL53L0X_GetRangingMeasurementData+0x1f0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2200      	movs	r2, #0
 8003a36:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003a3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003a5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	025b      	lsls	r3, r3, #9
 8003a70:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a76:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003a92:	025b      	lsls	r3, r3, #9
 8003a94:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003a9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003ab6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003ab8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8003ac6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8003ace:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003ad2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad8:	d046      	beq.n	8003b68 <VL53L0X_GetRangingMeasurementData+0x184>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003ada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003adc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003ae8:	4a64      	ldr	r2, [pc, #400]	; (8003c7c <VL53L0X_GetRangingMeasurementData+0x298>)
 8003aea:	fb82 1203 	smull	r1, r2, r2, r3
 8003aee:	1192      	asrs	r2, r2, #6
 8003af0:	17db      	asrs	r3, r3, #31
 8003af2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003af4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7f1b      	ldrb	r3, [r3, #28]
 8003b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8003b06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02c      	beq.n	8003b68 <VL53L0X_GetRangingMeasurementData+0x184>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003b0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b10:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	121a      	asrs	r2, r3, #8
					<= 0) {
 8003b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d10d      	bne.n	8003b3c <VL53L0X_GetRangingMeasurementData+0x158>
					if (RangeFractionalEnable)
 8003b20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <VL53L0X_GetRangingMeasurementData+0x14e>
						XtalkRangeMilliMeter = 8888;
 8003b28:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8003b2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b30:	e016      	b.n	8003b60 <VL53L0X_GetRangingMeasurementData+0x17c>
					else
						XtalkRangeMilliMeter = 8888
 8003b32:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8003b36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003b3a:	e011      	b.n	8003b60 <VL53L0X_GetRangingMeasurementData+0x17c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8003b3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b42:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003b46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b48:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8003b50:	121b      	asrs	r3, r3, #8
 8003b52:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b56:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8003b5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8003b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003b68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <VL53L0X_GetRangingMeasurementData+0x1a8>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003b70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003b7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	75da      	strb	r2, [r3, #23]
 8003b8a:	e006      	b.n	8003b9a <VL53L0X_GetRangingMeasurementData+0x1b6>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003b92:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003b9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003b9e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003ba2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f003 fd03 	bl	80075bc <VL53L0X_get_pal_range_status>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003bc4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <VL53L0X_GetRangingMeasurementData+0x1f0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003bcc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003bd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d12f      	bne.n	8003c3c <VL53L0X_GetRangingMeasurementData+0x258>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f107 040c 	add.w	r4, r7, #12
 8003be2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8003bf6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8003c04:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8003c0a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8003c10:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8003c16:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8003c1c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8003c22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003c2c:	f107 050c 	add.w	r5, r7, #12
 8003c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <VL53L0X_GetRangingMeasurementData+0x28c>)
 8003c3e:	681c      	ldr	r4, [r3, #0]
 8003c40:	f003 ff7a 	bl	8007b38 <HAL_GetTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003c4c:	9302      	str	r3, [sp, #8]
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <VL53L0X_GetRangingMeasurementData+0x290>)
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	9200      	str	r2, [sp, #0]
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <VL53L0X_GetRangingMeasurementData+0x29c>)
 8003c56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f003 fed9 	bl	8007a14 <trace_print_module_function>
	return Status;
 8003c62:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3750      	adds	r7, #80	; 0x50
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200007b4 	.word	0x200007b4
 8003c74:	0800cd4c 	.word	0x0800cd4c
 8003c78:	0800c85c 	.word	0x0800c85c
 8003c7c:	10624dd3 	.word	0x10624dd3
 8003c80:	0800c870 	.word	0x0800c870

08003c84 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b089      	sub	sp, #36	; 0x24
 8003c88:	af04      	add	r7, sp, #16
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8003c94:	681c      	ldr	r4, [r3, #0]
 8003c96:	f003 ff4f 	bl	8007b38 <HAL_GetTick>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	9200      	str	r2, [sp, #0]
 8003ca4:	4b23      	ldr	r3, [pc, #140]	; (8003d34 <VL53L0X_PerformSingleRangingMeasurement+0xb0>)
 8003ca6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003caa:	4621      	mov	r1, r4
 8003cac:	2001      	movs	r0, #1
 8003cae:	f003 feb1 	bl	8007a14 <trace_print_module_function>

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fe fce5 	bl	8002684 <VL53L0X_SetDeviceMode>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <VL53L0X_PerformSingleRangingMeasurement+0x4c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fc2a 	bl	8003520 <VL53L0X_PerformSingleMeasurement>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <VL53L0X_PerformSingleRangingMeasurement+0x60>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fe82 	bl	80039e4 <VL53L0X_GetRangingMeasurementData>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003cec:	2100      	movs	r1, #0
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9d8 	bl	80040a4 <VL53L0X_ClearInterruptMask>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	f003 ff1c 	bl	8007b38 <HAL_GetTick>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	9200      	str	r2, [sp, #0]
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <VL53L0X_PerformSingleRangingMeasurement+0xb4>)
 8003d12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003d16:	4621      	mov	r1, r4
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f003 fe7b 	bl	8007a14 <trace_print_module_function>
	return Status;
 8003d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd90      	pop	{r4, r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200007b4 	.word	0x200007b4
 8003d30:	0800cd70 	.word	0x0800cd70
 8003d34:	0800c85c 	.word	0x0800c85c
 8003d38:	0800c870 	.word	0x0800c870

08003d3c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af04      	add	r7, sp, #16
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	4608      	mov	r0, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	70fb      	strb	r3, [r7, #3]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	70bb      	strb	r3, [r7, #2]
 8003d52:	4613      	mov	r3, r2
 8003d54:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8003d5a:	4b9d      	ldr	r3, [pc, #628]	; (8003fd0 <VL53L0X_SetGpioConfig+0x294>)
 8003d5c:	681c      	ldr	r4, [r3, #0]
 8003d5e:	f003 feeb 	bl	8007b38 <HAL_GetTick>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b9b      	ldr	r3, [pc, #620]	; (8003fd4 <VL53L0X_SetGpioConfig+0x298>)
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	9200      	str	r2, [sp, #0]
 8003d6c:	4b9a      	ldr	r3, [pc, #616]	; (8003fd8 <VL53L0X_SetGpioConfig+0x29c>)
 8003d6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003d72:	4621      	mov	r1, r4
 8003d74:	2001      	movs	r0, #1
 8003d76:	f003 fe4d 	bl	8007a14 <trace_print_module_function>

	if (Pin != 0) {
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <VL53L0X_SetGpioConfig+0x4a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003d80:	23f6      	movs	r3, #246	; 0xf6
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e10a      	b.n	8003f9c <VL53L0X_SetGpioConfig+0x260>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003d86:	78bb      	ldrb	r3, [r7, #2]
 8003d88:	2b14      	cmp	r3, #20
 8003d8a:	d111      	bne.n	8003db0 <VL53L0X_SetGpioConfig+0x74>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003d8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <VL53L0X_SetGpioConfig+0x5e>
			data = 0x10;
 8003d94:	2310      	movs	r3, #16
 8003d96:	73bb      	strb	r3, [r7, #14]
 8003d98:	e001      	b.n	8003d9e <VL53L0X_SetGpioConfig+0x62>
		else
			data = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003d9e:	7bbb      	ldrb	r3, [r7, #14]
 8003da0:	461a      	mov	r2, r3
 8003da2:	2184      	movs	r1, #132	; 0x84
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fd fea7 	bl	8001af8 <VL53L0X_WrByte>
 8003daa:	4603      	mov	r3, r0
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e0f5      	b.n	8003f9c <VL53L0X_SetGpioConfig+0x260>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003db0:	78bb      	ldrb	r3, [r7, #2]
 8003db2:	2b15      	cmp	r3, #21
 8003db4:	f040 8097 	bne.w	8003ee6 <VL53L0X_SetGpioConfig+0x1aa>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003db8:	2201      	movs	r2, #1
 8003dba:	21ff      	movs	r1, #255	; 0xff
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd fe9b 	bl	8001af8 <VL53L0X_WrByte>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2100      	movs	r1, #0
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd fe91 	bl	8001af8 <VL53L0X_WrByte>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	461a      	mov	r2, r3
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003de0:	2200      	movs	r2, #0
 8003de2:	21ff      	movs	r1, #255	; 0xff
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fd fe87 	bl	8001af8 <VL53L0X_WrByte>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003df4:	2201      	movs	r2, #1
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fd fe7d 	bl	8001af8 <VL53L0X_WrByte>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003e08:	2202      	movs	r2, #2
 8003e0a:	2185      	movs	r1, #133	; 0x85
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fd fe73 	bl	8001af8 <VL53L0X_WrByte>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	21ff      	movs	r1, #255	; 0xff
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fd fe69 	bl	8001af8 <VL53L0X_WrByte>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003e30:	2200      	movs	r2, #0
 8003e32:	21cd      	movs	r1, #205	; 0xcd
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7fd fe5f 	bl	8001af8 <VL53L0X_WrByte>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003e44:	2211      	movs	r2, #17
 8003e46:	21cc      	movs	r1, #204	; 0xcc
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fd fe55 	bl	8001af8 <VL53L0X_WrByte>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003e58:	2207      	movs	r2, #7
 8003e5a:	21ff      	movs	r1, #255	; 0xff
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fd fe4b 	bl	8001af8 <VL53L0X_WrByte>
 8003e62:	4603      	mov	r3, r0
 8003e64:	461a      	mov	r2, r3
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	21be      	movs	r1, #190	; 0xbe
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fd fe41 	bl	8001af8 <VL53L0X_WrByte>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003e80:	2206      	movs	r2, #6
 8003e82:	21ff      	movs	r1, #255	; 0xff
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7fd fe37 	bl	8001af8 <VL53L0X_WrByte>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8003e94:	2209      	movs	r2, #9
 8003e96:	21cc      	movs	r1, #204	; 0xcc
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7fd fe2d 	bl	8001af8 <VL53L0X_WrByte>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	21ff      	movs	r1, #255	; 0xff
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd fe23 	bl	8001af8 <VL53L0X_WrByte>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	21ff      	movs	r1, #255	; 0xff
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fd fe19 	bl	8001af8 <VL53L0X_WrByte>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fd fe0f 	bl	8001af8 <VL53L0X_WrByte>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e05a      	b.n	8003f9c <VL53L0X_SetGpioConfig+0x260>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8003ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d122      	bne.n	8003f34 <VL53L0X_SetGpioConfig+0x1f8>
			switch (Functionality) {
 8003eee:	787b      	ldrb	r3, [r7, #1]
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d81c      	bhi.n	8003f2e <VL53L0X_SetGpioConfig+0x1f2>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <VL53L0X_SetGpioConfig+0x1c0>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f11 	.word	0x08003f11
 8003f00:	08003f17 	.word	0x08003f17
 8003f04:	08003f1d 	.word	0x08003f1d
 8003f08:	08003f23 	.word	0x08003f23
 8003f0c:	08003f29 	.word	0x08003f29
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73bb      	strb	r3, [r7, #14]
				break;
 8003f14:	e00f      	b.n	8003f36 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73bb      	strb	r3, [r7, #14]
				break;
 8003f1a:	e00c      	b.n	8003f36 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	73bb      	strb	r3, [r7, #14]
				break;
 8003f20:	e009      	b.n	8003f36 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8003f22:	2303      	movs	r3, #3
 8003f24:	73bb      	strb	r3, [r7, #14]
				break;
 8003f26:	e006      	b.n	8003f36 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003f28:	2304      	movs	r3, #4
 8003f2a:	73bb      	strb	r3, [r7, #14]
				break;
 8003f2c:	e003      	b.n	8003f36 <VL53L0X_SetGpioConfig+0x1fa>
			default:
				Status =
 8003f2e:	23f5      	movs	r3, #245	; 0xf5
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e000      	b.n	8003f36 <VL53L0X_SetGpioConfig+0x1fa>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8003f34:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <VL53L0X_SetGpioConfig+0x212>
			Status = VL53L0X_WrByte(Dev,
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	461a      	mov	r2, r3
 8003f42:	210a      	movs	r1, #10
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fd fdd7 	bl	8001af8 <VL53L0X_WrByte>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d110      	bne.n	8003f78 <VL53L0X_SetGpioConfig+0x23c>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003f56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d102      	bne.n	8003f64 <VL53L0X_SetGpioConfig+0x228>
				data = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73bb      	strb	r3, [r7, #14]
 8003f62:	e001      	b.n	8003f68 <VL53L0X_SetGpioConfig+0x22c>
			else
				data = (uint8_t)(1 << 4);
 8003f64:	2310      	movs	r3, #16
 8003f66:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8003f68:	7bbb      	ldrb	r3, [r7, #14]
 8003f6a:	22ef      	movs	r2, #239	; 0xef
 8003f6c:	2184      	movs	r1, #132	; 0x84
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fe10 	bl	8001b94 <VL53L0X_UpdateByte>
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8003f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <VL53L0X_SetGpioConfig+0x24c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	787a      	ldrb	r2, [r7, #1]
 8003f84:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8003f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <VL53L0X_SetGpioConfig+0x260>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003f90:	2100      	movs	r1, #0
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f886 	bl	80040a4 <VL53L0X_ClearInterruptMask>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <VL53L0X_SetGpioConfig+0x294>)
 8003f9e:	681c      	ldr	r4, [r3, #0]
 8003fa0:	f003 fdca 	bl	8007b38 <HAL_GetTick>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fac:	9302      	str	r3, [sp, #8]
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <VL53L0X_SetGpioConfig+0x298>)
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	9200      	str	r2, [sp, #0]
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <VL53L0X_SetGpioConfig+0x2a0>)
 8003fb6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003fba:	4621      	mov	r1, r4
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f003 fd29 	bl	8007a14 <trace_print_module_function>
	return Status;
 8003fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd90      	pop	{r4, r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200007b4 	.word	0x200007b4
 8003fd4:	0800cd98 	.word	0x0800cd98
 8003fd8:	0800c85c 	.word	0x0800c85c
 8003fdc:	0800c870 	.word	0x0800c870

08003fe0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b08b      	sub	sp, #44	; 0x2c
 8003fe4:	af04      	add	r7, sp, #16
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	460b      	mov	r3, r1
 8003fee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");
 8003ff4:	4b26      	ldr	r3, [pc, #152]	; (8004090 <VL53L0X_GetInterruptThresholds+0xb0>)
 8003ff6:	681c      	ldr	r4, [r3, #0]
 8003ff8:	f003 fd9e 	bl	8007b38 <HAL_GetTick>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b24      	ldr	r3, [pc, #144]	; (8004094 <VL53L0X_GetInterruptThresholds+0xb4>)
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	9200      	str	r2, [sp, #0]
 8004006:	4b24      	ldr	r3, [pc, #144]	; (8004098 <VL53L0X_GetInterruptThresholds+0xb8>)
 8004008:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800400c:	4621      	mov	r1, r4
 800400e:	2001      	movs	r0, #1
 8004010:	f003 fd00 	bl	8007a14 <trace_print_module_function>

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	461a      	mov	r2, r3
 800401a:	210e      	movs	r1, #14
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7fd fe17 	bl	8001c50 <VL53L0X_RdWord>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004026:	8abb      	ldrh	r3, [r7, #20]
 8004028:	045b      	lsls	r3, r3, #17
 800402a:	461a      	mov	r2, r3
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <VL53L0X_GetInterruptThresholds+0xbc>)
 800402e:	4013      	ands	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10f      	bne.n	800405c <VL53L0X_GetInterruptThresholds+0x7c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	461a      	mov	r2, r3
 8004042:	210c      	movs	r1, #12
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7fd fe03 	bl	8001c50 <VL53L0X_RdWord>
 800404a:	4603      	mov	r3, r0
 800404c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800404e:	8abb      	ldrh	r3, [r7, #20]
 8004050:	045b      	lsls	r3, r3, #17
 8004052:	461a      	mov	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <VL53L0X_GetInterruptThresholds+0xbc>)
 8004056:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <VL53L0X_GetInterruptThresholds+0xb0>)
 800405e:	681c      	ldr	r4, [r3, #0]
 8004060:	f003 fd6a 	bl	8007b38 <HAL_GetTick>
 8004064:	4603      	mov	r3, r0
 8004066:	461a      	mov	r2, r3
 8004068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800406c:	9302      	str	r3, [sp, #8]
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <VL53L0X_GetInterruptThresholds+0xb4>)
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	9200      	str	r2, [sp, #0]
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <VL53L0X_GetInterruptThresholds+0xc0>)
 8004076:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800407a:	4621      	mov	r1, r4
 800407c:	2001      	movs	r0, #1
 800407e:	f003 fcc9 	bl	8007a14 <trace_print_module_function>
	return Status;
 8004082:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	bf00      	nop
 8004090:	200007b4 	.word	0x200007b4
 8004094:	0800cdb0 	.word	0x0800cdb0
 8004098:	0800c85c 	.word	0x0800c85c
 800409c:	1ffe0000 	.word	0x1ffe0000
 80040a0:	0800c870 	.word	0x0800c870

080040a4 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <VL53L0X_ClearInterruptMask+0xc8>)
 80040b4:	681c      	ldr	r4, [r3, #0]
 80040b6:	f003 fd3f 	bl	8007b38 <HAL_GetTick>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <VL53L0X_ClearInterruptMask+0xcc>)
 80040c0:	9301      	str	r3, [sp, #4]
 80040c2:	9200      	str	r2, [sp, #0]
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <VL53L0X_ClearInterruptMask+0xd0>)
 80040c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80040ca:	4621      	mov	r1, r4
 80040cc:	2001      	movs	r0, #1
 80040ce:	f003 fca1 	bl	8007a14 <trace_print_module_function>

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80040d6:	2201      	movs	r2, #1
 80040d8:	210b      	movs	r1, #11
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fd0c 	bl	8001af8 <VL53L0X_WrByte>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80040e4:	2200      	movs	r2, #0
 80040e6:	210b      	movs	r1, #11
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fd fd05 	bl	8001af8 <VL53L0X_WrByte>
 80040ee:	4603      	mov	r3, r0
 80040f0:	461a      	mov	r2, r3
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80040f8:	f107 030d 	add.w	r3, r7, #13
 80040fc:	461a      	mov	r2, r3
 80040fe:	2113      	movs	r1, #19
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fd fd7b 	bl	8001bfc <VL53L0X_RdByte>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	4313      	orrs	r3, r2
 800410e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004110:	7bbb      	ldrb	r3, [r7, #14]
 8004112:	3301      	adds	r3, #1
 8004114:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004116:	7b7b      	ldrb	r3, [r7, #13]
 8004118:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <VL53L0X_ClearInterruptMask+0x8a>
			&& (LoopCount < 3)
 8004120:	7bbb      	ldrb	r3, [r7, #14]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d803      	bhi.n	800412e <VL53L0X_ClearInterruptMask+0x8a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0d3      	beq.n	80040d6 <VL53L0X_ClearInterruptMask+0x32>


	if (LoopCount >= 3)
 800412e:	7bbb      	ldrb	r3, [r7, #14]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <VL53L0X_ClearInterruptMask+0x94>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004134:	23f4      	movs	r3, #244	; 0xf4
 8004136:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <VL53L0X_ClearInterruptMask+0xc8>)
 800413a:	681c      	ldr	r4, [r3, #0]
 800413c:	f003 fcfc 	bl	8007b38 <HAL_GetTick>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <VL53L0X_ClearInterruptMask+0xcc>)
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <VL53L0X_ClearInterruptMask+0xd4>)
 8004152:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004156:	4621      	mov	r1, r4
 8004158:	2001      	movs	r0, #1
 800415a:	f003 fc5b 	bl	8007a14 <trace_print_module_function>
	return Status;
 800415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bd90      	pop	{r4, r7, pc}
 800416a:	bf00      	nop
 800416c:	200007b4 	.word	0x200007b4
 8004170:	0800cdd0 	.word	0x0800cdd0
 8004174:	0800c85c 	.word	0x0800c85c
 8004178:	0800c870 	.word	0x0800c870

0800417c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af04      	add	r7, sp, #16
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");
 800418a:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 800418c:	681c      	ldr	r4, [r3, #0]
 800418e:	f003 fcd3 	bl	8007b38 <HAL_GetTick>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <VL53L0X_GetInterruptMaskStatus+0x90>)
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	9200      	str	r2, [sp, #0]
 800419c:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <VL53L0X_GetInterruptMaskStatus+0x94>)
 800419e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80041a2:	4621      	mov	r1, r4
 80041a4:	2001      	movs	r0, #1
 80041a6:	f003 fc35 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80041aa:	f107 030e 	add.w	r3, r7, #14
 80041ae:	461a      	mov	r2, r3
 80041b0:	2113      	movs	r1, #19
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd fd22 	bl	8001bfc <VL53L0X_RdByte>
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80041bc:	7bbb      	ldrb	r3, [r7, #14]
 80041be:	f003 0207 	and.w	r2, r3, #7
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80041c6:	7bbb      	ldrb	r3, [r7, #14]
 80041c8:	f003 0318 	and.w	r3, r3, #24
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <VL53L0X_GetInterruptMaskStatus+0x58>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80041d0:	23fa      	movs	r3, #250	; 0xfa
 80041d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 80041d6:	681c      	ldr	r4, [r3, #0]
 80041d8:	f003 fcae 	bl	8007b38 <HAL_GetTick>
 80041dc:	4603      	mov	r3, r0
 80041de:	461a      	mov	r2, r3
 80041e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <VL53L0X_GetInterruptMaskStatus+0x90>)
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	9200      	str	r2, [sp, #0]
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <VL53L0X_GetInterruptMaskStatus+0x98>)
 80041ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80041f2:	4621      	mov	r1, r4
 80041f4:	2001      	movs	r0, #1
 80041f6:	f003 fc0d 	bl	8007a14 <trace_print_module_function>
	return Status;
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bd90      	pop	{r4, r7, pc}
 8004206:	bf00      	nop
 8004208:	200007b4 	.word	0x200007b4
 800420c:	0800cdec 	.word	0x0800cdec
 8004210:	0800c85c 	.word	0x0800c85c
 8004214:	0800c870 	.word	0x0800c870

08004218 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b08b      	sub	sp, #44	; 0x2c
 800421c:	af04      	add	r7, sp, #16
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004224:	2300      	movs	r3, #0
 8004226:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8004228:	4b17      	ldr	r3, [pc, #92]	; (8004288 <VL53L0X_PerformRefSpadManagement+0x70>)
 800422a:	681c      	ldr	r4, [r3, #0]
 800422c:	f003 fc84 	bl	8007b38 <HAL_GetTick>
 8004230:	4603      	mov	r3, r0
 8004232:	461a      	mov	r2, r3
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <VL53L0X_PerformRefSpadManagement+0x74>)
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <VL53L0X_PerformRefSpadManagement+0x78>)
 800423c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004240:	4621      	mov	r1, r4
 8004242:	2001      	movs	r0, #1
 8004244:	f003 fbe6 	bl	8007a14 <trace_print_module_function>

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fa1f 	bl	8004690 <VL53L0X_perform_ref_spad_management>
 8004252:	4603      	mov	r3, r0
 8004254:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <VL53L0X_PerformRefSpadManagement+0x70>)
 8004258:	681c      	ldr	r4, [r3, #0]
 800425a:	f003 fc6d 	bl	8007b38 <HAL_GetTick>
 800425e:	4603      	mov	r3, r0
 8004260:	461a      	mov	r2, r3
 8004262:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004266:	9302      	str	r3, [sp, #8]
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <VL53L0X_PerformRefSpadManagement+0x74>)
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	9200      	str	r2, [sp, #0]
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <VL53L0X_PerformRefSpadManagement+0x7c>)
 8004270:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004274:	4621      	mov	r1, r4
 8004276:	2001      	movs	r0, #1
 8004278:	f003 fbcc 	bl	8007a14 <trace_print_module_function>

	return Status;
 800427c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004280:	4618      	mov	r0, r3
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd90      	pop	{r4, r7, pc}
 8004288:	200007b4 	.word	0x200007b4
 800428c:	0800ce0c 	.word	0x0800ce0c
 8004290:	0800c85c 	.word	0x0800c85c
 8004294:	0800c870 	.word	0x0800c870

08004298 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80042a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80042aa:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80042ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b0:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80042b2:	f107 0308 	add.w	r3, r7, #8
 80042b6:	461a      	mov	r2, r3
 80042b8:	2128      	movs	r1, #40	; 0x28
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fcc8 	bl	8001c50 <VL53L0X_RdWord>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80042c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11e      	bne.n	800430a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80042cc:	893b      	ldrh	r3, [r7, #8]
 80042ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80042d6:	893b      	ldrh	r3, [r7, #8]
 80042d8:	461a      	mov	r2, r3
 80042da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80042de:	429a      	cmp	r2, r3
 80042e0:	dd0b      	ble.n	80042fa <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80042e2:	893a      	ldrh	r2, [r7, #8]
 80042e4:	897b      	ldrh	r3, [r7, #10]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	461a      	mov	r2, r3
					* 250;
 80042ee:	23fa      	movs	r3, #250	; 0xfa
 80042f0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e007      	b.n	800430a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80042fa:	893b      	ldrh	r3, [r7, #8]
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	23fa      	movs	r3, #250	; 0xfa
 8004302:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004316:	b480      	push	{r7}
 8004318:	b08b      	sub	sp, #44	; 0x2c
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004324:	2308      	movs	r3, #8
 8004326:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	f04f 32ff 	mov.w	r2, #4294967295
 8004332:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	fbb3 f2f2 	udiv	r2, r3, r2
 8004346:	69b9      	ldr	r1, [r7, #24]
 8004348:	fb01 f202 	mul.w	r2, r1, r2
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
 8004354:	e030      	b.n	80043b8 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	4413      	add	r3, r2
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	429a      	cmp	r2, r3
 800436a:	d11e      	bne.n	80043aa <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800436c:	7ffa      	ldrb	r2, [r7, #31]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	fa42 f303 	asr.w	r3, r2, r3
 8004374:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800437a:	e016      	b.n	80043aa <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800437c:	7ffb      	ldrb	r3, [r7, #31]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <get_next_good_spad+0x88>
				success = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	fb03 f202 	mul.w	r2, r3, r2
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	4413      	add	r3, r2
 8004396:	461a      	mov	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	601a      	str	r2, [r3, #0]
				break;
 800439c:	e009      	b.n	80043b2 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800439e:	7ffb      	ldrb	r3, [r7, #31]
 80043a0:	085b      	lsrs	r3, r3, #1
 80043a2:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	3301      	adds	r3, #1
 80043a8:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3e4      	bcc.n	800437c <get_next_good_spad+0x66>
				coarseIndex++) {
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80043b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d202      	bcs.n	80043c6 <get_next_good_spad+0xb0>
 80043c0:	7fbb      	ldrb	r3, [r7, #30]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0c7      	beq.n	8004356 <get_next_good_spad+0x40>
		}
	}
}
 80043c6:	bf00      	nop
 80043c8:	372c      	adds	r7, #44	; 0x2c
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80043dc:	2301      	movs	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	099b      	lsrs	r3, r3, #6
 80043e4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80043e6:	4a07      	ldr	r2, [pc, #28]	; (8004404 <is_aperture+0x30>)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <is_aperture+0x22>
		isAperture = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	200007a4 	.word	0x200007a4

08004408 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004408:	b480      	push	{r7}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004414:	2300      	movs	r3, #0
 8004416:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004418:	2308      	movs	r3, #8
 800441a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	fbb3 f2f2 	udiv	r2, r3, r2
 800442e:	69b9      	ldr	r1, [r7, #24]
 8004430:	fb01 f202 	mul.w	r2, r1, r2
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004440:	23ce      	movs	r3, #206	; 0xce
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e010      	b.n	8004468 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4413      	add	r3, r2
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b25a      	sxtb	r2, r3
 8004450:	2101      	movs	r1, #1
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	b25b      	sxtb	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	b259      	sxtb	r1, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4413      	add	r3, r2
 8004464:	b2ca      	uxtb	r2, r1
 8004466:	701a      	strb	r2, [r3, #0]

	return status;
 8004468:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3724      	adds	r7, #36	; 0x24
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8004482:	2306      	movs	r3, #6
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	21b0      	movs	r1, #176	; 0xb0
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fd fad9 	bl	8001a40 <VL53L0X_WriteMulti>
 800448e:	4603      	mov	r3, r0
 8004490:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8004492:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80044a8:	2306      	movs	r3, #6
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	21b0      	movs	r1, #176	; 0xb0
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd faf6 	bl	8001aa0 <VL53L0X_ReadMulti>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80044b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	460b      	mov	r3, r1
 80044d2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80044da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044dc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80044de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80044e2:	2300      	movs	r3, #0
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e6:	e02b      	b.n	8004540 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80044e8:	f107 031c 	add.w	r3, r7, #28
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff10 	bl	8004316 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d103      	bne.n	8004506 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80044fe:	23ce      	movs	r3, #206	; 0xce
 8004500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004504:	e020      	b.n	8004548 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	461a      	mov	r2, r3
 800450a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450c:	4413      	add	r3, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ff60 	bl	80043d4 <is_aperture>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	7afb      	ldrb	r3, [r7, #11]
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800451e:	23ce      	movs	r3, #206	; 0xce
 8004520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004524:	e010      	b.n	8004548 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800452e:	6838      	ldr	r0, [r7, #0]
 8004530:	f7ff ff6a 	bl	8004408 <enable_spad_bit>
		currentSpad++;
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	3301      	adds	r3, #1
 8004538:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	3301      	adds	r3, #1
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004544:	429a      	cmp	r2, r3
 8004546:	d3cf      	bcc.n	80044e8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800454a:	6a3a      	ldr	r2, [r7, #32]
 800454c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800454e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff ff8d 	bl	8004478 <set_ref_spad_map>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004564:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004568:	2b00      	cmp	r3, #0
 800456a:	d121      	bne.n	80045b0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	4619      	mov	r1, r3
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff ff93 	bl	800449e <get_ref_spad_map>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8004582:	e011      	b.n	80045a8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	4413      	add	r3, r2
 800458a:	781a      	ldrb	r2, [r3, #0]
 800458c:	f107 0114 	add.w	r1, r7, #20
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	440b      	add	r3, r1
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d003      	beq.n	80045a2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800459a:	23ce      	movs	r3, #206	; 0xce
 800459c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80045a0:	e006      	b.n	80045b0 <enable_ref_spads+0xec>
			}
			i++;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	3301      	adds	r3, #1
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3e9      	bcc.n	8004584 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80045b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	; 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80045d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80045dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d107      	bne.n	80045f4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80045e4:	22c0      	movs	r2, #192	; 0xc0
 80045e6:	2101      	movs	r1, #1
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fd fa85 	bl	8001af8 <VL53L0X_WrByte>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80045f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d108      	bne.n	800460e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fb3e 	bl	8003c84 <VL53L0X_PerformSingleRangingMeasurement>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800460e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004612:	2b00      	cmp	r3, #0
 8004614:	d107      	bne.n	8004626 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004616:	2201      	movs	r2, #1
 8004618:	21ff      	movs	r1, #255	; 0xff
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd fa6c 	bl	8001af8 <VL53L0X_WrByte>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8004626:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800462a:	2b00      	cmp	r3, #0
 800462c:	d107      	bne.n	800463e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	21b6      	movs	r1, #182	; 0xb6
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fd fb0c 	bl	8001c50 <VL53L0X_RdWord>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800463e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004646:	2200      	movs	r2, #0
 8004648:	21ff      	movs	r1, #255	; 0xff
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd fa54 	bl	8001af8 <VL53L0X_WrByte>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004656:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800465a:	2b00      	cmp	r3, #0
 800465c:	d112      	bne.n	8004684 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800465e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004662:	461a      	mov	r2, r3
 8004664:	2101      	movs	r1, #1
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fd fa46 	bl	8001af8 <VL53L0X_WrByte>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8004672:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004680:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004684:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004688:	4618      	mov	r0, r3
 800468a:	3728      	adds	r7, #40	; 0x28
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b09d      	sub	sp, #116	; 0x74
 8004694:	af06      	add	r7, sp, #24
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800469c:	2300      	movs	r3, #0
 800469e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80046a2:	23b4      	movs	r3, #180	; 0xb4
 80046a4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80046a8:	2303      	movs	r3, #3
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80046ac:	232c      	movs	r3, #44	; 0x2c
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80046bc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80046c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80046ca:	2306      	movs	r3, #6
 80046cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80046f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80046fa:	e009      	b.n	8004710 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004700:	4413      	add	r3, r2
 8004702:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800470a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470c:	3301      	adds	r3, #1
 800470e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	429a      	cmp	r2, r3
 8004716:	d3f1      	bcc.n	80046fc <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004718:	2201      	movs	r2, #1
 800471a:	21ff      	movs	r1, #255	; 0xff
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7fd f9eb 	bl	8001af8 <VL53L0X_WrByte>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004728:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8004730:	2200      	movs	r2, #0
 8004732:	214f      	movs	r1, #79	; 0x4f
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7fd f9df 	bl	8001af8 <VL53L0X_WrByte>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004740:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004744:	2b00      	cmp	r3, #0
 8004746:	d107      	bne.n	8004758 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004748:	222c      	movs	r2, #44	; 0x2c
 800474a:	214e      	movs	r1, #78	; 0x4e
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7fd f9d3 	bl	8001af8 <VL53L0X_WrByte>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004758:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004760:	2200      	movs	r2, #0
 8004762:	21ff      	movs	r1, #255	; 0xff
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7fd f9c7 	bl	8001af8 <VL53L0X_WrByte>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004770:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004778:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800477c:	461a      	mov	r2, r3
 800477e:	21b6      	movs	r1, #182	; 0xb6
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7fd f9b9 	bl	8001af8 <VL53L0X_WrByte>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800478c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7fd f9ad 	bl	8001af8 <VL53L0X_WrByte>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80047a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80047ac:	f107 0210 	add.w	r2, r7, #16
 80047b0:	f107 0111 	add.w	r1, r7, #17
 80047b4:	2300      	movs	r3, #0
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fbbb 	bl	8004f32 <VL53L0X_perform_ref_calibration>
 80047bc:	4603      	mov	r3, r0
 80047be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80047c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d121      	bne.n	800480e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80047ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80047e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80047ea:	f107 0218 	add.w	r2, r7, #24
 80047ee:	9204      	str	r2, [sp, #16]
 80047f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047f6:	9202      	str	r2, [sp, #8]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4623      	mov	r3, r4
 8004800:	4602      	mov	r2, r0
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7ff fe5e 	bl	80044c4 <enable_ref_spads>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800480e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004812:	2b00      	cmp	r3, #0
 8004814:	d174      	bne.n	8004900 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800481a:	f107 0312 	add.w	r3, r7, #18
 800481e:	4619      	mov	r1, r3
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff fecb 	bl	80045bc <perform_ref_signal_measurement>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800482c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004830:	2b00      	cmp	r3, #0
 8004832:	d161      	bne.n	80048f8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004834:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004836:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004838:	429a      	cmp	r2, r3
 800483a:	d25d      	bcs.n	80048f8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800483c:	2300      	movs	r3, #0
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004840:	e009      	b.n	8004856 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004846:	4413      	add	r3, r2
 8004848:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004852:	3301      	adds	r3, #1
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
 8004856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	429a      	cmp	r2, r3
 800485c:	d3f1      	bcc.n	8004842 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800485e:	e002      	b.n	8004866 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004862:	3301      	adds	r3, #1
 8004864:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004866:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800486a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800486c:	4413      	add	r3, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fdb0 	bl	80043d4 <is_aperture>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800487a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	429a      	cmp	r2, r3
 8004880:	d3ee      	bcc.n	8004860 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004882:	2301      	movs	r3, #1
 8004884:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004888:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004896:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800489a:	f107 0218 	add.w	r2, r7, #24
 800489e:	9204      	str	r2, [sp, #16]
 80048a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a2:	9203      	str	r2, [sp, #12]
 80048a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048a6:	9202      	str	r2, [sp, #8]
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4623      	mov	r3, r4
 80048b0:	4602      	mov	r2, r0
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fe06 	bl	80044c4 <enable_ref_spads>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80048be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11b      	bne.n	80048fe <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80048ca:	f107 0312 	add.w	r3, r7, #18
 80048ce:	4619      	mov	r1, r3
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fe73 	bl	80045bc <perform_ref_signal_measurement>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80048dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10c      	bne.n	80048fe <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80048e4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80048e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d208      	bcs.n	80048fe <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80048f6:	e002      	b.n	80048fe <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048fc:	e000      	b.n	8004900 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80048fe:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004900:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004904:	2b00      	cmp	r3, #0
 8004906:	f040 80af 	bne.w	8004a68 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800490a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800490c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800490e:	429a      	cmp	r2, r3
 8004910:	f240 80aa 	bls.w	8004a68 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004916:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004924:	f107 031c 	add.w	r3, r7, #28
 8004928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492a:	4618      	mov	r0, r3
 800492c:	f007 f96e 	bl	800bc0c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004930:	8a7b      	ldrh	r3, [r7, #18]
 8004932:	461a      	mov	r2, r3
 8004934:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	bfb8      	it	lt
 800493c:	425b      	neglt	r3, r3
 800493e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004946:	e086      	b.n	8004a56 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800494e:	f107 0314 	add.w	r3, r7, #20
 8004952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004956:	f7ff fcde 	bl	8004316 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d103      	bne.n	800496a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004962:	23ce      	movs	r3, #206	; 0xce
 8004964:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004968:	e07e      	b.n	8004a68 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800496a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fd2e 	bl	80043d4 <is_aperture>
 8004978:	4603      	mov	r3, r0
 800497a:	461a      	mov	r2, r3
 800497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497e:	4293      	cmp	r3, r2
 8004980:	d003      	beq.n	800498a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004988:	e06e      	b.n	8004a68 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800498a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498c:	3301      	adds	r3, #1
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800499a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800499c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fd32 	bl	8004408 <enable_spad_bit>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80049aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10c      	bne.n	80049cc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80049b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b4:	3301      	adds	r3, #1
 80049b6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80049be:	4619      	mov	r1, r3
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fd59 	bl	8004478 <set_ref_spad_map>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80049cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d146      	bne.n	8004a62 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80049d4:	f107 0312 	add.w	r3, r7, #18
 80049d8:	4619      	mov	r1, r3
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff fdee 	bl	80045bc <perform_ref_signal_measurement>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80049e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d13b      	bne.n	8004a66 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80049ee:	8a7b      	ldrh	r3, [r7, #18]
 80049f0:	461a      	mov	r2, r3
 80049f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bfb8      	it	lt
 80049fa:	425b      	neglt	r3, r3
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80049fe:	8a7b      	ldrh	r3, [r7, #18]
 8004a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d21c      	bcs.n	8004a40 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d914      	bls.n	8004a38 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004a0e:	f107 031c 	add.w	r3, r7, #28
 8004a12:	4619      	mov	r1, r3
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fd2f 	bl	8004478 <set_ref_spad_map>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8004a26:	f107 011c 	add.w	r1, r7, #28
 8004a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f007 f8ed 	bl	800bc0c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	3b01      	subs	r3, #1
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3e:	e00a      	b.n	8004a56 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004a4a:	f107 031c 	add.w	r3, r7, #28
 8004a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a50:	4618      	mov	r0, r3
 8004a52:	f007 f8db 	bl	800bc0c <memcpy>
		while (!complete) {
 8004a56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f43f af74 	beq.w	8004948 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004a60:	e002      	b.n	8004a68 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004a66:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d115      	bne.n	8004a9c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a74:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004a7c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004a9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	375c      	adds	r7, #92	; 0x5c
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}

08004aa8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b093      	sub	sp, #76	; 0x4c
 8004aac:	af06      	add	r7, sp, #24
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004ac0:	23b4      	movs	r3, #180	; 0xb4
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004ac6:	2306      	movs	r3, #6
 8004ac8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004aca:	232c      	movs	r3, #44	; 0x2c
 8004acc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004ace:	2201      	movs	r2, #1
 8004ad0:	21ff      	movs	r1, #255	; 0xff
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7fd f810 	bl	8001af8 <VL53L0X_WrByte>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004ade:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d107      	bne.n	8004af6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	214f      	movs	r1, #79	; 0x4f
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7fd f804 	bl	8001af8 <VL53L0X_WrByte>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004af6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d107      	bne.n	8004b0e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004afe:	222c      	movs	r2, #44	; 0x2c
 8004b00:	214e      	movs	r1, #78	; 0x4e
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7fc fff8 	bl	8001af8 <VL53L0X_WrByte>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004b0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004b16:	2200      	movs	r2, #0
 8004b18:	21ff      	movs	r1, #255	; 0xff
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7fc ffec 	bl	8001af8 <VL53L0X_WrByte>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004b26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b32:	461a      	mov	r2, r3
 8004b34:	21b6      	movs	r1, #182	; 0xb6
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7fc ffde 	bl	8001af8 <VL53L0X_WrByte>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
 8004b46:	e009      	b.n	8004b5c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	3301      	adds	r3, #1
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d3f1      	bcc.n	8004b48 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d011      	beq.n	8004b8e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004b6a:	e002      	b.n	8004b72 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	3301      	adds	r3, #1
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004b72:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	4413      	add	r3, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fc2a 	bl	80043d4 <is_aperture>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <VL53L0X_set_reference_spads+0xe6>
 8004b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d3ee      	bcc.n	8004b6c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b9e:	79f9      	ldrb	r1, [r7, #7]
 8004ba0:	f107 0214 	add.w	r2, r7, #20
 8004ba4:	9204      	str	r2, [sp, #16]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	9203      	str	r2, [sp, #12]
 8004baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bac:	9202      	str	r2, [sp, #8]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff fc83 	bl	80044c4 <enable_ref_spads>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004bc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10c      	bne.n	8004be6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	79fa      	ldrb	r2, [r7, #7]
 8004be2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004be6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3734      	adds	r7, #52	; 0x34
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd90      	pop	{r4, r7, pc}

08004bf2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	2100      	movs	r1, #0
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc ff6e 	bl	8001af8 <VL53L0X_WrByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f9bf 	bl	8004fac <VL53L0X_measurement_poll_for_completion>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d105      	bne.n	8004c46 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fa31 	bl	80040a4 <VL53L0X_ClearInterruptMask>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2100      	movs	r1, #0
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc ff50 	bl	8001af8 <VL53L0X_WrByte>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	4603      	mov	r3, r0
 8004c78:	70fb      	strb	r3, [r7, #3]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70bb      	strb	r3, [r7, #2]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	21ff      	movs	r1, #255	; 0xff
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc ff32 	bl	8001af8 <VL53L0X_WrByte>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461a      	mov	r2, r3
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc ff28 	bl	8001af8 <VL53L0X_WrByte>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461a      	mov	r2, r3
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	21ff      	movs	r1, #255	; 0xff
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc ff1e 	bl	8001af8 <VL53L0X_WrByte>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01e      	beq.n	8004d0a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004ccc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	21cb      	movs	r1, #203	; 0xcb
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7fc ff8f 	bl	8001bfc <VL53L0X_RdByte>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02a      	beq.n	8004d46 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004cf0:	f107 030e 	add.w	r3, r7, #14
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	21ee      	movs	r1, #238	; 0xee
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fc ff7f 	bl	8001bfc <VL53L0X_RdByte>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	73fb      	strb	r3, [r7, #15]
 8004d08:	e01d      	b.n	8004d46 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004d0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004d12:	78bb      	ldrb	r3, [r7, #2]
 8004d14:	461a      	mov	r2, r3
 8004d16:	21cb      	movs	r1, #203	; 0xcb
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fc feed 	bl	8001af8 <VL53L0X_WrByte>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461a      	mov	r2, r3
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004d28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004d30:	787b      	ldrb	r3, [r7, #1]
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	21ee      	movs	r1, #238	; 0xee
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc ff2c 	bl	8001b94 <VL53L0X_UpdateByte>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	461a      	mov	r2, r3
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004d46:	2201      	movs	r2, #1
 8004d48:	21ff      	movs	r1, #255	; 0xff
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc fed4 	bl	8001af8 <VL53L0X_WrByte>
 8004d50:	4603      	mov	r3, r0
 8004d52:	461a      	mov	r2, r3
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc feca 	bl	8001af8 <VL53L0X_WrByte>
 8004d64:	4603      	mov	r3, r0
 8004d66:	461a      	mov	r2, r3
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	21ff      	movs	r1, #255	; 0xff
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc fec0 	bl	8001af8 <VL53L0X_WrByte>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8004d82:	7bbb      	ldrb	r3, [r7, #14]
 8004d84:	f023 0310 	bic.w	r3, r3, #16
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	701a      	strb	r2, [r3, #0]

	return Status;
 8004d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b08a      	sub	sp, #40	; 0x28
 8004d9e:	af04      	add	r7, sp, #16
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	4611      	mov	r1, r2
 8004da6:	461a      	mov	r2, r3
 8004da8:	460b      	mov	r3, r1
 8004daa:	71fb      	strb	r3, [r7, #7]
 8004dac:	4613      	mov	r3, r2
 8004dae:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004dc4:	79bb      	ldrb	r3, [r7, #6]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004dd0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7fc fe8e 	bl	8001af8 <VL53L0X_WrByte>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004de8:	2140      	movs	r1, #64	; 0x40
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff ff01 	bl	8004bf2 <VL53L0X_perform_single_ref_calibration>
 8004df0:	4603      	mov	r3, r0
 8004df2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d115      	bne.n	8004e28 <VL53L0X_perform_vhv_calibration+0x8e>
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d112      	bne.n	8004e28 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004e02:	7d39      	ldrb	r1, [r7, #20]
 8004e04:	7d7a      	ldrb	r2, [r7, #21]
 8004e06:	2300      	movs	r3, #0
 8004e08:	9303      	str	r3, [sp, #12]
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	9302      	str	r3, [sp, #8]
 8004e0e:	f107 0313 	add.w	r3, r7, #19
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff ff23 	bl	8004c68 <VL53L0X_ref_calibration_io>
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]
 8004e26:	e002      	b.n	8004e2e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d112      	bne.n	8004e5c <VL53L0X_perform_vhv_calibration+0xc2>
 8004e36:	79bb      	ldrb	r3, [r7, #6]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00f      	beq.n	8004e5c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e3c:	7dbb      	ldrb	r3, [r7, #22]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2101      	movs	r1, #1
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7fc fe58 	bl	8001af8 <VL53L0X_WrByte>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	7dba      	ldrb	r2, [r7, #22]
 8004e58:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4611      	mov	r1, r2
 8004e74:	461a      	mov	r2, r3
 8004e76:	460b      	mov	r3, r1
 8004e78:	71fb      	strb	r3, [r7, #7]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004e86:	2300      	movs	r3, #0
 8004e88:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004e8e:	79bb      	ldrb	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004e9a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7fc fe29 	bl	8001af8 <VL53L0X_WrByte>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d105      	bne.n	8004ebe <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fe9c 	bl	8004bf2 <VL53L0X_perform_single_ref_calibration>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d115      	bne.n	8004ef2 <VL53L0X_perform_phase_calibration+0x8a>
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d112      	bne.n	8004ef2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004ecc:	7d39      	ldrb	r1, [r7, #20]
 8004ece:	7d7a      	ldrb	r2, [r7, #21]
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	9303      	str	r3, [sp, #12]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	f107 0313 	add.w	r3, r7, #19
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff febe 	bl	8004c68 <VL53L0X_ref_calibration_io>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]
 8004ef0:	e002      	b.n	8004ef8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d112      	bne.n	8004f26 <VL53L0X_perform_phase_calibration+0xbe>
 8004f00:	79bb      	ldrb	r3, [r7, #6]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00f      	beq.n	8004f26 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f06:	7dbb      	ldrb	r3, [r7, #22]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7fc fdf3 	bl	8001af8 <VL53L0X_WrByte>
 8004f12:	4603      	mov	r3, r0
 8004f14:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	7dba      	ldrb	r2, [r7, #22]
 8004f22:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b086      	sub	sp, #24
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004f4e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	2300      	movs	r3, #0
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff ff1f 	bl	8004d9a <VL53L0X_perform_vhv_calibration>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff ff7a 	bl	8004e68 <VL53L0X_perform_phase_calibration>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8004f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10f      	bne.n	8004fa0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004f80:	7dbb      	ldrb	r3, [r7, #22]
 8004f82:	461a      	mov	r2, r3
 8004f84:	2101      	movs	r1, #1
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7fc fdb6 	bl	8001af8 <VL53L0X_WrByte>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d103      	bne.n	8004fa0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	7dba      	ldrb	r2, [r7, #22]
 8004f9c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8004fa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b08b      	sub	sp, #44	; 0x2c
 8004fb0:	af04      	add	r7, sp, #16
 8004fb2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8004fbe:	681c      	ldr	r4, [r3, #0]
 8004fc0:	f002 fdba 	bl	8007b38 <HAL_GetTick>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4b23      	ldr	r3, [pc, #140]	; (8005058 <VL53L0X_measurement_poll_for_completion+0xac>)
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	9200      	str	r2, [sp, #0]
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <VL53L0X_measurement_poll_for_completion+0xb0>)
 8004fd0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f002 fd1c 	bl	8007a14 <trace_print_module_function>

	LoopNb = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004fe0:	f107 030f 	add.w	r3, r7, #15
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fe fc90 	bl	800390c <VL53L0X_GetMeasurementDataReady>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d00f      	beq.n	800501e <VL53L0X_measurement_poll_for_completion+0x72>
			break; /* done note that status == 0 */

		LoopNb++;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3301      	adds	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800500a:	d302      	bcc.n	8005012 <VL53L0X_measurement_poll_for_completion+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800500c:	23f9      	movs	r3, #249	; 0xf9
 800500e:	75fb      	strb	r3, [r7, #23]
			break;
 8005010:	e006      	b.n	8005020 <VL53L0X_measurement_poll_for_completion+0x74>
		}

		VL53L0X_PollingDelay(Dev);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fc fe90 	bl	8001d38 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005018:	e7e2      	b.n	8004fe0 <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* the error is set */
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <VL53L0X_measurement_poll_for_completion+0x74>
			break; /* done note that status == 0 */
 800501e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <VL53L0X_measurement_poll_for_completion+0xa8>)
 8005022:	681c      	ldr	r4, [r3, #0]
 8005024:	f002 fd88 	bl	8007b38 <HAL_GetTick>
 8005028:	4603      	mov	r3, r0
 800502a:	461a      	mov	r2, r3
 800502c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005030:	9302      	str	r3, [sp, #8]
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <VL53L0X_measurement_poll_for_completion+0xac>)
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	9200      	str	r2, [sp, #0]
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <VL53L0X_measurement_poll_for_completion+0xb4>)
 800503a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800503e:	4621      	mov	r1, r4
 8005040:	2001      	movs	r0, #1
 8005042:	f002 fce7 	bl	8007a14 <trace_print_module_function>

	return Status;
 8005046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800504a:	4618      	mov	r0, r3
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd90      	pop	{r4, r7, pc}
 8005052:	bf00      	nop
 8005054:	200007b4 	.word	0x200007b4
 8005058:	0800ce30 	.word	0x0800ce30
 800505c:	0800c894 	.word	0x0800c894
 8005060:	0800c8a8 	.word	0x0800c8a8

08005064 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	3301      	adds	r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800507c:	7bfb      	ldrb	r3, [r7, #15]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	4603      	mov	r3, r0
 8005092:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	b2db      	uxtb	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80050bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050c0:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80050c2:	e002      	b.n	80050ca <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d8f8      	bhi.n	80050c4 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80050d2:	e017      	b.n	8005104 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	4413      	add	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d30b      	bcc.n	80050f8 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4413      	add	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e002      	b.n	80050fe <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	089b      	lsrs	r3, r3, #2
 8005102:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e4      	bne.n	80050d4 <VL53L0X_isqrt+0x24>
	}

	return res;
 800510a:	68fb      	ldr	r3, [r7, #12]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b08b      	sub	sp, #44	; 0x2c
 800511c:	af04      	add	r7, sp, #16
 800511e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005120:	2300      	movs	r3, #0
 8005122:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8005124:	4b2f      	ldr	r3, [pc, #188]	; (80051e4 <VL53L0X_device_read_strobe+0xcc>)
 8005126:	681c      	ldr	r4, [r3, #0]
 8005128:	f002 fd06 	bl	8007b38 <HAL_GetTick>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <VL53L0X_device_read_strobe+0xd0>)
 8005132:	9301      	str	r3, [sp, #4]
 8005134:	9200      	str	r2, [sp, #0]
 8005136:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <VL53L0X_device_read_strobe+0xd4>)
 8005138:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800513c:	4621      	mov	r1, r4
 800513e:	2001      	movs	r0, #1
 8005140:	f002 fc68 	bl	8007a14 <trace_print_module_function>

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005144:	2200      	movs	r2, #0
 8005146:	2183      	movs	r1, #131	; 0x83
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7fc fcd5 	bl	8001af8 <VL53L0X_WrByte>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	4313      	orrs	r3, r2
 8005156:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005158:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11e      	bne.n	800519e <VL53L0X_device_read_strobe+0x86>
		LoopNb = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005164:	f107 030f 	add.w	r3, r7, #15
 8005168:	461a      	mov	r2, r3
 800516a:	2183      	movs	r1, #131	; 0x83
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fc fd45 	bl	8001bfc <VL53L0X_RdByte>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <VL53L0X_device_read_strobe+0x7a>
 800517c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <VL53L0X_device_read_strobe+0x7a>
					break;

			LoopNb = LoopNb + 1;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	3301      	adds	r3, #1
 8005188:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005190:	d3e8      	bcc.n	8005164 <VL53L0X_device_read_strobe+0x4c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005198:	d301      	bcc.n	800519e <VL53L0X_device_read_strobe+0x86>
			Status = VL53L0X_ERROR_TIME_OUT;
 800519a:	23f9      	movs	r3, #249	; 0xf9
 800519c:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800519e:	2201      	movs	r2, #1
 80051a0:	2183      	movs	r1, #131	; 0x83
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fca8 	bl	8001af8 <VL53L0X_WrByte>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <VL53L0X_device_read_strobe+0xcc>)
 80051b4:	681c      	ldr	r4, [r3, #0]
 80051b6:	f002 fcbf 	bl	8007b38 <HAL_GetTick>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051c2:	9302      	str	r3, [sp, #8]
 80051c4:	4b08      	ldr	r3, [pc, #32]	; (80051e8 <VL53L0X_device_read_strobe+0xd0>)
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	9200      	str	r2, [sp, #0]
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <VL53L0X_device_read_strobe+0xd8>)
 80051cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80051d0:	4621      	mov	r1, r4
 80051d2:	2001      	movs	r0, #1
 80051d4:	f002 fc1e 	bl	8007a14 <trace_print_module_function>
	return Status;
 80051d8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80051dc:	4618      	mov	r0, r3
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd90      	pop	{r4, r7, pc}
 80051e4:	200007b4 	.word	0x200007b4
 80051e8:	0800ce58 	.word	0x0800ce58
 80051ec:	0800c894 	.word	0x0800c894
 80051f0:	0800c8a8 	.word	0x0800c8a8

080051f4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b09d      	sub	sp, #116	; 0x74
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005224:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005228:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800522a:	2300      	movs	r3, #0
 800522c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
	int i;


	LOG_FUNCTION_START("");
 8005236:	4b9b      	ldr	r3, [pc, #620]	; (80054a4 <VL53L0X_get_info_from_device+0x2b0>)
 8005238:	681c      	ldr	r4, [r3, #0]
 800523a:	f002 fc7d 	bl	8007b38 <HAL_GetTick>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	4b99      	ldr	r3, [pc, #612]	; (80054a8 <VL53L0X_get_info_from_device+0x2b4>)
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	9200      	str	r2, [sp, #0]
 8005248:	4b98      	ldr	r3, [pc, #608]	; (80054ac <VL53L0X_get_info_from_device+0x2b8>)
 800524a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800524e:	4621      	mov	r1, r4
 8005250:	2001      	movs	r0, #1
 8005252:	f002 fbdf 	bl	8007a14 <trace_print_module_function>

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800525c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005260:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005264:	2b07      	cmp	r3, #7
 8005266:	f000 8410 	beq.w	8005a8a <VL53L0X_get_info_from_device+0x896>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800526a:	2201      	movs	r2, #1
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc fc42 	bl	8001af8 <VL53L0X_WrByte>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800527c:	4313      	orrs	r3, r2
 800527e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005282:	2201      	movs	r2, #1
 8005284:	21ff      	movs	r1, #255	; 0xff
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fc fc36 	bl	8001af8 <VL53L0X_WrByte>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005294:	4313      	orrs	r3, r2
 8005296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800529a:	2200      	movs	r2, #0
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fc fc2a 	bl	8001af8 <VL53L0X_WrByte>
 80052a4:	4603      	mov	r3, r0
 80052a6:	461a      	mov	r2, r3
 80052a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80052b2:	2206      	movs	r2, #6
 80052b4:	21ff      	movs	r1, #255	; 0xff
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc fc1e 	bl	8001af8 <VL53L0X_WrByte>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80052ca:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80052ce:	461a      	mov	r2, r3
 80052d0:	2183      	movs	r1, #131	; 0x83
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fc92 	bl	8001bfc <VL53L0X_RdByte>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80052e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052ea:	f043 0304 	orr.w	r3, r3, #4
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	2183      	movs	r1, #131	; 0x83
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fc fbff 	bl	8001af8 <VL53L0X_WrByte>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005302:	4313      	orrs	r3, r2
 8005304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005308:	2207      	movs	r2, #7
 800530a:	21ff      	movs	r1, #255	; 0xff
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fc fbf3 	bl	8001af8 <VL53L0X_WrByte>
 8005312:	4603      	mov	r3, r0
 8005314:	461a      	mov	r2, r3
 8005316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800531a:	4313      	orrs	r3, r2
 800531c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005320:	2201      	movs	r2, #1
 8005322:	2181      	movs	r1, #129	; 0x81
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fc fbe7 	bl	8001af8 <VL53L0X_WrByte>
 800532a:	4603      	mov	r3, r0
 800532c:	461a      	mov	r2, r3
 800532e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005332:	4313      	orrs	r3, r2
 8005334:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fc fcfd 	bl	8001d38 <VL53L0X_PollingDelay>
 800533e:	4603      	mov	r3, r0
 8005340:	461a      	mov	r2, r3
 8005342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005346:	4313      	orrs	r3, r2
 8005348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800534c:	2201      	movs	r2, #1
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7fc fbd1 	bl	8001af8 <VL53L0X_WrByte>
 8005356:	4603      	mov	r3, r0
 8005358:	461a      	mov	r2, r3
 800535a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800535e:	4313      	orrs	r3, r2
 8005360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80a0 	beq.w	80054b0 <VL53L0X_get_info_from_device+0x2bc>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005370:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005374:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005378:	2b00      	cmp	r3, #0
 800537a:	f040 8099 	bne.w	80054b0 <VL53L0X_get_info_from_device+0x2bc>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800537e:	226b      	movs	r2, #107	; 0x6b
 8005380:	2194      	movs	r1, #148	; 0x94
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc fbb8 	bl	8001af8 <VL53L0X_WrByte>
 8005388:	4603      	mov	r3, r0
 800538a:	461a      	mov	r2, r3
 800538c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005390:	4313      	orrs	r3, r2
 8005392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff febe 	bl	8005118 <VL53L0X_device_read_strobe>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80053aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053ae:	461a      	mov	r2, r3
 80053b0:	2190      	movs	r1, #144	; 0x90
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc fc84 	bl	8001cc0 <VL53L0X_RdDWord>
 80053b8:	4603      	mov	r3, r0
 80053ba:	461a      	mov	r2, r3
 80053bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	0bdb      	lsrs	r3, r3, #15
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	2194      	movs	r1, #148	; 0x94
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fc fb86 	bl	8001af8 <VL53L0X_WrByte>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fe8c 	bl	8005118 <VL53L0X_device_read_strobe>
 8005400:	4603      	mov	r3, r0
 8005402:	461a      	mov	r2, r3
 8005404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005408:	4313      	orrs	r3, r2
 800540a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800540e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005412:	461a      	mov	r2, r3
 8005414:	2190      	movs	r1, #144	; 0x90
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc fc52 	bl	8001cc0 <VL53L0X_RdDWord>
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005424:	4313      	orrs	r3, r2
 8005426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	0e1b      	lsrs	r3, r3, #24
 800542e:	b2db      	uxtb	r3, r3
 8005430:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	b2db      	uxtb	r3, r3
 8005438:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	b2db      	uxtb	r3, r3
 8005440:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	b2db      	uxtb	r3, r3
 8005446:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005448:	2225      	movs	r2, #37	; 0x25
 800544a:	2194      	movs	r1, #148	; 0x94
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fc fb53 	bl	8001af8 <VL53L0X_WrByte>
 8005452:	4603      	mov	r3, r0
 8005454:	461a      	mov	r2, r3
 8005456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800545a:	4313      	orrs	r3, r2
 800545c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fe59 	bl	8005118 <VL53L0X_device_read_strobe>
 8005466:	4603      	mov	r3, r0
 8005468:	461a      	mov	r2, r3
 800546a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800546e:	4313      	orrs	r3, r2
 8005470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005478:	461a      	mov	r2, r3
 800547a:	2190      	movs	r1, #144	; 0x90
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fc fc1f 	bl	8001cc0 <VL53L0X_RdDWord>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800548a:	4313      	orrs	r3, r2
 800548c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	0e1b      	lsrs	r3, r3, #24
 8005494:	b2db      	uxtb	r3, r3
 8005496:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	b2db      	uxtb	r3, r3
 800549e:	737b      	strb	r3, [r7, #13]
 80054a0:	e006      	b.n	80054b0 <VL53L0X_get_info_from_device+0x2bc>
 80054a2:	bf00      	nop
 80054a4:	200007b4 	.word	0x200007b4
 80054a8:	0800ce74 	.word	0x0800ce74
 80054ac:	0800c894 	.word	0x0800c894
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8189 	beq.w	80057ce <VL53L0X_get_info_from_device+0x5da>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80054bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054c0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 8182 	bne.w	80057ce <VL53L0X_get_info_from_device+0x5da>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80054ca:	2202      	movs	r2, #2
 80054cc:	2194      	movs	r1, #148	; 0x94
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fc fb12 	bl	8001af8 <VL53L0X_WrByte>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054dc:	4313      	orrs	r3, r2
 80054de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fe18 	bl	8005118 <VL53L0X_device_read_strobe>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80054f6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80054fa:	461a      	mov	r2, r3
 80054fc:	2190      	movs	r1, #144	; 0x90
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc fb7c 	bl	8001bfc <VL53L0X_RdByte>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800550c:	4313      	orrs	r3, r2
 800550e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005512:	227b      	movs	r2, #123	; 0x7b
 8005514:	2194      	movs	r1, #148	; 0x94
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc faee 	bl	8001af8 <VL53L0X_WrByte>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005524:	4313      	orrs	r3, r2
 8005526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff fdf4 	bl	8005118 <VL53L0X_device_read_strobe>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005538:	4313      	orrs	r3, r2
 800553a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800553e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005542:	461a      	mov	r2, r3
 8005544:	2190      	movs	r1, #144	; 0x90
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc fb58 	bl	8001bfc <VL53L0X_RdByte>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005554:	4313      	orrs	r3, r2
 8005556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800555a:	2277      	movs	r2, #119	; 0x77
 800555c:	2194      	movs	r1, #148	; 0x94
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fc faca 	bl	8001af8 <VL53L0X_WrByte>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800556c:	4313      	orrs	r3, r2
 800556e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fdd0 	bl	8005118 <VL53L0X_device_read_strobe>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005580:	4313      	orrs	r3, r2
 8005582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800558a:	461a      	mov	r2, r3
 800558c:	2190      	movs	r1, #144	; 0x90
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc fb96 	bl	8001cc0 <VL53L0X_RdDWord>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800559c:	4313      	orrs	r3, r2
 800559e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	0e5b      	lsrs	r3, r3, #25
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	0c9b      	lsrs	r3, r3, #18
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	0adb      	lsrs	r3, r3, #11
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	091b      	lsrs	r3, r3, #4
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80055ec:	2278      	movs	r2, #120	; 0x78
 80055ee:	2194      	movs	r1, #148	; 0x94
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fc fa81 	bl	8001af8 <VL53L0X_WrByte>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055fe:	4313      	orrs	r3, r2
 8005600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff fd87 	bl	8005118 <VL53L0X_device_read_strobe>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005612:	4313      	orrs	r3, r2
 8005614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800561c:	461a      	mov	r2, r3
 800561e:	2190      	movs	r1, #144	; 0x90
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fc fb4d 	bl	8001cc0 <VL53L0X_RdDWord>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800562e:	4313      	orrs	r3, r2
 8005630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	0f5b      	lsrs	r3, r3, #29
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005640:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005644:	4413      	add	r3, r2
 8005646:	b2db      	uxtb	r3, r3
 8005648:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	0d9b      	lsrs	r3, r3, #22
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005654:	b2db      	uxtb	r3, r3
 8005656:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	0bdb      	lsrs	r3, r3, #15
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005662:	b2db      	uxtb	r3, r3
 8005664:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005670:	b2db      	uxtb	r3, r3
 8005672:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	085b      	lsrs	r3, r3, #1
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	b2db      	uxtb	r3, r3
 8005680:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	b2db      	uxtb	r3, r3
 8005686:	019b      	lsls	r3, r3, #6
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005694:	2279      	movs	r2, #121	; 0x79
 8005696:	2194      	movs	r1, #148	; 0x94
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fc fa2d 	bl	8001af8 <VL53L0X_WrByte>
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fd33 	bl	8005118 <VL53L0X_device_read_strobe>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80056c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056c4:	461a      	mov	r2, r3
 80056c6:	2190      	movs	r1, #144	; 0x90
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7fc faf9 	bl	8001cc0 <VL53L0X_RdDWord>
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	0e9b      	lsrs	r3, r3, #26
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80056e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056ec:	4413      	add	r3, r2
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	0cdb      	lsrs	r3, r3, #19
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	0b1b      	lsrs	r3, r3, #12
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570a:	b2db      	uxtb	r3, r3
 800570c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005718:	b2db      	uxtb	r3, r3
 800571a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	b2db      	uxtb	r3, r3
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800572e:	227a      	movs	r2, #122	; 0x7a
 8005730:	2194      	movs	r1, #148	; 0x94
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fc f9e0 	bl	8001af8 <VL53L0X_WrByte>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005740:	4313      	orrs	r3, r2
 8005742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fce6 	bl	8005118 <VL53L0X_device_read_strobe>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005754:	4313      	orrs	r3, r2
 8005756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800575a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800575e:	461a      	mov	r2, r3
 8005760:	2190      	movs	r1, #144	; 0x90
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fc faac 	bl	8001cc0 <VL53L0X_RdDWord>
 8005768:	4603      	mov	r3, r0
 800576a:	461a      	mov	r2, r3
 800576c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005770:	4313      	orrs	r3, r2
 8005772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	0f9b      	lsrs	r3, r3, #30
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005780:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005782:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005786:	4413      	add	r3, r2
 8005788:	b2db      	uxtb	r3, r3
 800578a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	0ddb      	lsrs	r3, r3, #23
 8005790:	b2db      	uxtb	r3, r3
 8005792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005796:	b2db      	uxtb	r3, r3
 8005798:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	0a5b      	lsrs	r3, r3, #9
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	089b      	lsrs	r3, r3, #2
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80057c8:	2300      	movs	r3, #0
 80057ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80f1 	beq.w	80059bc <VL53L0X_get_info_from_device+0x7c8>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80057da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057de:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 80ea 	bne.w	80059bc <VL53L0X_get_info_from_device+0x7c8>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80057e8:	227b      	movs	r2, #123	; 0x7b
 80057ea:	2194      	movs	r1, #148	; 0x94
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7fc f983 	bl	8001af8 <VL53L0X_WrByte>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fc89 	bl	8005118 <VL53L0X_device_read_strobe>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800580e:	4313      	orrs	r3, r2
 8005810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005818:	461a      	mov	r2, r3
 800581a:	2190      	movs	r1, #144	; 0x90
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fc fa4f 	bl	8001cc0 <VL53L0X_RdDWord>
 8005822:	4603      	mov	r3, r0
 8005824:	461a      	mov	r2, r3
 8005826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800582a:	4313      	orrs	r3, r2
 800582c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005830:	227c      	movs	r2, #124	; 0x7c
 8005832:	2194      	movs	r1, #148	; 0x94
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fc f95f 	bl	8001af8 <VL53L0X_WrByte>
 800583a:	4603      	mov	r3, r0
 800583c:	461a      	mov	r2, r3
 800583e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005842:	4313      	orrs	r3, r2
 8005844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff fc65 	bl	8005118 <VL53L0X_device_read_strobe>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005856:	4313      	orrs	r3, r2
 8005858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800585c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005860:	461a      	mov	r2, r3
 8005862:	2190      	movs	r1, #144	; 0x90
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fc fa2b 	bl	8001cc0 <VL53L0X_RdDWord>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005872:	4313      	orrs	r3, r2
 8005874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005878:	2273      	movs	r2, #115	; 0x73
 800587a:	2194      	movs	r1, #148	; 0x94
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fc f93b 	bl	8001af8 <VL53L0X_WrByte>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800588a:	4313      	orrs	r3, r2
 800588c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fc41 	bl	8005118 <VL53L0X_device_read_strobe>
 8005896:	4603      	mov	r3, r0
 8005898:	461a      	mov	r2, r3
 800589a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800589e:	4313      	orrs	r3, r2
 80058a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80058a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058a8:	461a      	mov	r2, r3
 80058aa:	2190      	movs	r1, #144	; 0x90
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7fc fa07 	bl	8001cc0 <VL53L0X_RdDWord>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80058c8:	2274      	movs	r2, #116	; 0x74
 80058ca:	2194      	movs	r1, #148	; 0x94
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fc f913 	bl	8001af8 <VL53L0X_WrByte>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058da:	4313      	orrs	r3, r2
 80058dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fc19 	bl	8005118 <VL53L0X_device_read_strobe>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80058f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058f8:	461a      	mov	r2, r3
 80058fa:	2190      	movs	r1, #144	; 0x90
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fc f9df 	bl	8001cc0 <VL53L0X_RdDWord>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800590a:	4313      	orrs	r3, r2
 800590c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005916:	4313      	orrs	r3, r2
 8005918:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800591a:	2275      	movs	r2, #117	; 0x75
 800591c:	2194      	movs	r1, #148	; 0x94
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fc f8ea 	bl	8001af8 <VL53L0X_WrByte>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800592c:	4313      	orrs	r3, r2
 800592e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fbf0 	bl	8005118 <VL53L0X_device_read_strobe>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005940:	4313      	orrs	r3, r2
 8005942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800594a:	461a      	mov	r2, r3
 800594c:	2190      	movs	r1, #144	; 0x90
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fc f9b6 	bl	8001cc0 <VL53L0X_RdDWord>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800595c:	4313      	orrs	r3, r2
 800595e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005966:	b29b      	uxth	r3, r3
 8005968:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800596a:	2276      	movs	r2, #118	; 0x76
 800596c:	2194      	movs	r1, #148	; 0x94
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc f8c2 	bl	8001af8 <VL53L0X_WrByte>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800597c:	4313      	orrs	r3, r2
 800597e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff fbc8 	bl	8005118 <VL53L0X_device_read_strobe>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005990:	4313      	orrs	r3, r2
 8005992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005996:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800599a:	461a      	mov	r2, r3
 800599c:	2190      	movs	r1, #144	; 0x90
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fc f98e 	bl	8001cc0 <VL53L0X_RdDWord>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80059b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059b8:	4313      	orrs	r3, r2
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80059bc:	2200      	movs	r2, #0
 80059be:	2181      	movs	r1, #129	; 0x81
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fc f899 	bl	8001af8 <VL53L0X_WrByte>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
 80059ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80059d4:	2206      	movs	r2, #6
 80059d6:	21ff      	movs	r1, #255	; 0xff
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fc f88d 	bl	8001af8 <VL53L0X_WrByte>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80059ec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80059f0:	461a      	mov	r2, r3
 80059f2:	2183      	movs	r1, #131	; 0x83
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fc f901 	bl	8001bfc <VL53L0X_RdByte>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005a08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	2183      	movs	r1, #131	; 0x83
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc f86e 	bl	8001af8 <VL53L0X_WrByte>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	21ff      	movs	r1, #255	; 0xff
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fc f862 	bl	8001af8 <VL53L0X_WrByte>
 8005a34:	4603      	mov	r3, r0
 8005a36:	461a      	mov	r2, r3
 8005a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005a42:	2201      	movs	r2, #1
 8005a44:	2100      	movs	r1, #0
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc f856 	bl	8001af8 <VL53L0X_WrByte>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	21ff      	movs	r1, #255	; 0xff
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc f84a 	bl	8001af8 <VL53L0X_WrByte>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005a72:	2200      	movs	r2, #0
 8005a74:	2180      	movs	r1, #128	; 0x80
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fc f83e 	bl	8001af8 <VL53L0X_WrByte>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005a8a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 808f 	bne.w	8005bb2 <VL53L0X_get_info_from_device+0x9be>
 8005a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a98:	2b07      	cmp	r3, #7
 8005a9a:	f000 808a 	beq.w	8005bb2 <VL53L0X_get_info_from_device+0x9be>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d024      	beq.n	8005af2 <VL53L0X_get_info_from_device+0x8fe>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005aac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11e      	bne.n	8005af2 <VL53L0X_get_info_from_device+0x8fe>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005aba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005ac4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005ac8:	2300      	movs	r3, #0
 8005aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005acc:	e00e      	b.n	8005aec <VL53L0X_get_info_from_device+0x8f8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005ace:	f107 0208 	add.w	r2, r7, #8
 8005ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad4:	4413      	add	r3, r2
 8005ad6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	3301      	adds	r3, #1
 8005aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	2b05      	cmp	r3, #5
 8005af0:	dded      	ble.n	8005ace <VL53L0X_get_info_from_device+0x8da>
			}
		}

		if (((option & 2) == 2) &&
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d018      	beq.n	8005b2e <VL53L0X_get_info_from_device+0x93a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005afc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b00:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d112      	bne.n	8005b2e <VL53L0X_get_info_from_device+0x93a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b08:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	33f3      	adds	r3, #243	; 0xf3
 8005b20:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005b22:	f107 0310 	add.w	r3, r7, #16
 8005b26:	4619      	mov	r1, r3
 8005b28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b2a:	f006 f8a5 	bl	800bc78 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d030      	beq.n	8005b9a <VL53L0X_get_info_from_device+0x9a6>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005b38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b3c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d12a      	bne.n	8005b9a <VL53L0X_get_info_from_device+0x9a6>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b56:	025b      	lsls	r3, r3, #9
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d011      	beq.n	8005b92 <VL53L0X_get_info_from_device+0x99e>
					OffsetFixed1104_mm =
 8005b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005b82:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005b86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005b8a:	425b      	negs	r3, r3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005b92:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005b9a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005ba8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <VL53L0X_get_info_from_device+0x9f0>)
 8005bb4:	681c      	ldr	r4, [r3, #0]
 8005bb6:	f001 ffbf 	bl	8007b38 <HAL_GetTick>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005bc2:	9302      	str	r3, [sp, #8]
 8005bc4:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <VL53L0X_get_info_from_device+0x9f4>)
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	9200      	str	r2, [sp, #0]
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <VL53L0X_get_info_from_device+0x9f8>)
 8005bcc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f001 ff1e 	bl	8007a14 <trace_print_module_function>
	return Status;
 8005bd8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3764      	adds	r7, #100	; 0x64
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd90      	pop	{r4, r7, pc}
 8005be4:	200007b4 	.word	0x200007b4
 8005be8:	0800ce74 	.word	0x0800ce74
 8005bec:	0800c8a8 	.word	0x0800c8a8

08005bf0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b08b      	sub	sp, #44	; 0x2c
 8005bf4:	af04      	add	r7, sp, #16
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
	uint64_t PLL_period_ps;
	uint32_t macro_period_vclks;
	uint32_t macro_period_ps;

	LOG_FUNCTION_START("");
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <VL53L0X_calc_macro_period_ps+0x7c>)
 8005bfe:	681c      	ldr	r4, [r3, #0]
 8005c00:	f001 ff9a 	bl	8007b38 <HAL_GetTick>
 8005c04:	4603      	mov	r3, r0
 8005c06:	461a      	mov	r2, r3
 8005c08:	4b19      	ldr	r3, [pc, #100]	; (8005c70 <VL53L0X_calc_macro_period_ps+0x80>)
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	9200      	str	r2, [sp, #0]
 8005c0e:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <VL53L0X_calc_macro_period_ps+0x84>)
 8005c10:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005c14:	4621      	mov	r1, r4
 8005c16:	2001      	movs	r0, #1
 8005c18:	f001 fefc 	bl	8007a14 <trace_print_module_function>

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005c1c:	f240 6277 	movw	r2, #1655	; 0x677
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005c28:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005c2c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	fb02 f303 	mul.w	r3, r2, r3
 8005c3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <VL53L0X_calc_macro_period_ps+0x7c>)
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	f001 ff79 	bl	8007b38 <HAL_GetTick>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <VL53L0X_calc_macro_period_ps+0x88>)
 8005c4c:	9302      	str	r3, [sp, #8]
 8005c4e:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <VL53L0X_calc_macro_period_ps+0x80>)
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	9200      	str	r2, [sp, #0]
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <VL53L0X_calc_macro_period_ps+0x8c>)
 8005c56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	f001 fed9 	bl	8007a14 <trace_print_module_function>
	return macro_period_ps;
 8005c62:	68bb      	ldr	r3, [r7, #8]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd90      	pop	{r4, r7, pc}
 8005c6c:	200007b4 	.word	0x200007b4
 8005c70:	0800ce94 	.word	0x0800ce94
 8005c74:	0800c894 	.word	0x0800c894
 8005c78:	0800c8b8 	.word	0x0800c8b8
 8005c7c:	0800c8a8 	.word	0x0800c8a8

08005c80 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d017      	beq.n	8005cca <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005ca0:	e005      	b.n	8005cae <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005ca8:	89fb      	ldrh	r3, [r7, #14]
 8005caa:	3301      	adds	r3, #1
 8005cac:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f4      	bne.n	8005ca2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005cc6:	4413      	add	r3, r2
 8005cc8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005cca:	8afb      	ldrh	r3, [r7, #22]

}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	0a12      	lsrs	r2, r2, #8
 8005cee:	b292      	uxth	r2, r2
 8005cf0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff ff68 	bl	8005bf0 <VL53L0X_calc_macro_period_ps>
 8005d20:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d28:	4a0a      	ldr	r2, [pc, #40]	; (8005d54 <VL53L0X_calc_timeout_mclks+0x50>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d38:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	441a      	add	r2, r3
	timeout_period_mclks =
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d48:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3720      	adds	r7, #32
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	10624dd3 	.word	0x10624dd3

08005d58 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	807b      	strh	r3, [r7, #2]
 8005d64:	4613      	mov	r3, r2
 8005d66:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005d6c:	787b      	ldrb	r3, [r7, #1]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ff3d 	bl	8005bf0 <VL53L0X_calc_macro_period_ps>
 8005d76:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <VL53L0X_calc_timeout_us+0x50>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8005d94:	4a04      	ldr	r2, [pc, #16]	; (8005da8 <VL53L0X_calc_timeout_us+0x50>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	099b      	lsrs	r3, r3, #6
 8005d9c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005d9e:	697b      	ldr	r3, [r7, #20]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	10624dd3 	.word	0x10624dd3

08005dac <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	460b      	mov	r3, r1
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005dd2:	7afb      	ldrb	r3, [r7, #11]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <get_sequence_step_timeout+0x38>
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d002      	beq.n	8005de4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d128      	bne.n	8005e36 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005de4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005de8:	461a      	mov	r2, r3
 8005dea:	2100      	movs	r1, #0
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7fc fde5 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005df8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005e00:	f107 0320 	add.w	r3, r7, #32
 8005e04:	461a      	mov	r2, r3
 8005e06:	2146      	movs	r1, #70	; 0x46
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7fb fef7 	bl	8001bfc <VL53L0X_RdByte>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff ff5c 	bl	8005cd8 <VL53L0X_decode_timeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005e24:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff ff93 	bl	8005d58 <VL53L0X_calc_timeout_us>
 8005e32:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e34:	e092      	b.n	8005f5c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005e36:	7afb      	ldrb	r3, [r7, #11]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d135      	bne.n	8005ea8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e3c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005e40:	461a      	mov	r2, r3
 8005e42:	2100      	movs	r1, #0
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7fc fdb9 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005e50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 8081 	bne.w	8005f5c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005e5a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2100      	movs	r1, #0
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f7fc fdaa 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005e6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8005e76:	f107 031e 	add.w	r3, r7, #30
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2151      	movs	r1, #81	; 0x51
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7fb fee6 	bl	8001c50 <VL53L0X_RdWord>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005e8a:	8bfb      	ldrh	r3, [r7, #30]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff23 	bl	8005cd8 <VL53L0X_decode_timeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005e96:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff ff5a 	bl	8005d58 <VL53L0X_calc_timeout_us>
 8005ea4:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ea6:	e059      	b.n	8005f5c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005ea8:	7afb      	ldrb	r3, [r7, #11]
 8005eaa:	2b04      	cmp	r3, #4
 8005eac:	d156      	bne.n	8005f5c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005eae:	f107 0314 	add.w	r3, r7, #20
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7fc ff0d 	bl	8002cd4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005ebe:	7dfb      	ldrb	r3, [r7, #23]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01d      	beq.n	8005f00 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ec4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2100      	movs	r1, #0
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7fc fd75 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8005ed8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10f      	bne.n	8005f00 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8005ee0:	f107 031e 	add.w	r3, r7, #30
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	2151      	movs	r1, #81	; 0x51
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7fb feb1 	bl	8001c50 <VL53L0X_RdWord>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005ef4:	8bfb      	ldrh	r3, [r7, #30]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff feee 	bl	8005cd8 <VL53L0X_decode_timeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f08:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	2101      	movs	r1, #1
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7fc fd53 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005f1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10f      	bne.n	8005f44 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8005f24:	f107 031c 	add.w	r3, r7, #28
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2171      	movs	r1, #113	; 0x71
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7fb fe8f 	bl	8001c50 <VL53L0X_RdWord>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005f38:	8bbb      	ldrh	r3, [r7, #28]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fecc 	bl	8005cd8 <VL53L0X_decode_timeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005f44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005f4c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f52:	4619      	mov	r1, r3
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff feff 	bl	8005d58 <VL53L0X_calc_timeout_us>
 8005f5a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f60:	601a      	str	r2, [r3, #0]

	return Status;
 8005f62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3730      	adds	r7, #48	; 0x30
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08a      	sub	sp, #40	; 0x28
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	460b      	mov	r3, r1
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <set_sequence_step_timeout+0x26>
 8005f88:	7afb      	ldrb	r3, [r7, #11]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d002      	beq.n	8005f94 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005f8e:	7afb      	ldrb	r3, [r7, #11]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d138      	bne.n	8006006 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f94:	f107 031b 	add.w	r3, r7, #27
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7fc fd0d 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005fa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11a      	bne.n	8005fe6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8005fb0:	7efb      	ldrb	r3, [r7, #27]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff fea4 	bl	8005d04 <VL53L0X_calc_timeout_mclks>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8005fc0:	8bbb      	ldrh	r3, [r7, #28]
 8005fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc6:	d903      	bls.n	8005fd0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8005fc8:	23ff      	movs	r3, #255	; 0xff
 8005fca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005fce:	e004      	b.n	8005fda <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8005fd0:	8bbb      	ldrh	r3, [r7, #28]
 8005fd2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005fe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f040 80ab 	bne.w	8006146 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8005ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2146      	movs	r1, #70	; 0x46
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f7fb fd7d 	bl	8001af8 <VL53L0X_WrByte>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006004:	e09f      	b.n	8006146 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	2b03      	cmp	r3, #3
 800600a:	d135      	bne.n	8006078 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800600c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006010:	2b00      	cmp	r3, #0
 8006012:	d11b      	bne.n	800604c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006014:	f107 031b 	add.w	r3, r7, #27
 8006018:	461a      	mov	r2, r3
 800601a:	2100      	movs	r1, #0
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7fc fccd 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 8006022:	4603      	mov	r3, r0
 8006024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006028:	7efb      	ldrb	r3, [r7, #27]
 800602a:	461a      	mov	r2, r3
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff fe68 	bl	8005d04 <VL53L0X_calc_timeout_mclks>
 8006034:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006036:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fe20 	bl	8005c80 <VL53L0X_encode_timeout>
 8006040:	4603      	mov	r3, r0
 8006042:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006044:	8b3a      	ldrh	r2, [r7, #24]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800604c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006050:	2b00      	cmp	r3, #0
 8006052:	d108      	bne.n	8006066 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006054:	8b3b      	ldrh	r3, [r7, #24]
 8006056:	461a      	mov	r2, r3
 8006058:	2151      	movs	r1, #81	; 0x51
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7fb fd70 	bl	8001b40 <VL53L0X_WrWord>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006066:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800606a:	2b00      	cmp	r3, #0
 800606c:	d16b      	bne.n	8006146 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006076:	e066      	b.n	8006146 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	2b04      	cmp	r3, #4
 800607c:	d160      	bne.n	8006140 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800607e:	f107 0310 	add.w	r3, r7, #16
 8006082:	4619      	mov	r1, r3
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7fc fe25 	bl	8002cd4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800608e:	7cfb      	ldrb	r3, [r7, #19]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01d      	beq.n	80060d0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006094:	f107 031b 	add.w	r3, r7, #27
 8006098:	461a      	mov	r2, r3
 800609a:	2100      	movs	r1, #0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7fc fc8d 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80060a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80060b0:	f107 0318 	add.w	r3, r7, #24
 80060b4:	461a      	mov	r2, r3
 80060b6:	2151      	movs	r1, #81	; 0x51
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7fb fdc9 	bl	8001c50 <VL53L0X_RdWord>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80060c4:	8b3b      	ldrh	r3, [r7, #24]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fe06 	bl	8005cd8 <VL53L0X_decode_timeout>
 80060cc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80060ce:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80060d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80060d8:	f107 031b 	add.w	r3, r7, #27
 80060dc:	461a      	mov	r2, r3
 80060de:	2101      	movs	r1, #1
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7fc fc6b 	bl	80029bc <VL53L0X_GetVcselPulsePeriod>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80060ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d128      	bne.n	8006146 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80060f4:	7efb      	ldrb	r3, [r7, #27]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f7ff fe02 	bl	8005d04 <VL53L0X_calc_timeout_mclks>
 8006100:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006104:	6a3a      	ldr	r2, [r7, #32]
 8006106:	4413      	add	r3, r2
 8006108:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800610a:	6a38      	ldr	r0, [r7, #32]
 800610c:	f7ff fdb8 	bl	8005c80 <VL53L0X_encode_timeout>
 8006110:	4603      	mov	r3, r0
 8006112:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800611c:	8bfb      	ldrh	r3, [r7, #30]
 800611e:	461a      	mov	r2, r3
 8006120:	2171      	movs	r1, #113	; 0x71
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7fb fd0c 	bl	8001b40 <VL53L0X_WrWord>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800612e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800613e:	e002      	b.n	8006146 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006140:	23fc      	movs	r3, #252	; 0xfc
 8006142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006146:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800614a:	4618      	mov	r0, r3
 800614c:	3728      	adds	r7, #40	; 0x28
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b08a      	sub	sp, #40	; 0x28
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	460b      	mov	r3, r1
 800615c:	70fb      	strb	r3, [r7, #3]
 800615e:	4613      	mov	r3, r2
 8006160:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006162:	2300      	movs	r3, #0
 8006164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006168:	230c      	movs	r3, #12
 800616a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800616e:	2312      	movs	r3, #18
 8006170:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006174:	2308      	movs	r3, #8
 8006176:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800617a:	230e      	movs	r3, #14
 800617c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006184:	78bb      	ldrb	r3, [r7, #2]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006190:	23fc      	movs	r3, #252	; 0xfc
 8006192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006196:	e020      	b.n	80061da <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <VL53L0X_set_vcsel_pulse_period+0x68>
 800619e:	78ba      	ldrb	r2, [r7, #2]
 80061a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d304      	bcc.n	80061b2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80061a8:	78ba      	ldrb	r2, [r7, #2]
 80061aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d903      	bls.n	80061ba <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80061b2:	23fc      	movs	r3, #252	; 0xfc
 80061b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061b8:	e00f      	b.n	80061da <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d10c      	bne.n	80061da <VL53L0X_set_vcsel_pulse_period+0x88>
 80061c0:	78ba      	ldrb	r2, [r7, #2]
 80061c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d304      	bcc.n	80061d4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80061ca:	78ba      	ldrb	r2, [r7, #2]
 80061cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d902      	bls.n	80061da <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80061d4:	23fc      	movs	r3, #252	; 0xfc
 80061d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80061da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80061e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061e6:	e239      	b.n	800665c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d150      	bne.n	8006290 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80061ee:	78bb      	ldrb	r3, [r7, #2]
 80061f0:	2b0c      	cmp	r3, #12
 80061f2:	d110      	bne.n	8006216 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80061f4:	2218      	movs	r2, #24
 80061f6:	2157      	movs	r1, #87	; 0x57
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7fb fc7d 	bl	8001af8 <VL53L0X_WrByte>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006204:	2208      	movs	r2, #8
 8006206:	2156      	movs	r1, #86	; 0x56
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fb fc75 	bl	8001af8 <VL53L0X_WrByte>
 800620e:	4603      	mov	r3, r0
 8006210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006214:	e17f      	b.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006216:	78bb      	ldrb	r3, [r7, #2]
 8006218:	2b0e      	cmp	r3, #14
 800621a:	d110      	bne.n	800623e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800621c:	2230      	movs	r2, #48	; 0x30
 800621e:	2157      	movs	r1, #87	; 0x57
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fb fc69 	bl	8001af8 <VL53L0X_WrByte>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800622c:	2208      	movs	r2, #8
 800622e:	2156      	movs	r1, #86	; 0x56
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fb fc61 	bl	8001af8 <VL53L0X_WrByte>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800623c:	e16b      	b.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800623e:	78bb      	ldrb	r3, [r7, #2]
 8006240:	2b10      	cmp	r3, #16
 8006242:	d110      	bne.n	8006266 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006244:	2240      	movs	r2, #64	; 0x40
 8006246:	2157      	movs	r1, #87	; 0x57
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7fb fc55 	bl	8001af8 <VL53L0X_WrByte>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006254:	2208      	movs	r2, #8
 8006256:	2156      	movs	r1, #86	; 0x56
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7fb fc4d 	bl	8001af8 <VL53L0X_WrByte>
 800625e:	4603      	mov	r3, r0
 8006260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006264:	e157      	b.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006266:	78bb      	ldrb	r3, [r7, #2]
 8006268:	2b12      	cmp	r3, #18
 800626a:	f040 8154 	bne.w	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800626e:	2250      	movs	r2, #80	; 0x50
 8006270:	2157      	movs	r1, #87	; 0x57
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fb fc40 	bl	8001af8 <VL53L0X_WrByte>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800627e:	2208      	movs	r2, #8
 8006280:	2156      	movs	r1, #86	; 0x56
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fb fc38 	bl	8001af8 <VL53L0X_WrByte>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800628e:	e142      	b.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	2b01      	cmp	r3, #1
 8006294:	f040 813f 	bne.w	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006298:	78bb      	ldrb	r3, [r7, #2]
 800629a:	2b08      	cmp	r3, #8
 800629c:	d14c      	bne.n	8006338 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800629e:	2210      	movs	r2, #16
 80062a0:	2148      	movs	r1, #72	; 0x48
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fb fc28 	bl	8001af8 <VL53L0X_WrByte>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80062ae:	2208      	movs	r2, #8
 80062b0:	2147      	movs	r1, #71	; 0x47
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fb fc20 	bl	8001af8 <VL53L0X_WrByte>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80062be:	2202      	movs	r2, #2
 80062c0:	2132      	movs	r1, #50	; 0x32
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fb fc18 	bl	8001af8 <VL53L0X_WrByte>
 80062c8:	4603      	mov	r3, r0
 80062ca:	461a      	mov	r2, r3
 80062cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80062d6:	220c      	movs	r2, #12
 80062d8:	2130      	movs	r1, #48	; 0x30
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fb fc0c 	bl	8001af8 <VL53L0X_WrByte>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062ee:	2201      	movs	r2, #1
 80062f0:	21ff      	movs	r1, #255	; 0xff
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fb fc00 	bl	8001af8 <VL53L0X_WrByte>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006300:	4313      	orrs	r3, r2
 8006302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006306:	2230      	movs	r2, #48	; 0x30
 8006308:	2130      	movs	r1, #48	; 0x30
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fb fbf4 	bl	8001af8 <VL53L0X_WrByte>
 8006310:	4603      	mov	r3, r0
 8006312:	461a      	mov	r2, r3
 8006314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006318:	4313      	orrs	r3, r2
 800631a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800631e:	2200      	movs	r2, #0
 8006320:	21ff      	movs	r1, #255	; 0xff
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fb fbe8 	bl	8001af8 <VL53L0X_WrByte>
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006330:	4313      	orrs	r3, r2
 8006332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006336:	e0ee      	b.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006338:	78bb      	ldrb	r3, [r7, #2]
 800633a:	2b0a      	cmp	r3, #10
 800633c:	d14c      	bne.n	80063d8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800633e:	2228      	movs	r2, #40	; 0x28
 8006340:	2148      	movs	r1, #72	; 0x48
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fbd8 	bl	8001af8 <VL53L0X_WrByte>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800634e:	2208      	movs	r2, #8
 8006350:	2147      	movs	r1, #71	; 0x47
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fb fbd0 	bl	8001af8 <VL53L0X_WrByte>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800635e:	2203      	movs	r2, #3
 8006360:	2132      	movs	r1, #50	; 0x32
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb fbc8 	bl	8001af8 <VL53L0X_WrByte>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006370:	4313      	orrs	r3, r2
 8006372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006376:	2209      	movs	r2, #9
 8006378:	2130      	movs	r1, #48	; 0x30
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fb fbbc 	bl	8001af8 <VL53L0X_WrByte>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006388:	4313      	orrs	r3, r2
 800638a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800638e:	2201      	movs	r2, #1
 8006390:	21ff      	movs	r1, #255	; 0xff
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb fbb0 	bl	8001af8 <VL53L0X_WrByte>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80063a6:	2220      	movs	r2, #32
 80063a8:	2130      	movs	r1, #48	; 0x30
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb fba4 	bl	8001af8 <VL53L0X_WrByte>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80063be:	2200      	movs	r2, #0
 80063c0:	21ff      	movs	r1, #255	; 0xff
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fb fb98 	bl	8001af8 <VL53L0X_WrByte>
 80063c8:	4603      	mov	r3, r0
 80063ca:	461a      	mov	r2, r3
 80063cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063d6:	e09e      	b.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80063d8:	78bb      	ldrb	r3, [r7, #2]
 80063da:	2b0c      	cmp	r3, #12
 80063dc:	d14c      	bne.n	8006478 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80063de:	2238      	movs	r2, #56	; 0x38
 80063e0:	2148      	movs	r1, #72	; 0x48
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fb fb88 	bl	8001af8 <VL53L0X_WrByte>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80063ee:	2208      	movs	r2, #8
 80063f0:	2147      	movs	r1, #71	; 0x47
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fb fb80 	bl	8001af8 <VL53L0X_WrByte>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80063fe:	2203      	movs	r2, #3
 8006400:	2132      	movs	r1, #50	; 0x32
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fb fb78 	bl	8001af8 <VL53L0X_WrByte>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006410:	4313      	orrs	r3, r2
 8006412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006416:	2208      	movs	r2, #8
 8006418:	2130      	movs	r1, #48	; 0x30
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7fb fb6c 	bl	8001af8 <VL53L0X_WrByte>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006428:	4313      	orrs	r3, r2
 800642a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800642e:	2201      	movs	r2, #1
 8006430:	21ff      	movs	r1, #255	; 0xff
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fb60 	bl	8001af8 <VL53L0X_WrByte>
 8006438:	4603      	mov	r3, r0
 800643a:	461a      	mov	r2, r3
 800643c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006440:	4313      	orrs	r3, r2
 8006442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006446:	2220      	movs	r2, #32
 8006448:	2130      	movs	r1, #48	; 0x30
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fb fb54 	bl	8001af8 <VL53L0X_WrByte>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006458:	4313      	orrs	r3, r2
 800645a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800645e:	2200      	movs	r2, #0
 8006460:	21ff      	movs	r1, #255	; 0xff
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fb fb48 	bl	8001af8 <VL53L0X_WrByte>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006470:	4313      	orrs	r3, r2
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006476:	e04e      	b.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006478:	78bb      	ldrb	r3, [r7, #2]
 800647a:	2b0e      	cmp	r3, #14
 800647c:	d14b      	bne.n	8006516 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800647e:	2248      	movs	r2, #72	; 0x48
 8006480:	2148      	movs	r1, #72	; 0x48
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fb fb38 	bl	8001af8 <VL53L0X_WrByte>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800648e:	2208      	movs	r2, #8
 8006490:	2147      	movs	r1, #71	; 0x47
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb fb30 	bl	8001af8 <VL53L0X_WrByte>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800649e:	2203      	movs	r2, #3
 80064a0:	2132      	movs	r1, #50	; 0x32
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fb fb28 	bl	8001af8 <VL53L0X_WrByte>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80064b6:	2207      	movs	r2, #7
 80064b8:	2130      	movs	r1, #48	; 0x30
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fb fb1c 	bl	8001af8 <VL53L0X_WrByte>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80064ce:	2201      	movs	r2, #1
 80064d0:	21ff      	movs	r1, #255	; 0xff
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fb fb10 	bl	8001af8 <VL53L0X_WrByte>
 80064d8:	4603      	mov	r3, r0
 80064da:	461a      	mov	r2, r3
 80064dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80064e6:	2220      	movs	r2, #32
 80064e8:	2130      	movs	r1, #48	; 0x30
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fb fb04 	bl	8001af8 <VL53L0X_WrByte>
 80064f0:	4603      	mov	r3, r0
 80064f2:	461a      	mov	r2, r3
 80064f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80064fe:	2200      	movs	r2, #0
 8006500:	21ff      	movs	r1, #255	; 0xff
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fb faf8 	bl	8001af8 <VL53L0X_WrByte>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006510:	4313      	orrs	r3, r2
 8006512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006516:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800651a:	2b00      	cmp	r3, #0
 800651c:	d17f      	bne.n	800661e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800651e:	78bb      	ldrb	r3, [r7, #2]
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fdb2 	bl	800508a <VL53L0X_encode_vcsel_period>
 8006526:	4603      	mov	r3, r0
 8006528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006532:	2b01      	cmp	r3, #1
 8006534:	d045      	beq.n	80065c2 <VL53L0X_set_vcsel_pulse_period+0x470>
 8006536:	e06e      	b.n	8006616 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006538:	f107 0314 	add.w	r3, r7, #20
 800653c:	461a      	mov	r2, r3
 800653e:	2103      	movs	r1, #3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fc33 	bl	8005dac <get_sequence_step_timeout>
 8006546:	4603      	mov	r3, r0
 8006548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800654c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006554:	f107 0310 	add.w	r3, r7, #16
 8006558:	461a      	mov	r2, r3
 800655a:	2102      	movs	r1, #2
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fc25 	bl	8005dac <get_sequence_step_timeout>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006570:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006574:	461a      	mov	r2, r3
 8006576:	2150      	movs	r1, #80	; 0x50
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fb fabd 	bl	8001af8 <VL53L0X_WrByte>
 800657e:	4603      	mov	r3, r0
 8006580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006584:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006588:	2b00      	cmp	r3, #0
 800658a:	d108      	bne.n	800659e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	461a      	mov	r2, r3
 8006590:	2103      	movs	r1, #3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7ff fceb 	bl	8005f6e <set_sequence_step_timeout>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800659e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d108      	bne.n	80065b8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	461a      	mov	r2, r3
 80065aa:	2102      	movs	r1, #2
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fcde 	bl	8005f6e <set_sequence_step_timeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	78ba      	ldrb	r2, [r7, #2]
 80065bc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80065c0:	e02e      	b.n	8006620 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80065c2:	f107 0318 	add.w	r3, r7, #24
 80065c6:	461a      	mov	r2, r3
 80065c8:	2104      	movs	r1, #4
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7ff fbee 	bl	8005dac <get_sequence_step_timeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80065d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80065de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80065e2:	461a      	mov	r2, r3
 80065e4:	2170      	movs	r1, #112	; 0x70
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fb fa86 	bl	8001af8 <VL53L0X_WrByte>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80065f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d108      	bne.n	800660c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	461a      	mov	r2, r3
 80065fe:	2104      	movs	r1, #4
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff fcb4 	bl	8005f6e <set_sequence_step_timeout>
 8006606:	4603      	mov	r3, r0
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	78ba      	ldrb	r2, [r7, #2]
 8006610:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006614:	e004      	b.n	8006620 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006616:	23fc      	movs	r3, #252	; 0xfc
 8006618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800661c:	e000      	b.n	8006620 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800661e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006620:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006624:	2b00      	cmp	r3, #0
 8006626:	d109      	bne.n	800663c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800662e:	69f9      	ldr	r1, [r7, #28]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fc f903 	bl	800283c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800663c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8006644:	f107 010f 	add.w	r1, r7, #15
 8006648:	2301      	movs	r3, #1
 800664a:	2200      	movs	r2, #0
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fe fc0b 	bl	8004e68 <VL53L0X_perform_phase_calibration>
 8006652:	4603      	mov	r3, r0
 8006654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800665c:	4618      	mov	r0, r3
 800665e:	3728      	adds	r7, #40	; 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	460b      	mov	r3, r1
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006672:	2300      	movs	r3, #0
 8006674:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800667c:	2b01      	cmp	r3, #1
 800667e:	d00a      	beq.n	8006696 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006680:	e013      	b.n	80066aa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006682:	f107 0316 	add.w	r3, r7, #22
 8006686:	461a      	mov	r2, r3
 8006688:	2150      	movs	r1, #80	; 0x50
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7fb fab6 	bl	8001bfc <VL53L0X_RdByte>
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006694:	e00b      	b.n	80066ae <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006696:	f107 0316 	add.w	r3, r7, #22
 800669a:	461a      	mov	r2, r3
 800669c:	2170      	movs	r1, #112	; 0x70
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7fb faac 	bl	8001bfc <VL53L0X_RdByte>
 80066a4:	4603      	mov	r3, r0
 80066a6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80066a8:	e001      	b.n	80066ae <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066aa:	23fc      	movs	r3, #252	; 0xfc
 80066ac:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80066ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d107      	bne.n	80066c6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80066b6:	7dbb      	ldrb	r3, [r7, #22]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fcd3 	bl	8005064 <VL53L0X_decode_vcsel_period>
 80066be:	4603      	mov	r3, r0
 80066c0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	701a      	strb	r2, [r3, #0]

	return Status;
 80066c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80066d4:	b590      	push	{r4, r7, lr}
 80066d6:	b097      	sub	sp, #92	; 0x5c
 80066d8:	af04      	add	r7, sp, #16
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066de:	2300      	movs	r3, #0
 80066e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80066e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80066e8:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80066ea:	f240 7376 	movw	r3, #1910	; 0x776
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80066f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80066f4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80066f6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80066fc:	f240 234e 	movw	r3, #590	; 0x24e
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006702:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006706:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006708:	f44f 7325 	mov.w	r3, #660	; 0x294
 800670c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800670e:	f240 2326 	movw	r3, #550	; 0x226
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006718:	f644 6320 	movw	r3, #20000	; 0x4e20
 800671c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");
 8006722:	4b81      	ldr	r3, [pc, #516]	; (8006928 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8006724:	681c      	ldr	r4, [r3, #0]
 8006726:	f001 fa07 	bl	8007b38 <HAL_GetTick>
 800672a:	4603      	mov	r3, r0
 800672c:	461a      	mov	r2, r3
 800672e:	4b7f      	ldr	r3, [pc, #508]	; (800692c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	9200      	str	r2, [sp, #0]
 8006734:	4b7e      	ldr	r3, [pc, #504]	; (8006930 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x25c>)
 8006736:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800673a:	4621      	mov	r1, r4
 800673c:	2001      	movs	r0, #1
 800673e:	f001 f969 	bl	8007a14 <trace_print_module_function>

	if (MeasurementTimingBudgetMicroSeconds
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	429a      	cmp	r2, r3
 8006748:	d205      	bcs.n	8006756 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x82>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800674a:	23fc      	movs	r3, #252	; 0xfc
 800674c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8006750:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006754:	e0e3      	b.n	800691e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006762:	f107 0314 	add.w	r3, r7, #20
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fc fab3 	bl	8002cd4 <VL53L0X_GetSequenceStepEnables>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006774:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006778:	2b00      	cmp	r3, #0
 800677a:	d16e      	bne.n	800685a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
		(SchedulerSequenceSteps.TccOn  ||
 800677c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.MsrcOn ||
 8006782:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.DssOn)) {
 8006788:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800678a:	2b00      	cmp	r3, #0
 800678c:	d065      	beq.n	800685a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800678e:	f107 0310 	add.w	r3, r7, #16
 8006792:	461a      	mov	r2, r3
 8006794:	2102      	movs	r1, #2
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fb08 	bl	8005dac <get_sequence_step_timeout>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80067a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
			return Status;
 80067aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067ae:	e0b6      	b.n	800691e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80067b0:	7d3b      	ldrb	r3, [r7, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00f      	beq.n	80067d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80067b6:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80067b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ba:	4413      	add	r3, r2
 80067bc:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d204      	bcs.n	80067d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80067c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	643b      	str	r3, [r7, #64]	; 0x40
 80067ce:	e002      	b.n	80067d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067d0:	23fc      	movs	r3, #252	; 0xfc
 80067d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80067d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d015      	beq.n	800680a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x136>
			LOG_FUNCTION_END(Status);
 80067de:	4b52      	ldr	r3, [pc, #328]	; (8006928 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 80067e0:	681c      	ldr	r4, [r3, #0]
 80067e2:	f001 f9a9 	bl	8007b38 <HAL_GetTick>
 80067e6:	4603      	mov	r3, r0
 80067e8:	461a      	mov	r2, r3
 80067ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	4b4e      	ldr	r3, [pc, #312]	; (800692c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	9200      	str	r2, [sp, #0]
 80067f6:	4b4f      	ldr	r3, [pc, #316]	; (8006934 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 80067f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80067fc:	4621      	mov	r1, r4
 80067fe:	2001      	movs	r0, #1
 8006800:	f001 f908 	bl	8007a14 <trace_print_module_function>
			return Status;
 8006804:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006808:	e089      	b.n	800691e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800680a:	7dbb      	ldrb	r3, [r7, #22]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d011      	beq.n	8006834 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x160>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006814:	4413      	add	r3, r2
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681e:	429a      	cmp	r2, r3
 8006820:	d204      	bcs.n	800682c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x158>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006822:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	643b      	str	r3, [r7, #64]	; 0x40
 800682a:	e016      	b.n	800685a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800682c:	23fc      	movs	r3, #252	; 0xfc
 800682e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006832:	e012      	b.n	800685a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006834:	7d7b      	ldrb	r3, [r7, #21]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00f      	beq.n	800685a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800683e:	4413      	add	r3, r2
 8006840:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006846:	429a      	cmp	r2, r3
 8006848:	d204      	bcs.n	8006854 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x180>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800684a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	643b      	str	r3, [r7, #64]	; 0x40
 8006852:	e002      	b.n	800685a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006854:	23fc      	movs	r3, #252	; 0xfc
 8006856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800685a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800685e:	2b00      	cmp	r3, #0
 8006860:	d015      	beq.n	800688e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ba>
		LOG_FUNCTION_END(Status);
 8006862:	4b31      	ldr	r3, [pc, #196]	; (8006928 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 8006864:	681c      	ldr	r4, [r3, #0]
 8006866:	f001 f967 	bl	8007b38 <HAL_GetTick>
 800686a:	4603      	mov	r3, r0
 800686c:	461a      	mov	r2, r3
 800686e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006872:	9302      	str	r3, [sp, #8]
 8006874:	4b2d      	ldr	r3, [pc, #180]	; (800692c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	9200      	str	r2, [sp, #0]
 800687a:	4b2e      	ldr	r3, [pc, #184]	; (8006934 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 800687c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006880:	4621      	mov	r1, r4
 8006882:	2001      	movs	r0, #1
 8006884:	f001 f8c6 	bl	8007a14 <trace_print_module_function>
		return Status;
 8006888:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800688c:	e047      	b.n	800691e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d019      	beq.n	80068c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006894:	f107 030c 	add.w	r3, r7, #12
 8006898:	461a      	mov	r2, r3
 800689a:	2103      	movs	r1, #3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff fa85 	bl	8005dac <get_sequence_step_timeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d204      	bcs.n	80068c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ee>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80068b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	643b      	str	r3, [r7, #64]	; 0x40
 80068c0:	e002      	b.n	80068c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068c2:	23fc      	movs	r3, #252	; 0xfc
 80068c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80068c8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d111      	bne.n	80068f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>
		SchedulerSequenceSteps.FinalRangeOn) {
 80068d0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00e      	beq.n	80068f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>

		FinalRangeTimingBudgetMicroSeconds -=
 80068d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80068de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068e0:	2104      	movs	r1, #4
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fb43 	bl	8005f6e <set_sequence_step_timeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 80068f6:	681c      	ldr	r4, [r3, #0]
 80068f8:	f001 f91e 	bl	8007b38 <HAL_GetTick>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	9200      	str	r2, [sp, #0]
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 800690e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006912:	4621      	mov	r1, r4
 8006914:	2001      	movs	r0, #1
 8006916:	f001 f87d 	bl	8007a14 <trace_print_module_function>

	return Status;
 800691a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800691e:	4618      	mov	r0, r3
 8006920:	374c      	adds	r7, #76	; 0x4c
 8006922:	46bd      	mov	sp, r7
 8006924:	bd90      	pop	{r4, r7, pc}
 8006926:	bf00      	nop
 8006928:	200007b4 	.word	0x200007b4
 800692c:	0800ceb4 	.word	0x0800ceb4
 8006930:	0800c894 	.word	0x0800c894
 8006934:	0800c8a8 	.word	0x0800c8a8

08006938 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b095      	sub	sp, #84	; 0x54
 800693c:	af04      	add	r7, sp, #16
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006942:	2300      	movs	r3, #0
 8006944:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006948:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800694c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800694e:	f240 7376 	movw	r3, #1910	; 0x776
 8006952:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006954:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800695a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800695e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006960:	f240 234e 	movw	r3, #590	; 0x24e
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006966:	f240 23b2 	movw	r3, #690	; 0x2b2
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800696c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006972:	f240 2326 	movw	r3, #550	; 0x226
 8006976:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");
 800697c:	4b62      	ldr	r3, [pc, #392]	; (8006b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 800697e:	681c      	ldr	r4, [r3, #0]
 8006980:	f001 f8da 	bl	8007b38 <HAL_GetTick>
 8006984:	4603      	mov	r3, r0
 8006986:	461a      	mov	r2, r3
 8006988:	4b60      	ldr	r3, [pc, #384]	; (8006b0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 800698a:	9301      	str	r3, [sp, #4]
 800698c:	9200      	str	r2, [sp, #0]
 800698e:	4b60      	ldr	r3, [pc, #384]	; (8006b10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d8>)
 8006990:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006994:	4621      	mov	r1, r4
 8006996:	2001      	movs	r0, #1
 8006998:	f001 f83c 	bl	8007a14 <trace_print_module_function>

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800699c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a0:	441a      	add	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80069a6:	f107 0318 	add.w	r3, r7, #24
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fc f991 	bl	8002cd4 <VL53L0X_GetSequenceStepEnables>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80069b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d015      	beq.n	80069ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb4>
		LOG_FUNCTION_END(Status);
 80069c0:	4b51      	ldr	r3, [pc, #324]	; (8006b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 80069c2:	681c      	ldr	r4, [r3, #0]
 80069c4:	f001 f8b8 	bl	8007b38 <HAL_GetTick>
 80069c8:	4603      	mov	r3, r0
 80069ca:	461a      	mov	r2, r3
 80069cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80069d0:	9302      	str	r3, [sp, #8]
 80069d2:	4b4e      	ldr	r3, [pc, #312]	; (8006b0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	9200      	str	r2, [sp, #0]
 80069d8:	4b4e      	ldr	r3, [pc, #312]	; (8006b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 80069da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80069de:	4621      	mov	r1, r4
 80069e0:	2001      	movs	r0, #1
 80069e2:	f001 f817 	bl	8007a14 <trace_print_module_function>
		return Status;
 80069e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80069ea:	e088      	b.n	8006afe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c6>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80069ec:	7e3b      	ldrb	r3, [r7, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d105      	bne.n	80069fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.MsrcOn ||
 80069f2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.DssOn) {
 80069f8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d030      	beq.n	8006a60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>

		Status = get_sequence_step_timeout(Dev,
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	461a      	mov	r2, r3
 8006a04:	2102      	movs	r1, #2
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff f9d0 	bl	8005dac <get_sequence_step_timeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006a12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d122      	bne.n	8006a60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			if (SchedulerSequenceSteps.TccOn) {
 8006a1a:	7e3b      	ldrb	r3, [r7, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf8>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006a24:	6939      	ldr	r1, [r7, #16]
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a2a:	441a      	add	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006a30:	7ebb      	ldrb	r3, [r7, #26]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x112>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006a3a:	6939      	ldr	r1, [r7, #16]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	440b      	add	r3, r1
 8006a40:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a42:	441a      	add	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e00a      	b.n	8006a60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006a4a:	7e7b      	ldrb	r3, [r7, #25]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006a54:	6939      	ldr	r1, [r7, #16]
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a5a:	441a      	add	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d114      	bne.n	8006a92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006a68:	7efb      	ldrb	r3, [r7, #27]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d011      	beq.n	8006a92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
			Status = get_sequence_step_timeout(Dev,
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	461a      	mov	r2, r3
 8006a74:	2103      	movs	r1, #3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff f998 	bl	8005dac <get_sequence_step_timeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006a8c:	441a      	add	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d114      	bne.n	8006ac4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006a9a:	7f3b      	ldrb	r3, [r7, #28]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d011      	beq.n	8006ac4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
			Status = get_sequence_step_timeout(Dev,
 8006aa0:	f107 0314 	add.w	r3, r7, #20
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff f97f 	bl	8005dac <get_sequence_step_timeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006abe:	441a      	add	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ac4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d103      	bne.n	8006ad4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 8006ad6:	681c      	ldr	r4, [r3, #0]
 8006ad8:	f001 f82e 	bl	8007b38 <HAL_GetTick>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ae4:	9302      	str	r3, [sp, #8]
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	9200      	str	r2, [sp, #0]
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 8006aee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006af2:	4621      	mov	r1, r4
 8006af4:	2001      	movs	r0, #1
 8006af6:	f000 ff8d 	bl	8007a14 <trace_print_module_function>
	return Status;
 8006afa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3744      	adds	r7, #68	; 0x44
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd90      	pop	{r4, r7, pc}
 8006b06:	bf00      	nop
 8006b08:	200007b4 	.word	0x200007b4
 8006b0c:	0800cee8 	.word	0x0800cee8
 8006b10:	0800c894 	.word	0x0800c894
 8006b14:	0800c8a8 	.word	0x0800c8a8

08006b18 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006b18:	b590      	push	{r4, r7, lr}
 8006b1a:	b08d      	sub	sp, #52	; 0x34
 8006b1c:	af04      	add	r7, sp, #16
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfWrites;
	uint8_t Address;
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");
 8006b26:	4b7f      	ldr	r3, [pc, #508]	; (8006d24 <VL53L0X_load_tuning_settings+0x20c>)
 8006b28:	681c      	ldr	r4, [r3, #0]
 8006b2a:	f001 f805 	bl	8007b38 <HAL_GetTick>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b7d      	ldr	r3, [pc, #500]	; (8006d28 <VL53L0X_load_tuning_settings+0x210>)
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	9200      	str	r2, [sp, #0]
 8006b38:	4b7c      	ldr	r3, [pc, #496]	; (8006d2c <VL53L0X_load_tuning_settings+0x214>)
 8006b3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006b3e:	4621      	mov	r1, r4
 8006b40:	2001      	movs	r0, #1
 8006b42:	f000 ff67 	bl	8007a14 <trace_print_module_function>

	Index = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006b4a:	e0c6      	b.n	8006cda <VL53L0X_load_tuning_settings+0x1c2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	4413      	add	r3, r2
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006b5c:	7cfb      	ldrb	r3, [r7, #19]
 8006b5e:	2bff      	cmp	r3, #255	; 0xff
 8006b60:	f040 808d 	bne.w	8006c7e <VL53L0X_load_tuning_settings+0x166>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	4413      	add	r3, r2
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	747b      	strb	r3, [r7, #17]
			Index++;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	3301      	adds	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006b74:	7c7b      	ldrb	r3, [r7, #17]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d87e      	bhi.n	8006c78 <VL53L0X_load_tuning_settings+0x160>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <VL53L0X_load_tuning_settings+0x68>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006bcb 	.word	0x08006bcb
 8006b88:	08006c05 	.word	0x08006c05
 8006b8c:	08006c3f 	.word	0x08006c3f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	743b      	strb	r3, [r7, #16]
				Index++;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	3301      	adds	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006bb0:	7c3b      	ldrb	r3, [r7, #16]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	021b      	lsls	r3, r3, #8
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	89ba      	ldrh	r2, [r7, #12]
 8006bc4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006bc8:	e087      	b.n	8006cda <VL53L0X_load_tuning_settings+0x1c2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	4413      	add	r3, r2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	743b      	strb	r3, [r7, #16]
				Index++;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	4413      	add	r3, r2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	3301      	adds	r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006bea:	7c3b      	ldrb	r3, [r7, #16]
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	89ba      	ldrh	r2, [r7, #12]
 8006bfe:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8006c02:	e06a      	b.n	8006cda <VL53L0X_load_tuning_settings+0x1c2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	4413      	add	r3, r2
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	3301      	adds	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4413      	add	r3, r2
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	3301      	adds	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c24:	7c3b      	ldrb	r3, [r7, #16]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	89ba      	ldrh	r2, [r7, #12]
 8006c38:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006c3c:	e04d      	b.n	8006cda <VL53L0X_load_tuning_settings+0x1c2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	4413      	add	r3, r2
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	4413      	add	r3, r2
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c5e:	7c3b      	ldrb	r3, [r7, #16]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	89ba      	ldrh	r2, [r7, #12]
 8006c72:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8006c76:	e030      	b.n	8006cda <VL53L0X_load_tuning_settings+0x1c2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c78:	23fc      	movs	r3, #252	; 0xfc
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e02d      	b.n	8006cda <VL53L0X_load_tuning_settings+0x1c2>
			}

		} else if (NumberOfWrites <= 4) {
 8006c7e:	7cfb      	ldrb	r3, [r7, #19]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d828      	bhi.n	8006cd6 <VL53L0X_load_tuning_settings+0x1be>
			Address = *(pTuningSettingBuffer + Index);
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	3301      	adds	r3, #1
 8006c92:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006c94:	2300      	movs	r3, #0
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	e00f      	b.n	8006cba <VL53L0X_load_tuning_settings+0x1a2>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	7819      	ldrb	r1, [r3, #0]
 8006ca2:	f107 0208 	add.w	r2, r7, #8
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	4413      	add	r3, r2
 8006caa:	460a      	mov	r2, r1
 8006cac:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	dbeb      	blt.n	8006c9a <VL53L0X_load_tuning_settings+0x182>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006cc2:	7cfb      	ldrb	r3, [r7, #19]
 8006cc4:	f107 0208 	add.w	r2, r7, #8
 8006cc8:	7cb9      	ldrb	r1, [r7, #18]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fa feb8 	bl	8001a40 <VL53L0X_WriteMulti>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e001      	b.n	8006cda <VL53L0X_load_tuning_settings+0x1c2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cd6:	23fc      	movs	r3, #252	; 0xfc
 8006cd8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	4413      	add	r3, r2
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <VL53L0X_load_tuning_settings+0x1d8>
 8006ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f43f af2e 	beq.w	8006b4c <VL53L0X_load_tuning_settings+0x34>
		}
	}

	LOG_FUNCTION_END(Status);
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <VL53L0X_load_tuning_settings+0x20c>)
 8006cf2:	681c      	ldr	r4, [r3, #0]
 8006cf4:	f000 ff20 	bl	8007b38 <HAL_GetTick>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <VL53L0X_load_tuning_settings+0x210>)
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	9200      	str	r2, [sp, #0]
 8006d08:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <VL53L0X_load_tuning_settings+0x218>)
 8006d0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d0e:	4621      	mov	r1, r4
 8006d10:	2001      	movs	r0, #1
 8006d12:	f000 fe7f 	bl	8007a14 <trace_print_module_function>
	return Status;
 8006d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3724      	adds	r7, #36	; 0x24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd90      	pop	{r4, r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200007b4 	.word	0x200007b4
 8006d28:	0800cf1c 	.word	0x0800cf1c
 8006d2c:	0800c894 	.word	0x0800c894
 8006d30:	0800c8a8 	.word	0x0800c8a8

08006d34 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006d4a:	f107 0313 	add.w	r3, r7, #19
 8006d4e:	4619      	mov	r1, r3
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7fc f8a3 	bl	8002e9c <VL53L0X_GetXTalkCompensationEnable>
 8006d56:	4603      	mov	r3, r0
 8006d58:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d111      	bne.n	8006d86 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006d62:	7cfb      	ldrb	r3, [r7, #19]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00e      	beq.n	8006d86 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	8a9b      	ldrh	r3, [r3, #20]
 8006d72:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3380      	adds	r3, #128	; 0x80
 8006d80:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006d94:	b590      	push	{r4, r7, lr}
 8006d96:	b089      	sub	sp, #36	; 0x24
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");
 8006da4:	4b16      	ldr	r3, [pc, #88]	; (8006e00 <VL53L0X_get_total_signal_rate+0x6c>)
 8006da6:	681c      	ldr	r4, [r3, #0]
 8006da8:	f000 fec6 	bl	8007b38 <HAL_GetTick>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	4b14      	ldr	r3, [pc, #80]	; (8006e04 <VL53L0X_get_total_signal_rate+0x70>)
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	9200      	str	r2, [sp, #0]
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <VL53L0X_get_total_signal_rate+0x74>)
 8006db8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	f000 fe28 	bl	8007a14 <trace_print_module_function>

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006dcc:	f107 0310 	add.w	r3, r7, #16
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff ffad 	bl	8006d34 <VL53L0X_get_total_xtalk_rate>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d105      	bne.n	8006df2 <VL53L0X_get_total_signal_rate+0x5e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	441a      	add	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	601a      	str	r2, [r3, #0]

	return Status;
 8006df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd90      	pop	{r4, r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200007b4 	.word	0x200007b4
 8006e04:	0800cf3c 	.word	0x0800cf3c
 8006e08:	0800c894 	.word	0x0800c894

08006e0c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006e0c:	b590      	push	{r4, r7, lr}
 8006e0e:	b09f      	sub	sp, #124	; 0x7c
 8006e10:	af04      	add	r7, sp, #16
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006e1a:	2312      	movs	r3, #18
 8006e1c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e22:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006e24:	2342      	movs	r3, #66	; 0x42
 8006e26:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006e28:	2306      	movs	r3, #6
 8006e2a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006e2c:	2307      	movs	r3, #7
 8006e2e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");
 8006e36:	4b94      	ldr	r3, [pc, #592]	; (8007088 <VL53L0X_calc_dmax+0x27c>)
 8006e38:	681c      	ldr	r4, [r3, #0]
 8006e3a:	f000 fe7d 	bl	8007b38 <HAL_GetTick>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b92      	ldr	r3, [pc, #584]	; (800708c <VL53L0X_calc_dmax+0x280>)
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	9200      	str	r2, [sp, #0]
 8006e48:	4b91      	ldr	r3, [pc, #580]	; (8007090 <VL53L0X_calc_dmax+0x284>)
 8006e4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e4e:	4621      	mov	r1, r4
 8006e50:	2001      	movs	r0, #1
 8006e52:	f000 fddf 	bl	8007a14 <trace_print_module_function>

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006e64:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	3380      	adds	r3, #128	; 0x80
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e7c:	fb02 f303 	mul.w	r3, r2, r3
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01a      	beq.n	8006ec2 <VL53L0X_calc_dmax+0xb6>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	029b      	lsls	r3, r3, #10
 8006e90:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e98:	4413      	add	r3, r2
 8006e9a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006e9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006ea6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	4413      	add	r3, r2
 8006eae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb2:	fb03 f303 	mul.w	r3, r3, r3
 8006eb6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	fb03 f303 	mul.w	r3, r3, r3
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006ede:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ee0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eea:	085a      	lsrs	r2, r3, #1
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	441a      	add	r2, r3
 8006ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f08:	d302      	bcc.n	8006f10 <VL53L0X_calc_dmax+0x104>
		minSignalNeeded_p3 = 0xfff00000;
 8006f0a:	4b62      	ldr	r3, [pc, #392]	; (8007094 <VL53L0X_calc_dmax+0x288>)
 8006f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f0e:	e015      	b.n	8006f3c <VL53L0X_calc_dmax+0x130>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f12:	085a      	lsrs	r2, r3, #1
 8006f14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f16:	441a      	add	r2, r3
 8006f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f2c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f30:	0c1b      	lsrs	r3, r3, #16
 8006f32:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f36:	fb03 f303 	mul.w	r3, r3, r3
 8006f3a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3e:	039b      	lsls	r3, r3, #14
 8006f40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006f44:	4a54      	ldr	r2, [pc, #336]	; (8007098 <VL53L0X_calc_dmax+0x28c>)
 8006f46:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4a:	099b      	lsrs	r3, r3, #6
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	fb03 f303 	mul.w	r3, r3, r3
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f58:	fb03 f303 	mul.w	r3, r3, r3
 8006f5c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	3308      	adds	r3, #8
 8006f62:	091b      	lsrs	r3, r3, #4
 8006f64:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f70:	4613      	mov	r3, r2
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	4413      	add	r3, r2
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f80:	0b9b      	lsrs	r3, r3, #14
 8006f82:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f88:	4413      	add	r3, r2
 8006f8a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006f8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4413      	add	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	039b      	lsls	r3, r3, #14
 8006fa8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006fce:	4a32      	ldr	r2, [pc, #200]	; (8007098 <VL53L0X_calc_dmax+0x28c>)
 8006fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd4:	099b      	lsrs	r3, r3, #6
 8006fd6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006fe4:	4a2c      	ldr	r2, [pc, #176]	; (8007098 <VL53L0X_calc_dmax+0x28c>)
 8006fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fea:	099b      	lsrs	r3, r3, #6
 8006fec:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff0:	3380      	adds	r3, #128	; 0x80
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <VL53L0X_calc_dmax+0x202>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	085a      	lsrs	r2, r3, #1
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	441a      	add	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	fbb2 f3f3 	udiv	r3, r2, r3
 800700a:	65bb      	str	r3, [r7, #88]	; 0x58
 800700c:	e001      	b.n	8007012 <VL53L0X_calc_dmax+0x206>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007012:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007014:	f7fe f84c 	bl	80050b0 <VL53L0X_isqrt>
 8007018:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <VL53L0X_calc_dmax+0x226>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	085a      	lsrs	r2, r3, #1
 8007024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007026:	441a      	add	r2, r3
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	fbb2 f3f3 	udiv	r3, r2, r3
 800702e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007030:	e001      	b.n	8007036 <VL53L0X_calc_dmax+0x22a>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007036:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007038:	f7fe f83a 	bl	80050b0 <VL53L0X_isqrt>
 800703c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800703e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704a:	429a      	cmp	r2, r3
 800704c:	d903      	bls.n	8007056 <VL53L0X_calc_dmax+0x24a>
		*pdmax_mm = dmaxAmbient;
 800704e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007052:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007054:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <VL53L0X_calc_dmax+0x27c>)
 8007058:	681c      	ldr	r4, [r3, #0]
 800705a:	f000 fd6d 	bl	8007b38 <HAL_GetTick>
 800705e:	4603      	mov	r3, r0
 8007060:	461a      	mov	r2, r3
 8007062:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8007066:	9302      	str	r3, [sp, #8]
 8007068:	4b08      	ldr	r3, [pc, #32]	; (800708c <VL53L0X_calc_dmax+0x280>)
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	9200      	str	r2, [sp, #0]
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <VL53L0X_calc_dmax+0x290>)
 8007070:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007074:	4621      	mov	r1, r4
 8007076:	2001      	movs	r0, #1
 8007078:	f000 fccc 	bl	8007a14 <trace_print_module_function>

	return Status;
 800707c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007080:	4618      	mov	r0, r3
 8007082:	376c      	adds	r7, #108	; 0x6c
 8007084:	46bd      	mov	sp, r7
 8007086:	bd90      	pop	{r4, r7, pc}
 8007088:	200007b4 	.word	0x200007b4
 800708c:	0800cf5c 	.word	0x0800cf5c
 8007090:	0800c894 	.word	0x0800c894
 8007094:	fff00000 	.word	0xfff00000
 8007098:	10624dd3 	.word	0x10624dd3
 800709c:	0800c8a8 	.word	0x0800c8a8

080070a0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80070a0:	b590      	push	{r4, r7, lr}
 80070a2:	b0b5      	sub	sp, #212	; 0xd4
 80070a4:	af04      	add	r7, sp, #16
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80070ae:	f44f 7348 	mov.w	r3, #800	; 0x320
 80070b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80070b6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80070ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80070be:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80070c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80070c6:	f241 235c 	movw	r3, #4700	; 0x125c
 80070ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80070ce:	4baf      	ldr	r3, [pc, #700]	; (800738c <VL53L0X_calc_sigma_estimate+0x2ec>)
 80070d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80070d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80070d8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80070da:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80070de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e6:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80070e8:	4ba9      	ldr	r3, [pc, #676]	; (8007390 <VL53L0X_calc_sigma_estimate+0x2f0>)
 80070ea:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80070ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80070f2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80070f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80070f8:	f240 6377 	movw	r3, #1655	; 0x677
 80070fc:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070fe:	2300      	movs	r3, #0
 8007100:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * @{
	 *
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");
 8007104:	4ba3      	ldr	r3, [pc, #652]	; (8007394 <VL53L0X_calc_sigma_estimate+0x2f4>)
 8007106:	681c      	ldr	r4, [r3, #0]
 8007108:	f000 fd16 	bl	8007b38 <HAL_GetTick>
 800710c:	4603      	mov	r3, r0
 800710e:	461a      	mov	r2, r3
 8007110:	4ba1      	ldr	r3, [pc, #644]	; (8007398 <VL53L0X_calc_sigma_estimate+0x2f8>)
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	9200      	str	r2, [sp, #0]
 8007116:	4ba1      	ldr	r3, [pc, #644]	; (800739c <VL53L0X_calc_sigma_estimate+0x2fc>)
 8007118:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800711c:	4621      	mov	r1, r4
 800711e:	2001      	movs	r0, #1
 8007120:	f000 fc78 	bl	8007a14 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007132:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007140:	f107 0310 	add.w	r3, r7, #16
 8007144:	461a      	mov	r2, r3
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff fe23 	bl	8006d94 <VL53L0X_get_total_signal_rate>
 800714e:	4603      	mov	r3, r0
 8007150:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007154:	f107 0314 	add.w	r3, r7, #20
 8007158:	461a      	mov	r2, r3
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fde9 	bl	8006d34 <VL53L0X_get_total_xtalk_rate>
 8007162:	4603      	mov	r3, r0
 8007164:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007176:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800718c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007192:	429a      	cmp	r2, r3
 8007194:	d902      	bls.n	800719c <VL53L0X_calc_sigma_estimate+0xfc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007198:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800719c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d168      	bne.n	8007276 <VL53L0X_calc_sigma_estimate+0x1d6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80071b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80071b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80071bc:	461a      	mov	r2, r3
 80071be:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7fe fd9e 	bl	8005d04 <VL53L0X_calc_timeout_mclks>
 80071c8:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80071d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80071da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80071de:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80071e2:	461a      	mov	r2, r3
 80071e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7fe fd8b 	bl	8005d04 <VL53L0X_calc_timeout_mclks>
 80071ee:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80071f0:	2303      	movs	r3, #3
 80071f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80071f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d102      	bne.n	8007204 <VL53L0X_calc_sigma_estimate+0x164>
			vcselWidth = 2;
 80071fe:	2302      	movs	r3, #2
 8007200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007208:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800720a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	02db      	lsls	r3, r3, #11
 8007214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007218:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800721c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007220:	4a5f      	ldr	r2, [pc, #380]	; (80073a0 <VL53L0X_calc_sigma_estimate+0x300>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800722c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007230:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007232:	fb02 f303 	mul.w	r3, r2, r3
 8007236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800723a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800723e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007242:	4a57      	ldr	r2, [pc, #348]	; (80073a0 <VL53L0X_calc_sigma_estimate+0x300>)
 8007244:	fba2 2303 	umull	r2, r3, r2, r3
 8007248:	099b      	lsrs	r3, r3, #6
 800724a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3380      	adds	r3, #128	; 0x80
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800725c:	fb02 f303 	mul.w	r3, r2, r3
 8007260:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007264:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007268:	3380      	adds	r3, #128	; 0x80
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007276:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800727a:	2b00      	cmp	r3, #0
 800727c:	d015      	beq.n	80072aa <VL53L0X_calc_sigma_estimate+0x20a>
		LOG_FUNCTION_END(Status);
 800727e:	4b45      	ldr	r3, [pc, #276]	; (8007394 <VL53L0X_calc_sigma_estimate+0x2f4>)
 8007280:	681c      	ldr	r4, [r3, #0]
 8007282:	f000 fc59 	bl	8007b38 <HAL_GetTick>
 8007286:	4603      	mov	r3, r0
 8007288:	461a      	mov	r2, r3
 800728a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800728e:	9302      	str	r3, [sp, #8]
 8007290:	4b41      	ldr	r3, [pc, #260]	; (8007398 <VL53L0X_calc_sigma_estimate+0x2f8>)
 8007292:	9301      	str	r3, [sp, #4]
 8007294:	9200      	str	r2, [sp, #0]
 8007296:	4b43      	ldr	r3, [pc, #268]	; (80073a4 <VL53L0X_calc_sigma_estimate+0x304>)
 8007298:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800729c:	4621      	mov	r1, r4
 800729e:	2001      	movs	r0, #1
 80072a0:	f000 fbb8 	bl	8007a14 <trace_print_module_function>
		return Status;
 80072a4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80072a8:	e178      	b.n	800759c <VL53L0X_calc_sigma_estimate+0x4fc>
	}

	if (peakSignalRate_kcps == 0) {
 80072aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10c      	bne.n	80072ca <VL53L0X_calc_sigma_estimate+0x22a>
		*pSigmaEstimate = cSigmaEstMax;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072b6:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072be:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	e153      	b.n	8007572 <VL53L0X_calc_sigma_estimate+0x4d2>
	} else {
		if (vcselTotalEventsRtn < 1)
 80072ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80072d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072dc:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80072de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e0:	041a      	lsls	r2, r3, #16
 80072e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80072ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d902      	bls.n	80072fc <VL53L0X_calc_sigma_estimate+0x25c>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80072f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80072fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007300:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007304:	fb02 f303 	mul.w	r3, r2, r3
 8007308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800730c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007310:	4613      	mov	r3, r2
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4618      	mov	r0, r3
 800731a:	f7fd fec9 	bl	80050b0 <VL53L0X_isqrt>
 800731e:	4603      	mov	r3, r0
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	891b      	ldrh	r3, [r3, #8]
 8007328:	461a      	mov	r2, r3
 800732a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732c:	fb02 f303 	mul.w	r3, r2, r3
 8007330:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007334:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800733a:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800733c:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800733e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007342:	4a17      	ldr	r2, [pc, #92]	; (80073a0 <VL53L0X_calc_sigma_estimate+0x300>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	099b      	lsrs	r3, r3, #6
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800734c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800734e:	041b      	lsls	r3, r3, #16
 8007350:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007354:	4a12      	ldr	r2, [pc, #72]	; (80073a0 <VL53L0X_calc_sigma_estimate+0x300>)
 8007356:	fba2 2303 	umull	r2, r3, r2, r3
 800735a:	099b      	lsrs	r3, r3, #6
 800735c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800735e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfb8      	it	lt
 8007370:	425b      	neglt	r3, r3
 8007372:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	7e1b      	ldrb	r3, [r3, #24]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d012      	beq.n	80073a8 <VL53L0X_calc_sigma_estimate+0x308>
			pwMult = 1 << 16;
 8007382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800738a:	e03a      	b.n	8007402 <VL53L0X_calc_sigma_estimate+0x362>
 800738c:	028f87ae 	.word	0x028f87ae
 8007390:	0006999a 	.word	0x0006999a
 8007394:	200007b4 	.word	0x200007b4
 8007398:	0800cf70 	.word	0x0800cf70
 800739c:	0800c894 	.word	0x0800c894
 80073a0:	10624dd3 	.word	0x10624dd3
 80073a4:	0800c8a8 	.word	0x0800c8a8
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80073a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80073bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073c0:	fb02 f303 	mul.w	r3, r2, r3
 80073c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80073c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ce:	4413      	add	r3, r2
 80073d0:	0c1b      	lsrs	r3, r3, #16
 80073d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80073d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80073de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80073e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80073ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073f0:	fb03 f303 	mul.w	r3, r3, r3
 80073f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80073f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073fc:	0b9b      	lsrs	r3, r3, #14
 80073fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007408:	fb02 f303 	mul.w	r3, r2, r3
 800740c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	fb03 f303 	mul.w	r3, r3, r3
 800741e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8007420:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007424:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800742c:	0c1b      	lsrs	r3, r3, #16
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	fb03 f303 	mul.w	r3, r3, r3
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	4413      	add	r3, r2
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007442:	f7fd fe35 	bl	80050b0 <VL53L0X_isqrt>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	041b      	lsls	r3, r3, #16
 800744c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	3332      	adds	r3, #50	; 0x32
 8007452:	4a54      	ldr	r2, [pc, #336]	; (80075a4 <VL53L0X_calc_sigma_estimate+0x504>)
 8007454:	fba2 2303 	umull	r2, r3, r2, r3
 8007458:	095a      	lsrs	r2, r3, #5
 800745a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007468:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007478:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800747c:	3308      	adds	r3, #8
 800747e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007486:	4a48      	ldr	r2, [pc, #288]	; (80075a8 <VL53L0X_calc_sigma_estimate+0x508>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	0b5b      	lsrs	r3, r3, #13
 800748e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007498:	429a      	cmp	r2, r3
 800749a:	d902      	bls.n	80074a2 <VL53L0X_calc_sigma_estimate+0x402>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800749c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800749e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80074a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80074b0:	4a3e      	ldr	r2, [pc, #248]	; (80075ac <VL53L0X_calc_sigma_estimate+0x50c>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80074be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074c2:	441a      	add	r2, r3
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fd fdf0 	bl	80050b0 <VL53L0X_isqrt>
 80074d0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80074de:	4a33      	ldr	r2, [pc, #204]	; (80075ac <VL53L0X_calc_sigma_estimate+0x50c>)
 80074e0:	fba2 2303 	umull	r2, r3, r2, r3
 80074e4:	099b      	lsrs	r3, r3, #6
 80074e6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80074e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074ec:	fb03 f303 	mul.w	r3, r3, r3
 80074f0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	fb03 f303 	mul.w	r3, r3, r3
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80074fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	4413      	add	r3, r2
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd fdd5 	bl	80050b0 <VL53L0X_isqrt>
 8007506:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800750e:	fb02 f303 	mul.w	r3, r2, r3
 8007512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <VL53L0X_calc_sigma_estimate+0x490>
 800751c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <VL53L0X_calc_sigma_estimate+0x490>
 8007524:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800752c:	429a      	cmp	r2, r3
 800752e:	d903      	bls.n	8007538 <VL53L0X_calc_sigma_estimate+0x498>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800753e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800754a:	6939      	ldr	r1, [r7, #16]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	9303      	str	r3, [sp, #12]
 8007550:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007554:	9302      	str	r3, [sp, #8]
 8007556:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800755a:	9301      	str	r3, [sp, #4]
 800755c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff fc50 	bl	8006e0c <VL53L0X_calc_dmax>
 800756c:	4603      	mov	r3, r0
 800756e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			sigmaEstimateP2,
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
 8007572:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <VL53L0X_calc_sigma_estimate+0x510>)
 8007574:	681c      	ldr	r4, [r3, #0]
 8007576:	f000 fadf 	bl	8007b38 <HAL_GetTick>
 800757a:	4603      	mov	r3, r0
 800757c:	461a      	mov	r2, r3
 800757e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007582:	9302      	str	r3, [sp, #8]
 8007584:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <VL53L0X_calc_sigma_estimate+0x514>)
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	9200      	str	r2, [sp, #0]
 800758a:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <VL53L0X_calc_sigma_estimate+0x518>)
 800758c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007590:	4621      	mov	r1, r4
 8007592:	2001      	movs	r0, #1
 8007594:	f000 fa3e 	bl	8007a14 <trace_print_module_function>
	return Status;
 8007598:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800759c:	4618      	mov	r0, r3
 800759e:	37c4      	adds	r7, #196	; 0xc4
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd90      	pop	{r4, r7, pc}
 80075a4:	51eb851f 	.word	0x51eb851f
 80075a8:	d1b71759 	.word	0xd1b71759
 80075ac:	10624dd3 	.word	0x10624dd3
 80075b0:	200007b4 	.word	0x200007b4
 80075b4:	0800cf70 	.word	0x0800cf70
 80075b8:	0800c8a8 	.word	0x0800c8a8

080075bc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b095      	sub	sp, #84	; 0x54
 80075c0:	af04      	add	r7, sp, #16
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	461a      	mov	r2, r3
 80075c8:	460b      	mov	r3, r1
 80075ca:	72fb      	strb	r3, [r7, #11]
 80075cc:	4613      	mov	r3, r2
 80075ce:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
	FixPoint1616_t LastSignalRefMcps;

	LOG_FUNCTION_START("");
 800760e:	4baa      	ldr	r3, [pc, #680]	; (80078b8 <VL53L0X_get_pal_range_status+0x2fc>)
 8007610:	681c      	ldr	r4, [r3, #0]
 8007612:	f000 fa91 	bl	8007b38 <HAL_GetTick>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	4ba8      	ldr	r3, [pc, #672]	; (80078bc <VL53L0X_get_pal_range_status+0x300>)
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	9200      	str	r2, [sp, #0]
 8007620:	4ba7      	ldr	r3, [pc, #668]	; (80078c0 <VL53L0X_get_pal_range_status+0x304>)
 8007622:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007626:	4621      	mov	r1, r4
 8007628:	2001      	movs	r0, #1
 800762a:	f000 f9f3 	bl	8007a14 <trace_print_module_function>
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	10db      	asrs	r3, r3, #3
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800763c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d017      	beq.n	8007674 <VL53L0X_get_pal_range_status+0xb8>
 8007644:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007648:	2b05      	cmp	r3, #5
 800764a:	d013      	beq.n	8007674 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 5 ||
 800764c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007650:	2b07      	cmp	r3, #7
 8007652:	d00f      	beq.n	8007674 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 7 ||
 8007654:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007658:	2b0c      	cmp	r3, #12
 800765a:	d00b      	beq.n	8007674 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 12 ||
 800765c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007660:	2b0d      	cmp	r3, #13
 8007662:	d007      	beq.n	8007674 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 13 ||
 8007664:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007668:	2b0e      	cmp	r3, #14
 800766a:	d003      	beq.n	8007674 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 14 ||
 800766c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007670:	2b0f      	cmp	r3, #15
 8007672:	d103      	bne.n	800767c <VL53L0X_get_pal_range_status+0xc0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007674:	2301      	movs	r3, #1
 8007676:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800767a:	e002      	b.n	8007682 <VL53L0X_get_pal_range_status+0xc6>
	} else {
		NoneFlag = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007682:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <VL53L0X_get_pal_range_status+0xe2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800768a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800768e:	461a      	mov	r2, r3
 8007690:	2100      	movs	r1, #0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f7fb fd56 	bl	8003144 <VL53L0X_GetLimitCheckEnable>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800769e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d02e      	beq.n	8007704 <VL53L0X_get_pal_range_status+0x148>
 80076a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d12a      	bne.n	8007704 <VL53L0X_get_pal_range_status+0x148>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80076ae:	f107 0310 	add.w	r3, r7, #16
 80076b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80076b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fcf1 	bl	80070a0 <VL53L0X_calc_sigma_estimate>
 80076be:	4603      	mov	r3, r0
 80076c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80076c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d103      	bne.n	80076d4 <VL53L0X_get_pal_range_status+0x118>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80076d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d113      	bne.n	8007704 <VL53L0X_get_pal_range_status+0x148>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80076dc:	f107 0320 	add.w	r3, r7, #32
 80076e0:	461a      	mov	r2, r3
 80076e2:	2100      	movs	r1, #0
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7fb fe05 	bl	80032f4 <VL53L0X_GetLimitCheckValue>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <VL53L0X_get_pal_range_status+0x148>
				(SigmaEstimate > SigmaLimitValue))
 80076f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d902      	bls.n	8007704 <VL53L0X_get_pal_range_status+0x148>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007704:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <VL53L0X_get_pal_range_status+0x164>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800770c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007710:	461a      	mov	r2, r3
 8007712:	2102      	movs	r1, #2
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7fb fd15 	bl	8003144 <VL53L0X_GetLimitCheckEnable>
 800771a:	4603      	mov	r3, r0
 800771c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007720:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007724:	2b00      	cmp	r3, #0
 8007726:	d044      	beq.n	80077b2 <VL53L0X_get_pal_range_status+0x1f6>
 8007728:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800772c:	2b00      	cmp	r3, #0
 800772e:	d140      	bne.n	80077b2 <VL53L0X_get_pal_range_status+0x1f6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007730:	f107 031c 	add.w	r3, r7, #28
 8007734:	461a      	mov	r2, r3
 8007736:	2102      	movs	r1, #2
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7fb fddb 	bl	80032f4 <VL53L0X_GetLimitCheckValue>
 800773e:	4603      	mov	r3, r0
 8007740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007744:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <VL53L0X_get_pal_range_status+0x1a0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800774c:	2201      	movs	r2, #1
 800774e:	21ff      	movs	r1, #255	; 0xff
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7fa f9d1 	bl	8001af8 <VL53L0X_WrByte>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800775c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007760:	2b00      	cmp	r3, #0
 8007762:	d109      	bne.n	8007778 <VL53L0X_get_pal_range_status+0x1bc>
			Status = VL53L0X_RdWord(Dev,
 8007764:	f107 0316 	add.w	r3, r7, #22
 8007768:	461a      	mov	r2, r3
 800776a:	21b6      	movs	r1, #182	; 0xb6
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7fa fa6f 	bl	8001c50 <VL53L0X_RdWord>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007778:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800777c:	2b00      	cmp	r3, #0
 800777e:	d107      	bne.n	8007790 <VL53L0X_get_pal_range_status+0x1d4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007780:	2200      	movs	r2, #0
 8007782:	21ff      	movs	r1, #255	; 0xff
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f7fa f9b7 	bl	8001af8 <VL53L0X_WrByte>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007790:	8afb      	ldrh	r3, [r7, #22]
 8007792:	025b      	lsls	r3, r3, #9
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d006      	beq.n	80077b2 <VL53L0X_get_pal_range_status+0x1f6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80077a4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80077a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d902      	bls.n	80077b2 <VL53L0X_get_pal_range_status+0x1f6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80077b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <VL53L0X_get_pal_range_status+0x212>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80077ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077be:	461a      	mov	r2, r3
 80077c0:	2103      	movs	r1, #3
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7fb fcbe 	bl	8003144 <VL53L0X_GetLimitCheckEnable>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80077ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d023      	beq.n	800781e <VL53L0X_get_pal_range_status+0x262>
 80077d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d11f      	bne.n	800781e <VL53L0X_get_pal_range_status+0x262>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80077de:	893b      	ldrh	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <VL53L0X_get_pal_range_status+0x22e>
			SignalRatePerSpad = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34
 80077e8:	e005      	b.n	80077f6 <VL53L0X_get_pal_range_status+0x23a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	021a      	lsls	r2, r3, #8
 80077ee:	893b      	ldrh	r3, [r7, #8]
 80077f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80077f6:	f107 0318 	add.w	r3, r7, #24
 80077fa:	461a      	mov	r2, r3
 80077fc:	2103      	movs	r1, #3
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7fb fd78 	bl	80032f4 <VL53L0X_GetLimitCheckValue>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <VL53L0X_get_pal_range_status+0x262>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007810:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007814:	429a      	cmp	r2, r3
 8007816:	d202      	bcs.n	800781e <VL53L0X_get_pal_range_status+0x262>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800781e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007822:	2b00      	cmp	r3, #0
 8007824:	d151      	bne.n	80078ca <VL53L0X_get_pal_range_status+0x30e>
		if (NoneFlag == 1) {
 8007826:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800782a:	2b01      	cmp	r3, #1
 800782c:	d103      	bne.n	8007836 <VL53L0X_get_pal_range_status+0x27a>
			*pPalRangeStatus = 255;	 /* NONE */
 800782e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007830:	22ff      	movs	r2, #255	; 0xff
 8007832:	701a      	strb	r2, [r3, #0]
 8007834:	e049      	b.n	80078ca <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007836:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800783a:	2b01      	cmp	r3, #1
 800783c:	d007      	beq.n	800784e <VL53L0X_get_pal_range_status+0x292>
 800783e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007842:	2b02      	cmp	r3, #2
 8007844:	d003      	beq.n	800784e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 2 ||
 8007846:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800784a:	2b03      	cmp	r3, #3
 800784c:	d103      	bne.n	8007856 <VL53L0X_get_pal_range_status+0x29a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800784e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007850:	2205      	movs	r2, #5
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	e039      	b.n	80078ca <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007856:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800785a:	2b06      	cmp	r3, #6
 800785c:	d003      	beq.n	8007866 <VL53L0X_get_pal_range_status+0x2aa>
 800785e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007862:	2b09      	cmp	r3, #9
 8007864:	d103      	bne.n	800786e <VL53L0X_get_pal_range_status+0x2b2>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007868:	2204      	movs	r2, #4
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	e02d      	b.n	80078ca <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 8 ||
 800786e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007872:	2b08      	cmp	r3, #8
 8007874:	d007      	beq.n	8007886 <VL53L0X_get_pal_range_status+0x2ca>
 8007876:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800787a:	2b0a      	cmp	r3, #10
 800787c:	d003      	beq.n	8007886 <VL53L0X_get_pal_range_status+0x2ca>
					DeviceRangeStatusInternal == 10 ||
 800787e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d103      	bne.n	800788e <VL53L0X_get_pal_range_status+0x2d2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007888:	2203      	movs	r2, #3
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e01d      	b.n	80078ca <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 4 ||
 800788e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007892:	2b04      	cmp	r3, #4
 8007894:	d003      	beq.n	800789e <VL53L0X_get_pal_range_status+0x2e2>
 8007896:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800789a:	2b01      	cmp	r3, #1
 800789c:	d103      	bne.n	80078a6 <VL53L0X_get_pal_range_status+0x2ea>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800789e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078a0:	2202      	movs	r2, #2
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	e011      	b.n	80078ca <VL53L0X_get_pal_range_status+0x30e>
		} else if (SigmaLimitflag == 1) {
 80078a6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10a      	bne.n	80078c4 <VL53L0X_get_pal_range_status+0x308>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80078ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b0:	2201      	movs	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
 80078b4:	e009      	b.n	80078ca <VL53L0X_get_pal_range_status+0x30e>
 80078b6:	bf00      	nop
 80078b8:	200007b4 	.word	0x200007b4
 80078bc:	0800cf8c 	.word	0x0800cf8c
 80078c0:	0800c894 	.word	0x0800c894
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80078c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80078ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <VL53L0X_get_pal_range_status+0x31c>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80078d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d4:	2200      	movs	r2, #0
 80078d6:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80078d8:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80078dc:	461a      	mov	r2, r3
 80078de:	2101      	movs	r1, #1
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7fb fc2f 	bl	8003144 <VL53L0X_GetLimitCheckEnable>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80078ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d14f      	bne.n	8007994 <VL53L0X_get_pal_range_status+0x3d8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80078f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <VL53L0X_get_pal_range_status+0x348>
 80078fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007900:	2b01      	cmp	r3, #1
 8007902:	d103      	bne.n	800790c <VL53L0X_get_pal_range_status+0x350>
			Temp8 = 1;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800790a:	e002      	b.n	8007912 <VL53L0X_get_pal_range_status+0x356>
		else
			Temp8 = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007918:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800791c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007920:	2b04      	cmp	r3, #4
 8007922:	d003      	beq.n	800792c <VL53L0X_get_pal_range_status+0x370>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007924:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007928:	2b00      	cmp	r3, #0
 800792a:	d103      	bne.n	8007934 <VL53L0X_get_pal_range_status+0x378>
			Temp8 = 1;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007932:	e002      	b.n	800793a <VL53L0X_get_pal_range_status+0x37e>
		else
			Temp8 = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007940:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007944:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <VL53L0X_get_pal_range_status+0x398>
 800794c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007950:	2b01      	cmp	r3, #1
 8007952:	d103      	bne.n	800795c <VL53L0X_get_pal_range_status+0x3a0>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800795a:	e002      	b.n	8007962 <VL53L0X_get_pal_range_status+0x3a6>
		else
			Temp8 = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007968:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800796c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <VL53L0X_get_pal_range_status+0x3c0>
 8007974:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007978:	2b01      	cmp	r3, #1
 800797a:	d103      	bne.n	8007984 <VL53L0X_get_pal_range_status+0x3c8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007982:	e002      	b.n	800798a <VL53L0X_get_pal_range_status+0x3ce>
		else
			Temp8 = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007990:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <VL53L0X_get_pal_range_status+0x40c>)
 8007996:	681c      	ldr	r4, [r3, #0]
 8007998:	f000 f8ce 	bl	8007b38 <HAL_GetTick>
 800799c:	4603      	mov	r3, r0
 800799e:	461a      	mov	r2, r3
 80079a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80079a4:	9302      	str	r3, [sp, #8]
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <VL53L0X_get_pal_range_status+0x410>)
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	9200      	str	r2, [sp, #0]
 80079ac:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <VL53L0X_get_pal_range_status+0x414>)
 80079ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80079b2:	4621      	mov	r1, r4
 80079b4:	2001      	movs	r0, #1
 80079b6:	f000 f82d 	bl	8007a14 <trace_print_module_function>
	return Status;
 80079ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80079be:	4618      	mov	r0, r3
 80079c0:	3744      	adds	r7, #68	; 0x44
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200007b4 	.word	0x200007b4
 80079cc:	0800cf8c 	.word	0x0800cf8c
 80079d0:	0800c8a8 	.word	0x0800c8a8

080079d4 <VL53L0X_trace_config>:
uint32_t _trace_modules = TRACE_MODULE_NONE;
uint32_t _trace_functions = TRACE_FUNCTION_NONE;

#if defined(VL53L0X_LOG_ENABLE) && (TRACE_UART==1)
int32_t VL53L0X_trace_config(char *filename, uint32_t modules, uint32_t level, uint32_t functions)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
    int STATUS = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]

    _trace_functions = functions;
 80079e6:	4a08      	ldr	r2, [pc, #32]	; (8007a08 <VL53L0X_trace_config+0x34>)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	6013      	str	r3, [r2, #0]
    _trace_level = level;
 80079ec:	4a07      	ldr	r2, [pc, #28]	; (8007a0c <VL53L0X_trace_config+0x38>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6013      	str	r3, [r2, #0]
    _trace_modules = modules;
 80079f2:	4a07      	ldr	r2, [pc, #28]	; (8007a10 <VL53L0X_trace_config+0x3c>)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6013      	str	r3, [r2, #0]

    return STATUS;
 80079f8:	697b      	ldr	r3, [r7, #20]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	371c      	adds	r7, #28
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	20000be8 	.word	0x20000be8
 8007a0c:	200007b4 	.word	0x200007b4
 8007a10:	20000be4 	.word	0x20000be4

08007a14 <trace_print_module_function>:


void trace_print_module_function(uint32_t module, uint32_t level, uint32_t function, const char *format, ...)
{
 8007a14:	b408      	push	{r3}
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b087      	sub	sp, #28
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
    if ( ((level <=_trace_level) && ((module & _trace_modules) > 0))
 8007a22:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <trace_print_module_function+0x4c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d805      	bhi.n	8007a38 <trace_print_module_function+0x24>
 8007a2c:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <trace_print_module_function+0x50>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4013      	ands	r3, r2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d105      	bne.n	8007a44 <trace_print_module_function+0x30>
        || ((function & _trace_functions) > 0) )
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <trace_print_module_function+0x54>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d006      	beq.n	8007a52 <trace_print_module_function+0x3e>
    {
    	va_list arg_list;
        va_start(arg_list, format);
 8007a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a48:	617b      	str	r3, [r7, #20]
        trace_vprintf( format, arg_list);
 8007a4a:	6979      	ldr	r1, [r7, #20]
 8007a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a4e:	f7f9 ff1d 	bl	800188c <uart_vprintf>
        va_end(arg_list);
    }
}
 8007a52:	bf00      	nop
 8007a54:	371c      	adds	r7, #28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a5c:	b001      	add	sp, #4
 8007a5e:	4770      	bx	lr
 8007a60:	200007b4 	.word	0x200007b4
 8007a64:	20000be4 	.word	0x20000be4
 8007a68:	20000be8 	.word	0x20000be8

08007a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007a70:	4b0e      	ldr	r3, [pc, #56]	; (8007aac <HAL_Init+0x40>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a0d      	ldr	r2, [pc, #52]	; (8007aac <HAL_Init+0x40>)
 8007a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <HAL_Init+0x40>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a0a      	ldr	r2, [pc, #40]	; (8007aac <HAL_Init+0x40>)
 8007a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a88:	4b08      	ldr	r3, [pc, #32]	; (8007aac <HAL_Init+0x40>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a07      	ldr	r2, [pc, #28]	; (8007aac <HAL_Init+0x40>)
 8007a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a94:	2003      	movs	r0, #3
 8007a96:	f000 f94f 	bl	8007d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f000 f808 	bl	8007ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007aa0:	f7f9 fba4 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40023c00 	.word	0x40023c00

08007ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ab8:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <HAL_InitTick+0x54>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <HAL_InitTick+0x58>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 f967 	bl	8007da2 <HAL_SYSTICK_Config>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e00e      	b.n	8007afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b0f      	cmp	r3, #15
 8007ae2:	d80a      	bhi.n	8007afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	f000 f92f 	bl	8007d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007af0:	4a06      	ldr	r2, [pc, #24]	; (8007b0c <HAL_InitTick+0x5c>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e000      	b.n	8007afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	200004e4 	.word	0x200004e4
 8007b08:	200007bc 	.word	0x200007bc
 8007b0c:	200007b8 	.word	0x200007b8

08007b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b14:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <HAL_IncTick+0x20>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <HAL_IncTick+0x24>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4413      	add	r3, r2
 8007b20:	4a04      	ldr	r2, [pc, #16]	; (8007b34 <HAL_IncTick+0x24>)
 8007b22:	6013      	str	r3, [r2, #0]
}
 8007b24:	bf00      	nop
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	200007bc 	.word	0x200007bc
 8007b34:	20000bec 	.word	0x20000bec

08007b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8007b3c:	4b03      	ldr	r3, [pc, #12]	; (8007b4c <HAL_GetTick+0x14>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20000bec 	.word	0x20000bec

08007b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007b58:	f7ff ffee 	bl	8007b38 <HAL_GetTick>
 8007b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d005      	beq.n	8007b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b6a:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <HAL_Delay+0x44>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007b76:	bf00      	nop
 8007b78:	f7ff ffde 	bl	8007b38 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d8f7      	bhi.n	8007b78 <HAL_Delay+0x28>
  {
  }
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200007bc 	.word	0x200007bc

08007b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <__NVIC_SetPriorityGrouping+0x44>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007bca:	4a04      	ldr	r2, [pc, #16]	; (8007bdc <__NVIC_SetPriorityGrouping+0x44>)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	60d3      	str	r3, [r2, #12]
}
 8007bd0:	bf00      	nop
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	e000ed00 	.word	0xe000ed00

08007be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	0a1b      	lsrs	r3, r3, #8
 8007bea:	f003 0307 	and.w	r3, r3, #7
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	e000ed00 	.word	0xe000ed00

08007bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	db0b      	blt.n	8007c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	f003 021f 	and.w	r2, r3, #31
 8007c14:	4907      	ldr	r1, [pc, #28]	; (8007c34 <__NVIC_EnableIRQ+0x38>)
 8007c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	e000e100 	.word	0xe000e100

08007c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	6039      	str	r1, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	db0a      	blt.n	8007c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	490c      	ldr	r1, [pc, #48]	; (8007c84 <__NVIC_SetPriority+0x4c>)
 8007c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c56:	0112      	lsls	r2, r2, #4
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c60:	e00a      	b.n	8007c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	4908      	ldr	r1, [pc, #32]	; (8007c88 <__NVIC_SetPriority+0x50>)
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	3b04      	subs	r3, #4
 8007c70:	0112      	lsls	r2, r2, #4
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	440b      	add	r3, r1
 8007c76:	761a      	strb	r2, [r3, #24]
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	e000e100 	.word	0xe000e100
 8007c88:	e000ed00 	.word	0xe000ed00

08007c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b089      	sub	sp, #36	; 0x24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f1c3 0307 	rsb	r3, r3, #7
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	bf28      	it	cs
 8007caa:	2304      	movcs	r3, #4
 8007cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d902      	bls.n	8007cbc <NVIC_EncodePriority+0x30>
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	3b03      	subs	r3, #3
 8007cba:	e000      	b.n	8007cbe <NVIC_EncodePriority+0x32>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cca:	43da      	mvns	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	401a      	ands	r2, r3
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	fa01 f303 	lsl.w	r3, r1, r3
 8007cde:	43d9      	mvns	r1, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ce4:	4313      	orrs	r3, r2
         );
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3724      	adds	r7, #36	; 0x24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d04:	d301      	bcc.n	8007d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d06:	2301      	movs	r3, #1
 8007d08:	e00f      	b.n	8007d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d0a:	4a0a      	ldr	r2, [pc, #40]	; (8007d34 <SysTick_Config+0x40>)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d12:	210f      	movs	r1, #15
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	f7ff ff8e 	bl	8007c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d1c:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <SysTick_Config+0x40>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d22:	4b04      	ldr	r3, [pc, #16]	; (8007d34 <SysTick_Config+0x40>)
 8007d24:	2207      	movs	r2, #7
 8007d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	e000e010 	.word	0xe000e010

08007d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff29 	bl	8007b98 <__NVIC_SetPriorityGrouping>
}
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	4603      	mov	r3, r0
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d60:	f7ff ff3e 	bl	8007be0 <__NVIC_GetPriorityGrouping>
 8007d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	68b9      	ldr	r1, [r7, #8]
 8007d6a:	6978      	ldr	r0, [r7, #20]
 8007d6c:	f7ff ff8e 	bl	8007c8c <NVIC_EncodePriority>
 8007d70:	4602      	mov	r2, r0
 8007d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff ff5d 	bl	8007c38 <__NVIC_SetPriority>
}
 8007d7e:	bf00      	nop
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff ff31 	bl	8007bfc <__NVIC_EnableIRQ>
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff ffa2 	bl	8007cf4 <SysTick_Config>
 8007db0:	4603      	mov	r3, r0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007dc8:	f7ff feb6 	bl	8007b38 <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e099      	b.n	8007f0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0201 	bic.w	r2, r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007df8:	e00f      	b.n	8007e1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007dfa:	f7ff fe9d 	bl	8007b38 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	2b05      	cmp	r3, #5
 8007e06:	d908      	bls.n	8007e1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2203      	movs	r2, #3
 8007e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e078      	b.n	8007f0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e8      	bne.n	8007dfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4b38      	ldr	r3, [pc, #224]	; (8007f14 <HAL_DMA_Init+0x158>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d107      	bne.n	8007e84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d117      	bne.n	8007ede <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00e      	beq.n	8007ede <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fb01 	bl	80084c8 <DMA_CheckFifoParam>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2240      	movs	r2, #64	; 0x40
 8007ed0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007eda:	2301      	movs	r3, #1
 8007edc:	e016      	b.n	8007f0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fab8 	bl	800845c <DMA_CalcBaseAndBitshift>
 8007eec:	4603      	mov	r3, r0
 8007eee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef4:	223f      	movs	r2, #63	; 0x3f
 8007ef6:	409a      	lsls	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	f010803f 	.word	0xf010803f

08007f18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_DMA_Start_IT+0x26>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e040      	b.n	8007fc0 <HAL_DMA_Start_IT+0xa8>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d12f      	bne.n	8007fb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	68b9      	ldr	r1, [r7, #8]
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f000 fa4a 	bl	8008400 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f70:	223f      	movs	r2, #63	; 0x3f
 8007f72:	409a      	lsls	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0216 	orr.w	r2, r2, #22
 8007f86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d007      	beq.n	8007fa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0208 	orr.w	r2, r2, #8
 8007f9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0201 	orr.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	e005      	b.n	8007fbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007fba:	2302      	movs	r3, #2
 8007fbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007fd6:	f7ff fdaf 	bl	8007b38 <HAL_GetTick>
 8007fda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d008      	beq.n	8007ffa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2280      	movs	r2, #128	; 0x80
 8007fec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e052      	b.n	80080a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0216 	bic.w	r2, r2, #22
 8008008:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695a      	ldr	r2, [r3, #20]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008018:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <HAL_DMA_Abort+0x62>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0208 	bic.w	r2, r2, #8
 8008038:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0201 	bic.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800804a:	e013      	b.n	8008074 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800804c:	f7ff fd74 	bl	8007b38 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b05      	cmp	r3, #5
 8008058:	d90c      	bls.n	8008074 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2203      	movs	r2, #3
 8008064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e015      	b.n	80080a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e4      	bne.n	800804c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008086:	223f      	movs	r2, #63	; 0x3f
 8008088:	409a      	lsls	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d004      	beq.n	80080c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2280      	movs	r2, #128	; 0x80
 80080c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e00c      	b.n	80080e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2205      	movs	r2, #5
 80080ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080f8:	4b8e      	ldr	r3, [pc, #568]	; (8008334 <HAL_DMA_IRQHandler+0x248>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a8e      	ldr	r2, [pc, #568]	; (8008338 <HAL_DMA_IRQHandler+0x24c>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	0a9b      	lsrs	r3, r3, #10
 8008104:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008116:	2208      	movs	r2, #8
 8008118:	409a      	lsls	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4013      	ands	r3, r2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01a      	beq.n	8008158 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d013      	beq.n	8008158 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0204 	bic.w	r2, r2, #4
 800813e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008144:	2208      	movs	r2, #8
 8008146:	409a      	lsls	r2, r3
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008150:	f043 0201 	orr.w	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800815c:	2201      	movs	r2, #1
 800815e:	409a      	lsls	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4013      	ands	r3, r2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d012      	beq.n	800818e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00b      	beq.n	800818e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817a:	2201      	movs	r2, #1
 800817c:	409a      	lsls	r2, r3
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008186:	f043 0202 	orr.w	r2, r3, #2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008192:	2204      	movs	r2, #4
 8008194:	409a      	lsls	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d012      	beq.n	80081c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b0:	2204      	movs	r2, #4
 80081b2:	409a      	lsls	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081bc:	f043 0204 	orr.w	r2, r3, #4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c8:	2210      	movs	r2, #16
 80081ca:	409a      	lsls	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4013      	ands	r3, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d043      	beq.n	800825c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d03c      	beq.n	800825c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e6:	2210      	movs	r2, #16
 80081e8:	409a      	lsls	r2, r3
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d018      	beq.n	800822e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d108      	bne.n	800821c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d024      	beq.n	800825c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
 800821a:	e01f      	b.n	800825c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
 800822c:	e016      	b.n	800825c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008238:	2b00      	cmp	r3, #0
 800823a:	d107      	bne.n	800824c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0208 	bic.w	r2, r2, #8
 800824a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008260:	2220      	movs	r2, #32
 8008262:	409a      	lsls	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4013      	ands	r3, r2
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 808f 	beq.w	800838c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 8087 	beq.w	800838c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008282:	2220      	movs	r2, #32
 8008284:	409a      	lsls	r2, r3
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b05      	cmp	r3, #5
 8008294:	d136      	bne.n	8008304 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0216 	bic.w	r2, r2, #22
 80082a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695a      	ldr	r2, [r3, #20]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d103      	bne.n	80082c6 <HAL_DMA_IRQHandler+0x1da>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0208 	bic.w	r2, r2, #8
 80082d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082da:	223f      	movs	r2, #63	; 0x3f
 80082dc:	409a      	lsls	r2, r3
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d07e      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
        }
        return;
 8008302:	e079      	b.n	80083f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01d      	beq.n	800834e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10d      	bne.n	800833c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008324:	2b00      	cmp	r3, #0
 8008326:	d031      	beq.n	800838c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
 8008330:	e02c      	b.n	800838c <HAL_DMA_IRQHandler+0x2a0>
 8008332:	bf00      	nop
 8008334:	200004e4 	.word	0x200004e4
 8008338:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d023      	beq.n	800838c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	4798      	blx	r3
 800834c:	e01e      	b.n	800838c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10f      	bne.n	800837c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0210 	bic.w	r2, r2, #16
 800836a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008390:	2b00      	cmp	r3, #0
 8008392:	d032      	beq.n	80083fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d022      	beq.n	80083e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2205      	movs	r2, #5
 80083a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 0201 	bic.w	r2, r2, #1
 80083b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60bb      	str	r3, [r7, #8]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d307      	bcc.n	80083d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f2      	bne.n	80083b8 <HAL_DMA_IRQHandler+0x2cc>
 80083d2:	e000      	b.n	80083d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80083d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	e000      	b.n	80083fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80083f8:	bf00      	nop
    }
  }
}
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800841c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	2b40      	cmp	r3, #64	; 0x40
 800842c:	d108      	bne.n	8008440 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800843e:	e007      	b.n	8008450 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	60da      	str	r2, [r3, #12]
}
 8008450:	bf00      	nop
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	3b10      	subs	r3, #16
 800846c:	4a14      	ldr	r2, [pc, #80]	; (80084c0 <DMA_CalcBaseAndBitshift+0x64>)
 800846e:	fba2 2303 	umull	r2, r3, r2, r3
 8008472:	091b      	lsrs	r3, r3, #4
 8008474:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008476:	4a13      	ldr	r2, [pc, #76]	; (80084c4 <DMA_CalcBaseAndBitshift+0x68>)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4413      	add	r3, r2
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b03      	cmp	r3, #3
 8008488:	d909      	bls.n	800849e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	659a      	str	r2, [r3, #88]	; 0x58
 800849c:	e007      	b.n	80084ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	aaaaaaab 	.word	0xaaaaaaab
 80084c4:	0800cfac 	.word	0x0800cfac

080084c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d11f      	bne.n	8008522 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d856      	bhi.n	8008596 <DMA_CheckFifoParam+0xce>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <DMA_CheckFifoParam+0x28>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008513 	.word	0x08008513
 80084f8:	08008501 	.word	0x08008501
 80084fc:	08008597 	.word	0x08008597
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d046      	beq.n	800859a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008510:	e043      	b.n	800859a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800851a:	d140      	bne.n	800859e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008520:	e03d      	b.n	800859e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800852a:	d121      	bne.n	8008570 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d837      	bhi.n	80085a2 <DMA_CheckFifoParam+0xda>
 8008532:	a201      	add	r2, pc, #4	; (adr r2, 8008538 <DMA_CheckFifoParam+0x70>)
 8008534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008538:	08008549 	.word	0x08008549
 800853c:	0800854f 	.word	0x0800854f
 8008540:	08008549 	.word	0x08008549
 8008544:	08008561 	.word	0x08008561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
      break;
 800854c:	e030      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d025      	beq.n	80085a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800855e:	e022      	b.n	80085a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008568:	d11f      	bne.n	80085aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800856e:	e01c      	b.n	80085aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d903      	bls.n	800857e <DMA_CheckFifoParam+0xb6>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b03      	cmp	r3, #3
 800857a:	d003      	beq.n	8008584 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800857c:	e018      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e015      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00e      	beq.n	80085ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
      break;
 8008594:	e00b      	b.n	80085ae <DMA_CheckFifoParam+0xe6>
      break;
 8008596:	bf00      	nop
 8008598:	e00a      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      break;
 800859a:	bf00      	nop
 800859c:	e008      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      break;
 800859e:	bf00      	nop
 80085a0:	e006      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      break;
 80085a2:	bf00      	nop
 80085a4:	e004      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      break;
 80085a6:	bf00      	nop
 80085a8:	e002      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80085aa:	bf00      	nop
 80085ac:	e000      	b.n	80085b0 <DMA_CheckFifoParam+0xe8>
      break;
 80085ae:	bf00      	nop
    }
  } 
  
  return status; 
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop

080085c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b089      	sub	sp, #36	; 0x24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085d6:	2300      	movs	r3, #0
 80085d8:	61fb      	str	r3, [r7, #28]
 80085da:	e159      	b.n	8008890 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085dc:	2201      	movs	r2, #1
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	4013      	ands	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	f040 8148 	bne.w	800888a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	2b01      	cmp	r3, #1
 8008604:	d005      	beq.n	8008612 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800860e:	2b02      	cmp	r3, #2
 8008610:	d130      	bne.n	8008674 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	2203      	movs	r2, #3
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	43db      	mvns	r3, r3
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	4013      	ands	r3, r2
 8008628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68da      	ldr	r2, [r3, #12]
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	4313      	orrs	r3, r2
 800863a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008648:	2201      	movs	r2, #1
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	43db      	mvns	r3, r3
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	4013      	ands	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	091b      	lsrs	r3, r3, #4
 800865e:	f003 0201 	and.w	r2, r3, #1
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4313      	orrs	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	2b03      	cmp	r3, #3
 800867e:	d017      	beq.n	80086b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	2203      	movs	r2, #3
 800868c:	fa02 f303 	lsl.w	r3, r2, r3
 8008690:	43db      	mvns	r3, r3
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	4013      	ands	r3, r2
 8008696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d123      	bne.n	8008704 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	08da      	lsrs	r2, r3, #3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3208      	adds	r2, #8
 80086c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	220f      	movs	r2, #15
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	43db      	mvns	r3, r3
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	4013      	ands	r3, r2
 80086de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	08da      	lsrs	r2, r3, #3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3208      	adds	r2, #8
 80086fe:	69b9      	ldr	r1, [r7, #24]
 8008700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	2203      	movs	r2, #3
 8008710:	fa02 f303 	lsl.w	r3, r2, r3
 8008714:	43db      	mvns	r3, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f003 0203 	and.w	r2, r3, #3
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	fa02 f303 	lsl.w	r3, r2, r3
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	4313      	orrs	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80a2 	beq.w	800888a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	4b57      	ldr	r3, [pc, #348]	; (80088a8 <HAL_GPIO_Init+0x2e8>)
 800874c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874e:	4a56      	ldr	r2, [pc, #344]	; (80088a8 <HAL_GPIO_Init+0x2e8>)
 8008750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008754:	6453      	str	r3, [r2, #68]	; 0x44
 8008756:	4b54      	ldr	r3, [pc, #336]	; (80088a8 <HAL_GPIO_Init+0x2e8>)
 8008758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008762:	4a52      	ldr	r2, [pc, #328]	; (80088ac <HAL_GPIO_Init+0x2ec>)
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	089b      	lsrs	r3, r3, #2
 8008768:	3302      	adds	r3, #2
 800876a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800876e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	220f      	movs	r2, #15
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	43db      	mvns	r3, r3
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	4013      	ands	r3, r2
 8008784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a49      	ldr	r2, [pc, #292]	; (80088b0 <HAL_GPIO_Init+0x2f0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d019      	beq.n	80087c2 <HAL_GPIO_Init+0x202>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a48      	ldr	r2, [pc, #288]	; (80088b4 <HAL_GPIO_Init+0x2f4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d013      	beq.n	80087be <HAL_GPIO_Init+0x1fe>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a47      	ldr	r2, [pc, #284]	; (80088b8 <HAL_GPIO_Init+0x2f8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d00d      	beq.n	80087ba <HAL_GPIO_Init+0x1fa>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a46      	ldr	r2, [pc, #280]	; (80088bc <HAL_GPIO_Init+0x2fc>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <HAL_GPIO_Init+0x1f6>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a45      	ldr	r2, [pc, #276]	; (80088c0 <HAL_GPIO_Init+0x300>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d101      	bne.n	80087b2 <HAL_GPIO_Init+0x1f2>
 80087ae:	2304      	movs	r3, #4
 80087b0:	e008      	b.n	80087c4 <HAL_GPIO_Init+0x204>
 80087b2:	2307      	movs	r3, #7
 80087b4:	e006      	b.n	80087c4 <HAL_GPIO_Init+0x204>
 80087b6:	2303      	movs	r3, #3
 80087b8:	e004      	b.n	80087c4 <HAL_GPIO_Init+0x204>
 80087ba:	2302      	movs	r3, #2
 80087bc:	e002      	b.n	80087c4 <HAL_GPIO_Init+0x204>
 80087be:	2301      	movs	r3, #1
 80087c0:	e000      	b.n	80087c4 <HAL_GPIO_Init+0x204>
 80087c2:	2300      	movs	r3, #0
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	f002 0203 	and.w	r2, r2, #3
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	4093      	lsls	r3, r2
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087d4:	4935      	ldr	r1, [pc, #212]	; (80088ac <HAL_GPIO_Init+0x2ec>)
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	089b      	lsrs	r3, r3, #2
 80087da:	3302      	adds	r3, #2
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80087e2:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <HAL_GPIO_Init+0x304>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	43db      	mvns	r3, r3
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	4013      	ands	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008806:	4a2f      	ldr	r2, [pc, #188]	; (80088c4 <HAL_GPIO_Init+0x304>)
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800880c:	4b2d      	ldr	r3, [pc, #180]	; (80088c4 <HAL_GPIO_Init+0x304>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	43db      	mvns	r3, r3
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	4013      	ands	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008830:	4a24      	ldr	r2, [pc, #144]	; (80088c4 <HAL_GPIO_Init+0x304>)
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008836:	4b23      	ldr	r3, [pc, #140]	; (80088c4 <HAL_GPIO_Init+0x304>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	43db      	mvns	r3, r3
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	4013      	ands	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	4313      	orrs	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800885a:	4a1a      	ldr	r2, [pc, #104]	; (80088c4 <HAL_GPIO_Init+0x304>)
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008860:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <HAL_GPIO_Init+0x304>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	43db      	mvns	r3, r3
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	4013      	ands	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008884:	4a0f      	ldr	r2, [pc, #60]	; (80088c4 <HAL_GPIO_Init+0x304>)
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	3301      	adds	r3, #1
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	2b0f      	cmp	r3, #15
 8008894:	f67f aea2 	bls.w	80085dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	3724      	adds	r7, #36	; 0x24
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40023800 	.word	0x40023800
 80088ac:	40013800 	.word	0x40013800
 80088b0:	40020000 	.word	0x40020000
 80088b4:	40020400 	.word	0x40020400
 80088b8:	40020800 	.word	0x40020800
 80088bc:	40020c00 	.word	0x40020c00
 80088c0:	40021000 	.word	0x40021000
 80088c4:	40013c00 	.word	0x40013c00

080088c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	807b      	strh	r3, [r7, #2]
 80088d4:	4613      	mov	r3, r2
 80088d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088d8:	787b      	ldrb	r3, [r7, #1]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088de:	887a      	ldrh	r2, [r7, #2]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80088e4:	e003      	b.n	80088ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088e6:	887b      	ldrh	r3, [r7, #2]
 80088e8:	041a      	lsls	r2, r3, #16
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	619a      	str	r2, [r3, #24]
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
	...

080088fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008906:	4b08      	ldr	r3, [pc, #32]	; (8008928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008908:	695a      	ldr	r2, [r3, #20]
 800890a:	88fb      	ldrh	r3, [r7, #6]
 800890c:	4013      	ands	r3, r2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d006      	beq.n	8008920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008912:	4a05      	ldr	r2, [pc, #20]	; (8008928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008914:	88fb      	ldrh	r3, [r7, #6]
 8008916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	4618      	mov	r0, r3
 800891c:	f7f9 f817 	bl	800194e <HAL_GPIO_EXTI_Callback>
  }
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	40013c00 	.word	0x40013c00

0800892c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e12b      	b.n	8008b96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d106      	bne.n	8008958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7f8 fc72 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2224      	movs	r2, #36	; 0x24
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0201 	bic.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800897e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800898e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008990:	f001 fbd2 	bl	800a138 <HAL_RCC_GetPCLK1Freq>
 8008994:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	4a81      	ldr	r2, [pc, #516]	; (8008ba0 <HAL_I2C_Init+0x274>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d807      	bhi.n	80089b0 <HAL_I2C_Init+0x84>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4a80      	ldr	r2, [pc, #512]	; (8008ba4 <HAL_I2C_Init+0x278>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	bf94      	ite	ls
 80089a8:	2301      	movls	r3, #1
 80089aa:	2300      	movhi	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	e006      	b.n	80089be <HAL_I2C_Init+0x92>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4a7d      	ldr	r2, [pc, #500]	; (8008ba8 <HAL_I2C_Init+0x27c>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	bf94      	ite	ls
 80089b8:	2301      	movls	r3, #1
 80089ba:	2300      	movhi	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e0e7      	b.n	8008b96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4a78      	ldr	r2, [pc, #480]	; (8008bac <HAL_I2C_Init+0x280>)
 80089ca:	fba2 2303 	umull	r2, r3, r2, r3
 80089ce:	0c9b      	lsrs	r3, r3, #18
 80089d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4a6a      	ldr	r2, [pc, #424]	; (8008ba0 <HAL_I2C_Init+0x274>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d802      	bhi.n	8008a00 <HAL_I2C_Init+0xd4>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	3301      	adds	r3, #1
 80089fe:	e009      	b.n	8008a14 <HAL_I2C_Init+0xe8>
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a06:	fb02 f303 	mul.w	r3, r2, r3
 8008a0a:	4a69      	ldr	r2, [pc, #420]	; (8008bb0 <HAL_I2C_Init+0x284>)
 8008a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a10:	099b      	lsrs	r3, r3, #6
 8008a12:	3301      	adds	r3, #1
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6812      	ldr	r2, [r2, #0]
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	495c      	ldr	r1, [pc, #368]	; (8008ba0 <HAL_I2C_Init+0x274>)
 8008a30:	428b      	cmp	r3, r1
 8008a32:	d819      	bhi.n	8008a68 <HAL_I2C_Init+0x13c>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	1e59      	subs	r1, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a42:	1c59      	adds	r1, r3, #1
 8008a44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008a48:	400b      	ands	r3, r1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <HAL_I2C_Init+0x138>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1e59      	subs	r1, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a62:	e051      	b.n	8008b08 <HAL_I2C_Init+0x1dc>
 8008a64:	2304      	movs	r3, #4
 8008a66:	e04f      	b.n	8008b08 <HAL_I2C_Init+0x1dc>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d111      	bne.n	8008a94 <HAL_I2C_Init+0x168>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	1e58      	subs	r0, r3, #1
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6859      	ldr	r1, [r3, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	440b      	add	r3, r1
 8008a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a82:	3301      	adds	r3, #1
 8008a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	bf0c      	ite	eq
 8008a8c:	2301      	moveq	r3, #1
 8008a8e:	2300      	movne	r3, #0
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	e012      	b.n	8008aba <HAL_I2C_Init+0x18e>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	1e58      	subs	r0, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6859      	ldr	r1, [r3, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	0099      	lsls	r1, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008aaa:	3301      	adds	r3, #1
 8008aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	bf0c      	ite	eq
 8008ab4:	2301      	moveq	r3, #1
 8008ab6:	2300      	movne	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <HAL_I2C_Init+0x196>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e022      	b.n	8008b08 <HAL_I2C_Init+0x1dc>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10e      	bne.n	8008ae8 <HAL_I2C_Init+0x1bc>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	1e58      	subs	r0, r3, #1
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6859      	ldr	r1, [r3, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	440b      	add	r3, r1
 8008ad8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008adc:	3301      	adds	r3, #1
 8008ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ae6:	e00f      	b.n	8008b08 <HAL_I2C_Init+0x1dc>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	1e58      	subs	r0, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6859      	ldr	r1, [r3, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	440b      	add	r3, r1
 8008af6:	0099      	lsls	r1, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8008afe:	3301      	adds	r3, #1
 8008b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	6809      	ldr	r1, [r1, #0]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69da      	ldr	r2, [r3, #28]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	6911      	ldr	r1, [r2, #16]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	68d2      	ldr	r2, [r2, #12]
 8008b42:	4311      	orrs	r1, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	695a      	ldr	r2, [r3, #20]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	000186a0 	.word	0x000186a0
 8008ba4:	001e847f 	.word	0x001e847f
 8008ba8:	003d08ff 	.word	0x003d08ff
 8008bac:	431bde83 	.word	0x431bde83
 8008bb0:	10624dd3 	.word	0x10624dd3

08008bb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	817b      	strh	r3, [r7, #10]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008bc8:	f7fe ffb6 	bl	8007b38 <HAL_GetTick>
 8008bcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	f040 80e0 	bne.w	8008d9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	2319      	movs	r3, #25
 8008be2:	2201      	movs	r2, #1
 8008be4:	4970      	ldr	r1, [pc, #448]	; (8008da8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fc58 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e0d3      	b.n	8008d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_I2C_Master_Transmit+0x50>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e0cc      	b.n	8008d9e <HAL_I2C_Master_Transmit+0x1ea>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d007      	beq.n	8008c2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 0201 	orr.w	r2, r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2221      	movs	r2, #33	; 0x21
 8008c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2210      	movs	r2, #16
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	893a      	ldrh	r2, [r7, #8]
 8008c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4a50      	ldr	r2, [pc, #320]	; (8008dac <HAL_I2C_Master_Transmit+0x1f8>)
 8008c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c6c:	8979      	ldrh	r1, [r7, #10]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	6a3a      	ldr	r2, [r7, #32]
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 fac2 	bl	80091fc <I2C_MasterRequestWrite>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e08d      	b.n	8008d9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	613b      	str	r3, [r7, #16]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008c98:	e066      	b.n	8008d68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	6a39      	ldr	r1, [r7, #32]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 fcd2 	bl	8009648 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00d      	beq.n	8008cc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d107      	bne.n	8008cc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e06b      	b.n	8008d9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d11b      	bne.n	8008d3c <HAL_I2C_Master_Transmit+0x188>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d017      	beq.n	8008d3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	781a      	ldrb	r2, [r3, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d34:	3b01      	subs	r3, #1
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	6a39      	ldr	r1, [r7, #32]
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 fcc2 	bl	80096ca <I2C_WaitOnBTFFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00d      	beq.n	8008d68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d107      	bne.n	8008d64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e01a      	b.n	8008d9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d194      	bne.n	8008c9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e000      	b.n	8008d9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008d9c:	2302      	movs	r3, #2
  }
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	00100002 	.word	0x00100002
 8008dac:	ffff0000 	.word	0xffff0000

08008db0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08c      	sub	sp, #48	; 0x30
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	817b      	strh	r3, [r7, #10]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008dc4:	f7fe feb8 	bl	8007b38 <HAL_GetTick>
 8008dc8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	f040 820b 	bne.w	80091ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	2319      	movs	r3, #25
 8008dde:	2201      	movs	r2, #1
 8008de0:	497c      	ldr	r1, [pc, #496]	; (8008fd4 <HAL_I2C_Master_Receive+0x224>)
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 fb5a 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008dee:	2302      	movs	r3, #2
 8008df0:	e1fe      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_I2C_Master_Receive+0x50>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e1f7      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d007      	beq.n	8008e26 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f042 0201 	orr.w	r2, r2, #1
 8008e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2222      	movs	r2, #34	; 0x22
 8008e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2210      	movs	r2, #16
 8008e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	893a      	ldrh	r2, [r7, #8]
 8008e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4a5c      	ldr	r2, [pc, #368]	; (8008fd8 <HAL_I2C_Master_Receive+0x228>)
 8008e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e68:	8979      	ldrh	r1, [r7, #10]
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 fa46 	bl	8009300 <I2C_MasterRequestRead>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e1b8      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d113      	bne.n	8008eae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e86:	2300      	movs	r3, #0
 8008e88:	623b      	str	r3, [r7, #32]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	623b      	str	r3, [r7, #32]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	e18c      	b.n	80091c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d11b      	bne.n	8008eee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	61fb      	str	r3, [r7, #28]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e16c      	b.n	80091c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d11b      	bne.n	8008f2e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f16:	2300      	movs	r3, #0
 8008f18:	61bb      	str	r3, [r7, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	61bb      	str	r3, [r7, #24]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	e14c      	b.n	80091c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	617b      	str	r3, [r7, #20]
 8008f52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008f54:	e138      	b.n	80091c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	f200 80f1 	bhi.w	8009142 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d123      	bne.n	8008fb0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 fbed 	bl	800974c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e139      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691a      	ldr	r2, [r3, #16]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	b2d2      	uxtb	r2, r2
 8008f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fae:	e10b      	b.n	80091c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d14e      	bne.n	8009056 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4906      	ldr	r1, [pc, #24]	; (8008fdc <HAL_I2C_Master_Receive+0x22c>)
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 fa6a 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e10e      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
 8008fd2:	bf00      	nop
 8008fd4:	00100002 	.word	0x00100002
 8008fd8:	ffff0000 	.word	0xffff0000
 8008fdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691a      	ldr	r2, [r3, #16]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800900c:	3b01      	subs	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009018:	b29b      	uxth	r3, r3
 800901a:	3b01      	subs	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	b2d2      	uxtb	r2, r2
 800902e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800903e:	3b01      	subs	r3, #1
 8009040:	b29a      	uxth	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800904a:	b29b      	uxth	r3, r3
 800904c:	3b01      	subs	r3, #1
 800904e:	b29a      	uxth	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009054:	e0b8      	b.n	80091c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	2200      	movs	r2, #0
 800905e:	4966      	ldr	r1, [pc, #408]	; (80091f8 <HAL_I2C_Master_Receive+0x448>)
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fa1b 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e0bf      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800907e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691a      	ldr	r2, [r3, #16]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	2200      	movs	r2, #0
 80090ba:	494f      	ldr	r1, [pc, #316]	; (80091f8 <HAL_I2C_Master_Receive+0x448>)
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f9ed 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e091      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691a      	ldr	r2, [r3, #16]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	b2d2      	uxtb	r2, r2
 80090e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	691a      	ldr	r2, [r3, #16]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009136:	b29b      	uxth	r3, r3
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009140:	e042      	b.n	80091c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fb00 	bl	800974c <I2C_WaitOnRXNEFlagUntilTimeout>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e04c      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	b2d2      	uxtb	r2, r2
 8009162:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009172:	3b01      	subs	r3, #1
 8009174:	b29a      	uxth	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917e:	b29b      	uxth	r3, r3
 8009180:	3b01      	subs	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f003 0304 	and.w	r3, r3, #4
 8009192:	2b04      	cmp	r3, #4
 8009194:	d118      	bne.n	80091c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	b2d2      	uxtb	r2, r2
 80091a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091be:	b29b      	uxth	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f47f aec2 	bne.w	8008f56 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e000      	b.n	80091f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80091ee:	2302      	movs	r3, #2
  }
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3728      	adds	r7, #40	; 0x28
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	00010004 	.word	0x00010004

080091fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	607a      	str	r2, [r7, #4]
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	460b      	mov	r3, r1
 800920a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b08      	cmp	r3, #8
 8009216:	d006      	beq.n	8009226 <I2C_MasterRequestWrite+0x2a>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d003      	beq.n	8009226 <I2C_MasterRequestWrite+0x2a>
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009224:	d108      	bne.n	8009238 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	e00b      	b.n	8009250 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923c:	2b12      	cmp	r3, #18
 800923e:	d107      	bne.n	8009250 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800924e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f91d 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00d      	beq.n	8009284 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009276:	d103      	bne.n	8009280 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800927e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e035      	b.n	80092f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800928c:	d108      	bne.n	80092a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800928e:	897b      	ldrh	r3, [r7, #10]
 8009290:	b2db      	uxtb	r3, r3
 8009292:	461a      	mov	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800929c:	611a      	str	r2, [r3, #16]
 800929e:	e01b      	b.n	80092d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80092a0:	897b      	ldrh	r3, [r7, #10]
 80092a2:	11db      	asrs	r3, r3, #7
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	f003 0306 	and.w	r3, r3, #6
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	f063 030f 	orn	r3, r3, #15
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	490e      	ldr	r1, [pc, #56]	; (80092f8 <I2C_MasterRequestWrite+0xfc>)
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 f943 	bl	800954a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e010      	b.n	80092f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80092ce:	897b      	ldrh	r3, [r7, #10]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	4907      	ldr	r1, [pc, #28]	; (80092fc <I2C_MasterRequestWrite+0x100>)
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f933 	bl	800954a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e000      	b.n	80092f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	00010008 	.word	0x00010008
 80092fc:	00010002 	.word	0x00010002

08009300 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af02      	add	r7, sp, #8
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	460b      	mov	r3, r1
 800930e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009324:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b08      	cmp	r3, #8
 800932a:	d006      	beq.n	800933a <I2C_MasterRequestRead+0x3a>
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d003      	beq.n	800933a <I2C_MasterRequestRead+0x3a>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009338:	d108      	bne.n	800934c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	e00b      	b.n	8009364 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009350:	2b11      	cmp	r3, #17
 8009352:	d107      	bne.n	8009364 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009362:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f893 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00d      	beq.n	8009398 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800938a:	d103      	bne.n	8009394 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e079      	b.n	800948c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093a0:	d108      	bne.n	80093b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80093a2:	897b      	ldrh	r3, [r7, #10]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	611a      	str	r2, [r3, #16]
 80093b2:	e05f      	b.n	8009474 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80093b4:	897b      	ldrh	r3, [r7, #10]
 80093b6:	11db      	asrs	r3, r3, #7
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f003 0306 	and.w	r3, r3, #6
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f063 030f 	orn	r3, r3, #15
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4930      	ldr	r1, [pc, #192]	; (8009494 <I2C_MasterRequestRead+0x194>)
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 f8b9 	bl	800954a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e054      	b.n	800948c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80093e2:	897b      	ldrh	r3, [r7, #10]
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4929      	ldr	r1, [pc, #164]	; (8009498 <I2C_MasterRequestRead+0x198>)
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 f8a9 	bl	800954a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e044      	b.n	800948c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009402:	2300      	movs	r3, #0
 8009404:	613b      	str	r3, [r7, #16]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	613b      	str	r3, [r7, #16]
 8009416:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009426:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f831 	bl	800949c <I2C_WaitOnFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00d      	beq.n	800945c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800944e:	d103      	bne.n	8009458 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009456:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e017      	b.n	800948c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800945c:	897b      	ldrh	r3, [r7, #10]
 800945e:	11db      	asrs	r3, r3, #7
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f003 0306 	and.w	r3, r3, #6
 8009466:	b2db      	uxtb	r3, r3
 8009468:	f063 030e 	orn	r3, r3, #14
 800946c:	b2da      	uxtb	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	4907      	ldr	r1, [pc, #28]	; (8009498 <I2C_MasterRequestRead+0x198>)
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f865 	bl	800954a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3718      	adds	r7, #24
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	00010008 	.word	0x00010008
 8009498:	00010002 	.word	0x00010002

0800949c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	4613      	mov	r3, r2
 80094aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094ac:	e025      	b.n	80094fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b4:	d021      	beq.n	80094fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b6:	f7fe fb3f 	bl	8007b38 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d116      	bne.n	80094fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e6:	f043 0220 	orr.w	r2, r3, #32
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e023      	b.n	8009542 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	0c1b      	lsrs	r3, r3, #16
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b01      	cmp	r3, #1
 8009502:	d10d      	bne.n	8009520 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	43da      	mvns	r2, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4013      	ands	r3, r2
 8009510:	b29b      	uxth	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	e00c      	b.n	800953a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	43da      	mvns	r2, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4013      	ands	r3, r2
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	bf0c      	ite	eq
 8009532:	2301      	moveq	r3, #1
 8009534:	2300      	movne	r3, #0
 8009536:	b2db      	uxtb	r3, r3
 8009538:	461a      	mov	r2, r3
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	429a      	cmp	r2, r3
 800953e:	d0b6      	beq.n	80094ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	607a      	str	r2, [r7, #4]
 8009556:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009558:	e051      	b.n	80095fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009568:	d123      	bne.n	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009578:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009582:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959e:	f043 0204 	orr.w	r2, r3, #4
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e046      	b.n	8009640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b8:	d021      	beq.n	80095fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ba:	f7fe fabd 	bl	8007b38 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d302      	bcc.n	80095d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d116      	bne.n	80095fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2220      	movs	r2, #32
 80095da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ea:	f043 0220 	orr.w	r2, r3, #32
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e020      	b.n	8009640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10c      	bne.n	8009622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	43da      	mvns	r2, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4013      	ands	r3, r2
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	bf14      	ite	ne
 800961a:	2301      	movne	r3, #1
 800961c:	2300      	moveq	r3, #0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	e00b      	b.n	800963a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	43da      	mvns	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4013      	ands	r3, r2
 800962e:	b29b      	uxth	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	bf14      	ite	ne
 8009634:	2301      	movne	r3, #1
 8009636:	2300      	moveq	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d18d      	bne.n	800955a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009654:	e02d      	b.n	80096b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f8ce 	bl	80097f8 <I2C_IsAcknowledgeFailed>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e02d      	b.n	80096c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d021      	beq.n	80096b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966e:	f7fe fa63 	bl	8007b38 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	429a      	cmp	r2, r3
 800967c:	d302      	bcc.n	8009684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d116      	bne.n	80096b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969e:	f043 0220 	orr.w	r2, r3, #32
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e007      	b.n	80096c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096bc:	2b80      	cmp	r3, #128	; 0x80
 80096be:	d1ca      	bne.n	8009656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096d6:	e02d      	b.n	8009734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f88d 	bl	80097f8 <I2C_IsAcknowledgeFailed>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e02d      	b.n	8009744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ee:	d021      	beq.n	8009734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f0:	f7fe fa22 	bl	8007b38 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d302      	bcc.n	8009706 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d116      	bne.n	8009734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2220      	movs	r2, #32
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	f043 0220 	orr.w	r2, r3, #32
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e007      	b.n	8009744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b04      	cmp	r3, #4
 8009740:	d1ca      	bne.n	80096d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009758:	e042      	b.n	80097e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b10      	cmp	r3, #16
 8009766:	d119      	bne.n	800979c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f06f 0210 	mvn.w	r2, #16
 8009770:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e029      	b.n	80097f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800979c:	f7fe f9cc 	bl	8007b38 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d302      	bcc.n	80097b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d116      	bne.n	80097e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097cc:	f043 0220 	orr.w	r2, r3, #32
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e007      	b.n	80097f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ea:	2b40      	cmp	r3, #64	; 0x40
 80097ec:	d1b5      	bne.n	800975a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980e:	d11b      	bne.n	8009848 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009818:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2220      	movs	r2, #32
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009834:	f043 0204 	orr.w	r2, r3, #4
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
	...

08009858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e267      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	2b00      	cmp	r3, #0
 8009874:	d075      	beq.n	8009962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009876:	4b88      	ldr	r3, [pc, #544]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f003 030c 	and.w	r3, r3, #12
 800987e:	2b04      	cmp	r3, #4
 8009880:	d00c      	beq.n	800989c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009882:	4b85      	ldr	r3, [pc, #532]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800988a:	2b08      	cmp	r3, #8
 800988c:	d112      	bne.n	80098b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800988e:	4b82      	ldr	r3, [pc, #520]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800989a:	d10b      	bne.n	80098b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800989c:	4b7e      	ldr	r3, [pc, #504]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d05b      	beq.n	8009960 <HAL_RCC_OscConfig+0x108>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d157      	bne.n	8009960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e242      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098bc:	d106      	bne.n	80098cc <HAL_RCC_OscConfig+0x74>
 80098be:	4b76      	ldr	r3, [pc, #472]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a75      	ldr	r2, [pc, #468]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	e01d      	b.n	8009908 <HAL_RCC_OscConfig+0xb0>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098d4:	d10c      	bne.n	80098f0 <HAL_RCC_OscConfig+0x98>
 80098d6:	4b70      	ldr	r3, [pc, #448]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a6f      	ldr	r2, [pc, #444]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098e0:	6013      	str	r3, [r2, #0]
 80098e2:	4b6d      	ldr	r3, [pc, #436]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a6c      	ldr	r2, [pc, #432]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	e00b      	b.n	8009908 <HAL_RCC_OscConfig+0xb0>
 80098f0:	4b69      	ldr	r3, [pc, #420]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a68      	ldr	r2, [pc, #416]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	4b66      	ldr	r3, [pc, #408]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a65      	ldr	r2, [pc, #404]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d013      	beq.n	8009938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009910:	f7fe f912 	bl	8007b38 <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009918:	f7fe f90e 	bl	8007b38 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	; 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e207      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800992a:	4b5b      	ldr	r3, [pc, #364]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f0      	beq.n	8009918 <HAL_RCC_OscConfig+0xc0>
 8009936:	e014      	b.n	8009962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009938:	f7fe f8fe 	bl	8007b38 <HAL_GetTick>
 800993c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800993e:	e008      	b.n	8009952 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009940:	f7fe f8fa 	bl	8007b38 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b64      	cmp	r3, #100	; 0x64
 800994c:	d901      	bls.n	8009952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e1f3      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009952:	4b51      	ldr	r3, [pc, #324]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1f0      	bne.n	8009940 <HAL_RCC_OscConfig+0xe8>
 800995e:	e000      	b.n	8009962 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 0302 	and.w	r3, r3, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d063      	beq.n	8009a36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800996e:	4b4a      	ldr	r3, [pc, #296]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 030c 	and.w	r3, r3, #12
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00b      	beq.n	8009992 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800997a:	4b47      	ldr	r3, [pc, #284]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009982:	2b08      	cmp	r3, #8
 8009984:	d11c      	bne.n	80099c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009986:	4b44      	ldr	r3, [pc, #272]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d116      	bne.n	80099c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009992:	4b41      	ldr	r3, [pc, #260]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d005      	beq.n	80099aa <HAL_RCC_OscConfig+0x152>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d001      	beq.n	80099aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e1c7      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099aa:	4b3b      	ldr	r3, [pc, #236]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	4937      	ldr	r1, [pc, #220]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099be:	e03a      	b.n	8009a36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d020      	beq.n	8009a0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099c8:	4b34      	ldr	r3, [pc, #208]	; (8009a9c <HAL_RCC_OscConfig+0x244>)
 80099ca:	2201      	movs	r2, #1
 80099cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ce:	f7fe f8b3 	bl	8007b38 <HAL_GetTick>
 80099d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099d4:	e008      	b.n	80099e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099d6:	f7fe f8af 	bl	8007b38 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d901      	bls.n	80099e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e1a8      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099e8:	4b2b      	ldr	r3, [pc, #172]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 0302 	and.w	r3, r3, #2
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0f0      	beq.n	80099d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099f4:	4b28      	ldr	r3, [pc, #160]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	00db      	lsls	r3, r3, #3
 8009a02:	4925      	ldr	r1, [pc, #148]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	600b      	str	r3, [r1, #0]
 8009a08:	e015      	b.n	8009a36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a0a:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <HAL_RCC_OscConfig+0x244>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a10:	f7fe f892 	bl	8007b38 <HAL_GetTick>
 8009a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a16:	e008      	b.n	8009a2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a18:	f7fe f88e 	bl	8007b38 <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d901      	bls.n	8009a2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e187      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0302 	and.w	r3, r3, #2
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1f0      	bne.n	8009a18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0308 	and.w	r3, r3, #8
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d036      	beq.n	8009ab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d016      	beq.n	8009a78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a4a:	4b15      	ldr	r3, [pc, #84]	; (8009aa0 <HAL_RCC_OscConfig+0x248>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a50:	f7fe f872 	bl	8007b38 <HAL_GetTick>
 8009a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a56:	e008      	b.n	8009a6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a58:	f7fe f86e 	bl	8007b38 <HAL_GetTick>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e167      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a6a:	4b0b      	ldr	r3, [pc, #44]	; (8009a98 <HAL_RCC_OscConfig+0x240>)
 8009a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a6e:	f003 0302 	and.w	r3, r3, #2
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0f0      	beq.n	8009a58 <HAL_RCC_OscConfig+0x200>
 8009a76:	e01b      	b.n	8009ab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a78:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <HAL_RCC_OscConfig+0x248>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a7e:	f7fe f85b 	bl	8007b38 <HAL_GetTick>
 8009a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a84:	e00e      	b.n	8009aa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a86:	f7fe f857 	bl	8007b38 <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d907      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e150      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
 8009a98:	40023800 	.word	0x40023800
 8009a9c:	42470000 	.word	0x42470000
 8009aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aa4:	4b88      	ldr	r3, [pc, #544]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1ea      	bne.n	8009a86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8097 	beq.w	8009bec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ac2:	4b81      	ldr	r3, [pc, #516]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10f      	bne.n	8009aee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60bb      	str	r3, [r7, #8]
 8009ad2:	4b7d      	ldr	r3, [pc, #500]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	4a7c      	ldr	r2, [pc, #496]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009adc:	6413      	str	r3, [r2, #64]	; 0x40
 8009ade:	4b7a      	ldr	r3, [pc, #488]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae6:	60bb      	str	r3, [r7, #8]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aea:	2301      	movs	r3, #1
 8009aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aee:	4b77      	ldr	r3, [pc, #476]	; (8009ccc <HAL_RCC_OscConfig+0x474>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d118      	bne.n	8009b2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009afa:	4b74      	ldr	r3, [pc, #464]	; (8009ccc <HAL_RCC_OscConfig+0x474>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a73      	ldr	r2, [pc, #460]	; (8009ccc <HAL_RCC_OscConfig+0x474>)
 8009b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b06:	f7fe f817 	bl	8007b38 <HAL_GetTick>
 8009b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b0c:	e008      	b.n	8009b20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b0e:	f7fe f813 	bl	8007b38 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d901      	bls.n	8009b20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e10c      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b20:	4b6a      	ldr	r3, [pc, #424]	; (8009ccc <HAL_RCC_OscConfig+0x474>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0f0      	beq.n	8009b0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d106      	bne.n	8009b42 <HAL_RCC_OscConfig+0x2ea>
 8009b34:	4b64      	ldr	r3, [pc, #400]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b38:	4a63      	ldr	r2, [pc, #396]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b3a:	f043 0301 	orr.w	r3, r3, #1
 8009b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b40:	e01c      	b.n	8009b7c <HAL_RCC_OscConfig+0x324>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	d10c      	bne.n	8009b64 <HAL_RCC_OscConfig+0x30c>
 8009b4a:	4b5f      	ldr	r3, [pc, #380]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a5e      	ldr	r2, [pc, #376]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b50:	f043 0304 	orr.w	r3, r3, #4
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
 8009b56:	4b5c      	ldr	r3, [pc, #368]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	4a5b      	ldr	r2, [pc, #364]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b5c:	f043 0301 	orr.w	r3, r3, #1
 8009b60:	6713      	str	r3, [r2, #112]	; 0x70
 8009b62:	e00b      	b.n	8009b7c <HAL_RCC_OscConfig+0x324>
 8009b64:	4b58      	ldr	r3, [pc, #352]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b68:	4a57      	ldr	r2, [pc, #348]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b6a:	f023 0301 	bic.w	r3, r3, #1
 8009b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b70:	4b55      	ldr	r3, [pc, #340]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b74:	4a54      	ldr	r2, [pc, #336]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009b76:	f023 0304 	bic.w	r3, r3, #4
 8009b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d015      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b84:	f7fd ffd8 	bl	8007b38 <HAL_GetTick>
 8009b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b8a:	e00a      	b.n	8009ba2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b8c:	f7fd ffd4 	bl	8007b38 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d901      	bls.n	8009ba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e0cb      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ba2:	4b49      	ldr	r3, [pc, #292]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba6:	f003 0302 	and.w	r3, r3, #2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0ee      	beq.n	8009b8c <HAL_RCC_OscConfig+0x334>
 8009bae:	e014      	b.n	8009bda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bb0:	f7fd ffc2 	bl	8007b38 <HAL_GetTick>
 8009bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bb6:	e00a      	b.n	8009bce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bb8:	f7fd ffbe 	bl	8007b38 <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d901      	bls.n	8009bce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e0b5      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bce:	4b3e      	ldr	r3, [pc, #248]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1ee      	bne.n	8009bb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d105      	bne.n	8009bec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009be0:	4b39      	ldr	r3, [pc, #228]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be4:	4a38      	ldr	r2, [pc, #224]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80a1 	beq.w	8009d38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bf6:	4b34      	ldr	r3, [pc, #208]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 030c 	and.w	r3, r3, #12
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d05c      	beq.n	8009cbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d141      	bne.n	8009c8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c0a:	4b31      	ldr	r3, [pc, #196]	; (8009cd0 <HAL_RCC_OscConfig+0x478>)
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c10:	f7fd ff92 	bl	8007b38 <HAL_GetTick>
 8009c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c16:	e008      	b.n	8009c2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c18:	f7fd ff8e 	bl	8007b38 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d901      	bls.n	8009c2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e087      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c2a:	4b27      	ldr	r3, [pc, #156]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1f0      	bne.n	8009c18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69da      	ldr	r2, [r3, #28]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	019b      	lsls	r3, r3, #6
 8009c46:	431a      	orrs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4c:	085b      	lsrs	r3, r3, #1
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	041b      	lsls	r3, r3, #16
 8009c52:	431a      	orrs	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c58:	061b      	lsls	r3, r3, #24
 8009c5a:	491b      	ldr	r1, [pc, #108]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c60:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <HAL_RCC_OscConfig+0x478>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c66:	f7fd ff67 	bl	8007b38 <HAL_GetTick>
 8009c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c6c:	e008      	b.n	8009c80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c6e:	f7fd ff63 	bl	8007b38 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e05c      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c80:	4b11      	ldr	r3, [pc, #68]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d0f0      	beq.n	8009c6e <HAL_RCC_OscConfig+0x416>
 8009c8c:	e054      	b.n	8009d38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c8e:	4b10      	ldr	r3, [pc, #64]	; (8009cd0 <HAL_RCC_OscConfig+0x478>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c94:	f7fd ff50 	bl	8007b38 <HAL_GetTick>
 8009c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c9a:	e008      	b.n	8009cae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c9c:	f7fd ff4c 	bl	8007b38 <HAL_GetTick>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d901      	bls.n	8009cae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e045      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <HAL_RCC_OscConfig+0x470>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1f0      	bne.n	8009c9c <HAL_RCC_OscConfig+0x444>
 8009cba:	e03d      	b.n	8009d38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d107      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e038      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
 8009cc8:	40023800 	.word	0x40023800
 8009ccc:	40007000 	.word	0x40007000
 8009cd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009cd4:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <HAL_RCC_OscConfig+0x4ec>)
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d028      	beq.n	8009d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d121      	bne.n	8009d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d11a      	bne.n	8009d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d04:	4013      	ands	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d111      	bne.n	8009d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1a:	085b      	lsrs	r3, r3, #1
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d107      	bne.n	8009d34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d001      	beq.n	8009d38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	e000      	b.n	8009d3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	40023800 	.word	0x40023800

08009d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e0cc      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d5c:	4b68      	ldr	r3, [pc, #416]	; (8009f00 <HAL_RCC_ClockConfig+0x1b8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0307 	and.w	r3, r3, #7
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d90c      	bls.n	8009d84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d6a:	4b65      	ldr	r3, [pc, #404]	; (8009f00 <HAL_RCC_ClockConfig+0x1b8>)
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d72:	4b63      	ldr	r3, [pc, #396]	; (8009f00 <HAL_RCC_ClockConfig+0x1b8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d001      	beq.n	8009d84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e0b8      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d020      	beq.n	8009dd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d9c:	4b59      	ldr	r3, [pc, #356]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	4a58      	ldr	r2, [pc, #352]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009da2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009da6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0308 	and.w	r3, r3, #8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009db4:	4b53      	ldr	r3, [pc, #332]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	4a52      	ldr	r2, [pc, #328]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009dba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009dbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dc0:	4b50      	ldr	r3, [pc, #320]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	494d      	ldr	r1, [pc, #308]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d044      	beq.n	8009e68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d107      	bne.n	8009df6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009de6:	4b47      	ldr	r3, [pc, #284]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d119      	bne.n	8009e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e07f      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d003      	beq.n	8009e06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d107      	bne.n	8009e16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e06:	4b3f      	ldr	r3, [pc, #252]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d109      	bne.n	8009e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e06f      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e16:	4b3b      	ldr	r3, [pc, #236]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e067      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e26:	4b37      	ldr	r3, [pc, #220]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f023 0203 	bic.w	r2, r3, #3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	4934      	ldr	r1, [pc, #208]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e38:	f7fd fe7e 	bl	8007b38 <HAL_GetTick>
 8009e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e3e:	e00a      	b.n	8009e56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e40:	f7fd fe7a 	bl	8007b38 <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d901      	bls.n	8009e56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e04f      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e56:	4b2b      	ldr	r3, [pc, #172]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f003 020c 	and.w	r2, r3, #12
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d1eb      	bne.n	8009e40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <HAL_RCC_ClockConfig+0x1b8>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d20c      	bcs.n	8009e90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e76:	4b22      	ldr	r3, [pc, #136]	; (8009f00 <HAL_RCC_ClockConfig+0x1b8>)
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	b2d2      	uxtb	r2, r2
 8009e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e7e:	4b20      	ldr	r3, [pc, #128]	; (8009f00 <HAL_RCC_ClockConfig+0x1b8>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d001      	beq.n	8009e90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e032      	b.n	8009ef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d008      	beq.n	8009eae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e9c:	4b19      	ldr	r3, [pc, #100]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	4916      	ldr	r1, [pc, #88]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0308 	and.w	r3, r3, #8
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009eba:	4b12      	ldr	r3, [pc, #72]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	490e      	ldr	r1, [pc, #56]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ece:	f000 f821 	bl	8009f14 <HAL_RCC_GetSysClockFreq>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	091b      	lsrs	r3, r3, #4
 8009eda:	f003 030f 	and.w	r3, r3, #15
 8009ede:	490a      	ldr	r1, [pc, #40]	; (8009f08 <HAL_RCC_ClockConfig+0x1c0>)
 8009ee0:	5ccb      	ldrb	r3, [r1, r3]
 8009ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ee6:	4a09      	ldr	r2, [pc, #36]	; (8009f0c <HAL_RCC_ClockConfig+0x1c4>)
 8009ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009eea:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <HAL_RCC_ClockConfig+0x1c8>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fd fdde 	bl	8007ab0 <HAL_InitTick>

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	40023c00 	.word	0x40023c00
 8009f04:	40023800 	.word	0x40023800
 8009f08:	0800c8bc 	.word	0x0800c8bc
 8009f0c:	200004e4 	.word	0x200004e4
 8009f10:	200007b8 	.word	0x200007b8

08009f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f18:	b094      	sub	sp, #80	; 0x50
 8009f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8009f20:	2300      	movs	r3, #0
 8009f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f24:	2300      	movs	r3, #0
 8009f26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f2c:	4b79      	ldr	r3, [pc, #484]	; (800a114 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 030c 	and.w	r3, r3, #12
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d00d      	beq.n	8009f54 <HAL_RCC_GetSysClockFreq+0x40>
 8009f38:	2b08      	cmp	r3, #8
 8009f3a:	f200 80e1 	bhi.w	800a100 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_RCC_GetSysClockFreq+0x34>
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d003      	beq.n	8009f4e <HAL_RCC_GetSysClockFreq+0x3a>
 8009f46:	e0db      	b.n	800a100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f48:	4b73      	ldr	r3, [pc, #460]	; (800a118 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009f4c:	e0db      	b.n	800a106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f4e:	4b73      	ldr	r3, [pc, #460]	; (800a11c <HAL_RCC_GetSysClockFreq+0x208>)
 8009f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009f52:	e0d8      	b.n	800a106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f54:	4b6f      	ldr	r3, [pc, #444]	; (800a114 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f5e:	4b6d      	ldr	r3, [pc, #436]	; (800a114 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d063      	beq.n	800a032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f6a:	4b6a      	ldr	r3, [pc, #424]	; (800a114 <HAL_RCC_GetSysClockFreq+0x200>)
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	099b      	lsrs	r3, r3, #6
 8009f70:	2200      	movs	r2, #0
 8009f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8009f7e:	2300      	movs	r3, #0
 8009f80:	637b      	str	r3, [r7, #52]	; 0x34
 8009f82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009f86:	4622      	mov	r2, r4
 8009f88:	462b      	mov	r3, r5
 8009f8a:	f04f 0000 	mov.w	r0, #0
 8009f8e:	f04f 0100 	mov.w	r1, #0
 8009f92:	0159      	lsls	r1, r3, #5
 8009f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f98:	0150      	lsls	r0, r2, #5
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	1a51      	subs	r1, r2, r1
 8009fa2:	6139      	str	r1, [r7, #16]
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	f04f 0300 	mov.w	r3, #0
 8009fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009fb8:	4659      	mov	r1, fp
 8009fba:	018b      	lsls	r3, r1, #6
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009fc2:	4651      	mov	r1, sl
 8009fc4:	018a      	lsls	r2, r1, #6
 8009fc6:	4651      	mov	r1, sl
 8009fc8:	ebb2 0801 	subs.w	r8, r2, r1
 8009fcc:	4659      	mov	r1, fp
 8009fce:	eb63 0901 	sbc.w	r9, r3, r1
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	f04f 0300 	mov.w	r3, #0
 8009fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009fe6:	4690      	mov	r8, r2
 8009fe8:	4699      	mov	r9, r3
 8009fea:	4623      	mov	r3, r4
 8009fec:	eb18 0303 	adds.w	r3, r8, r3
 8009ff0:	60bb      	str	r3, [r7, #8]
 8009ff2:	462b      	mov	r3, r5
 8009ff4:	eb49 0303 	adc.w	r3, r9, r3
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	f04f 0200 	mov.w	r2, #0
 8009ffe:	f04f 0300 	mov.w	r3, #0
 800a002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a006:	4629      	mov	r1, r5
 800a008:	024b      	lsls	r3, r1, #9
 800a00a:	4621      	mov	r1, r4
 800a00c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a010:	4621      	mov	r1, r4
 800a012:	024a      	lsls	r2, r1, #9
 800a014:	4610      	mov	r0, r2
 800a016:	4619      	mov	r1, r3
 800a018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01a:	2200      	movs	r2, #0
 800a01c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a01e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a024:	f7f6 f92c 	bl	8000280 <__aeabi_uldivmod>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4613      	mov	r3, r2
 800a02e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a030:	e058      	b.n	800a0e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a032:	4b38      	ldr	r3, [pc, #224]	; (800a114 <HAL_RCC_GetSysClockFreq+0x200>)
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	099b      	lsrs	r3, r3, #6
 800a038:	2200      	movs	r2, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	4611      	mov	r1, r2
 800a03e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a042:	623b      	str	r3, [r7, #32]
 800a044:	2300      	movs	r3, #0
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
 800a048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a04c:	4642      	mov	r2, r8
 800a04e:	464b      	mov	r3, r9
 800a050:	f04f 0000 	mov.w	r0, #0
 800a054:	f04f 0100 	mov.w	r1, #0
 800a058:	0159      	lsls	r1, r3, #5
 800a05a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a05e:	0150      	lsls	r0, r2, #5
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4641      	mov	r1, r8
 800a066:	ebb2 0a01 	subs.w	sl, r2, r1
 800a06a:	4649      	mov	r1, r9
 800a06c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a070:	f04f 0200 	mov.w	r2, #0
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a07c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a084:	ebb2 040a 	subs.w	r4, r2, sl
 800a088:	eb63 050b 	sbc.w	r5, r3, fp
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f04f 0300 	mov.w	r3, #0
 800a094:	00eb      	lsls	r3, r5, #3
 800a096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a09a:	00e2      	lsls	r2, r4, #3
 800a09c:	4614      	mov	r4, r2
 800a09e:	461d      	mov	r5, r3
 800a0a0:	4643      	mov	r3, r8
 800a0a2:	18e3      	adds	r3, r4, r3
 800a0a4:	603b      	str	r3, [r7, #0]
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	eb45 0303 	adc.w	r3, r5, r3
 800a0ac:	607b      	str	r3, [r7, #4]
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	f04f 0300 	mov.w	r3, #0
 800a0b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	028b      	lsls	r3, r1, #10
 800a0be:	4621      	mov	r1, r4
 800a0c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	028a      	lsls	r2, r1, #10
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	61bb      	str	r3, [r7, #24]
 800a0d2:	61fa      	str	r2, [r7, #28]
 800a0d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0d8:	f7f6 f8d2 	bl	8000280 <__aeabi_uldivmod>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a0e4:	4b0b      	ldr	r3, [pc, #44]	; (800a114 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	0c1b      	lsrs	r3, r3, #16
 800a0ea:	f003 0303 	and.w	r3, r3, #3
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a0f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a0fe:	e002      	b.n	800a106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a100:	4b05      	ldr	r3, [pc, #20]	; (800a118 <HAL_RCC_GetSysClockFreq+0x204>)
 800a102:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a104:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3750      	adds	r7, #80	; 0x50
 800a10c:	46bd      	mov	sp, r7
 800a10e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a112:	bf00      	nop
 800a114:	40023800 	.word	0x40023800
 800a118:	00f42400 	.word	0x00f42400
 800a11c:	007a1200 	.word	0x007a1200

0800a120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a124:	4b03      	ldr	r3, [pc, #12]	; (800a134 <HAL_RCC_GetHCLKFreq+0x14>)
 800a126:	681b      	ldr	r3, [r3, #0]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	200004e4 	.word	0x200004e4

0800a138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a13c:	f7ff fff0 	bl	800a120 <HAL_RCC_GetHCLKFreq>
 800a140:	4602      	mov	r2, r0
 800a142:	4b05      	ldr	r3, [pc, #20]	; (800a158 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	0a9b      	lsrs	r3, r3, #10
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	4903      	ldr	r1, [pc, #12]	; (800a15c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a14e:	5ccb      	ldrb	r3, [r1, r3]
 800a150:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a154:	4618      	mov	r0, r3
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40023800 	.word	0x40023800
 800a15c:	0800c8cc 	.word	0x0800c8cc

0800a160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a164:	f7ff ffdc 	bl	800a120 <HAL_RCC_GetHCLKFreq>
 800a168:	4602      	mov	r2, r0
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	0b5b      	lsrs	r3, r3, #13
 800a170:	f003 0307 	and.w	r3, r3, #7
 800a174:	4903      	ldr	r1, [pc, #12]	; (800a184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a176:	5ccb      	ldrb	r3, [r1, r3]
 800a178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	40023800 	.word	0x40023800
 800a184:	0800c8cc 	.word	0x0800c8cc

0800a188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e041      	b.n	800a21e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7f7 f906 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	f000 fa08 	bl	800a5dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e041      	b.n	800a2bc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f7f7 f895 	bl	800137c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2202      	movs	r2, #2
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3304      	adds	r3, #4
 800a262:	4619      	mov	r1, r3
 800a264:	4610      	mov	r0, r2
 800a266:	f000 f9b9 	bl	800a5dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d122      	bne.n	800a320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d11b      	bne.n	800a320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f06f 0202 	mvn.w	r2, #2
 800a2f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	f003 0303 	and.w	r3, r3, #3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f94a 	bl	800a5a0 <HAL_TIM_IC_CaptureCallback>
 800a30c:	e005      	b.n	800a31a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f93c 	bl	800a58c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f94d 	bl	800a5b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	f003 0304 	and.w	r3, r3, #4
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d122      	bne.n	800a374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f003 0304 	and.w	r3, r3, #4
 800a338:	2b04      	cmp	r3, #4
 800a33a:	d11b      	bne.n	800a374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f06f 0204 	mvn.w	r2, #4
 800a344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2202      	movs	r2, #2
 800a34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f920 	bl	800a5a0 <HAL_TIM_IC_CaptureCallback>
 800a360:	e005      	b.n	800a36e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f912 	bl	800a58c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f923 	bl	800a5b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f003 0308 	and.w	r3, r3, #8
 800a37e:	2b08      	cmp	r3, #8
 800a380:	d122      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f003 0308 	and.w	r3, r3, #8
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d11b      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f06f 0208 	mvn.w	r2, #8
 800a398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2204      	movs	r2, #4
 800a39e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	f003 0303 	and.w	r3, r3, #3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f8f6 	bl	800a5a0 <HAL_TIM_IC_CaptureCallback>
 800a3b4:	e005      	b.n	800a3c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f8e8 	bl	800a58c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f8f9 	bl	800a5b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f003 0310 	and.w	r3, r3, #16
 800a3d2:	2b10      	cmp	r3, #16
 800a3d4:	d122      	bne.n	800a41c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0310 	and.w	r3, r3, #16
 800a3e0:	2b10      	cmp	r3, #16
 800a3e2:	d11b      	bne.n	800a41c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f06f 0210 	mvn.w	r2, #16
 800a3ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f8cc 	bl	800a5a0 <HAL_TIM_IC_CaptureCallback>
 800a408:	e005      	b.n	800a416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f8be 	bl	800a58c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f8cf 	bl	800a5b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b01      	cmp	r3, #1
 800a428:	d10e      	bne.n	800a448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b01      	cmp	r3, #1
 800a436:	d107      	bne.n	800a448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0201 	mvn.w	r2, #1
 800a440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7f6 feb6 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a452:	2b80      	cmp	r3, #128	; 0x80
 800a454:	d10e      	bne.n	800a474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a460:	2b80      	cmp	r3, #128	; 0x80
 800a462:	d107      	bne.n	800a474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fb38 	bl	800aae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d10e      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48c:	2b40      	cmp	r3, #64	; 0x40
 800a48e:	d107      	bne.n	800a4a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f894 	bl	800a5c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b20      	cmp	r3, #32
 800a4ac:	d10e      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f003 0320 	and.w	r3, r3, #32
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	d107      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f06f 0220 	mvn.w	r2, #32
 800a4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fb02 	bl	800aad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d101      	bne.n	800a4f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e048      	b.n	800a584 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b0c      	cmp	r3, #12
 800a4fe:	d839      	bhi.n	800a574 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a500:	a201      	add	r2, pc, #4	; (adr r2, 800a508 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a506:	bf00      	nop
 800a508:	0800a53d 	.word	0x0800a53d
 800a50c:	0800a575 	.word	0x0800a575
 800a510:	0800a575 	.word	0x0800a575
 800a514:	0800a575 	.word	0x0800a575
 800a518:	0800a54b 	.word	0x0800a54b
 800a51c:	0800a575 	.word	0x0800a575
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a575 	.word	0x0800a575
 800a528:	0800a559 	.word	0x0800a559
 800a52c:	0800a575 	.word	0x0800a575
 800a530:	0800a575 	.word	0x0800a575
 800a534:	0800a575 	.word	0x0800a575
 800a538:	0800a567 	.word	0x0800a567
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f8ca 	bl	800a6dc <TIM_OC1_SetConfig>
      break;
 800a548:	e017      	b.n	800a57a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 f929 	bl	800a7a8 <TIM_OC2_SetConfig>
      break;
 800a556:	e010      	b.n	800a57a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 f98e 	bl	800a880 <TIM_OC3_SetConfig>
      break;
 800a564:	e009      	b.n	800a57a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68b9      	ldr	r1, [r7, #8]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 f9f1 	bl	800a954 <TIM_OC4_SetConfig>
      break;
 800a572:	e002      	b.n	800a57a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	75fb      	strb	r3, [r7, #23]
      break;
 800a578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a582:	7dfb      	ldrb	r3, [r7, #23]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3718      	adds	r7, #24
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a34      	ldr	r2, [pc, #208]	; (800a6c0 <TIM_Base_SetConfig+0xe4>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00f      	beq.n	800a614 <TIM_Base_SetConfig+0x38>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fa:	d00b      	beq.n	800a614 <TIM_Base_SetConfig+0x38>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a31      	ldr	r2, [pc, #196]	; (800a6c4 <TIM_Base_SetConfig+0xe8>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d007      	beq.n	800a614 <TIM_Base_SetConfig+0x38>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a30      	ldr	r2, [pc, #192]	; (800a6c8 <TIM_Base_SetConfig+0xec>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d003      	beq.n	800a614 <TIM_Base_SetConfig+0x38>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a2f      	ldr	r2, [pc, #188]	; (800a6cc <TIM_Base_SetConfig+0xf0>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d108      	bne.n	800a626 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a61a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	4313      	orrs	r3, r2
 800a624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a25      	ldr	r2, [pc, #148]	; (800a6c0 <TIM_Base_SetConfig+0xe4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d01b      	beq.n	800a666 <TIM_Base_SetConfig+0x8a>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a634:	d017      	beq.n	800a666 <TIM_Base_SetConfig+0x8a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a22      	ldr	r2, [pc, #136]	; (800a6c4 <TIM_Base_SetConfig+0xe8>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d013      	beq.n	800a666 <TIM_Base_SetConfig+0x8a>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a21      	ldr	r2, [pc, #132]	; (800a6c8 <TIM_Base_SetConfig+0xec>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00f      	beq.n	800a666 <TIM_Base_SetConfig+0x8a>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a20      	ldr	r2, [pc, #128]	; (800a6cc <TIM_Base_SetConfig+0xf0>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00b      	beq.n	800a666 <TIM_Base_SetConfig+0x8a>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <TIM_Base_SetConfig+0xf4>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d007      	beq.n	800a666 <TIM_Base_SetConfig+0x8a>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a1e      	ldr	r2, [pc, #120]	; (800a6d4 <TIM_Base_SetConfig+0xf8>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d003      	beq.n	800a666 <TIM_Base_SetConfig+0x8a>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a1d      	ldr	r2, [pc, #116]	; (800a6d8 <TIM_Base_SetConfig+0xfc>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d108      	bne.n	800a678 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a66c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	4313      	orrs	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a08      	ldr	r2, [pc, #32]	; (800a6c0 <TIM_Base_SetConfig+0xe4>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d103      	bne.n	800a6ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	691a      	ldr	r2, [r3, #16]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	615a      	str	r2, [r3, #20]
}
 800a6b2:	bf00      	nop
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	40010000 	.word	0x40010000
 800a6c4:	40000400 	.word	0x40000400
 800a6c8:	40000800 	.word	0x40000800
 800a6cc:	40000c00 	.word	0x40000c00
 800a6d0:	40014000 	.word	0x40014000
 800a6d4:	40014400 	.word	0x40014400
 800a6d8:	40014800 	.word	0x40014800

0800a6dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	f023 0201 	bic.w	r2, r3, #1
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f023 0302 	bic.w	r3, r3, #2
 800a724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a1c      	ldr	r2, [pc, #112]	; (800a7a4 <TIM_OC1_SetConfig+0xc8>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d10c      	bne.n	800a752 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f023 0308 	bic.w	r3, r3, #8
 800a73e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	4313      	orrs	r3, r2
 800a748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f023 0304 	bic.w	r3, r3, #4
 800a750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a13      	ldr	r2, [pc, #76]	; (800a7a4 <TIM_OC1_SetConfig+0xc8>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d111      	bne.n	800a77e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	4313      	orrs	r3, r2
 800a772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	621a      	str	r2, [r3, #32]
}
 800a798:	bf00      	nop
 800a79a:	371c      	adds	r7, #28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	40010000 	.word	0x40010000

0800a7a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	f023 0210 	bic.w	r2, r3, #16
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f023 0320 	bic.w	r3, r3, #32
 800a7f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	011b      	lsls	r3, r3, #4
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a1e      	ldr	r2, [pc, #120]	; (800a87c <TIM_OC2_SetConfig+0xd4>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d10d      	bne.n	800a824 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a80e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	011b      	lsls	r3, r3, #4
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	4313      	orrs	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a15      	ldr	r2, [pc, #84]	; (800a87c <TIM_OC2_SetConfig+0xd4>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d113      	bne.n	800a854 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a832:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a83a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	4313      	orrs	r3, r2
 800a846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	4313      	orrs	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	621a      	str	r2, [r3, #32]
}
 800a86e:	bf00      	nop
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	40010000 	.word	0x40010000

0800a880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	021b      	lsls	r3, r3, #8
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a1d      	ldr	r2, [pc, #116]	; (800a950 <TIM_OC3_SetConfig+0xd0>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d10d      	bne.n	800a8fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	021b      	lsls	r3, r3, #8
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a14      	ldr	r2, [pc, #80]	; (800a950 <TIM_OC3_SetConfig+0xd0>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d113      	bne.n	800a92a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	011b      	lsls	r3, r3, #4
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	4313      	orrs	r3, r2
 800a928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685a      	ldr	r2, [r3, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	621a      	str	r2, [r3, #32]
}
 800a944:	bf00      	nop
 800a946:	371c      	adds	r7, #28
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	40010000 	.word	0x40010000

0800a954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	69db      	ldr	r3, [r3, #28]
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a98a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4313      	orrs	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a99e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	031b      	lsls	r3, r3, #12
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a10      	ldr	r2, [pc, #64]	; (800a9f0 <TIM_OC4_SetConfig+0x9c>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d109      	bne.n	800a9c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	019b      	lsls	r3, r3, #6
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	621a      	str	r2, [r3, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	40010000 	.word	0x40010000

0800a9f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e050      	b.n	800aaae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a1c      	ldr	r2, [pc, #112]	; (800aabc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d018      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa58:	d013      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a18      	ldr	r2, [pc, #96]	; (800aac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00e      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a16      	ldr	r2, [pc, #88]	; (800aac4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d009      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a15      	ldr	r2, [pc, #84]	; (800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d004      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a13      	ldr	r2, [pc, #76]	; (800aacc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d10c      	bne.n	800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	40010000 	.word	0x40010000
 800aac0:	40000400 	.word	0x40000400
 800aac4:	40000800 	.word	0x40000800
 800aac8:	40000c00 	.word	0x40000c00
 800aacc:	40014000 	.word	0x40014000

0800aad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e03f      	b.n	800ab8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7f6 fcb0 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2224      	movs	r2, #36	; 0x24
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68da      	ldr	r2, [r3, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fdc7 	bl	800b6d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	691a      	ldr	r2, [r3, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	695a      	ldr	r2, [r3, #20]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68da      	ldr	r2, [r3, #12]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2220      	movs	r2, #32
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2220      	movs	r2, #32
 800ab84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08c      	sub	sp, #48	; 0x30
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b20      	cmp	r3, #32
 800abac:	d165      	bne.n	800ac7a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <HAL_UART_Transmit_DMA+0x26>
 800abb4:	88fb      	ldrh	r3, [r7, #6]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e05e      	b.n	800ac7c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d101      	bne.n	800abcc <HAL_UART_Transmit_DMA+0x38>
 800abc8:	2302      	movs	r3, #2
 800abca:	e057      	b.n	800ac7c <HAL_UART_Transmit_DMA+0xe8>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	88fa      	ldrh	r2, [r7, #6]
 800abde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	88fa      	ldrh	r2, [r7, #6]
 800abe4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2221      	movs	r2, #33	; 0x21
 800abf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf8:	4a22      	ldr	r2, [pc, #136]	; (800ac84 <HAL_UART_Transmit_DMA+0xf0>)
 800abfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac00:	4a21      	ldr	r2, [pc, #132]	; (800ac88 <HAL_UART_Transmit_DMA+0xf4>)
 800ac02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac08:	4a20      	ldr	r2, [pc, #128]	; (800ac8c <HAL_UART_Transmit_DMA+0xf8>)
 800ac0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac10:	2200      	movs	r2, #0
 800ac12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	6819      	ldr	r1, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3304      	adds	r3, #4
 800ac28:	461a      	mov	r2, r3
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	f7fd f974 	bl	8007f18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3314      	adds	r3, #20
 800ac48:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	e853 3f00 	ldrex	r3, [r3]
 800ac50:	617b      	str	r3, [r7, #20]
   return(result);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3314      	adds	r3, #20
 800ac60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac62:	627a      	str	r2, [r7, #36]	; 0x24
 800ac64:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac66:	6a39      	ldr	r1, [r7, #32]
 800ac68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6a:	e841 2300 	strex	r3, r2, [r1]
 800ac6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1e5      	bne.n	800ac42 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e000      	b.n	800ac7c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ac7a:	2302      	movs	r3, #2
  }
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3730      	adds	r7, #48	; 0x30
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	0800b201 	.word	0x0800b201
 800ac88:	0800b29b 	.word	0x0800b29b
 800ac8c:	0800b2b7 	.word	0x0800b2b7

0800ac90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b0ba      	sub	sp, #232	; 0xe8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc6:	f003 030f 	and.w	r3, r3, #15
 800acca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800acce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10f      	bne.n	800acf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <HAL_UART_IRQHandler+0x66>
 800ace2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b00      	cmp	r3, #0
 800acec:	d003      	beq.n	800acf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fc32 	bl	800b558 <UART_Receive_IT>
      return;
 800acf4:	e256      	b.n	800b1a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f000 80de 	beq.w	800aebc <HAL_UART_IRQHandler+0x22c>
 800ad00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d106      	bne.n	800ad1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 80d1 	beq.w	800aebc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00b      	beq.n	800ad3e <HAL_UART_IRQHandler+0xae>
 800ad26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d005      	beq.n	800ad3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad36:	f043 0201 	orr.w	r2, r3, #1
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad42:	f003 0304 	and.w	r3, r3, #4
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00b      	beq.n	800ad62 <HAL_UART_IRQHandler+0xd2>
 800ad4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d005      	beq.n	800ad62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5a:	f043 0202 	orr.w	r2, r3, #2
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00b      	beq.n	800ad86 <HAL_UART_IRQHandler+0xf6>
 800ad6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d005      	beq.n	800ad86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7e:	f043 0204 	orr.w	r2, r3, #4
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad8a:	f003 0308 	and.w	r3, r3, #8
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d011      	beq.n	800adb6 <HAL_UART_IRQHandler+0x126>
 800ad92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad96:	f003 0320 	and.w	r3, r3, #32
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d105      	bne.n	800adaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	f043 0208 	orr.w	r2, r3, #8
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 81ed 	beq.w	800b19a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc4:	f003 0320 	and.w	r3, r3, #32
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d008      	beq.n	800adde <HAL_UART_IRQHandler+0x14e>
 800adcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800add0:	f003 0320 	and.w	r3, r3, #32
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fbbd 	bl	800b558 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	bf0c      	ite	eq
 800adec:	2301      	moveq	r3, #1
 800adee:	2300      	movne	r3, #0
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfa:	f003 0308 	and.w	r3, r3, #8
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d103      	bne.n	800ae0a <HAL_UART_IRQHandler+0x17a>
 800ae02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d04f      	beq.n	800aeaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fac5 	bl	800b39a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1a:	2b40      	cmp	r3, #64	; 0x40
 800ae1c:	d141      	bne.n	800aea2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3314      	adds	r3, #20
 800ae24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3314      	adds	r3, #20
 800ae46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae5a:	e841 2300 	strex	r3, r2, [r1]
 800ae5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1d9      	bne.n	800ae1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d013      	beq.n	800ae9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae76:	4a7d      	ldr	r2, [pc, #500]	; (800b06c <HAL_UART_IRQHandler+0x3dc>)
 800ae78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fd f912 	bl	80080a8 <HAL_DMA_Abort_IT>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d016      	beq.n	800aeb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae98:	e00e      	b.n	800aeb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f99a 	bl	800b1d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea0:	e00a      	b.n	800aeb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f996 	bl	800b1d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea8:	e006      	b.n	800aeb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f992 	bl	800b1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aeb6:	e170      	b.n	800b19a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb8:	bf00      	nop
    return;
 800aeba:	e16e      	b.n	800b19a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	f040 814a 	bne.w	800b15a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeca:	f003 0310 	and.w	r3, r3, #16
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f000 8143 	beq.w	800b15a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f003 0310 	and.w	r3, r3, #16
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 813c 	beq.w	800b15a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aee2:	2300      	movs	r3, #0
 800aee4:	60bb      	str	r3, [r7, #8]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	60bb      	str	r3, [r7, #8]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	60bb      	str	r3, [r7, #8]
 800aef6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af02:	2b40      	cmp	r3, #64	; 0x40
 800af04:	f040 80b4 	bne.w	800b070 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 8140 	beq.w	800b19e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af26:	429a      	cmp	r2, r3
 800af28:	f080 8139 	bcs.w	800b19e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af3e:	f000 8088 	beq.w	800b052 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	330c      	adds	r3, #12
 800af48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af50:	e853 3f00 	ldrex	r3, [r3]
 800af54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	330c      	adds	r3, #12
 800af6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af7e:	e841 2300 	strex	r3, r2, [r1]
 800af82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1d9      	bne.n	800af42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3314      	adds	r3, #20
 800af94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af98:	e853 3f00 	ldrex	r3, [r3]
 800af9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afa0:	f023 0301 	bic.w	r3, r3, #1
 800afa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3314      	adds	r3, #20
 800afae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800afb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800afb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800afba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800afc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e1      	bne.n	800af8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3314      	adds	r3, #20
 800afd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3314      	adds	r3, #20
 800afea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aff0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aff4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aff6:	e841 2300 	strex	r3, r2, [r1]
 800affa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800affc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1e3      	bne.n	800afca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2220      	movs	r2, #32
 800b006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	330c      	adds	r3, #12
 800b016:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01a:	e853 3f00 	ldrex	r3, [r3]
 800b01e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b022:	f023 0310 	bic.w	r3, r3, #16
 800b026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	330c      	adds	r3, #12
 800b030:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b034:	65ba      	str	r2, [r7, #88]	; 0x58
 800b036:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b038:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b03a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b03c:	e841 2300 	strex	r3, r2, [r1]
 800b040:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e3      	bne.n	800b010 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fc ffbb 	bl	8007fc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	1ad3      	subs	r3, r2, r3
 800b05e:	b29b      	uxth	r3, r3
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f8c0 	bl	800b1e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b068:	e099      	b.n	800b19e <HAL_UART_IRQHandler+0x50e>
 800b06a:	bf00      	nop
 800b06c:	0800b461 	.word	0x0800b461
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b078:	b29b      	uxth	r3, r3
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b084:	b29b      	uxth	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 808b 	beq.w	800b1a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b08c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 8086 	beq.w	800b1a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	330c      	adds	r3, #12
 800b09c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	330c      	adds	r3, #12
 800b0b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b0ba:	647a      	str	r2, [r7, #68]	; 0x44
 800b0bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e3      	bne.n	800b096 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3314      	adds	r3, #20
 800b0d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	f023 0301 	bic.w	r3, r3, #1
 800b0e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3314      	adds	r3, #20
 800b0ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0f2:	633a      	str	r2, [r7, #48]	; 0x30
 800b0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fa:	e841 2300 	strex	r3, r2, [r1]
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e3      	bne.n	800b0ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	330c      	adds	r3, #12
 800b11a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	60fb      	str	r3, [r7, #12]
   return(result);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f023 0310 	bic.w	r3, r3, #16
 800b12a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	330c      	adds	r3, #12
 800b134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b138:	61fa      	str	r2, [r7, #28]
 800b13a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	69b9      	ldr	r1, [r7, #24]
 800b13e:	69fa      	ldr	r2, [r7, #28]
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	617b      	str	r3, [r7, #20]
   return(result);
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e3      	bne.n	800b114 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b14c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f848 	bl	800b1e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b158:	e023      	b.n	800b1a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b162:	2b00      	cmp	r3, #0
 800b164:	d009      	beq.n	800b17a <HAL_UART_IRQHandler+0x4ea>
 800b166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f988 	bl	800b488 <UART_Transmit_IT>
    return;
 800b178:	e014      	b.n	800b1a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00e      	beq.n	800b1a4 <HAL_UART_IRQHandler+0x514>
 800b186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d008      	beq.n	800b1a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f9c8 	bl	800b528 <UART_EndTransmit_IT>
    return;
 800b198:	e004      	b.n	800b1a4 <HAL_UART_IRQHandler+0x514>
    return;
 800b19a:	bf00      	nop
 800b19c:	e002      	b.n	800b1a4 <HAL_UART_IRQHandler+0x514>
      return;
 800b19e:	bf00      	nop
 800b1a0:	e000      	b.n	800b1a4 <HAL_UART_IRQHandler+0x514>
      return;
 800b1a2:	bf00      	nop
  }
}
 800b1a4:	37e8      	adds	r7, #232	; 0xe8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop

0800b1ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b1b4:	bf00      	nop
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b090      	sub	sp, #64	; 0x40
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d137      	bne.n	800b28c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b21e:	2200      	movs	r2, #0
 800b220:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3314      	adds	r3, #20
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	623b      	str	r3, [r7, #32]
   return(result);
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b238:	63bb      	str	r3, [r7, #56]	; 0x38
 800b23a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3314      	adds	r3, #20
 800b240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b242:	633a      	str	r2, [r7, #48]	; 0x30
 800b244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1e5      	bne.n	800b222 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	330c      	adds	r3, #12
 800b25c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	60fb      	str	r3, [r7, #12]
   return(result);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b26c:	637b      	str	r3, [r7, #52]	; 0x34
 800b26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	330c      	adds	r3, #12
 800b274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b276:	61fa      	str	r2, [r7, #28]
 800b278:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	69b9      	ldr	r1, [r7, #24]
 800b27c:	69fa      	ldr	r2, [r7, #28]
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	617b      	str	r3, [r7, #20]
   return(result);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e5      	bne.n	800b256 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b28a:	e002      	b.n	800b292 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b28c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b28e:	f7f6 faed 	bl	800186c <HAL_UART_TxCpltCallback>
}
 800b292:	bf00      	nop
 800b294:	3740      	adds	r7, #64	; 0x40
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f7ff ff7f 	bl	800b1ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d2:	2b80      	cmp	r3, #128	; 0x80
 800b2d4:	bf0c      	ite	eq
 800b2d6:	2301      	moveq	r3, #1
 800b2d8:	2300      	movne	r3, #0
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b21      	cmp	r3, #33	; 0x21
 800b2e8:	d108      	bne.n	800b2fc <UART_DMAError+0x46>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d005      	beq.n	800b2fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b2f6:	68b8      	ldr	r0, [r7, #8]
 800b2f8:	f000 f827 	bl	800b34a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b306:	2b40      	cmp	r3, #64	; 0x40
 800b308:	bf0c      	ite	eq
 800b30a:	2301      	moveq	r3, #1
 800b30c:	2300      	movne	r3, #0
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b22      	cmp	r3, #34	; 0x22
 800b31c:	d108      	bne.n	800b330 <UART_DMAError+0x7a>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d005      	beq.n	800b330 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2200      	movs	r2, #0
 800b328:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b32a:	68b8      	ldr	r0, [r7, #8]
 800b32c:	f000 f835 	bl	800b39a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b334:	f043 0210 	orr.w	r2, r3, #16
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b33c:	68b8      	ldr	r0, [r7, #8]
 800b33e:	f7ff ff49 	bl	800b1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b342:	bf00      	nop
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b089      	sub	sp, #36	; 0x24
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	330c      	adds	r3, #12
 800b358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	60bb      	str	r3, [r7, #8]
   return(result);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b368:	61fb      	str	r3, [r7, #28]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	330c      	adds	r3, #12
 800b370:	69fa      	ldr	r2, [r7, #28]
 800b372:	61ba      	str	r2, [r7, #24]
 800b374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6979      	ldr	r1, [r7, #20]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	613b      	str	r3, [r7, #16]
   return(result);
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e5      	bne.n	800b352 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2220      	movs	r2, #32
 800b38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b38e:	bf00      	nop
 800b390:	3724      	adds	r7, #36	; 0x24
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b39a:	b480      	push	{r7}
 800b39c:	b095      	sub	sp, #84	; 0x54
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	330c      	adds	r3, #12
 800b3a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	330c      	adds	r3, #12
 800b3c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3c2:	643a      	str	r2, [r7, #64]	; 0x40
 800b3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e5      	bne.n	800b3a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3314      	adds	r3, #20
 800b3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	f023 0301 	bic.w	r3, r3, #1
 800b3ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3314      	adds	r3, #20
 800b3f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e5      	bne.n	800b3d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d119      	bne.n	800b446 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	330c      	adds	r3, #12
 800b418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	60bb      	str	r3, [r7, #8]
   return(result);
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f023 0310 	bic.w	r3, r3, #16
 800b428:	647b      	str	r3, [r7, #68]	; 0x44
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	330c      	adds	r3, #12
 800b430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b432:	61ba      	str	r2, [r7, #24]
 800b434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	6979      	ldr	r1, [r7, #20]
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	613b      	str	r3, [r7, #16]
   return(result);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e5      	bne.n	800b412 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2220      	movs	r2, #32
 800b44a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b454:	bf00      	nop
 800b456:	3754      	adds	r7, #84	; 0x54
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7ff feaa 	bl	800b1d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b496:	b2db      	uxtb	r3, r3
 800b498:	2b21      	cmp	r3, #33	; 0x21
 800b49a:	d13e      	bne.n	800b51a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a4:	d114      	bne.n	800b4d0 <UART_Transmit_IT+0x48>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d110      	bne.n	800b4d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	1c9a      	adds	r2, r3, #2
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	621a      	str	r2, [r3, #32]
 800b4ce:	e008      	b.n	800b4e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	1c59      	adds	r1, r3, #1
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	6211      	str	r1, [r2, #32]
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10f      	bne.n	800b516 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68da      	ldr	r2, [r3, #12]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b504:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b514:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	e000      	b.n	800b51c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b51a:	2302      	movs	r3, #2
  }
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b53e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2220      	movs	r2, #32
 800b544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7f6 f98f 	bl	800186c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08c      	sub	sp, #48	; 0x30
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b22      	cmp	r3, #34	; 0x22
 800b56a:	f040 80ab 	bne.w	800b6c4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b576:	d117      	bne.n	800b5a8 <UART_Receive_IT+0x50>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d113      	bne.n	800b5a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b588:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	b29b      	uxth	r3, r3
 800b592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b596:	b29a      	uxth	r2, r3
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a0:	1c9a      	adds	r2, r3, #2
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	629a      	str	r2, [r3, #40]	; 0x28
 800b5a6:	e026      	b.n	800b5f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ba:	d007      	beq.n	800b5cc <UART_Receive_IT+0x74>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <UART_Receive_IT+0x82>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	691b      	ldr	r3, [r3, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d6:	701a      	strb	r2, [r3, #0]
 800b5d8:	e008      	b.n	800b5ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	4619      	mov	r1, r3
 800b604:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b606:	2b00      	cmp	r3, #0
 800b608:	d15a      	bne.n	800b6c0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68da      	ldr	r2, [r3, #12]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f022 0220 	bic.w	r2, r2, #32
 800b618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68da      	ldr	r2, [r3, #12]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	695a      	ldr	r2, [r3, #20]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2220      	movs	r2, #32
 800b63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b646:	2b01      	cmp	r3, #1
 800b648:	d135      	bne.n	800b6b6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	330c      	adds	r3, #12
 800b656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	e853 3f00 	ldrex	r3, [r3]
 800b65e:	613b      	str	r3, [r7, #16]
   return(result);
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f023 0310 	bic.w	r3, r3, #16
 800b666:	627b      	str	r3, [r7, #36]	; 0x24
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	330c      	adds	r3, #12
 800b66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b670:	623a      	str	r2, [r7, #32]
 800b672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b674:	69f9      	ldr	r1, [r7, #28]
 800b676:	6a3a      	ldr	r2, [r7, #32]
 800b678:	e841 2300 	strex	r3, r2, [r1]
 800b67c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1e5      	bne.n	800b650 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0310 	and.w	r3, r3, #16
 800b68e:	2b10      	cmp	r3, #16
 800b690:	d10a      	bne.n	800b6a8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	60fb      	str	r3, [r7, #12]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff fd9a 	bl	800b1e8 <HAL_UARTEx_RxEventCallback>
 800b6b4:	e002      	b.n	800b6bc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f7ff fd82 	bl	800b1c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e002      	b.n	800b6c6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e000      	b.n	800b6c6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b6c4:	2302      	movs	r3, #2
  }
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3730      	adds	r7, #48	; 0x30
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6d4:	b0c0      	sub	sp, #256	; 0x100
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ec:	68d9      	ldr	r1, [r3, #12]
 800b6ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	ea40 0301 	orr.w	r3, r0, r1
 800b6f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6fe:	689a      	ldr	r2, [r3, #8]
 800b700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	431a      	orrs	r2, r3
 800b708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	431a      	orrs	r2, r3
 800b710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	4313      	orrs	r3, r2
 800b718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b728:	f021 010c 	bic.w	r1, r1, #12
 800b72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b736:	430b      	orrs	r3, r1
 800b738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b74a:	6999      	ldr	r1, [r3, #24]
 800b74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	ea40 0301 	orr.w	r3, r0, r1
 800b756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	4b8f      	ldr	r3, [pc, #572]	; (800b99c <UART_SetConfig+0x2cc>)
 800b760:	429a      	cmp	r2, r3
 800b762:	d005      	beq.n	800b770 <UART_SetConfig+0xa0>
 800b764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	4b8d      	ldr	r3, [pc, #564]	; (800b9a0 <UART_SetConfig+0x2d0>)
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d104      	bne.n	800b77a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b770:	f7fe fcf6 	bl	800a160 <HAL_RCC_GetPCLK2Freq>
 800b774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b778:	e003      	b.n	800b782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b77a:	f7fe fcdd 	bl	800a138 <HAL_RCC_GetPCLK1Freq>
 800b77e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b786:	69db      	ldr	r3, [r3, #28]
 800b788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b78c:	f040 810c 	bne.w	800b9a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b794:	2200      	movs	r2, #0
 800b796:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b79a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b79e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b7a2:	4622      	mov	r2, r4
 800b7a4:	462b      	mov	r3, r5
 800b7a6:	1891      	adds	r1, r2, r2
 800b7a8:	65b9      	str	r1, [r7, #88]	; 0x58
 800b7aa:	415b      	adcs	r3, r3
 800b7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	eb12 0801 	adds.w	r8, r2, r1
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	eb43 0901 	adc.w	r9, r3, r1
 800b7be:	f04f 0200 	mov.w	r2, #0
 800b7c2:	f04f 0300 	mov.w	r3, #0
 800b7c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7d2:	4690      	mov	r8, r2
 800b7d4:	4699      	mov	r9, r3
 800b7d6:	4623      	mov	r3, r4
 800b7d8:	eb18 0303 	adds.w	r3, r8, r3
 800b7dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7e0:	462b      	mov	r3, r5
 800b7e2:	eb49 0303 	adc.w	r3, r9, r3
 800b7e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b7fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b7fe:	460b      	mov	r3, r1
 800b800:	18db      	adds	r3, r3, r3
 800b802:	653b      	str	r3, [r7, #80]	; 0x50
 800b804:	4613      	mov	r3, r2
 800b806:	eb42 0303 	adc.w	r3, r2, r3
 800b80a:	657b      	str	r3, [r7, #84]	; 0x54
 800b80c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b814:	f7f4 fd34 	bl	8000280 <__aeabi_uldivmod>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4b61      	ldr	r3, [pc, #388]	; (800b9a4 <UART_SetConfig+0x2d4>)
 800b81e:	fba3 2302 	umull	r2, r3, r3, r2
 800b822:	095b      	lsrs	r3, r3, #5
 800b824:	011c      	lsls	r4, r3, #4
 800b826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b830:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	1891      	adds	r1, r2, r2
 800b83e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b840:	415b      	adcs	r3, r3
 800b842:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b848:	4641      	mov	r1, r8
 800b84a:	eb12 0a01 	adds.w	sl, r2, r1
 800b84e:	4649      	mov	r1, r9
 800b850:	eb43 0b01 	adc.w	fp, r3, r1
 800b854:	f04f 0200 	mov.w	r2, #0
 800b858:	f04f 0300 	mov.w	r3, #0
 800b85c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b868:	4692      	mov	sl, r2
 800b86a:	469b      	mov	fp, r3
 800b86c:	4643      	mov	r3, r8
 800b86e:	eb1a 0303 	adds.w	r3, sl, r3
 800b872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b876:	464b      	mov	r3, r9
 800b878:	eb4b 0303 	adc.w	r3, fp, r3
 800b87c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b88c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b894:	460b      	mov	r3, r1
 800b896:	18db      	adds	r3, r3, r3
 800b898:	643b      	str	r3, [r7, #64]	; 0x40
 800b89a:	4613      	mov	r3, r2
 800b89c:	eb42 0303 	adc.w	r3, r2, r3
 800b8a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b8a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b8a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b8aa:	f7f4 fce9 	bl	8000280 <__aeabi_uldivmod>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4b3b      	ldr	r3, [pc, #236]	; (800b9a4 <UART_SetConfig+0x2d4>)
 800b8b6:	fba3 2301 	umull	r2, r3, r3, r1
 800b8ba:	095b      	lsrs	r3, r3, #5
 800b8bc:	2264      	movs	r2, #100	; 0x64
 800b8be:	fb02 f303 	mul.w	r3, r2, r3
 800b8c2:	1acb      	subs	r3, r1, r3
 800b8c4:	00db      	lsls	r3, r3, #3
 800b8c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b8ca:	4b36      	ldr	r3, [pc, #216]	; (800b9a4 <UART_SetConfig+0x2d4>)
 800b8cc:	fba3 2302 	umull	r2, r3, r3, r2
 800b8d0:	095b      	lsrs	r3, r3, #5
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b8d8:	441c      	add	r4, r3
 800b8da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b8e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b8e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b8ec:	4642      	mov	r2, r8
 800b8ee:	464b      	mov	r3, r9
 800b8f0:	1891      	adds	r1, r2, r2
 800b8f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b8f4:	415b      	adcs	r3, r3
 800b8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b8fc:	4641      	mov	r1, r8
 800b8fe:	1851      	adds	r1, r2, r1
 800b900:	6339      	str	r1, [r7, #48]	; 0x30
 800b902:	4649      	mov	r1, r9
 800b904:	414b      	adcs	r3, r1
 800b906:	637b      	str	r3, [r7, #52]	; 0x34
 800b908:	f04f 0200 	mov.w	r2, #0
 800b90c:	f04f 0300 	mov.w	r3, #0
 800b910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b914:	4659      	mov	r1, fp
 800b916:	00cb      	lsls	r3, r1, #3
 800b918:	4651      	mov	r1, sl
 800b91a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b91e:	4651      	mov	r1, sl
 800b920:	00ca      	lsls	r2, r1, #3
 800b922:	4610      	mov	r0, r2
 800b924:	4619      	mov	r1, r3
 800b926:	4603      	mov	r3, r0
 800b928:	4642      	mov	r2, r8
 800b92a:	189b      	adds	r3, r3, r2
 800b92c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b930:	464b      	mov	r3, r9
 800b932:	460a      	mov	r2, r1
 800b934:	eb42 0303 	adc.w	r3, r2, r3
 800b938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b948:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b94c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b950:	460b      	mov	r3, r1
 800b952:	18db      	adds	r3, r3, r3
 800b954:	62bb      	str	r3, [r7, #40]	; 0x28
 800b956:	4613      	mov	r3, r2
 800b958:	eb42 0303 	adc.w	r3, r2, r3
 800b95c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b95e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b966:	f7f4 fc8b 	bl	8000280 <__aeabi_uldivmod>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4b0d      	ldr	r3, [pc, #52]	; (800b9a4 <UART_SetConfig+0x2d4>)
 800b970:	fba3 1302 	umull	r1, r3, r3, r2
 800b974:	095b      	lsrs	r3, r3, #5
 800b976:	2164      	movs	r1, #100	; 0x64
 800b978:	fb01 f303 	mul.w	r3, r1, r3
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	00db      	lsls	r3, r3, #3
 800b980:	3332      	adds	r3, #50	; 0x32
 800b982:	4a08      	ldr	r2, [pc, #32]	; (800b9a4 <UART_SetConfig+0x2d4>)
 800b984:	fba2 2303 	umull	r2, r3, r2, r3
 800b988:	095b      	lsrs	r3, r3, #5
 800b98a:	f003 0207 	and.w	r2, r3, #7
 800b98e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4422      	add	r2, r4
 800b996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b998:	e105      	b.n	800bba6 <UART_SetConfig+0x4d6>
 800b99a:	bf00      	nop
 800b99c:	40011000 	.word	0x40011000
 800b9a0:	40011400 	.word	0x40011400
 800b9a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b9a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b9b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b9b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b9ba:	4642      	mov	r2, r8
 800b9bc:	464b      	mov	r3, r9
 800b9be:	1891      	adds	r1, r2, r2
 800b9c0:	6239      	str	r1, [r7, #32]
 800b9c2:	415b      	adcs	r3, r3
 800b9c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9ca:	4641      	mov	r1, r8
 800b9cc:	1854      	adds	r4, r2, r1
 800b9ce:	4649      	mov	r1, r9
 800b9d0:	eb43 0501 	adc.w	r5, r3, r1
 800b9d4:	f04f 0200 	mov.w	r2, #0
 800b9d8:	f04f 0300 	mov.w	r3, #0
 800b9dc:	00eb      	lsls	r3, r5, #3
 800b9de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9e2:	00e2      	lsls	r2, r4, #3
 800b9e4:	4614      	mov	r4, r2
 800b9e6:	461d      	mov	r5, r3
 800b9e8:	4643      	mov	r3, r8
 800b9ea:	18e3      	adds	r3, r4, r3
 800b9ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	eb45 0303 	adc.w	r3, r5, r3
 800b9f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba0a:	f04f 0200 	mov.w	r2, #0
 800ba0e:	f04f 0300 	mov.w	r3, #0
 800ba12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ba16:	4629      	mov	r1, r5
 800ba18:	008b      	lsls	r3, r1, #2
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba20:	4621      	mov	r1, r4
 800ba22:	008a      	lsls	r2, r1, #2
 800ba24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ba28:	f7f4 fc2a 	bl	8000280 <__aeabi_uldivmod>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4b60      	ldr	r3, [pc, #384]	; (800bbb4 <UART_SetConfig+0x4e4>)
 800ba32:	fba3 2302 	umull	r2, r3, r3, r2
 800ba36:	095b      	lsrs	r3, r3, #5
 800ba38:	011c      	lsls	r4, r3, #4
 800ba3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ba48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	464b      	mov	r3, r9
 800ba50:	1891      	adds	r1, r2, r2
 800ba52:	61b9      	str	r1, [r7, #24]
 800ba54:	415b      	adcs	r3, r3
 800ba56:	61fb      	str	r3, [r7, #28]
 800ba58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba5c:	4641      	mov	r1, r8
 800ba5e:	1851      	adds	r1, r2, r1
 800ba60:	6139      	str	r1, [r7, #16]
 800ba62:	4649      	mov	r1, r9
 800ba64:	414b      	adcs	r3, r1
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	f04f 0200 	mov.w	r2, #0
 800ba6c:	f04f 0300 	mov.w	r3, #0
 800ba70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba74:	4659      	mov	r1, fp
 800ba76:	00cb      	lsls	r3, r1, #3
 800ba78:	4651      	mov	r1, sl
 800ba7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba7e:	4651      	mov	r1, sl
 800ba80:	00ca      	lsls	r2, r1, #3
 800ba82:	4610      	mov	r0, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	4603      	mov	r3, r0
 800ba88:	4642      	mov	r2, r8
 800ba8a:	189b      	adds	r3, r3, r2
 800ba8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba90:	464b      	mov	r3, r9
 800ba92:	460a      	mov	r2, r1
 800ba94:	eb42 0303 	adc.w	r3, r2, r3
 800ba98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	67bb      	str	r3, [r7, #120]	; 0x78
 800baa6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800baa8:	f04f 0200 	mov.w	r2, #0
 800baac:	f04f 0300 	mov.w	r3, #0
 800bab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bab4:	4649      	mov	r1, r9
 800bab6:	008b      	lsls	r3, r1, #2
 800bab8:	4641      	mov	r1, r8
 800baba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800babe:	4641      	mov	r1, r8
 800bac0:	008a      	lsls	r2, r1, #2
 800bac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bac6:	f7f4 fbdb 	bl	8000280 <__aeabi_uldivmod>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4b39      	ldr	r3, [pc, #228]	; (800bbb4 <UART_SetConfig+0x4e4>)
 800bad0:	fba3 1302 	umull	r1, r3, r3, r2
 800bad4:	095b      	lsrs	r3, r3, #5
 800bad6:	2164      	movs	r1, #100	; 0x64
 800bad8:	fb01 f303 	mul.w	r3, r1, r3
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	011b      	lsls	r3, r3, #4
 800bae0:	3332      	adds	r3, #50	; 0x32
 800bae2:	4a34      	ldr	r2, [pc, #208]	; (800bbb4 <UART_SetConfig+0x4e4>)
 800bae4:	fba2 2303 	umull	r2, r3, r2, r3
 800bae8:	095b      	lsrs	r3, r3, #5
 800baea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baee:	441c      	add	r4, r3
 800baf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baf4:	2200      	movs	r2, #0
 800baf6:	673b      	str	r3, [r7, #112]	; 0x70
 800baf8:	677a      	str	r2, [r7, #116]	; 0x74
 800bafa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bafe:	4642      	mov	r2, r8
 800bb00:	464b      	mov	r3, r9
 800bb02:	1891      	adds	r1, r2, r2
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	415b      	adcs	r3, r3
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb0e:	4641      	mov	r1, r8
 800bb10:	1851      	adds	r1, r2, r1
 800bb12:	6039      	str	r1, [r7, #0]
 800bb14:	4649      	mov	r1, r9
 800bb16:	414b      	adcs	r3, r1
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	f04f 0200 	mov.w	r2, #0
 800bb1e:	f04f 0300 	mov.w	r3, #0
 800bb22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bb26:	4659      	mov	r1, fp
 800bb28:	00cb      	lsls	r3, r1, #3
 800bb2a:	4651      	mov	r1, sl
 800bb2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb30:	4651      	mov	r1, sl
 800bb32:	00ca      	lsls	r2, r1, #3
 800bb34:	4610      	mov	r0, r2
 800bb36:	4619      	mov	r1, r3
 800bb38:	4603      	mov	r3, r0
 800bb3a:	4642      	mov	r2, r8
 800bb3c:	189b      	adds	r3, r3, r2
 800bb3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb40:	464b      	mov	r3, r9
 800bb42:	460a      	mov	r2, r1
 800bb44:	eb42 0303 	adc.w	r3, r2, r3
 800bb48:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	663b      	str	r3, [r7, #96]	; 0x60
 800bb54:	667a      	str	r2, [r7, #100]	; 0x64
 800bb56:	f04f 0200 	mov.w	r2, #0
 800bb5a:	f04f 0300 	mov.w	r3, #0
 800bb5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bb62:	4649      	mov	r1, r9
 800bb64:	008b      	lsls	r3, r1, #2
 800bb66:	4641      	mov	r1, r8
 800bb68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb6c:	4641      	mov	r1, r8
 800bb6e:	008a      	lsls	r2, r1, #2
 800bb70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bb74:	f7f4 fb84 	bl	8000280 <__aeabi_uldivmod>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <UART_SetConfig+0x4e4>)
 800bb7e:	fba3 1302 	umull	r1, r3, r3, r2
 800bb82:	095b      	lsrs	r3, r3, #5
 800bb84:	2164      	movs	r1, #100	; 0x64
 800bb86:	fb01 f303 	mul.w	r3, r1, r3
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	011b      	lsls	r3, r3, #4
 800bb8e:	3332      	adds	r3, #50	; 0x32
 800bb90:	4a08      	ldr	r2, [pc, #32]	; (800bbb4 <UART_SetConfig+0x4e4>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	f003 020f 	and.w	r2, r3, #15
 800bb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4422      	add	r2, r4
 800bba4:	609a      	str	r2, [r3, #8]
}
 800bba6:	bf00      	nop
 800bba8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bbac:	46bd      	mov	sp, r7
 800bbae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbb2:	bf00      	nop
 800bbb4:	51eb851f 	.word	0x51eb851f

0800bbb8 <__errno>:
 800bbb8:	4b01      	ldr	r3, [pc, #4]	; (800bbc0 <__errno+0x8>)
 800bbba:	6818      	ldr	r0, [r3, #0]
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	200007c0 	.word	0x200007c0

0800bbc4 <__libc_init_array>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	4d0d      	ldr	r5, [pc, #52]	; (800bbfc <__libc_init_array+0x38>)
 800bbc8:	4c0d      	ldr	r4, [pc, #52]	; (800bc00 <__libc_init_array+0x3c>)
 800bbca:	1b64      	subs	r4, r4, r5
 800bbcc:	10a4      	asrs	r4, r4, #2
 800bbce:	2600      	movs	r6, #0
 800bbd0:	42a6      	cmp	r6, r4
 800bbd2:	d109      	bne.n	800bbe8 <__libc_init_array+0x24>
 800bbd4:	4d0b      	ldr	r5, [pc, #44]	; (800bc04 <__libc_init_array+0x40>)
 800bbd6:	4c0c      	ldr	r4, [pc, #48]	; (800bc08 <__libc_init_array+0x44>)
 800bbd8:	f000 fcd0 	bl	800c57c <_init>
 800bbdc:	1b64      	subs	r4, r4, r5
 800bbde:	10a4      	asrs	r4, r4, #2
 800bbe0:	2600      	movs	r6, #0
 800bbe2:	42a6      	cmp	r6, r4
 800bbe4:	d105      	bne.n	800bbf2 <__libc_init_array+0x2e>
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbec:	4798      	blx	r3
 800bbee:	3601      	adds	r6, #1
 800bbf0:	e7ee      	b.n	800bbd0 <__libc_init_array+0xc>
 800bbf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbf6:	4798      	blx	r3
 800bbf8:	3601      	adds	r6, #1
 800bbfa:	e7f2      	b.n	800bbe2 <__libc_init_array+0x1e>
 800bbfc:	0800cff0 	.word	0x0800cff0
 800bc00:	0800cff0 	.word	0x0800cff0
 800bc04:	0800cff0 	.word	0x0800cff0
 800bc08:	0800cff4 	.word	0x0800cff4

0800bc0c <memcpy>:
 800bc0c:	440a      	add	r2, r1
 800bc0e:	4291      	cmp	r1, r2
 800bc10:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc14:	d100      	bne.n	800bc18 <memcpy+0xc>
 800bc16:	4770      	bx	lr
 800bc18:	b510      	push	{r4, lr}
 800bc1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc22:	4291      	cmp	r1, r2
 800bc24:	d1f9      	bne.n	800bc1a <memcpy+0xe>
 800bc26:	bd10      	pop	{r4, pc}

0800bc28 <memset>:
 800bc28:	4402      	add	r2, r0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d100      	bne.n	800bc32 <memset+0xa>
 800bc30:	4770      	bx	lr
 800bc32:	f803 1b01 	strb.w	r1, [r3], #1
 800bc36:	e7f9      	b.n	800bc2c <memset+0x4>

0800bc38 <siprintf>:
 800bc38:	b40e      	push	{r1, r2, r3}
 800bc3a:	b500      	push	{lr}
 800bc3c:	b09c      	sub	sp, #112	; 0x70
 800bc3e:	ab1d      	add	r3, sp, #116	; 0x74
 800bc40:	9002      	str	r0, [sp, #8]
 800bc42:	9006      	str	r0, [sp, #24]
 800bc44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc48:	4809      	ldr	r0, [pc, #36]	; (800bc70 <siprintf+0x38>)
 800bc4a:	9107      	str	r1, [sp, #28]
 800bc4c:	9104      	str	r1, [sp, #16]
 800bc4e:	4909      	ldr	r1, [pc, #36]	; (800bc74 <siprintf+0x3c>)
 800bc50:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc54:	9105      	str	r1, [sp, #20]
 800bc56:	6800      	ldr	r0, [r0, #0]
 800bc58:	9301      	str	r3, [sp, #4]
 800bc5a:	a902      	add	r1, sp, #8
 800bc5c:	f000 f8aa 	bl	800bdb4 <_svfiprintf_r>
 800bc60:	9b02      	ldr	r3, [sp, #8]
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	b01c      	add	sp, #112	; 0x70
 800bc68:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc6c:	b003      	add	sp, #12
 800bc6e:	4770      	bx	lr
 800bc70:	200007c0 	.word	0x200007c0
 800bc74:	ffff0208 	.word	0xffff0208

0800bc78 <strcpy>:
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc7e:	f803 2b01 	strb.w	r2, [r3], #1
 800bc82:	2a00      	cmp	r2, #0
 800bc84:	d1f9      	bne.n	800bc7a <strcpy+0x2>
 800bc86:	4770      	bx	lr

0800bc88 <_vsniprintf_r>:
 800bc88:	b530      	push	{r4, r5, lr}
 800bc8a:	4614      	mov	r4, r2
 800bc8c:	2c00      	cmp	r4, #0
 800bc8e:	b09b      	sub	sp, #108	; 0x6c
 800bc90:	4605      	mov	r5, r0
 800bc92:	461a      	mov	r2, r3
 800bc94:	da05      	bge.n	800bca2 <_vsniprintf_r+0x1a>
 800bc96:	238b      	movs	r3, #139	; 0x8b
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9e:	b01b      	add	sp, #108	; 0x6c
 800bca0:	bd30      	pop	{r4, r5, pc}
 800bca2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bca6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bcaa:	bf14      	ite	ne
 800bcac:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bcb0:	4623      	moveq	r3, r4
 800bcb2:	9302      	str	r3, [sp, #8]
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcba:	9100      	str	r1, [sp, #0]
 800bcbc:	9104      	str	r1, [sp, #16]
 800bcbe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bcc2:	4669      	mov	r1, sp
 800bcc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bcc6:	f000 f875 	bl	800bdb4 <_svfiprintf_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	bfbc      	itt	lt
 800bcce:	238b      	movlt	r3, #139	; 0x8b
 800bcd0:	602b      	strlt	r3, [r5, #0]
 800bcd2:	2c00      	cmp	r4, #0
 800bcd4:	d0e3      	beq.n	800bc9e <_vsniprintf_r+0x16>
 800bcd6:	9b00      	ldr	r3, [sp, #0]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]
 800bcdc:	e7df      	b.n	800bc9e <_vsniprintf_r+0x16>
	...

0800bce0 <vsniprintf>:
 800bce0:	b507      	push	{r0, r1, r2, lr}
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	4613      	mov	r3, r2
 800bce6:	460a      	mov	r2, r1
 800bce8:	4601      	mov	r1, r0
 800bcea:	4803      	ldr	r0, [pc, #12]	; (800bcf8 <vsniprintf+0x18>)
 800bcec:	6800      	ldr	r0, [r0, #0]
 800bcee:	f7ff ffcb 	bl	800bc88 <_vsniprintf_r>
 800bcf2:	b003      	add	sp, #12
 800bcf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcf8:	200007c0 	.word	0x200007c0

0800bcfc <__ssputs_r>:
 800bcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	688e      	ldr	r6, [r1, #8]
 800bd02:	429e      	cmp	r6, r3
 800bd04:	4682      	mov	sl, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	4690      	mov	r8, r2
 800bd0a:	461f      	mov	r7, r3
 800bd0c:	d838      	bhi.n	800bd80 <__ssputs_r+0x84>
 800bd0e:	898a      	ldrh	r2, [r1, #12]
 800bd10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd14:	d032      	beq.n	800bd7c <__ssputs_r+0x80>
 800bd16:	6825      	ldr	r5, [r4, #0]
 800bd18:	6909      	ldr	r1, [r1, #16]
 800bd1a:	eba5 0901 	sub.w	r9, r5, r1
 800bd1e:	6965      	ldr	r5, [r4, #20]
 800bd20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd28:	3301      	adds	r3, #1
 800bd2a:	444b      	add	r3, r9
 800bd2c:	106d      	asrs	r5, r5, #1
 800bd2e:	429d      	cmp	r5, r3
 800bd30:	bf38      	it	cc
 800bd32:	461d      	movcc	r5, r3
 800bd34:	0553      	lsls	r3, r2, #21
 800bd36:	d531      	bpl.n	800bd9c <__ssputs_r+0xa0>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f000 fb55 	bl	800c3e8 <_malloc_r>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	b950      	cbnz	r0, 800bd58 <__ssputs_r+0x5c>
 800bd42:	230c      	movs	r3, #12
 800bd44:	f8ca 3000 	str.w	r3, [sl]
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd4e:	81a3      	strh	r3, [r4, #12]
 800bd50:	f04f 30ff 	mov.w	r0, #4294967295
 800bd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd58:	6921      	ldr	r1, [r4, #16]
 800bd5a:	464a      	mov	r2, r9
 800bd5c:	f7ff ff56 	bl	800bc0c <memcpy>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	6126      	str	r6, [r4, #16]
 800bd6e:	6165      	str	r5, [r4, #20]
 800bd70:	444e      	add	r6, r9
 800bd72:	eba5 0509 	sub.w	r5, r5, r9
 800bd76:	6026      	str	r6, [r4, #0]
 800bd78:	60a5      	str	r5, [r4, #8]
 800bd7a:	463e      	mov	r6, r7
 800bd7c:	42be      	cmp	r6, r7
 800bd7e:	d900      	bls.n	800bd82 <__ssputs_r+0x86>
 800bd80:	463e      	mov	r6, r7
 800bd82:	6820      	ldr	r0, [r4, #0]
 800bd84:	4632      	mov	r2, r6
 800bd86:	4641      	mov	r1, r8
 800bd88:	f000 faa8 	bl	800c2dc <memmove>
 800bd8c:	68a3      	ldr	r3, [r4, #8]
 800bd8e:	1b9b      	subs	r3, r3, r6
 800bd90:	60a3      	str	r3, [r4, #8]
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	4433      	add	r3, r6
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	2000      	movs	r0, #0
 800bd9a:	e7db      	b.n	800bd54 <__ssputs_r+0x58>
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	f000 fb97 	bl	800c4d0 <_realloc_r>
 800bda2:	4606      	mov	r6, r0
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d1e1      	bne.n	800bd6c <__ssputs_r+0x70>
 800bda8:	6921      	ldr	r1, [r4, #16]
 800bdaa:	4650      	mov	r0, sl
 800bdac:	f000 fab0 	bl	800c310 <_free_r>
 800bdb0:	e7c7      	b.n	800bd42 <__ssputs_r+0x46>
	...

0800bdb4 <_svfiprintf_r>:
 800bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	4698      	mov	r8, r3
 800bdba:	898b      	ldrh	r3, [r1, #12]
 800bdbc:	061b      	lsls	r3, r3, #24
 800bdbe:	b09d      	sub	sp, #116	; 0x74
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	d50e      	bpl.n	800bde6 <_svfiprintf_r+0x32>
 800bdc8:	690b      	ldr	r3, [r1, #16]
 800bdca:	b963      	cbnz	r3, 800bde6 <_svfiprintf_r+0x32>
 800bdcc:	2140      	movs	r1, #64	; 0x40
 800bdce:	f000 fb0b 	bl	800c3e8 <_malloc_r>
 800bdd2:	6028      	str	r0, [r5, #0]
 800bdd4:	6128      	str	r0, [r5, #16]
 800bdd6:	b920      	cbnz	r0, 800bde2 <_svfiprintf_r+0x2e>
 800bdd8:	230c      	movs	r3, #12
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	e0d1      	b.n	800bf86 <_svfiprintf_r+0x1d2>
 800bde2:	2340      	movs	r3, #64	; 0x40
 800bde4:	616b      	str	r3, [r5, #20]
 800bde6:	2300      	movs	r3, #0
 800bde8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdea:	2320      	movs	r3, #32
 800bdec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdf4:	2330      	movs	r3, #48	; 0x30
 800bdf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfa0 <_svfiprintf_r+0x1ec>
 800bdfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdfe:	f04f 0901 	mov.w	r9, #1
 800be02:	4623      	mov	r3, r4
 800be04:	469a      	mov	sl, r3
 800be06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be0a:	b10a      	cbz	r2, 800be10 <_svfiprintf_r+0x5c>
 800be0c:	2a25      	cmp	r2, #37	; 0x25
 800be0e:	d1f9      	bne.n	800be04 <_svfiprintf_r+0x50>
 800be10:	ebba 0b04 	subs.w	fp, sl, r4
 800be14:	d00b      	beq.n	800be2e <_svfiprintf_r+0x7a>
 800be16:	465b      	mov	r3, fp
 800be18:	4622      	mov	r2, r4
 800be1a:	4629      	mov	r1, r5
 800be1c:	4638      	mov	r0, r7
 800be1e:	f7ff ff6d 	bl	800bcfc <__ssputs_r>
 800be22:	3001      	adds	r0, #1
 800be24:	f000 80aa 	beq.w	800bf7c <_svfiprintf_r+0x1c8>
 800be28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be2a:	445a      	add	r2, fp
 800be2c:	9209      	str	r2, [sp, #36]	; 0x24
 800be2e:	f89a 3000 	ldrb.w	r3, [sl]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 80a2 	beq.w	800bf7c <_svfiprintf_r+0x1c8>
 800be38:	2300      	movs	r3, #0
 800be3a:	f04f 32ff 	mov.w	r2, #4294967295
 800be3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be42:	f10a 0a01 	add.w	sl, sl, #1
 800be46:	9304      	str	r3, [sp, #16]
 800be48:	9307      	str	r3, [sp, #28]
 800be4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be4e:	931a      	str	r3, [sp, #104]	; 0x68
 800be50:	4654      	mov	r4, sl
 800be52:	2205      	movs	r2, #5
 800be54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be58:	4851      	ldr	r0, [pc, #324]	; (800bfa0 <_svfiprintf_r+0x1ec>)
 800be5a:	f7f4 f9c1 	bl	80001e0 <memchr>
 800be5e:	9a04      	ldr	r2, [sp, #16]
 800be60:	b9d8      	cbnz	r0, 800be9a <_svfiprintf_r+0xe6>
 800be62:	06d0      	lsls	r0, r2, #27
 800be64:	bf44      	itt	mi
 800be66:	2320      	movmi	r3, #32
 800be68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be6c:	0711      	lsls	r1, r2, #28
 800be6e:	bf44      	itt	mi
 800be70:	232b      	movmi	r3, #43	; 0x2b
 800be72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be76:	f89a 3000 	ldrb.w	r3, [sl]
 800be7a:	2b2a      	cmp	r3, #42	; 0x2a
 800be7c:	d015      	beq.n	800beaa <_svfiprintf_r+0xf6>
 800be7e:	9a07      	ldr	r2, [sp, #28]
 800be80:	4654      	mov	r4, sl
 800be82:	2000      	movs	r0, #0
 800be84:	f04f 0c0a 	mov.w	ip, #10
 800be88:	4621      	mov	r1, r4
 800be8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be8e:	3b30      	subs	r3, #48	; 0x30
 800be90:	2b09      	cmp	r3, #9
 800be92:	d94e      	bls.n	800bf32 <_svfiprintf_r+0x17e>
 800be94:	b1b0      	cbz	r0, 800bec4 <_svfiprintf_r+0x110>
 800be96:	9207      	str	r2, [sp, #28]
 800be98:	e014      	b.n	800bec4 <_svfiprintf_r+0x110>
 800be9a:	eba0 0308 	sub.w	r3, r0, r8
 800be9e:	fa09 f303 	lsl.w	r3, r9, r3
 800bea2:	4313      	orrs	r3, r2
 800bea4:	9304      	str	r3, [sp, #16]
 800bea6:	46a2      	mov	sl, r4
 800bea8:	e7d2      	b.n	800be50 <_svfiprintf_r+0x9c>
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	1d19      	adds	r1, r3, #4
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	9103      	str	r1, [sp, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	bfbb      	ittet	lt
 800beb6:	425b      	neglt	r3, r3
 800beb8:	f042 0202 	orrlt.w	r2, r2, #2
 800bebc:	9307      	strge	r3, [sp, #28]
 800bebe:	9307      	strlt	r3, [sp, #28]
 800bec0:	bfb8      	it	lt
 800bec2:	9204      	strlt	r2, [sp, #16]
 800bec4:	7823      	ldrb	r3, [r4, #0]
 800bec6:	2b2e      	cmp	r3, #46	; 0x2e
 800bec8:	d10c      	bne.n	800bee4 <_svfiprintf_r+0x130>
 800beca:	7863      	ldrb	r3, [r4, #1]
 800becc:	2b2a      	cmp	r3, #42	; 0x2a
 800bece:	d135      	bne.n	800bf3c <_svfiprintf_r+0x188>
 800bed0:	9b03      	ldr	r3, [sp, #12]
 800bed2:	1d1a      	adds	r2, r3, #4
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	9203      	str	r2, [sp, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	bfb8      	it	lt
 800bedc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bee0:	3402      	adds	r4, #2
 800bee2:	9305      	str	r3, [sp, #20]
 800bee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfb0 <_svfiprintf_r+0x1fc>
 800bee8:	7821      	ldrb	r1, [r4, #0]
 800beea:	2203      	movs	r2, #3
 800beec:	4650      	mov	r0, sl
 800beee:	f7f4 f977 	bl	80001e0 <memchr>
 800bef2:	b140      	cbz	r0, 800bf06 <_svfiprintf_r+0x152>
 800bef4:	2340      	movs	r3, #64	; 0x40
 800bef6:	eba0 000a 	sub.w	r0, r0, sl
 800befa:	fa03 f000 	lsl.w	r0, r3, r0
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	4303      	orrs	r3, r0
 800bf02:	3401      	adds	r4, #1
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf0a:	4826      	ldr	r0, [pc, #152]	; (800bfa4 <_svfiprintf_r+0x1f0>)
 800bf0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf10:	2206      	movs	r2, #6
 800bf12:	f7f4 f965 	bl	80001e0 <memchr>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d038      	beq.n	800bf8c <_svfiprintf_r+0x1d8>
 800bf1a:	4b23      	ldr	r3, [pc, #140]	; (800bfa8 <_svfiprintf_r+0x1f4>)
 800bf1c:	bb1b      	cbnz	r3, 800bf66 <_svfiprintf_r+0x1b2>
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	3307      	adds	r3, #7
 800bf22:	f023 0307 	bic.w	r3, r3, #7
 800bf26:	3308      	adds	r3, #8
 800bf28:	9303      	str	r3, [sp, #12]
 800bf2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2c:	4433      	add	r3, r6
 800bf2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf30:	e767      	b.n	800be02 <_svfiprintf_r+0x4e>
 800bf32:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf36:	460c      	mov	r4, r1
 800bf38:	2001      	movs	r0, #1
 800bf3a:	e7a5      	b.n	800be88 <_svfiprintf_r+0xd4>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	3401      	adds	r4, #1
 800bf40:	9305      	str	r3, [sp, #20]
 800bf42:	4619      	mov	r1, r3
 800bf44:	f04f 0c0a 	mov.w	ip, #10
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf4e:	3a30      	subs	r2, #48	; 0x30
 800bf50:	2a09      	cmp	r2, #9
 800bf52:	d903      	bls.n	800bf5c <_svfiprintf_r+0x1a8>
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0c5      	beq.n	800bee4 <_svfiprintf_r+0x130>
 800bf58:	9105      	str	r1, [sp, #20]
 800bf5a:	e7c3      	b.n	800bee4 <_svfiprintf_r+0x130>
 800bf5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf60:	4604      	mov	r4, r0
 800bf62:	2301      	movs	r3, #1
 800bf64:	e7f0      	b.n	800bf48 <_svfiprintf_r+0x194>
 800bf66:	ab03      	add	r3, sp, #12
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <_svfiprintf_r+0x1f8>)
 800bf6e:	a904      	add	r1, sp, #16
 800bf70:	4638      	mov	r0, r7
 800bf72:	f3af 8000 	nop.w
 800bf76:	1c42      	adds	r2, r0, #1
 800bf78:	4606      	mov	r6, r0
 800bf7a:	d1d6      	bne.n	800bf2a <_svfiprintf_r+0x176>
 800bf7c:	89ab      	ldrh	r3, [r5, #12]
 800bf7e:	065b      	lsls	r3, r3, #25
 800bf80:	f53f af2c 	bmi.w	800bddc <_svfiprintf_r+0x28>
 800bf84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf86:	b01d      	add	sp, #116	; 0x74
 800bf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8c:	ab03      	add	r3, sp, #12
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	462a      	mov	r2, r5
 800bf92:	4b06      	ldr	r3, [pc, #24]	; (800bfac <_svfiprintf_r+0x1f8>)
 800bf94:	a904      	add	r1, sp, #16
 800bf96:	4638      	mov	r0, r7
 800bf98:	f000 f87a 	bl	800c090 <_printf_i>
 800bf9c:	e7eb      	b.n	800bf76 <_svfiprintf_r+0x1c2>
 800bf9e:	bf00      	nop
 800bfa0:	0800cfb4 	.word	0x0800cfb4
 800bfa4:	0800cfbe 	.word	0x0800cfbe
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	0800bcfd 	.word	0x0800bcfd
 800bfb0:	0800cfba 	.word	0x0800cfba

0800bfb4 <_printf_common>:
 800bfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb8:	4616      	mov	r6, r2
 800bfba:	4699      	mov	r9, r3
 800bfbc:	688a      	ldr	r2, [r1, #8]
 800bfbe:	690b      	ldr	r3, [r1, #16]
 800bfc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	bfb8      	it	lt
 800bfc8:	4613      	movlt	r3, r2
 800bfca:	6033      	str	r3, [r6, #0]
 800bfcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	b10a      	cbz	r2, 800bfda <_printf_common+0x26>
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	6033      	str	r3, [r6, #0]
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	0699      	lsls	r1, r3, #26
 800bfde:	bf42      	ittt	mi
 800bfe0:	6833      	ldrmi	r3, [r6, #0]
 800bfe2:	3302      	addmi	r3, #2
 800bfe4:	6033      	strmi	r3, [r6, #0]
 800bfe6:	6825      	ldr	r5, [r4, #0]
 800bfe8:	f015 0506 	ands.w	r5, r5, #6
 800bfec:	d106      	bne.n	800bffc <_printf_common+0x48>
 800bfee:	f104 0a19 	add.w	sl, r4, #25
 800bff2:	68e3      	ldr	r3, [r4, #12]
 800bff4:	6832      	ldr	r2, [r6, #0]
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	42ab      	cmp	r3, r5
 800bffa:	dc26      	bgt.n	800c04a <_printf_common+0x96>
 800bffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c000:	1e13      	subs	r3, r2, #0
 800c002:	6822      	ldr	r2, [r4, #0]
 800c004:	bf18      	it	ne
 800c006:	2301      	movne	r3, #1
 800c008:	0692      	lsls	r2, r2, #26
 800c00a:	d42b      	bmi.n	800c064 <_printf_common+0xb0>
 800c00c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c010:	4649      	mov	r1, r9
 800c012:	4638      	mov	r0, r7
 800c014:	47c0      	blx	r8
 800c016:	3001      	adds	r0, #1
 800c018:	d01e      	beq.n	800c058 <_printf_common+0xa4>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	68e5      	ldr	r5, [r4, #12]
 800c01e:	6832      	ldr	r2, [r6, #0]
 800c020:	f003 0306 	and.w	r3, r3, #6
 800c024:	2b04      	cmp	r3, #4
 800c026:	bf08      	it	eq
 800c028:	1aad      	subeq	r5, r5, r2
 800c02a:	68a3      	ldr	r3, [r4, #8]
 800c02c:	6922      	ldr	r2, [r4, #16]
 800c02e:	bf0c      	ite	eq
 800c030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c034:	2500      	movne	r5, #0
 800c036:	4293      	cmp	r3, r2
 800c038:	bfc4      	itt	gt
 800c03a:	1a9b      	subgt	r3, r3, r2
 800c03c:	18ed      	addgt	r5, r5, r3
 800c03e:	2600      	movs	r6, #0
 800c040:	341a      	adds	r4, #26
 800c042:	42b5      	cmp	r5, r6
 800c044:	d11a      	bne.n	800c07c <_printf_common+0xc8>
 800c046:	2000      	movs	r0, #0
 800c048:	e008      	b.n	800c05c <_printf_common+0xa8>
 800c04a:	2301      	movs	r3, #1
 800c04c:	4652      	mov	r2, sl
 800c04e:	4649      	mov	r1, r9
 800c050:	4638      	mov	r0, r7
 800c052:	47c0      	blx	r8
 800c054:	3001      	adds	r0, #1
 800c056:	d103      	bne.n	800c060 <_printf_common+0xac>
 800c058:	f04f 30ff 	mov.w	r0, #4294967295
 800c05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c060:	3501      	adds	r5, #1
 800c062:	e7c6      	b.n	800bff2 <_printf_common+0x3e>
 800c064:	18e1      	adds	r1, r4, r3
 800c066:	1c5a      	adds	r2, r3, #1
 800c068:	2030      	movs	r0, #48	; 0x30
 800c06a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c06e:	4422      	add	r2, r4
 800c070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c078:	3302      	adds	r3, #2
 800c07a:	e7c7      	b.n	800c00c <_printf_common+0x58>
 800c07c:	2301      	movs	r3, #1
 800c07e:	4622      	mov	r2, r4
 800c080:	4649      	mov	r1, r9
 800c082:	4638      	mov	r0, r7
 800c084:	47c0      	blx	r8
 800c086:	3001      	adds	r0, #1
 800c088:	d0e6      	beq.n	800c058 <_printf_common+0xa4>
 800c08a:	3601      	adds	r6, #1
 800c08c:	e7d9      	b.n	800c042 <_printf_common+0x8e>
	...

0800c090 <_printf_i>:
 800c090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c094:	7e0f      	ldrb	r7, [r1, #24]
 800c096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c098:	2f78      	cmp	r7, #120	; 0x78
 800c09a:	4691      	mov	r9, r2
 800c09c:	4680      	mov	r8, r0
 800c09e:	460c      	mov	r4, r1
 800c0a0:	469a      	mov	sl, r3
 800c0a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0a6:	d807      	bhi.n	800c0b8 <_printf_i+0x28>
 800c0a8:	2f62      	cmp	r7, #98	; 0x62
 800c0aa:	d80a      	bhi.n	800c0c2 <_printf_i+0x32>
 800c0ac:	2f00      	cmp	r7, #0
 800c0ae:	f000 80d8 	beq.w	800c262 <_printf_i+0x1d2>
 800c0b2:	2f58      	cmp	r7, #88	; 0x58
 800c0b4:	f000 80a3 	beq.w	800c1fe <_printf_i+0x16e>
 800c0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0c0:	e03a      	b.n	800c138 <_printf_i+0xa8>
 800c0c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0c6:	2b15      	cmp	r3, #21
 800c0c8:	d8f6      	bhi.n	800c0b8 <_printf_i+0x28>
 800c0ca:	a101      	add	r1, pc, #4	; (adr r1, 800c0d0 <_printf_i+0x40>)
 800c0cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0d0:	0800c129 	.word	0x0800c129
 800c0d4:	0800c13d 	.word	0x0800c13d
 800c0d8:	0800c0b9 	.word	0x0800c0b9
 800c0dc:	0800c0b9 	.word	0x0800c0b9
 800c0e0:	0800c0b9 	.word	0x0800c0b9
 800c0e4:	0800c0b9 	.word	0x0800c0b9
 800c0e8:	0800c13d 	.word	0x0800c13d
 800c0ec:	0800c0b9 	.word	0x0800c0b9
 800c0f0:	0800c0b9 	.word	0x0800c0b9
 800c0f4:	0800c0b9 	.word	0x0800c0b9
 800c0f8:	0800c0b9 	.word	0x0800c0b9
 800c0fc:	0800c249 	.word	0x0800c249
 800c100:	0800c16d 	.word	0x0800c16d
 800c104:	0800c22b 	.word	0x0800c22b
 800c108:	0800c0b9 	.word	0x0800c0b9
 800c10c:	0800c0b9 	.word	0x0800c0b9
 800c110:	0800c26b 	.word	0x0800c26b
 800c114:	0800c0b9 	.word	0x0800c0b9
 800c118:	0800c16d 	.word	0x0800c16d
 800c11c:	0800c0b9 	.word	0x0800c0b9
 800c120:	0800c0b9 	.word	0x0800c0b9
 800c124:	0800c233 	.word	0x0800c233
 800c128:	682b      	ldr	r3, [r5, #0]
 800c12a:	1d1a      	adds	r2, r3, #4
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	602a      	str	r2, [r5, #0]
 800c130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c138:	2301      	movs	r3, #1
 800c13a:	e0a3      	b.n	800c284 <_printf_i+0x1f4>
 800c13c:	6820      	ldr	r0, [r4, #0]
 800c13e:	6829      	ldr	r1, [r5, #0]
 800c140:	0606      	lsls	r6, r0, #24
 800c142:	f101 0304 	add.w	r3, r1, #4
 800c146:	d50a      	bpl.n	800c15e <_printf_i+0xce>
 800c148:	680e      	ldr	r6, [r1, #0]
 800c14a:	602b      	str	r3, [r5, #0]
 800c14c:	2e00      	cmp	r6, #0
 800c14e:	da03      	bge.n	800c158 <_printf_i+0xc8>
 800c150:	232d      	movs	r3, #45	; 0x2d
 800c152:	4276      	negs	r6, r6
 800c154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c158:	485e      	ldr	r0, [pc, #376]	; (800c2d4 <_printf_i+0x244>)
 800c15a:	230a      	movs	r3, #10
 800c15c:	e019      	b.n	800c192 <_printf_i+0x102>
 800c15e:	680e      	ldr	r6, [r1, #0]
 800c160:	602b      	str	r3, [r5, #0]
 800c162:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c166:	bf18      	it	ne
 800c168:	b236      	sxthne	r6, r6
 800c16a:	e7ef      	b.n	800c14c <_printf_i+0xbc>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	6820      	ldr	r0, [r4, #0]
 800c170:	1d19      	adds	r1, r3, #4
 800c172:	6029      	str	r1, [r5, #0]
 800c174:	0601      	lsls	r1, r0, #24
 800c176:	d501      	bpl.n	800c17c <_printf_i+0xec>
 800c178:	681e      	ldr	r6, [r3, #0]
 800c17a:	e002      	b.n	800c182 <_printf_i+0xf2>
 800c17c:	0646      	lsls	r6, r0, #25
 800c17e:	d5fb      	bpl.n	800c178 <_printf_i+0xe8>
 800c180:	881e      	ldrh	r6, [r3, #0]
 800c182:	4854      	ldr	r0, [pc, #336]	; (800c2d4 <_printf_i+0x244>)
 800c184:	2f6f      	cmp	r7, #111	; 0x6f
 800c186:	bf0c      	ite	eq
 800c188:	2308      	moveq	r3, #8
 800c18a:	230a      	movne	r3, #10
 800c18c:	2100      	movs	r1, #0
 800c18e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c192:	6865      	ldr	r5, [r4, #4]
 800c194:	60a5      	str	r5, [r4, #8]
 800c196:	2d00      	cmp	r5, #0
 800c198:	bfa2      	ittt	ge
 800c19a:	6821      	ldrge	r1, [r4, #0]
 800c19c:	f021 0104 	bicge.w	r1, r1, #4
 800c1a0:	6021      	strge	r1, [r4, #0]
 800c1a2:	b90e      	cbnz	r6, 800c1a8 <_printf_i+0x118>
 800c1a4:	2d00      	cmp	r5, #0
 800c1a6:	d04d      	beq.n	800c244 <_printf_i+0x1b4>
 800c1a8:	4615      	mov	r5, r2
 800c1aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1ae:	fb03 6711 	mls	r7, r3, r1, r6
 800c1b2:	5dc7      	ldrb	r7, [r0, r7]
 800c1b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1b8:	4637      	mov	r7, r6
 800c1ba:	42bb      	cmp	r3, r7
 800c1bc:	460e      	mov	r6, r1
 800c1be:	d9f4      	bls.n	800c1aa <_printf_i+0x11a>
 800c1c0:	2b08      	cmp	r3, #8
 800c1c2:	d10b      	bne.n	800c1dc <_printf_i+0x14c>
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	07de      	lsls	r6, r3, #31
 800c1c8:	d508      	bpl.n	800c1dc <_printf_i+0x14c>
 800c1ca:	6923      	ldr	r3, [r4, #16]
 800c1cc:	6861      	ldr	r1, [r4, #4]
 800c1ce:	4299      	cmp	r1, r3
 800c1d0:	bfde      	ittt	le
 800c1d2:	2330      	movle	r3, #48	; 0x30
 800c1d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1dc:	1b52      	subs	r2, r2, r5
 800c1de:	6122      	str	r2, [r4, #16]
 800c1e0:	f8cd a000 	str.w	sl, [sp]
 800c1e4:	464b      	mov	r3, r9
 800c1e6:	aa03      	add	r2, sp, #12
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	f7ff fee2 	bl	800bfb4 <_printf_common>
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	d14c      	bne.n	800c28e <_printf_i+0x1fe>
 800c1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f8:	b004      	add	sp, #16
 800c1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fe:	4835      	ldr	r0, [pc, #212]	; (800c2d4 <_printf_i+0x244>)
 800c200:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c204:	6829      	ldr	r1, [r5, #0]
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	f851 6b04 	ldr.w	r6, [r1], #4
 800c20c:	6029      	str	r1, [r5, #0]
 800c20e:	061d      	lsls	r5, r3, #24
 800c210:	d514      	bpl.n	800c23c <_printf_i+0x1ac>
 800c212:	07df      	lsls	r7, r3, #31
 800c214:	bf44      	itt	mi
 800c216:	f043 0320 	orrmi.w	r3, r3, #32
 800c21a:	6023      	strmi	r3, [r4, #0]
 800c21c:	b91e      	cbnz	r6, 800c226 <_printf_i+0x196>
 800c21e:	6823      	ldr	r3, [r4, #0]
 800c220:	f023 0320 	bic.w	r3, r3, #32
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	2310      	movs	r3, #16
 800c228:	e7b0      	b.n	800c18c <_printf_i+0xfc>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	f043 0320 	orr.w	r3, r3, #32
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	2378      	movs	r3, #120	; 0x78
 800c234:	4828      	ldr	r0, [pc, #160]	; (800c2d8 <_printf_i+0x248>)
 800c236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c23a:	e7e3      	b.n	800c204 <_printf_i+0x174>
 800c23c:	0659      	lsls	r1, r3, #25
 800c23e:	bf48      	it	mi
 800c240:	b2b6      	uxthmi	r6, r6
 800c242:	e7e6      	b.n	800c212 <_printf_i+0x182>
 800c244:	4615      	mov	r5, r2
 800c246:	e7bb      	b.n	800c1c0 <_printf_i+0x130>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	6826      	ldr	r6, [r4, #0]
 800c24c:	6961      	ldr	r1, [r4, #20]
 800c24e:	1d18      	adds	r0, r3, #4
 800c250:	6028      	str	r0, [r5, #0]
 800c252:	0635      	lsls	r5, r6, #24
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	d501      	bpl.n	800c25c <_printf_i+0x1cc>
 800c258:	6019      	str	r1, [r3, #0]
 800c25a:	e002      	b.n	800c262 <_printf_i+0x1d2>
 800c25c:	0670      	lsls	r0, r6, #25
 800c25e:	d5fb      	bpl.n	800c258 <_printf_i+0x1c8>
 800c260:	8019      	strh	r1, [r3, #0]
 800c262:	2300      	movs	r3, #0
 800c264:	6123      	str	r3, [r4, #16]
 800c266:	4615      	mov	r5, r2
 800c268:	e7ba      	b.n	800c1e0 <_printf_i+0x150>
 800c26a:	682b      	ldr	r3, [r5, #0]
 800c26c:	1d1a      	adds	r2, r3, #4
 800c26e:	602a      	str	r2, [r5, #0]
 800c270:	681d      	ldr	r5, [r3, #0]
 800c272:	6862      	ldr	r2, [r4, #4]
 800c274:	2100      	movs	r1, #0
 800c276:	4628      	mov	r0, r5
 800c278:	f7f3 ffb2 	bl	80001e0 <memchr>
 800c27c:	b108      	cbz	r0, 800c282 <_printf_i+0x1f2>
 800c27e:	1b40      	subs	r0, r0, r5
 800c280:	6060      	str	r0, [r4, #4]
 800c282:	6863      	ldr	r3, [r4, #4]
 800c284:	6123      	str	r3, [r4, #16]
 800c286:	2300      	movs	r3, #0
 800c288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c28c:	e7a8      	b.n	800c1e0 <_printf_i+0x150>
 800c28e:	6923      	ldr	r3, [r4, #16]
 800c290:	462a      	mov	r2, r5
 800c292:	4649      	mov	r1, r9
 800c294:	4640      	mov	r0, r8
 800c296:	47d0      	blx	sl
 800c298:	3001      	adds	r0, #1
 800c29a:	d0ab      	beq.n	800c1f4 <_printf_i+0x164>
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	079b      	lsls	r3, r3, #30
 800c2a0:	d413      	bmi.n	800c2ca <_printf_i+0x23a>
 800c2a2:	68e0      	ldr	r0, [r4, #12]
 800c2a4:	9b03      	ldr	r3, [sp, #12]
 800c2a6:	4298      	cmp	r0, r3
 800c2a8:	bfb8      	it	lt
 800c2aa:	4618      	movlt	r0, r3
 800c2ac:	e7a4      	b.n	800c1f8 <_printf_i+0x168>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	4632      	mov	r2, r6
 800c2b2:	4649      	mov	r1, r9
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	47d0      	blx	sl
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	d09b      	beq.n	800c1f4 <_printf_i+0x164>
 800c2bc:	3501      	adds	r5, #1
 800c2be:	68e3      	ldr	r3, [r4, #12]
 800c2c0:	9903      	ldr	r1, [sp, #12]
 800c2c2:	1a5b      	subs	r3, r3, r1
 800c2c4:	42ab      	cmp	r3, r5
 800c2c6:	dcf2      	bgt.n	800c2ae <_printf_i+0x21e>
 800c2c8:	e7eb      	b.n	800c2a2 <_printf_i+0x212>
 800c2ca:	2500      	movs	r5, #0
 800c2cc:	f104 0619 	add.w	r6, r4, #25
 800c2d0:	e7f5      	b.n	800c2be <_printf_i+0x22e>
 800c2d2:	bf00      	nop
 800c2d4:	0800cfc5 	.word	0x0800cfc5
 800c2d8:	0800cfd6 	.word	0x0800cfd6

0800c2dc <memmove>:
 800c2dc:	4288      	cmp	r0, r1
 800c2de:	b510      	push	{r4, lr}
 800c2e0:	eb01 0402 	add.w	r4, r1, r2
 800c2e4:	d902      	bls.n	800c2ec <memmove+0x10>
 800c2e6:	4284      	cmp	r4, r0
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	d807      	bhi.n	800c2fc <memmove+0x20>
 800c2ec:	1e43      	subs	r3, r0, #1
 800c2ee:	42a1      	cmp	r1, r4
 800c2f0:	d008      	beq.n	800c304 <memmove+0x28>
 800c2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2fa:	e7f8      	b.n	800c2ee <memmove+0x12>
 800c2fc:	4402      	add	r2, r0
 800c2fe:	4601      	mov	r1, r0
 800c300:	428a      	cmp	r2, r1
 800c302:	d100      	bne.n	800c306 <memmove+0x2a>
 800c304:	bd10      	pop	{r4, pc}
 800c306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c30e:	e7f7      	b.n	800c300 <memmove+0x24>

0800c310 <_free_r>:
 800c310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c312:	2900      	cmp	r1, #0
 800c314:	d044      	beq.n	800c3a0 <_free_r+0x90>
 800c316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c31a:	9001      	str	r0, [sp, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	f1a1 0404 	sub.w	r4, r1, #4
 800c322:	bfb8      	it	lt
 800c324:	18e4      	addlt	r4, r4, r3
 800c326:	f000 f913 	bl	800c550 <__malloc_lock>
 800c32a:	4a1e      	ldr	r2, [pc, #120]	; (800c3a4 <_free_r+0x94>)
 800c32c:	9801      	ldr	r0, [sp, #4]
 800c32e:	6813      	ldr	r3, [r2, #0]
 800c330:	b933      	cbnz	r3, 800c340 <_free_r+0x30>
 800c332:	6063      	str	r3, [r4, #4]
 800c334:	6014      	str	r4, [r2, #0]
 800c336:	b003      	add	sp, #12
 800c338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c33c:	f000 b90e 	b.w	800c55c <__malloc_unlock>
 800c340:	42a3      	cmp	r3, r4
 800c342:	d908      	bls.n	800c356 <_free_r+0x46>
 800c344:	6825      	ldr	r5, [r4, #0]
 800c346:	1961      	adds	r1, r4, r5
 800c348:	428b      	cmp	r3, r1
 800c34a:	bf01      	itttt	eq
 800c34c:	6819      	ldreq	r1, [r3, #0]
 800c34e:	685b      	ldreq	r3, [r3, #4]
 800c350:	1949      	addeq	r1, r1, r5
 800c352:	6021      	streq	r1, [r4, #0]
 800c354:	e7ed      	b.n	800c332 <_free_r+0x22>
 800c356:	461a      	mov	r2, r3
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	b10b      	cbz	r3, 800c360 <_free_r+0x50>
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	d9fa      	bls.n	800c356 <_free_r+0x46>
 800c360:	6811      	ldr	r1, [r2, #0]
 800c362:	1855      	adds	r5, r2, r1
 800c364:	42a5      	cmp	r5, r4
 800c366:	d10b      	bne.n	800c380 <_free_r+0x70>
 800c368:	6824      	ldr	r4, [r4, #0]
 800c36a:	4421      	add	r1, r4
 800c36c:	1854      	adds	r4, r2, r1
 800c36e:	42a3      	cmp	r3, r4
 800c370:	6011      	str	r1, [r2, #0]
 800c372:	d1e0      	bne.n	800c336 <_free_r+0x26>
 800c374:	681c      	ldr	r4, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	6053      	str	r3, [r2, #4]
 800c37a:	4421      	add	r1, r4
 800c37c:	6011      	str	r1, [r2, #0]
 800c37e:	e7da      	b.n	800c336 <_free_r+0x26>
 800c380:	d902      	bls.n	800c388 <_free_r+0x78>
 800c382:	230c      	movs	r3, #12
 800c384:	6003      	str	r3, [r0, #0]
 800c386:	e7d6      	b.n	800c336 <_free_r+0x26>
 800c388:	6825      	ldr	r5, [r4, #0]
 800c38a:	1961      	adds	r1, r4, r5
 800c38c:	428b      	cmp	r3, r1
 800c38e:	bf04      	itt	eq
 800c390:	6819      	ldreq	r1, [r3, #0]
 800c392:	685b      	ldreq	r3, [r3, #4]
 800c394:	6063      	str	r3, [r4, #4]
 800c396:	bf04      	itt	eq
 800c398:	1949      	addeq	r1, r1, r5
 800c39a:	6021      	streq	r1, [r4, #0]
 800c39c:	6054      	str	r4, [r2, #4]
 800c39e:	e7ca      	b.n	800c336 <_free_r+0x26>
 800c3a0:	b003      	add	sp, #12
 800c3a2:	bd30      	pop	{r4, r5, pc}
 800c3a4:	20000bf0 	.word	0x20000bf0

0800c3a8 <sbrk_aligned>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	4e0e      	ldr	r6, [pc, #56]	; (800c3e4 <sbrk_aligned+0x3c>)
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	6831      	ldr	r1, [r6, #0]
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	b911      	cbnz	r1, 800c3ba <sbrk_aligned+0x12>
 800c3b4:	f000 f8bc 	bl	800c530 <_sbrk_r>
 800c3b8:	6030      	str	r0, [r6, #0]
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f000 f8b7 	bl	800c530 <_sbrk_r>
 800c3c2:	1c43      	adds	r3, r0, #1
 800c3c4:	d00a      	beq.n	800c3dc <sbrk_aligned+0x34>
 800c3c6:	1cc4      	adds	r4, r0, #3
 800c3c8:	f024 0403 	bic.w	r4, r4, #3
 800c3cc:	42a0      	cmp	r0, r4
 800c3ce:	d007      	beq.n	800c3e0 <sbrk_aligned+0x38>
 800c3d0:	1a21      	subs	r1, r4, r0
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f000 f8ac 	bl	800c530 <_sbrk_r>
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d101      	bne.n	800c3e0 <sbrk_aligned+0x38>
 800c3dc:	f04f 34ff 	mov.w	r4, #4294967295
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	20000bf4 	.word	0x20000bf4

0800c3e8 <_malloc_r>:
 800c3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ec:	1ccd      	adds	r5, r1, #3
 800c3ee:	f025 0503 	bic.w	r5, r5, #3
 800c3f2:	3508      	adds	r5, #8
 800c3f4:	2d0c      	cmp	r5, #12
 800c3f6:	bf38      	it	cc
 800c3f8:	250c      	movcc	r5, #12
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	4607      	mov	r7, r0
 800c3fe:	db01      	blt.n	800c404 <_malloc_r+0x1c>
 800c400:	42a9      	cmp	r1, r5
 800c402:	d905      	bls.n	800c410 <_malloc_r+0x28>
 800c404:	230c      	movs	r3, #12
 800c406:	603b      	str	r3, [r7, #0]
 800c408:	2600      	movs	r6, #0
 800c40a:	4630      	mov	r0, r6
 800c40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c410:	4e2e      	ldr	r6, [pc, #184]	; (800c4cc <_malloc_r+0xe4>)
 800c412:	f000 f89d 	bl	800c550 <__malloc_lock>
 800c416:	6833      	ldr	r3, [r6, #0]
 800c418:	461c      	mov	r4, r3
 800c41a:	bb34      	cbnz	r4, 800c46a <_malloc_r+0x82>
 800c41c:	4629      	mov	r1, r5
 800c41e:	4638      	mov	r0, r7
 800c420:	f7ff ffc2 	bl	800c3a8 <sbrk_aligned>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	4604      	mov	r4, r0
 800c428:	d14d      	bne.n	800c4c6 <_malloc_r+0xde>
 800c42a:	6834      	ldr	r4, [r6, #0]
 800c42c:	4626      	mov	r6, r4
 800c42e:	2e00      	cmp	r6, #0
 800c430:	d140      	bne.n	800c4b4 <_malloc_r+0xcc>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	4631      	mov	r1, r6
 800c436:	4638      	mov	r0, r7
 800c438:	eb04 0803 	add.w	r8, r4, r3
 800c43c:	f000 f878 	bl	800c530 <_sbrk_r>
 800c440:	4580      	cmp	r8, r0
 800c442:	d13a      	bne.n	800c4ba <_malloc_r+0xd2>
 800c444:	6821      	ldr	r1, [r4, #0]
 800c446:	3503      	adds	r5, #3
 800c448:	1a6d      	subs	r5, r5, r1
 800c44a:	f025 0503 	bic.w	r5, r5, #3
 800c44e:	3508      	adds	r5, #8
 800c450:	2d0c      	cmp	r5, #12
 800c452:	bf38      	it	cc
 800c454:	250c      	movcc	r5, #12
 800c456:	4629      	mov	r1, r5
 800c458:	4638      	mov	r0, r7
 800c45a:	f7ff ffa5 	bl	800c3a8 <sbrk_aligned>
 800c45e:	3001      	adds	r0, #1
 800c460:	d02b      	beq.n	800c4ba <_malloc_r+0xd2>
 800c462:	6823      	ldr	r3, [r4, #0]
 800c464:	442b      	add	r3, r5
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	e00e      	b.n	800c488 <_malloc_r+0xa0>
 800c46a:	6822      	ldr	r2, [r4, #0]
 800c46c:	1b52      	subs	r2, r2, r5
 800c46e:	d41e      	bmi.n	800c4ae <_malloc_r+0xc6>
 800c470:	2a0b      	cmp	r2, #11
 800c472:	d916      	bls.n	800c4a2 <_malloc_r+0xba>
 800c474:	1961      	adds	r1, r4, r5
 800c476:	42a3      	cmp	r3, r4
 800c478:	6025      	str	r5, [r4, #0]
 800c47a:	bf18      	it	ne
 800c47c:	6059      	strne	r1, [r3, #4]
 800c47e:	6863      	ldr	r3, [r4, #4]
 800c480:	bf08      	it	eq
 800c482:	6031      	streq	r1, [r6, #0]
 800c484:	5162      	str	r2, [r4, r5]
 800c486:	604b      	str	r3, [r1, #4]
 800c488:	4638      	mov	r0, r7
 800c48a:	f104 060b 	add.w	r6, r4, #11
 800c48e:	f000 f865 	bl	800c55c <__malloc_unlock>
 800c492:	f026 0607 	bic.w	r6, r6, #7
 800c496:	1d23      	adds	r3, r4, #4
 800c498:	1af2      	subs	r2, r6, r3
 800c49a:	d0b6      	beq.n	800c40a <_malloc_r+0x22>
 800c49c:	1b9b      	subs	r3, r3, r6
 800c49e:	50a3      	str	r3, [r4, r2]
 800c4a0:	e7b3      	b.n	800c40a <_malloc_r+0x22>
 800c4a2:	6862      	ldr	r2, [r4, #4]
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	bf0c      	ite	eq
 800c4a8:	6032      	streq	r2, [r6, #0]
 800c4aa:	605a      	strne	r2, [r3, #4]
 800c4ac:	e7ec      	b.n	800c488 <_malloc_r+0xa0>
 800c4ae:	4623      	mov	r3, r4
 800c4b0:	6864      	ldr	r4, [r4, #4]
 800c4b2:	e7b2      	b.n	800c41a <_malloc_r+0x32>
 800c4b4:	4634      	mov	r4, r6
 800c4b6:	6876      	ldr	r6, [r6, #4]
 800c4b8:	e7b9      	b.n	800c42e <_malloc_r+0x46>
 800c4ba:	230c      	movs	r3, #12
 800c4bc:	603b      	str	r3, [r7, #0]
 800c4be:	4638      	mov	r0, r7
 800c4c0:	f000 f84c 	bl	800c55c <__malloc_unlock>
 800c4c4:	e7a1      	b.n	800c40a <_malloc_r+0x22>
 800c4c6:	6025      	str	r5, [r4, #0]
 800c4c8:	e7de      	b.n	800c488 <_malloc_r+0xa0>
 800c4ca:	bf00      	nop
 800c4cc:	20000bf0 	.word	0x20000bf0

0800c4d0 <_realloc_r>:
 800c4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	4614      	mov	r4, r2
 800c4d8:	460e      	mov	r6, r1
 800c4da:	b921      	cbnz	r1, 800c4e6 <_realloc_r+0x16>
 800c4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	f7ff bf81 	b.w	800c3e8 <_malloc_r>
 800c4e6:	b92a      	cbnz	r2, 800c4f4 <_realloc_r+0x24>
 800c4e8:	f7ff ff12 	bl	800c310 <_free_r>
 800c4ec:	4625      	mov	r5, r4
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f4:	f000 f838 	bl	800c568 <_malloc_usable_size_r>
 800c4f8:	4284      	cmp	r4, r0
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	d802      	bhi.n	800c504 <_realloc_r+0x34>
 800c4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c502:	d812      	bhi.n	800c52a <_realloc_r+0x5a>
 800c504:	4621      	mov	r1, r4
 800c506:	4640      	mov	r0, r8
 800c508:	f7ff ff6e 	bl	800c3e8 <_malloc_r>
 800c50c:	4605      	mov	r5, r0
 800c50e:	2800      	cmp	r0, #0
 800c510:	d0ed      	beq.n	800c4ee <_realloc_r+0x1e>
 800c512:	42bc      	cmp	r4, r7
 800c514:	4622      	mov	r2, r4
 800c516:	4631      	mov	r1, r6
 800c518:	bf28      	it	cs
 800c51a:	463a      	movcs	r2, r7
 800c51c:	f7ff fb76 	bl	800bc0c <memcpy>
 800c520:	4631      	mov	r1, r6
 800c522:	4640      	mov	r0, r8
 800c524:	f7ff fef4 	bl	800c310 <_free_r>
 800c528:	e7e1      	b.n	800c4ee <_realloc_r+0x1e>
 800c52a:	4635      	mov	r5, r6
 800c52c:	e7df      	b.n	800c4ee <_realloc_r+0x1e>
	...

0800c530 <_sbrk_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d06      	ldr	r5, [pc, #24]	; (800c54c <_sbrk_r+0x1c>)
 800c534:	2300      	movs	r3, #0
 800c536:	4604      	mov	r4, r0
 800c538:	4608      	mov	r0, r1
 800c53a:	602b      	str	r3, [r5, #0]
 800c53c:	f7f5 f874 	bl	8001628 <_sbrk>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d102      	bne.n	800c54a <_sbrk_r+0x1a>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	b103      	cbz	r3, 800c54a <_sbrk_r+0x1a>
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	20000bf8 	.word	0x20000bf8

0800c550 <__malloc_lock>:
 800c550:	4801      	ldr	r0, [pc, #4]	; (800c558 <__malloc_lock+0x8>)
 800c552:	f000 b811 	b.w	800c578 <__retarget_lock_acquire_recursive>
 800c556:	bf00      	nop
 800c558:	20000bfc 	.word	0x20000bfc

0800c55c <__malloc_unlock>:
 800c55c:	4801      	ldr	r0, [pc, #4]	; (800c564 <__malloc_unlock+0x8>)
 800c55e:	f000 b80c 	b.w	800c57a <__retarget_lock_release_recursive>
 800c562:	bf00      	nop
 800c564:	20000bfc 	.word	0x20000bfc

0800c568 <_malloc_usable_size_r>:
 800c568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c56c:	1f18      	subs	r0, r3, #4
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bfbc      	itt	lt
 800c572:	580b      	ldrlt	r3, [r1, r0]
 800c574:	18c0      	addlt	r0, r0, r3
 800c576:	4770      	bx	lr

0800c578 <__retarget_lock_acquire_recursive>:
 800c578:	4770      	bx	lr

0800c57a <__retarget_lock_release_recursive>:
 800c57a:	4770      	bx	lr

0800c57c <_init>:
 800c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c57e:	bf00      	nop
 800c580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c582:	bc08      	pop	{r3}
 800c584:	469e      	mov	lr, r3
 800c586:	4770      	bx	lr

0800c588 <_fini>:
 800c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58a:	bf00      	nop
 800c58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58e:	bc08      	pop	{r3}
 800c590:	469e      	mov	lr, r3
 800c592:	4770      	bx	lr
