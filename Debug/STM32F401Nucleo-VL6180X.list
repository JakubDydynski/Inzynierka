
STM32F401Nucleo-VL6180X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001024c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014f8  080103ec  080103ec  000203ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118e4  080118e4  000306a4  2**0
                  CONTENTS
  4 .ARM          00000008  080118e4  080118e4  000218e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118ec  080118ec  000306a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118ec  080118ec  000218ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118f0  080118f0  000218f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a4  20000000  080118f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001318  200006a8  08011f98  000306a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200019c0  08011f98  000319c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023517  00000000  00000000  000306d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f0f  00000000  00000000  00053beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00058b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a18  00000000  00000000  0005a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008f0f  00000000  00000000  0005c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022579  00000000  00000000  0006501f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b69f  00000000  00000000  00087598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122c37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079bc  00000000  00000000  00122c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200006a8 	.word	0x200006a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080103d4 	.word	0x080103d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200006ac 	.word	0x200006ac
 80001dc:	080103d4 	.word	0x080103d4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <con_putstr>:
#include <stdio.h>
#include <string.h>
#include "cmdproc.h"

void con_putstr(const char *s)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	while (*s)
 80005bc:	e006      	b.n	80005cc <con_putstr+0x18>
		con_putchar(*s++);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fdb6 	bl	8002138 <con_putchar>
	while (*s)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f4      	bne.n	80005be <con_putstr+0xa>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <con_put_nl>:

void con_put_nl(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	con_putstr("\r\n");
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <con_put_nl+0x10>)
 80005e6:	f7ff ffe5 	bl	80005b4 <con_putstr>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	080103ec 	.word	0x080103ec

080005f4 <cursor_set_x>:

// move cursor to x position within edited line (realtive to prompt)
static void cursor_set_x(uint8_t x)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	con_putstr("\x1B[");	// CHA
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <cursor_set_x+0x40>)
 8000600:	f7ff ffd8 	bl	80005b4 <con_putstr>
	char s[3];
	sprintf(s, "%d", cmdline_start + x);
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <cursor_set_x+0x44>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	441a      	add	r2, r3
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	490a      	ldr	r1, [pc, #40]	; (800063c <cursor_set_x+0x48>)
 8000614:	4618      	mov	r0, r3
 8000616:	f00f fa55 	bl	800fac4 <siprintf>
	con_putstr(s);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffc8 	bl	80005b4 <con_putstr>
	con_putstr("G");
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <cursor_set_x+0x4c>)
 8000626:	f7ff ffc5 	bl	80005b4 <con_putstr>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	080103f0 	.word	0x080103f0
 8000638:	200008b3 	.word	0x200008b3
 800063c:	080103f4 	.word	0x080103f4
 8000640:	080103f8 	.word	0x080103f8

08000644 <display_cmdline>:

static inline void display_cmdline(char* cmdline)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	cursor_set_x(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff ffd1 	bl	80005f4 <cursor_set_x>
	con_putstr("\x1B[J");	// clear line
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <display_cmdline+0x24>)
 8000654:	f7ff ffae 	bl	80005b4 <con_putstr>
	con_putstr(cmdline);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ffab 	bl	80005b4 <con_putstr>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	080103fc 	.word	0x080103fc

0800066c <process_input>:

// process terminal keystroke
// returns echo_on value when enter pressed, 0 otherwise
// must be called at priority lower than console rx/tx h/w interrupt
_Bool process_input(char c)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	static _Bool hist_copied;
	static char cmdline[NCMDS][MAXCMDLINE + 1];
	static uint8_t csiarg;
	static char prev_c;
	
	_Bool disprq = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
	_Bool retval = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	73bb      	strb	r3, [r7, #14]
	
	switch (escseq)
 800067e:	4b75      	ldr	r3, [pc, #468]	; (8000854 <process_input+0x1e8>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d016      	beq.n	80006b4 <process_input+0x48>
 8000686:	2b02      	cmp	r3, #2
 8000688:	f300 8355 	bgt.w	8000d36 <process_input+0x6ca>
 800068c:	2b00      	cmp	r3, #0
 800068e:	f000 80da 	beq.w	8000846 <process_input+0x1da>
 8000692:	2b01      	cmp	r3, #1
 8000694:	f040 834f 	bne.w	8000d36 <process_input+0x6ca>
	{
	case ESC_ESC:			
		if(c == '[')
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b5b      	cmp	r3, #91	; 0x5b
 800069c:	d106      	bne.n	80006ac <process_input+0x40>
		{
			csiarg = 0;
 800069e:	4b6e      	ldr	r3, [pc, #440]	; (8000858 <process_input+0x1ec>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
			escseq = ESC_CSI;
 80006a4:	4b6b      	ldr	r3, [pc, #428]	; (8000854 <process_input+0x1e8>)
 80006a6:	2202      	movs	r2, #2
 80006a8:	701a      	strb	r2, [r3, #0]
		}
		else
			escseq = ESC_NONE;
		break;
 80006aa:	e344      	b.n	8000d36 <process_input+0x6ca>
			escseq = ESC_NONE;
 80006ac:	4b69      	ldr	r3, [pc, #420]	; (8000854 <process_input+0x1e8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
		break;
 80006b2:	e340      	b.n	8000d36 <process_input+0x6ca>
	case ESC_CSI:	// ANSI control codes interpretation
		if (c >= '0' && c <= '9')
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b2f      	cmp	r3, #47	; 0x2f
 80006b8:	d911      	bls.n	80006de <process_input+0x72>
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b39      	cmp	r3, #57	; 0x39
 80006be:	d80e      	bhi.n	80006de <process_input+0x72>
			csiarg = csiarg * 10 + c - '0';
 80006c0:	4b65      	ldr	r3, [pc, #404]	; (8000858 <process_input+0x1ec>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	0092      	lsls	r2, r2, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4413      	add	r3, r2
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	3b30      	subs	r3, #48	; 0x30
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b5f      	ldr	r3, [pc, #380]	; (8000858 <process_input+0x1ec>)
 80006da:	701a      	strb	r2, [r3, #0]
				clen = strlen(cmdline[hisidx]);
				ins_idx = clen;
			}
			escseq = ESC_NONE;
		}
		break;
 80006dc:	e32b      	b.n	8000d36 <process_input+0x6ca>
			switch (c)
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b44      	cmp	r3, #68	; 0x44
 80006e2:	dc0f      	bgt.n	8000704 <process_input+0x98>
 80006e4:	2b41      	cmp	r3, #65	; 0x41
 80006e6:	db79      	blt.n	80007dc <process_input+0x170>
 80006e8:	3b41      	subs	r3, #65	; 0x41
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d876      	bhi.n	80007dc <process_input+0x170>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <process_input+0x88>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	0800073b 	.word	0x0800073b
 80006fc:	0800076d 	.word	0x0800076d
 8000700:	0800078d 	.word	0x0800078d
 8000704:	2b7e      	cmp	r3, #126	; 0x7e
 8000706:	d04f      	beq.n	80007a8 <process_input+0x13c>
				break;
 8000708:	e068      	b.n	80007dc <process_input+0x170>
				if (hisidx != oldestcmd)
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <process_input+0x1f0>)
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	4b54      	ldr	r3, [pc, #336]	; (8000860 <process_input+0x1f4>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	d064      	beq.n	80007e0 <process_input+0x174>
					hisidx = (hisidx + NCMDS - 1) % NCMDS;
 8000716:	4b51      	ldr	r3, [pc, #324]	; (800085c <process_input+0x1f0>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	1d59      	adds	r1, r3, #5
 800071c:	4b51      	ldr	r3, [pc, #324]	; (8000864 <process_input+0x1f8>)
 800071e:	fba3 2301 	umull	r2, r3, r3, r1
 8000722:	089a      	lsrs	r2, r3, #2
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	1aca      	subs	r2, r1, r3
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	4b4a      	ldr	r3, [pc, #296]	; (800085c <process_input+0x1f0>)
 8000732:	701a      	strb	r2, [r3, #0]
					disprq = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
				break;
 8000738:	e052      	b.n	80007e0 <process_input+0x174>
				if (hisidx != newcmdidx)
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <process_input+0x1f0>)
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <process_input+0x1fc>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d04e      	beq.n	80007e4 <process_input+0x178>
					hisidx = (hisidx + 1) % NCMDS; 
 8000746:	4b45      	ldr	r3, [pc, #276]	; (800085c <process_input+0x1f0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	4619      	mov	r1, r3
 800074e:	4b45      	ldr	r3, [pc, #276]	; (8000864 <process_input+0x1f8>)
 8000750:	fba3 2301 	umull	r2, r3, r3, r1
 8000754:	089a      	lsrs	r2, r3, #2
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	1aca      	subs	r2, r1, r3
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	4b3e      	ldr	r3, [pc, #248]	; (800085c <process_input+0x1f0>)
 8000764:	701a      	strb	r2, [r3, #0]
					disprq = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
				break;
 800076a:	e03b      	b.n	80007e4 <process_input+0x178>
				if (ins_idx < clen)
 800076c:	4b3f      	ldr	r3, [pc, #252]	; (800086c <process_input+0x200>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <process_input+0x204>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d237      	bcs.n	80007e8 <process_input+0x17c>
					ins_idx++;
 8000778:	4b3c      	ldr	r3, [pc, #240]	; (800086c <process_input+0x200>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b3a      	ldr	r3, [pc, #232]	; (800086c <process_input+0x200>)
 8000782:	701a      	strb	r2, [r3, #0]
					con_putstr("\x1B" "9");	// fwd 1 column
 8000784:	483b      	ldr	r0, [pc, #236]	; (8000874 <process_input+0x208>)
 8000786:	f7ff ff15 	bl	80005b4 <con_putstr>
				break;
 800078a:	e02d      	b.n	80007e8 <process_input+0x17c>
				if (ins_idx > 0)
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <process_input+0x200>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d02b      	beq.n	80007ec <process_input+0x180>
					ins_idx--;
 8000794:	4b35      	ldr	r3, [pc, #212]	; (800086c <process_input+0x200>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b33      	ldr	r3, [pc, #204]	; (800086c <process_input+0x200>)
 800079e:	701a      	strb	r2, [r3, #0]
					con_putstr("\x1B" "6");	// back 1 column
 80007a0:	4835      	ldr	r0, [pc, #212]	; (8000878 <process_input+0x20c>)
 80007a2:	f7ff ff07 	bl	80005b4 <con_putstr>
				break;
 80007a6:	e021      	b.n	80007ec <process_input+0x180>
				if (csiarg == 1)
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <process_input+0x1ec>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d108      	bne.n	80007c2 <process_input+0x156>
					ins_idx = 0;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <process_input+0x200>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
					cursor_set_x(ins_idx);
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <process_input+0x200>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff1a 	bl	80005f4 <cursor_set_x>
				break;
 80007c0:	e00c      	b.n	80007dc <process_input+0x170>
				else if (csiarg == 4)
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <process_input+0x1ec>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d108      	bne.n	80007dc <process_input+0x170>
					ins_idx = clen;
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <process_input+0x204>)
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <process_input+0x200>)
 80007d0:	701a      	strb	r2, [r3, #0]
					cursor_set_x(ins_idx);
 80007d2:	4b26      	ldr	r3, [pc, #152]	; (800086c <process_input+0x200>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff0c 	bl	80005f4 <cursor_set_x>
				break;
 80007dc:	bf00      	nop
 80007de:	e006      	b.n	80007ee <process_input+0x182>
				break;
 80007e0:	bf00      	nop
 80007e2:	e004      	b.n	80007ee <process_input+0x182>
				break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <process_input+0x182>
				break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <process_input+0x182>
				break;
 80007ec:	bf00      	nop
			if (disprq)
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d024      	beq.n	800083e <process_input+0x1d2>
				hist_copied = 0;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <process_input+0x210>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
				display_cmdline(cmdline[hisidx]);
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <process_input+0x1f0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4613      	mov	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	4413      	add	r3, r2
 8000806:	00da      	lsls	r2, r3, #3
 8000808:	4413      	add	r3, r2
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <process_input+0x214>)
 800080c:	4413      	add	r3, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff18 	bl	8000644 <display_cmdline>
				clen = strlen(cmdline[hisidx]);
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <process_input+0x1f0>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4413      	add	r3, r2
 8000820:	00da      	lsls	r2, r3, #3
 8000822:	4413      	add	r3, r2
 8000824:	4a16      	ldr	r2, [pc, #88]	; (8000880 <process_input+0x214>)
 8000826:	4413      	add	r3, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fce3 	bl	80001f4 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <process_input+0x204>)
 8000834:	701a      	strb	r2, [r3, #0]
				ins_idx = clen;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <process_input+0x204>)
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <process_input+0x200>)
 800083c:	701a      	strb	r2, [r3, #0]
			escseq = ESC_NONE;
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <process_input+0x1e8>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
		break;
 8000844:	e277      	b.n	8000d36 <process_input+0x6ca>
	case ESC_NONE:
		if (c == 0x1B)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b1b      	cmp	r3, #27
 800084a:	d11b      	bne.n	8000884 <process_input+0x218>
			escseq = ESC_ESC;
 800084c:	4b01      	ldr	r3, [pc, #4]	; (8000854 <process_input+0x1e8>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
				cmd_interpret(cmdline[execidx]);
			
			if (echo_on)
				retval = 1;
		}
		break;
 8000852:	e26f      	b.n	8000d34 <process_input+0x6c8>
 8000854:	200006c4 	.word	0x200006c4
 8000858:	200006c5 	.word	0x200006c5
 800085c:	200006c6 	.word	0x200006c6
 8000860:	200006c7 	.word	0x200006c7
 8000864:	aaaaaaab 	.word	0xaaaaaaab
 8000868:	200006c8 	.word	0x200006c8
 800086c:	200006c9 	.word	0x200006c9
 8000870:	200006ca 	.word	0x200006ca
 8000874:	08010400 	.word	0x08010400
 8000878:	08010404 	.word	0x08010404
 800087c:	200006cb 	.word	0x200006cb
 8000880:	200006cc 	.word	0x200006cc
		else if ((c == '\b' && ins_idx) || (c >= ' ' && clen < MAXCMDLINE))
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b08      	cmp	r3, #8
 8000888:	d103      	bne.n	8000892 <process_input+0x226>
 800088a:	4ba6      	ldr	r3, [pc, #664]	; (8000b24 <process_input+0x4b8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d108      	bne.n	80008a4 <process_input+0x238>
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b1f      	cmp	r3, #31
 8000896:	f240 81b0 	bls.w	8000bfa <process_input+0x58e>
 800089a:	4ba3      	ldr	r3, [pc, #652]	; (8000b28 <process_input+0x4bc>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b4f      	cmp	r3, #79	; 0x4f
 80008a0:	f200 81ab 	bhi.w	8000bfa <process_input+0x58e>
			if (newcmdidx != hisidx && !hist_copied)
 80008a4:	4ba1      	ldr	r3, [pc, #644]	; (8000b2c <process_input+0x4c0>)
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	4ba1      	ldr	r3, [pc, #644]	; (8000b30 <process_input+0x4c4>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d020      	beq.n	80008f2 <process_input+0x286>
 80008b0:	4ba0      	ldr	r3, [pc, #640]	; (8000b34 <process_input+0x4c8>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f083 0301 	eor.w	r3, r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d019      	beq.n	80008f2 <process_input+0x286>
				strcpy(cmdline[newcmdidx], cmdline[hisidx]);
 80008be:	4b9b      	ldr	r3, [pc, #620]	; (8000b2c <process_input+0x4c0>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	4413      	add	r3, r2
 80008ca:	00da      	lsls	r2, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	4a9a      	ldr	r2, [pc, #616]	; (8000b38 <process_input+0x4cc>)
 80008d0:	1898      	adds	r0, r3, r2
 80008d2:	4b97      	ldr	r3, [pc, #604]	; (8000b30 <process_input+0x4c4>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4413      	add	r3, r2
 80008de:	00da      	lsls	r2, r3, #3
 80008e0:	4413      	add	r3, r2
 80008e2:	4a95      	ldr	r2, [pc, #596]	; (8000b38 <process_input+0x4cc>)
 80008e4:	4413      	add	r3, r2
 80008e6:	4619      	mov	r1, r3
 80008e8:	f00f f90c 	bl	800fb04 <strcpy>
				hist_copied = 1;
 80008ec:	4b91      	ldr	r3, [pc, #580]	; (8000b34 <process_input+0x4c8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
			if (c == '\b')	// backspace
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	d17f      	bne.n	80009f8 <process_input+0x38c>
				if (clen && ins_idx)
 80008f8:	4b8b      	ldr	r3, [pc, #556]	; (8000b28 <process_input+0x4bc>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	f000 8218 	beq.w	8000d32 <process_input+0x6c6>
 8000902:	4b88      	ldr	r3, [pc, #544]	; (8000b24 <process_input+0x4b8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f000 8213 	beq.w	8000d32 <process_input+0x6c6>
					if (--ins_idx == --clen)
 800090c:	4b85      	ldr	r3, [pc, #532]	; (8000b24 <process_input+0x4b8>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	3b01      	subs	r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b83      	ldr	r3, [pc, #524]	; (8000b24 <process_input+0x4b8>)
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	4b82      	ldr	r3, [pc, #520]	; (8000b24 <process_input+0x4b8>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b82      	ldr	r3, [pc, #520]	; (8000b28 <process_input+0x4bc>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3b01      	subs	r3, #1
 8000922:	b2d9      	uxtb	r1, r3
 8000924:	4b80      	ldr	r3, [pc, #512]	; (8000b28 <process_input+0x4bc>)
 8000926:	7019      	strb	r1, [r3, #0]
 8000928:	4b7f      	ldr	r3, [pc, #508]	; (8000b28 <process_input+0x4bc>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d113      	bne.n	8000958 <process_input+0x2ec>
						cmdline[newcmdidx][clen] = 0;
 8000930:	4b7e      	ldr	r3, [pc, #504]	; (8000b2c <process_input+0x4c0>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b7c      	ldr	r3, [pc, #496]	; (8000b28 <process_input+0x4bc>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4618      	mov	r0, r3
 800093c:	497e      	ldr	r1, [pc, #504]	; (8000b38 <process_input+0x4cc>)
 800093e:	4613      	mov	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4413      	add	r3, r2
 8000944:	00da      	lsls	r2, r3, #3
 8000946:	4413      	add	r3, r2
 8000948:	440b      	add	r3, r1
 800094a:	4403      	add	r3, r0
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
						con_putstr("\b \b");
 8000950:	487a      	ldr	r0, [pc, #488]	; (8000b3c <process_input+0x4d0>)
 8000952:	f7ff fe2f 	bl	80005b4 <con_putstr>
			if (c == '\b')	// backspace
 8000956:	e1ec      	b.n	8000d32 <process_input+0x6c6>
						cmdline[newcmdidx][ins_idx] = '\b';	// cursor_set_x will be moved back
 8000958:	4b74      	ldr	r3, [pc, #464]	; (8000b2c <process_input+0x4c0>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b71      	ldr	r3, [pc, #452]	; (8000b24 <process_input+0x4b8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	4974      	ldr	r1, [pc, #464]	; (8000b38 <process_input+0x4cc>)
 8000966:	4613      	mov	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	4413      	add	r3, r2
 800096c:	00da      	lsls	r2, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	440b      	add	r3, r1
 8000972:	4403      	add	r3, r0
 8000974:	2208      	movs	r2, #8
 8000976:	701a      	strb	r2, [r3, #0]
						con_putstr(&cmdline[newcmdidx][ins_idx]);
 8000978:	4b6c      	ldr	r3, [pc, #432]	; (8000b2c <process_input+0x4c0>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b69      	ldr	r3, [pc, #420]	; (8000b24 <process_input+0x4b8>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	4613      	mov	r3, r2
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	4413      	add	r3, r2
 800098a:	00da      	lsls	r2, r3, #3
 800098c:	4413      	add	r3, r2
 800098e:	440b      	add	r3, r1
 8000990:	4a69      	ldr	r2, [pc, #420]	; (8000b38 <process_input+0x4cc>)
 8000992:	4413      	add	r3, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe0d 	bl	80005b4 <con_putstr>
						con_putstr(" ");
 800099a:	4869      	ldr	r0, [pc, #420]	; (8000b40 <process_input+0x4d4>)
 800099c:	f7ff fe0a 	bl	80005b4 <con_putstr>
						cursor_set_x(ins_idx);
 80009a0:	4b60      	ldr	r3, [pc, #384]	; (8000b24 <process_input+0x4b8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe25 	bl	80005f4 <cursor_set_x>
						memmove(&cmdline[newcmdidx][ins_idx], &cmdline[newcmdidx][ins_idx + 1], clen - ins_idx + 1);
 80009aa:	4b60      	ldr	r3, [pc, #384]	; (8000b2c <process_input+0x4c0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <process_input+0x4b8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4613      	mov	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	4413      	add	r3, r2
 80009bc:	00da      	lsls	r2, r3, #3
 80009be:	4413      	add	r3, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	4a5d      	ldr	r2, [pc, #372]	; (8000b38 <process_input+0x4cc>)
 80009c4:	1898      	adds	r0, r3, r2
 80009c6:	4b59      	ldr	r3, [pc, #356]	; (8000b2c <process_input+0x4c0>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4b55      	ldr	r3, [pc, #340]	; (8000b24 <process_input+0x4b8>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	460b      	mov	r3, r1
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	440b      	add	r3, r1
 80009d8:	00d9      	lsls	r1, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	4413      	add	r3, r2
 80009de:	4a56      	ldr	r2, [pc, #344]	; (8000b38 <process_input+0x4cc>)
 80009e0:	1899      	adds	r1, r3, r2
 80009e2:	4b51      	ldr	r3, [pc, #324]	; (8000b28 <process_input+0x4bc>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b4e      	ldr	r3, [pc, #312]	; (8000b24 <process_input+0x4b8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	461a      	mov	r2, r3
 80009f2:	f00f f845 	bl	800fa80 <memmove>
			if (c == '\b')	// backspace
 80009f6:	e19c      	b.n	8000d32 <process_input+0x6c6>
			else if (c == 127)	// delete
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b7f      	cmp	r3, #127	; 0x7f
 80009fc:	d14c      	bne.n	8000a98 <process_input+0x42c>
				if (ins_idx < clen)	// if cursor not at eoln
 80009fe:	4b49      	ldr	r3, [pc, #292]	; (8000b24 <process_input+0x4b8>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <process_input+0x4bc>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	f080 8193 	bcs.w	8000d32 <process_input+0x6c6>
					--clen;
 8000a0c:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <process_input+0x4bc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <process_input+0x4bc>)
 8000a16:	701a      	strb	r2, [r3, #0]
					memmove(&cmdline[newcmdidx][ins_idx], &cmdline[newcmdidx][ins_idx + 1], clen - ins_idx + 1);
 8000a18:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <process_input+0x4c0>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <process_input+0x4b8>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4613      	mov	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	4413      	add	r3, r2
 8000a2a:	00da      	lsls	r2, r3, #3
 8000a2c:	4413      	add	r3, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	4a41      	ldr	r2, [pc, #260]	; (8000b38 <process_input+0x4cc>)
 8000a32:	1898      	adds	r0, r3, r2
 8000a34:	4b3d      	ldr	r3, [pc, #244]	; (8000b2c <process_input+0x4c0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <process_input+0x4b8>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	460b      	mov	r3, r1
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	00d9      	lsls	r1, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a3a      	ldr	r2, [pc, #232]	; (8000b38 <process_input+0x4cc>)
 8000a4e:	1899      	adds	r1, r3, r2
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <process_input+0x4bc>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <process_input+0x4b8>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f00f f80e 	bl	800fa80 <memmove>
					con_putstr(&cmdline[newcmdidx][ins_idx]);
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <process_input+0x4c0>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <process_input+0x4b8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4613      	mov	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	4413      	add	r3, r2
 8000a76:	00da      	lsls	r2, r3, #3
 8000a78:	4413      	add	r3, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	4a2e      	ldr	r2, [pc, #184]	; (8000b38 <process_input+0x4cc>)
 8000a7e:	4413      	add	r3, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd97 	bl	80005b4 <con_putstr>
					con_putstr(" ");
 8000a86:	482e      	ldr	r0, [pc, #184]	; (8000b40 <process_input+0x4d4>)
 8000a88:	f7ff fd94 	bl	80005b4 <con_putstr>
					cursor_set_x(ins_idx);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <process_input+0x4b8>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fdaf 	bl	80005f4 <cursor_set_x>
			if (c == '\b')	// backspace
 8000a96:	e14c      	b.n	8000d32 <process_input+0x6c6>
				if (clen == ins_idx)	// at the end
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <process_input+0x4bc>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <process_input+0x4b8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d151      	bne.n	8000b48 <process_input+0x4dc>
					cmdline[newcmdidx][clen++] = c;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <process_input+0x4c0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <process_input+0x4bc>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	b2d1      	uxtb	r1, r2
 8000ab2:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <process_input+0x4bc>)
 8000ab4:	7011      	strb	r1, [r2, #0]
 8000ab6:	461c      	mov	r4, r3
 8000ab8:	491f      	ldr	r1, [pc, #124]	; (8000b38 <process_input+0x4cc>)
 8000aba:	4603      	mov	r3, r0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	4403      	add	r3, r0
 8000ac0:	00da      	lsls	r2, r3, #3
 8000ac2:	4413      	add	r3, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	4423      	add	r3, r4
 8000ac8:	79fa      	ldrb	r2, [r7, #7]
 8000aca:	701a      	strb	r2, [r3, #0]
					cmdline[newcmdidx][clen] = 0;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <process_input+0x4c0>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <process_input+0x4bc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	4917      	ldr	r1, [pc, #92]	; (8000b38 <process_input+0x4cc>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	4413      	add	r3, r2
 8000ae0:	00da      	lsls	r2, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	4403      	add	r3, r0
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
					ins_idx = clen;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <process_input+0x4bc>)
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <process_input+0x4b8>)
 8000af2:	701a      	strb	r2, [r3, #0]
					if (echo_on)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <process_input+0x4d8>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 811a 	beq.w	8000d32 <process_input+0x6c6>
						con_putstr(&cmdline[newcmdidx][clen - 1]);
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <process_input+0x4c0>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <process_input+0x4bc>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	1e5a      	subs	r2, r3, #1
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	440b      	add	r3, r1
 8000b10:	00d9      	lsls	r1, r3, #3
 8000b12:	440b      	add	r3, r1
 8000b14:	4413      	add	r3, r2
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <process_input+0x4cc>)
 8000b18:	4413      	add	r3, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd4a 	bl	80005b4 <con_putstr>
			if (c == '\b')	// backspace
 8000b20:	e107      	b.n	8000d32 <process_input+0x6c6>
 8000b22:	bf00      	nop
 8000b24:	200006c9 	.word	0x200006c9
 8000b28:	200006ca 	.word	0x200006ca
 8000b2c:	200006c8 	.word	0x200006c8
 8000b30:	200006c6 	.word	0x200006c6
 8000b34:	200006cb 	.word	0x200006cb
 8000b38:	200006cc 	.word	0x200006cc
 8000b3c:	08010408 	.word	0x08010408
 8000b40:	0801040c 	.word	0x0801040c
 8000b44:	20000000 	.word	0x20000000
					memmove(&cmdline[newcmdidx][ins_idx + 1], &cmdline[newcmdidx][ins_idx], clen - ins_idx + 1);
 8000b48:	4b7f      	ldr	r3, [pc, #508]	; (8000d48 <process_input+0x6dc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4b7f      	ldr	r3, [pc, #508]	; (8000d4c <process_input+0x6e0>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	460b      	mov	r3, r1
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	00d9      	lsls	r1, r3, #3
 8000b5c:	440b      	add	r3, r1
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a7b      	ldr	r2, [pc, #492]	; (8000d50 <process_input+0x6e4>)
 8000b62:	1898      	adds	r0, r3, r2
 8000b64:	4b78      	ldr	r3, [pc, #480]	; (8000d48 <process_input+0x6dc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b78      	ldr	r3, [pc, #480]	; (8000d4c <process_input+0x6e0>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4413      	add	r3, r2
 8000b76:	00da      	lsls	r2, r3, #3
 8000b78:	4413      	add	r3, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	4a74      	ldr	r2, [pc, #464]	; (8000d50 <process_input+0x6e4>)
 8000b7e:	1899      	adds	r1, r3, r2
 8000b80:	4b74      	ldr	r3, [pc, #464]	; (8000d54 <process_input+0x6e8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b71      	ldr	r3, [pc, #452]	; (8000d4c <process_input+0x6e0>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	461a      	mov	r2, r3
 8000b90:	f00e ff76 	bl	800fa80 <memmove>
					cmdline[newcmdidx][ins_idx] = c;
 8000b94:	4b6c      	ldr	r3, [pc, #432]	; (8000d48 <process_input+0x6dc>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b6c      	ldr	r3, [pc, #432]	; (8000d4c <process_input+0x6e0>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	496b      	ldr	r1, [pc, #428]	; (8000d50 <process_input+0x6e4>)
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00da      	lsls	r2, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	4403      	add	r3, r0
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	701a      	strb	r2, [r3, #0]
					con_putstr(&cmdline[newcmdidx][ins_idx]);
 8000bb4:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <process_input+0x6dc>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b64      	ldr	r3, [pc, #400]	; (8000d4c <process_input+0x6e0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00da      	lsls	r2, r3, #3
 8000bc8:	4413      	add	r3, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	4a60      	ldr	r2, [pc, #384]	; (8000d50 <process_input+0x6e4>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fcef 	bl	80005b4 <con_putstr>
					++ins_idx;
 8000bd6:	4b5d      	ldr	r3, [pc, #372]	; (8000d4c <process_input+0x6e0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <process_input+0x6e0>)
 8000be0:	701a      	strb	r2, [r3, #0]
					++clen;
 8000be2:	4b5c      	ldr	r3, [pc, #368]	; (8000d54 <process_input+0x6e8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b5a      	ldr	r3, [pc, #360]	; (8000d54 <process_input+0x6e8>)
 8000bec:	701a      	strb	r2, [r3, #0]
					cursor_set_x(ins_idx);
 8000bee:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <process_input+0x6e0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fcfe 	bl	80005f4 <cursor_set_x>
			if (c == '\b')	// backspace
 8000bf8:	e09b      	b.n	8000d32 <process_input+0x6c6>
		else if (c == '\r' || (prev_c != '\r' && c == '\n'))
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b0d      	cmp	r3, #13
 8000bfe:	d008      	beq.n	8000c12 <process_input+0x5a6>
 8000c00:	4b55      	ldr	r3, [pc, #340]	; (8000d58 <process_input+0x6ec>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b0d      	cmp	r3, #13
 8000c06:	f000 8095 	beq.w	8000d34 <process_input+0x6c8>
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b0a      	cmp	r3, #10
 8000c0e:	f040 8091 	bne.w	8000d34 <process_input+0x6c8>
			if (echo_on)
 8000c12:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <process_input+0x6f0>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <process_input+0x5b2>
				con_put_nl();
 8000c1a:	f7ff fce1 	bl	80005e0 <con_put_nl>
			uint8_t execidx = newcmdidx;
 8000c1e:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <process_input+0x6dc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	737b      	strb	r3, [r7, #13]
			if (newcmdidx != hisidx && (!hist_copied || strcmp(cmdline[hisidx], cmdline[newcmdidx]) == 0))
 8000c24:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <process_input+0x6dc>)
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <process_input+0x6f4>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d024      	beq.n	8000c7a <process_input+0x60e>
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <process_input+0x6f8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f083 0301 	eor.w	r3, r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d119      	bne.n	8000c72 <process_input+0x606>
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <process_input+0x6f4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	4613      	mov	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	4413      	add	r3, r2
 8000c4a:	00da      	lsls	r2, r3, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a40      	ldr	r2, [pc, #256]	; (8000d50 <process_input+0x6e4>)
 8000c50:	1898      	adds	r0, r3, r2
 8000c52:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <process_input+0x6dc>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4613      	mov	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00da      	lsls	r2, r3, #3
 8000c60:	4413      	add	r3, r2
 8000c62:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <process_input+0x6e4>)
 8000c64:	4413      	add	r3, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	f7ff faba 	bl	80001e0 <strcmp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <process_input+0x60e>
				execidx = hisidx;	// execute old command, don't append to history
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <process_input+0x6f4>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	737b      	strb	r3, [r7, #13]
 8000c78:	e032      	b.n	8000ce0 <process_input+0x674>
			else if (cmdline[newcmdidx][0])
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <process_input+0x6dc>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4933      	ldr	r1, [pc, #204]	; (8000d50 <process_input+0x6e4>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	00da      	lsls	r2, r3, #3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d025      	beq.n	8000ce0 <process_input+0x674>
				newcmdidx = (newcmdidx + 1) % NCMDS;	// set next command index
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <process_input+0x6dc>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <process_input+0x6fc>)
 8000c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8000ca2:	089a      	lsrs	r2, r3, #2
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1aca      	subs	r2, r1, r3
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <process_input+0x6dc>)
 8000cb2:	701a      	strb	r2, [r3, #0]
				if (newcmdidx == oldestcmd)
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <process_input+0x6dc>)
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <process_input+0x700>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d10f      	bne.n	8000ce0 <process_input+0x674>
					oldestcmd = (oldestcmd + 1) % NCMDS;
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <process_input+0x700>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <process_input+0x6fc>)
 8000cca:	fba3 2301 	umull	r2, r3, r3, r1
 8000cce:	089a      	lsrs	r2, r3, #2
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	1aca      	subs	r2, r1, r3
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <process_input+0x700>)
 8000cde:	701a      	strb	r2, [r3, #0]
			hisidx = newcmdidx;	// set hist pointer to new command buffer for the next command
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <process_input+0x6dc>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <process_input+0x6f4>)
 8000ce6:	701a      	strb	r2, [r3, #0]
			cmdline[newcmdidx][0] = 0; // clear line
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <process_input+0x6dc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4918      	ldr	r1, [pc, #96]	; (8000d50 <process_input+0x6e4>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00da      	lsls	r2, r3, #3
 8000cf8:	4413      	add	r3, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
			clen = ins_idx = 0;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <process_input+0x6e0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <process_input+0x6e0>)
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <process_input+0x6e8>)
 8000d0c:	701a      	strb	r2, [r3, #0]
				cmd_interpret(cmdline[execidx]);
 8000d0e:	7b7a      	ldrb	r2, [r7, #13]
 8000d10:	4613      	mov	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	00da      	lsls	r2, r3, #3
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <process_input+0x6e4>)
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f882 	bl	8000e28 <cmd_interpret>
			if (echo_on)
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <process_input+0x6f0>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <process_input+0x6c8>
				retval = 1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73bb      	strb	r3, [r7, #14]
		break;
 8000d30:	e000      	b.n	8000d34 <process_input+0x6c8>
			if (c == '\b')	// backspace
 8000d32:	bf00      	nop
		break;
 8000d34:	bf00      	nop
	} //switch
	prev_c = c;
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <process_input+0x6ec>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	7013      	strb	r3, [r2, #0]
	return retval;
 8000d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200006c8 	.word	0x200006c8
 8000d4c:	200006c9 	.word	0x200006c9
 8000d50:	200006cc 	.word	0x200006cc
 8000d54:	200006ca 	.word	0x200006ca
 8000d58:	200008b2 	.word	0x200008b2
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200006c6 	.word	0x200006c6
 8000d64:	200006cb 	.word	0x200006cb
 8000d68:	aaaaaaab 	.word	0xaaaaaaab
 8000d6c:	200006c7 	.word	0x200006c7

08000d70 <is_delim>:

#include "cmdproc.h"

//==============================================================================
static inline _Bool is_delim(char c)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
	return (c == ' ' || c == '\t' || c == '\r' || c == '\n' || c == 0);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b20      	cmp	r3, #32
 8000d7e:	d00b      	beq.n	8000d98 <is_delim+0x28>
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b09      	cmp	r3, #9
 8000d84:	d008      	beq.n	8000d98 <is_delim+0x28>
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b0d      	cmp	r3, #13
 8000d8a:	d005      	beq.n	8000d98 <is_delim+0x28>
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d002      	beq.n	8000d98 <is_delim+0x28>
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <is_delim+0x2c>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <is_delim+0x2e>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <is_hex_digit>:

static inline _Bool is_hex_digit(uint8_t val)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	return (val >= '0' && val <= '9') || (val >= 'A' && val <= 'F') 
		|| (val >= 'a' && val <= 'f');
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b2f      	cmp	r3, #47	; 0x2f
 8000dbe:	d902      	bls.n	8000dc6 <is_hex_digit+0x16>
	return (val >= '0' && val <= '9') || (val >= 'A' && val <= 'F') 
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b39      	cmp	r3, #57	; 0x39
 8000dc4:	d90b      	bls.n	8000dde <is_hex_digit+0x2e>
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b40      	cmp	r3, #64	; 0x40
 8000dca:	d902      	bls.n	8000dd2 <is_hex_digit+0x22>
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2b46      	cmp	r3, #70	; 0x46
 8000dd0:	d905      	bls.n	8000dde <is_hex_digit+0x2e>
		|| (val >= 'a' && val <= 'f');
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b60      	cmp	r3, #96	; 0x60
 8000dd6:	d904      	bls.n	8000de2 <is_hex_digit+0x32>
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b66      	cmp	r3, #102	; 0x66
 8000ddc:	d801      	bhi.n	8000de2 <is_hex_digit+0x32>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <is_hex_digit+0x34>
 8000de2:	2300      	movs	r3, #0
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <ihex_digit>:

static inline uint8_t ihex_digit(uint32_t val)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return val - (val <= '9' ? '0' : (val < 'a' ? 'A' - 10 : 'a' - 10));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b39      	cmp	r3, #57	; 0x39
 8000e06:	d906      	bls.n	8000e16 <ihex_digit+0x20>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b60      	cmp	r3, #96	; 0x60
 8000e0c:	d801      	bhi.n	8000e12 <ihex_digit+0x1c>
 8000e0e:	2337      	movs	r3, #55	; 0x37
 8000e10:	e002      	b.n	8000e18 <ihex_digit+0x22>
 8000e12:	2357      	movs	r3, #87	; 0x57
 8000e14:	e000      	b.n	8000e18 <ihex_digit+0x22>
 8000e16:	2330      	movs	r3, #48	; 0x30
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	b2db      	uxtb	r3, r3
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <cmd_interpret>:

#define MAXCMDLEN	15
// called when input line completed
uint8_t cmd_interpret(const char* restrict s)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	enum cmdi_ret_ {CMDI_OK, CMDI_HEX, CMDI_EMPTY} ret = CMDI_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	enum cmdis_ {CMDI_WAIT, CMDI_LEAD0, CMDI_DNUM, CMDI_HNUM, CMDI_ONUM, CMDI_BNUM, 
		CMDI_CMD, CMDI_HEXLOAD, CMDI_ERR} cmdis = CMDI_WAIT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
	uint32_t num = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
 	char cmdname[MAXCMDLEN + 1];
	uint8_t cni = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	77fb      	strb	r3, [r7, #31]
		
#ifdef CMDI_REPEATONEMPTY
	if (*s == 0)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <cmd_interpret+0x30>
	{
		cmd_repeat();
 8000e4c:	f004 fc4a 	bl	80056e4 <cmd_repeat>
//			if (run_mode <= RM_ISTEP)
//				while (cpustate == CS_RUN);	
//		}
//		else
//			new_prompt = 1;
		ret = CMDI_EMPTY;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e56:	e193      	b.n	8001180 <cmd_interpret+0x358>
	}
	else
		lastcmd = 0;
 8000e58:	4ba3      	ldr	r3, [pc, #652]	; (80010e8 <cmd_interpret+0x2c0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
		}
		cmdis = CMDI_HEXLOAD;
	}
#endif

	while (cmdis != CMDI_HEXLOAD && (*s || (cmdis >= CMDI_DNUM && cmdis <= CMDI_CMD)))
 8000e5e:	e18f      	b.n	8001180 <cmd_interpret+0x358>
	{
		switch (cmdis)
 8000e60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	f200 817d 	bhi.w	8001164 <cmd_interpret+0x33c>
 8000e6a:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <cmd_interpret+0x48>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000e95 	.word	0x08000e95
 8000e74:	08000ff3 	.word	0x08000ff3
 8000e78:	08001097 	.word	0x08001097
 8000e7c:	0800106b 	.word	0x0800106b
 8000e80:	080010c3 	.word	0x080010c3
 8000e84:	080010f5 	.word	0x080010f5
 8000e88:	08000f85 	.word	0x08000f85
 8000e8c:	08001165 	.word	0x08001165
 8000e90:	0800114f 	.word	0x0800114f
		{
			case CMDI_WAIT:
				if (is_delim(*s))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff69 	bl	8000d70 <is_delim>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f040 8161 	bne.w	8001168 <cmd_interpret+0x340>
					break;
				if (*s == '\'' && *++s)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b27      	cmp	r3, #39	; 0x27
 8000eac:	d11a      	bne.n	8000ee4 <cmd_interpret+0xbc>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <cmd_interpret+0xbc>
				{
					stack_push(*s);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f991 	bl	80011e8 <stack_push>
					while (!is_delim(*++s));	// unwind
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff4d 	bl	8000d70 <is_delim>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f083 0301 	eor.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f1      	bne.n	8000ec6 <cmd_interpret+0x9e>
				if (*s == '\'' && *++s)
 8000ee2:	e04e      	b.n	8000f82 <cmd_interpret+0x15a>
				}
				else if (*s == '"' && *++s)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b22      	cmp	r3, #34	; 0x22
 8000eea:	d123      	bne.n	8000f34 <cmd_interpret+0x10c>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d01c      	beq.n	8000f34 <cmd_interpret+0x10c>
				{
					// read string
					uint8_t i;
					for (i = 0; i < ARGSTRLEN && *s && *s != '"'; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	77bb      	strb	r3, [r7, #30]
 8000efe:	e009      	b.n	8000f14 <cmd_interpret+0xec>
						argstring[i] = *s++;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	7fba      	ldrb	r2, [r7, #30]
 8000f08:	7819      	ldrb	r1, [r3, #0]
 8000f0a:	4b78      	ldr	r3, [pc, #480]	; (80010ec <cmd_interpret+0x2c4>)
 8000f0c:	5499      	strb	r1, [r3, r2]
					for (i = 0; i < ARGSTRLEN && *s && *s != '"'; i++)
 8000f0e:	7fbb      	ldrb	r3, [r7, #30]
 8000f10:	3301      	adds	r3, #1
 8000f12:	77bb      	strb	r3, [r7, #30]
 8000f14:	7fbb      	ldrb	r3, [r7, #30]
 8000f16:	2b1f      	cmp	r3, #31
 8000f18:	d807      	bhi.n	8000f2a <cmd_interpret+0x102>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <cmd_interpret+0x102>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b22      	cmp	r3, #34	; 0x22
 8000f28:	d1ea      	bne.n	8000f00 <cmd_interpret+0xd8>
					argstring[i] = 0;
 8000f2a:	7fbb      	ldrb	r3, [r7, #30]
 8000f2c:	4a6f      	ldr	r2, [pc, #444]	; (80010ec <cmd_interpret+0x2c4>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	54d1      	strb	r1, [r2, r3]
				{
 8000f32:	e026      	b.n	8000f82 <cmd_interpret+0x15a>
				}
				else if (*s >= '0' && *s <= '9')
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b2f      	cmp	r3, #47	; 0x2f
 8000f3a:	d911      	bls.n	8000f60 <cmd_interpret+0x138>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b39      	cmp	r3, #57	; 0x39
 8000f42:	d80d      	bhi.n	8000f60 <cmd_interpret+0x138>
				{
					num = *s - '0';
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3b30      	subs	r3, #48	; 0x30
 8000f4a:	623b      	str	r3, [r7, #32]
					cmdis = *s == '0' ? CMDI_LEAD0 : CMDI_DNUM;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b30      	cmp	r3, #48	; 0x30
 8000f52:	d101      	bne.n	8000f58 <cmd_interpret+0x130>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <cmd_interpret+0x132>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f5e:	e010      	b.n	8000f82 <cmd_interpret+0x15a>
				}
				else
				{
					// command name
					cni = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	77fb      	strb	r3, [r7, #31]
					cmdis = CMDI_CMD;
 8000f64:	2306      	movs	r3, #6
 8000f66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					cmdname[cni++] = *s;
 8000f6a:	7ffb      	ldrb	r3, [r7, #31]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	77fa      	strb	r2, [r7, #31]
 8000f70:	4619      	mov	r1, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8000f7a:	443b      	add	r3, r7
 8000f7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
				}
				break;
 8000f80:	e0f7      	b.n	8001172 <cmd_interpret+0x34a>
 8000f82:	e0f6      	b.n	8001172 <cmd_interpret+0x34a>
			case CMDI_CMD:
				if (is_delim(*s))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fef1 	bl	8000d70 <is_delim>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01e      	beq.n	8000fd2 <cmd_interpret+0x1aa>
				{
					cmdname[cni] = 0;
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	3328      	adds	r3, #40	; 0x28
 8000f98:	443b      	add	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f803 2c1c 	strb.w	r2, [r3, #-28]
					if (!cmd_lookup(cmdname))
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fb35 	bl	8005614 <cmd_lookup>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d009      	beq.n	8000fca <cmd_interpret+0x1a2>
					{
						con_putstr("Unrecognized token ");
 8000fb6:	484e      	ldr	r0, [pc, #312]	; (80010f0 <cmd_interpret+0x2c8>)
 8000fb8:	f7ff fafc 	bl	80005b4 <con_putstr>
						con_putstr(cmdname);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff faf7 	bl	80005b4 <con_putstr>
						con_put_nl();
 8000fc6:	f7ff fb0b 	bl	80005e0 <con_put_nl>
					}	
					cmdis = CMDI_WAIT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				}
				else if (cni < MAXCMDLEN)
					cmdname[cni++] = *s;
				break;
 8000fd0:	e0cc      	b.n	800116c <cmd_interpret+0x344>
				else if (cni < MAXCMDLEN)
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	2b0e      	cmp	r3, #14
 8000fd6:	f200 80c9 	bhi.w	800116c <cmd_interpret+0x344>
					cmdname[cni++] = *s;
 8000fda:	7ffb      	ldrb	r3, [r7, #31]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	77fa      	strb	r2, [r7, #31]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	f101 0328 	add.w	r3, r1, #40	; 0x28
 8000fea:	443b      	add	r3, r7
 8000fec:	f803 2c1c 	strb.w	r2, [r3, #-28]
				break;
 8000ff0:	e0bc      	b.n	800116c <cmd_interpret+0x344>
			case CMDI_LEAD0:
				if (*s == 'x' || *s == 'X')
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b78      	cmp	r3, #120	; 0x78
 8000ff8:	d003      	beq.n	8001002 <cmd_interpret+0x1da>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b58      	cmp	r3, #88	; 0x58
 8001000:	d103      	bne.n	800100a <cmd_interpret+0x1e2>
					cmdis = CMDI_HNUM;
 8001002:	2303      	movs	r3, #3
 8001004:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001008:	e02e      	b.n	8001068 <cmd_interpret+0x240>
				else if (*s == 'b' || *s == 'B')
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b62      	cmp	r3, #98	; 0x62
 8001010:	d003      	beq.n	800101a <cmd_interpret+0x1f2>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b42      	cmp	r3, #66	; 0x42
 8001018:	d103      	bne.n	8001022 <cmd_interpret+0x1fa>
					cmdis = CMDI_BNUM;
 800101a:	2305      	movs	r3, #5
 800101c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001020:	e022      	b.n	8001068 <cmd_interpret+0x240>
				else if (*s >= '0' && *s <= '7')
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b2f      	cmp	r3, #47	; 0x2f
 8001028:	d90b      	bls.n	8001042 <cmd_interpret+0x21a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b37      	cmp	r3, #55	; 0x37
 8001030:	d807      	bhi.n	8001042 <cmd_interpret+0x21a>
				{
					cmdis = CMDI_ONUM;
 8001032:	2304      	movs	r3, #4
 8001034:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					num = *s - '0';
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3b30      	subs	r3, #48	; 0x30
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	e012      	b.n	8001068 <cmd_interpret+0x240>
				}
				else if (is_delim(*s))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe92 	bl	8000d70 <is_delim>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <cmd_interpret+0x238>
				{
					// just zero
					stack_push(num);	// faster than pushing 0...!
 8001052:	6a38      	ldr	r0, [r7, #32]
 8001054:	f000 f8c8 	bl	80011e8 <stack_push>
					cmdis = CMDI_WAIT;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				}	
				else
					cmdis = CMDI_ERR;
				break;
 800105e:	e088      	b.n	8001172 <cmd_interpret+0x34a>
					cmdis = CMDI_ERR;
 8001060:	2308      	movs	r3, #8
 8001062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8001066:	e084      	b.n	8001172 <cmd_interpret+0x34a>
 8001068:	e083      	b.n	8001172 <cmd_interpret+0x34a>
			case CMDI_HNUM:
				if (is_hex_digit(*s))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fe9e 	bl	8000db0 <is_hex_digit>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00d      	beq.n	8001096 <cmd_interpret+0x26e>
				{
					num <<= 4;
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	623b      	str	r3, [r7, #32]
					num += ihex_digit(*s);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff feb6 	bl	8000df6 <ihex_digit>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	4413      	add	r3, r2
 8001092:	623b      	str	r3, [r7, #32]
					break;
 8001094:	e06d      	b.n	8001172 <cmd_interpret+0x34a>
				}
				// no breaks here, will continue to binary handling, then finish or error
			case CMDI_DNUM:
				if (*s >= '0' && *s <= '9')
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b2f      	cmp	r3, #47	; 0x2f
 800109c:	d911      	bls.n	80010c2 <cmd_interpret+0x29a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b39      	cmp	r3, #57	; 0x39
 80010a4:	d80d      	bhi.n	80010c2 <cmd_interpret+0x29a>
				{
					num *= 10;
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
					num += *s - '0';
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	4413      	add	r3, r2
 80010bc:	3b30      	subs	r3, #48	; 0x30
 80010be:	623b      	str	r3, [r7, #32]
					break;
 80010c0:	e057      	b.n	8001172 <cmd_interpret+0x34a>
				}	
			case CMDI_ONUM:
				if (*s >= '0' && *s <= '7')
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b2f      	cmp	r3, #47	; 0x2f
 80010c8:	d914      	bls.n	80010f4 <cmd_interpret+0x2cc>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b37      	cmp	r3, #55	; 0x37
 80010d0:	d810      	bhi.n	80010f4 <cmd_interpret+0x2cc>
				{
					num <<= 3;
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
					num += *s - '0';
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	4413      	add	r3, r2
 80010e2:	3b30      	subs	r3, #48	; 0x30
 80010e4:	623b      	str	r3, [r7, #32]
					break;
 80010e6:	e044      	b.n	8001172 <cmd_interpret+0x34a>
 80010e8:	200016b4 	.word	0x200016b4
 80010ec:	200008d8 	.word	0x200008d8
 80010f0:	08010410 	.word	0x08010410
				}
			case CMDI_BNUM:
				if (*s == '0' || *s == '1')
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b30      	cmp	r3, #48	; 0x30
 80010fa:	d003      	beq.n	8001104 <cmd_interpret+0x2dc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b31      	cmp	r3, #49	; 0x31
 8001102:	d10a      	bne.n	800111a <cmd_interpret+0x2f2>
				{
					num <<= 1;
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	623b      	str	r3, [r7, #32]
					num += *s - '0';
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	4413      	add	r3, r2
 8001114:	3b30      	subs	r3, #48	; 0x30
 8001116:	623b      	str	r3, [r7, #32]
					break;
 8001118:	e02b      	b.n	8001172 <cmd_interpret+0x34a>
				}
				if (*s == '\'')	// for C23-style numbers with digit separators, added 04'23
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b27      	cmp	r3, #39	; 0x27
 8001120:	d026      	beq.n	8001170 <cmd_interpret+0x348>
					break;
				if (is_delim(*s))	// number successfully scanned
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fe22 	bl	8000d70 <is_delim>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <cmd_interpret+0x318>
				{
					stack_push(num);
 8001132:	6a38      	ldr	r0, [r7, #32]
 8001134:	f000 f858 	bl	80011e8 <stack_push>
					cmdis = CMDI_WAIT;
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				else
				{
					con_putstr("Bad number format\r\n");
					cmdis = CMDI_ERR;
				}
				break;
 800113e:	e018      	b.n	8001172 <cmd_interpret+0x34a>
					con_putstr("Bad number format\r\n");
 8001140:	481b      	ldr	r0, [pc, #108]	; (80011b0 <cmd_interpret+0x388>)
 8001142:	f7ff fa37 	bl	80005b4 <con_putstr>
					cmdis = CMDI_ERR;
 8001146:	2308      	movs	r3, #8
 8001148:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 800114c:	e011      	b.n	8001172 <cmd_interpret+0x34a>

			case CMDI_ERR:
				if (is_delim(*s))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fe0c 	bl	8000d70 <is_delim>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <cmd_interpret+0x33c>
					cmdis = CMDI_WAIT;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			default:
				break;
 8001164:	bf00      	nop
 8001166:	e004      	b.n	8001172 <cmd_interpret+0x34a>
					break;
 8001168:	bf00      	nop
 800116a:	e002      	b.n	8001172 <cmd_interpret+0x34a>
				break;
 800116c:	bf00      	nop
 800116e:	e000      	b.n	8001172 <cmd_interpret+0x34a>
					break;
 8001170:	bf00      	nop
		}
		if (*s)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <cmd_interpret+0x358>
			++s;	
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3301      	adds	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
	while (cmdis != CMDI_HEXLOAD && (*s || (cmdis >= CMDI_DNUM && cmdis <= CMDI_CMD)))
 8001180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001184:	2b07      	cmp	r3, #7
 8001186:	d00d      	beq.n	80011a4 <cmd_interpret+0x37c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f47f ae67 	bne.w	8000e60 <cmd_interpret+0x38>
 8001192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001196:	2b01      	cmp	r3, #1
 8001198:	d904      	bls.n	80011a4 <cmd_interpret+0x37c>
 800119a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800119e:	2b06      	cmp	r3, #6
 80011a0:	f67f ae5e 	bls.w	8000e60 <cmd_interpret+0x38>
	}
	return ret;
 80011a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	08010424 	.word	0x08010424

080011b4 <stack_get>:
char argstring[ARGSTRLEN + 1];

#define STACK_TOP	(stack[stack_idx])

uint32_t stack_get(uint8_t idx)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	return stack[(stack_idx + STACK_SIZE - idx) % STACK_SIZE];
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <stack_get+0x2c>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <stack_get+0x30>)
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	200008d4 	.word	0x200008d4
 80011e4:	200008b4 	.word	0x200008b4

080011e8 <stack_push>:

void stack_push(uint32_t v)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	stack_idx = (stack_idx + 1) % STACK_SIZE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <stack_push+0x34>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <stack_push+0x34>)
 8001200:	701a      	strb	r2, [r3, #0]
	stack[stack_idx] = v;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <stack_push+0x34>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <stack_push+0x38>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	200008d4 	.word	0x200008d4
 8001220:	200008b4 	.word	0x200008b4

08001224 <stack_pop>:

uint32_t stack_pop(void)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
	uint32_t v = stack[stack_idx];
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <stack_pop+0x34>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <stack_pop+0x38>)
 8001232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001236:	607b      	str	r3, [r7, #4]
	stack_idx = (stack_idx + STACK_SIZE - 1) % STACK_SIZE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <stack_pop+0x34>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	3307      	adds	r3, #7
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <stack_pop+0x34>)
 8001248:	701a      	strb	r2, [r3, #0]
	return v;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	200008d4 	.word	0x200008d4
 800125c:	200008b4 	.word	0x200008b4

08001260 <cmd_and>:
// COMMANDS
//==============================================================================
// help and utilities

static uint8_t cmd_and(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 8001266:	f7ff ffdd 	bl	8001224 <stack_pop>
 800126a:	6078      	str	r0, [r7, #4]
	
	STACK_TOP &= a;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <cmd_and+0x34>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <cmd_and+0x38>)
 8001274:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <cmd_and+0x34>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4013      	ands	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <cmd_and+0x38>)
 8001284:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200008d4 	.word	0x200008d4
 8001298:	200008b4 	.word	0x200008b4

0800129c <cmd_mul>:

static uint8_t cmd_mul(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 80012a2:	f7ff ffbf 	bl	8001224 <stack_pop>
 80012a6:	6078      	str	r0, [r7, #4]
	
	STACK_TOP *= a;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <cmd_mul+0x34>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <cmd_mul+0x38>)
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <cmd_mul+0x34>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	4611      	mov	r1, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <cmd_mul+0x38>)
 80012c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200008d4 	.word	0x200008d4
 80012d4:	200008b4 	.word	0x200008b4

080012d8 <cmd_plus>:

static uint8_t cmd_plus(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 80012de:	f7ff ffa1 	bl	8001224 <stack_pop>
 80012e2:	6078      	str	r0, [r7, #4]
	
	STACK_TOP += a;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <cmd_plus+0x34>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <cmd_plus+0x38>)
 80012ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <cmd_plus+0x34>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <cmd_plus+0x38>)
 80012fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200008d4 	.word	0x200008d4
 8001310:	200008b4 	.word	0x200008b4

08001314 <cmd_plusplus>:

static uint8_t cmd_plusplus(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	STACK_TOP++;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <cmd_plusplus+0x24>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <cmd_plusplus+0x28>)
 800131e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001322:	3201      	adds	r2, #1
 8001324:	4905      	ldr	r1, [pc, #20]	; (800133c <cmd_plusplus+0x28>)
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	200008d4 	.word	0x200008d4
 800133c:	200008b4 	.word	0x200008b4

08001340 <cmd_minus>:

static uint8_t cmd_minus(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 8001346:	f7ff ff6d 	bl	8001224 <stack_pop>
 800134a:	6078      	str	r0, [r7, #4]
	
	STACK_TOP -= a;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <cmd_minus+0x34>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <cmd_minus+0x38>)
 8001354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <cmd_minus+0x34>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <cmd_minus+0x38>)
 8001364:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200008d4 	.word	0x200008d4
 8001378:	200008b4 	.word	0x200008b4

0800137c <cmd_minusminus>:

static uint8_t cmd_minusminus(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	STACK_TOP--;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <cmd_minusminus+0x24>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <cmd_minusminus+0x28>)
 8001386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800138a:	3a01      	subs	r2, #1
 800138c:	4905      	ldr	r1, [pc, #20]	; (80013a4 <cmd_minusminus+0x28>)
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return 0;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	200008d4 	.word	0x200008d4
 80013a4:	200008b4 	.word	0x200008b4

080013a8 <print_stack>:

static uint8_t print_stack(const char *fmt)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	char resp[11];
	
	for (uint8_t i = STACK_SIZE; i > 0;)
 80013b0:	2308      	movs	r3, #8
 80013b2:	75fb      	strb	r3, [r7, #23]
 80013b4:	e012      	b.n	80013dc <print_stack+0x34>
	{
		sprintf(resp, fmt, stack_get(--i));
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	75fb      	strb	r3, [r7, #23]
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fef8 	bl	80011b4 <stack_get>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00e fb79 	bl	800fac4 <siprintf>
		con_putstr(resp);
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8ec 	bl	80005b4 <con_putstr>
	for (uint8_t i = STACK_SIZE; i > 0;)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1e9      	bne.n	80013b6 <print_stack+0xe>
	}
	con_put_nl();
 80013e2:	f7ff f8fd 	bl	80005e0 <con_put_nl>
		
	return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <cmd_dotdot>:

static uint8_t cmd_dotdot(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	return print_stack(" %" PRIu32);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <cmd_dotdot+0x10>)
 80013f6:	f7ff ffd7 	bl	80013a8 <print_stack>
 80013fa:	4603      	mov	r3, r0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	08010438 	.word	0x08010438

08001404 <cmd_dotdotx>:

static uint8_t cmd_dotdotx(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	return print_stack("0x%" PRIx32);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <cmd_dotdotx+0x10>)
 800140a:	f7ff ffcd 	bl	80013a8 <print_stack>
 800140e:	4603      	mov	r3, r0
}
 8001410:	4618      	mov	r0, r3
 8001412:	bd80      	pop	{r7, pc}
 8001414:	08010440 	.word	0x08010440

08001418 <cmd_div>:

static uint8_t cmd_div(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 800141e:	f7ff ff01 	bl	8001224 <stack_pop>
 8001422:	6078      	str	r0, [r7, #4]
	
	STACK_TOP /= a;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <cmd_div+0x34>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <cmd_div+0x38>)
 800142c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <cmd_div+0x34>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <cmd_div+0x38>)
 800143e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200008d4 	.word	0x200008d4
 8001450:	200008b4 	.word	0x200008b4

08001454 <cmd_xor>:

static uint8_t cmd_xor(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 800145a:	f7ff fee3 	bl	8001224 <stack_pop>
 800145e:	6078      	str	r0, [r7, #4]
	
	STACK_TOP ^= a;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <cmd_xor+0x34>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <cmd_xor+0x38>)
 8001468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <cmd_xor+0x34>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4053      	eors	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <cmd_xor+0x38>)
 8001478:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200008d4 	.word	0x200008d4
 800148c:	200008b4 	.word	0x200008b4

08001490 <cmd_readword>:

static uint8_t cmd_readword(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 8001496:	f7ff fec5 	bl	8001224 <stack_pop>
 800149a:	60f8      	str	r0, [r7, #12]
	
	a = *(uint32_t *)a;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
	char resp[11];
	sprintf(resp, "%08" PRIx32 "\r\n", a);
 80014a2:	463b      	mov	r3, r7
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4906      	ldr	r1, [pc, #24]	; (80014c0 <cmd_readword+0x30>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00e fb0b 	bl	800fac4 <siprintf>
	con_putstr(resp);
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f87f 	bl	80005b4 <con_putstr>
	return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	08010448 	.word	0x08010448

080014c4 <cmd_or>:

static uint8_t cmd_or(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
	uint32_t a = stack_pop();
 80014ca:	f7ff feab 	bl	8001224 <stack_pop>
 80014ce:	6078      	str	r0, [r7, #4]
	
	STACK_TOP |= a;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <cmd_or+0x34>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <cmd_or+0x38>)
 80014d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <cmd_or+0x34>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <cmd_or+0x38>)
 80014e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200008d4 	.word	0x200008d4
 80014fc:	200008b4 	.word	0x200008b4

08001500 <cmd_tlookup>:
	{"|", 		cmd_or},		// or
	{0, 0}
};

_Bool cmd_tlookup(const char *cmds, const struct cmd_ *ctab)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	int8_t s;
	for (s = 1; ctab->str && (s = strcmp(cmds, ctab->str)) > 0; ctab ++);
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e002      	b.n	8001516 <cmd_tlookup+0x16>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3308      	adds	r3, #8
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <cmd_tlookup+0x36>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7fe fe5b 	bl	80001e0 <strcmp>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dcec      	bgt.n	8001510 <cmd_tlookup+0x10>
	if (s)
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <cmd_tlookup+0x42>
		return 0;
 800153e:	2300      	movs	r3, #0
 8001540:	e003      	b.n	800154a <cmd_tlookup+0x4a>
	ctab->fun();
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4798      	blx	r3
	return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <stdcmd_lookup>:

_Bool stdcmd_lookup(const char *cmds)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	return cmd_tlookup(cmds, stdcmdtab);
 800155c:	4904      	ldr	r1, [pc, #16]	; (8001570 <stdcmd_lookup+0x1c>)
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffce 	bl	8001500 <cmd_tlookup>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	08010fbc 	.word	0x08010fbc

08001574 <flash_pgsize>:
#include "board.h"
#include "flash.h"

// return Flash page/sector size
static _Bool flash_pgsize(void *addr)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	uint32_t a = (uint32_t) addr - 0x08000000;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001582:	60fb      	str	r3, [r7, #12]
	if (a < 0x10000)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158a:	d201      	bcs.n	8001590 <flash_pgsize+0x1c>
		return 0x4000;
 800158c:	2301      	movs	r3, #1
 800158e:	e006      	b.n	800159e <flash_pgsize+0x2a>
	if (a < 0x20000)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001596:	d201      	bcs.n	800159c <flash_pgsize+0x28>
		return 0x10000;
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <flash_pgsize+0x2a>
	return 0x20000;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <flash_sn>:

// return Flash sector number
static uint8_t flash_sn(void *addr)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
	uint32_t a = (uint32_t) addr - 0x08000000;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80015b8:	60fb      	str	r3, [r7, #12]
	if (a < 0x10000)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d203      	bcs.n	80015ca <flash_sn+0x20>
		return a / 0x4000;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	0b9b      	lsrs	r3, r3, #14
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	e00c      	b.n	80015e4 <flash_sn+0x3a>
	if (a < 0x20000)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d0:	d201      	bcs.n	80015d6 <flash_sn+0x2c>
		return 4;
 80015d2:	2304      	movs	r3, #4
 80015d4:	e006      	b.n	80015e4 <flash_sn+0x3a>
	return 5 + (a - 0x20000) / 0x20000;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 80015dc:	0c5b      	lsrs	r3, r3, #17
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3305      	adds	r3, #5
 80015e2:	b2db      	uxtb	r3, r3

}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <flash_isblank>:

_Bool flash_isblank(const void *addr, uint32_t size)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	const uint32_t *fp = addr;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]
	size = (size + 3) / 4;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3303      	adds	r3, #3
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	603b      	str	r3, [r7, #0]
	while (size--)
 8001606:	e008      	b.n	800161a <flash_isblank+0x2a>
	{
		if (*fp++ != 0xffffffff)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1d1a      	adds	r2, r3, #4
 800160c:	60fa      	str	r2, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d001      	beq.n	800161a <flash_isblank+0x2a>
			return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e005      	b.n	8001626 <flash_isblank+0x36>
	while (size--)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	1e5a      	subs	r2, r3, #1
 800161e:	603a      	str	r2, [r7, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f1      	bne.n	8001608 <flash_isblank+0x18>
	}
	return 1;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <flash_erase_page>:

void flash_erase_page(void *addr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	if (!flash_isblank(addr, flash_pgsize(addr)))
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff99 	bl	8001574 <flash_pgsize>
 8001642:	4603      	mov	r3, r0
 8001644:	4619      	mov	r1, r3
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffd2 	bl	80015f0 <flash_isblank>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d021      	beq.n	800169c <flash_erase_page+0x68>
	{
		// erase page
		while(FLASH->SR & FLASH_SR_BSY);
 8001658:	bf00      	nop
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <flash_erase_page+0x70>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <flash_erase_page+0x26>
		FLASH->SR = FLASH_SR_EOP | FLASH_SR_WRPERR | FLASH_SR_PGAERR;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <flash_erase_page+0x70>)
 8001668:	2231      	movs	r2, #49	; 0x31
 800166a:	60da      	str	r2, [r3, #12]
		FLASH->CR = flash_sn(addr) << FLASH_CR_SNB_Pos | FLASH_CR_PSIZE_1 | FLASH_CR_SER;
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff9c 	bl	80015aa <flash_sn>
 8001672:	4603      	mov	r3, r0
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <flash_erase_page+0x70>)
 8001678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6113      	str	r3, [r2, #16]
		FLASH->CR |= FLASH_CR_STRT;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <flash_erase_page+0x70>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <flash_erase_page+0x70>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6113      	str	r3, [r2, #16]
		while(FLASH->SR & FLASH_SR_BSY);
 800168e:	bf00      	nop
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <flash_erase_page+0x70>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f9      	bne.n	8001690 <flash_erase_page+0x5c>
	}
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023c00 	.word	0x40023c00

080016a8 <flash_write32>:
	FLASH->CR &= ~FLASH_CR_PG;
	FLASH->SR = FLASH_SR_EOP;
}

void flash_write32(uint32_t *addr, const uint32_t data)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
	while(FLASH->SR & FLASH_SR_BSY);
 80016b2:	bf00      	nop
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <flash_write32+0x64>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f9      	bne.n	80016b4 <flash_write32+0xc>
	FLASH->SR = FLASH_SR_EOP | FLASH_SR_WRPERR | FLASH_SR_PGAERR;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <flash_write32+0x64>)
 80016c2:	2231      	movs	r2, #49	; 0x31
 80016c4:	60da      	str	r2, [r3, #12]
	FLASH->CR = FLASH_CR_PSIZE_1 | FLASH_CR_SER;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <flash_write32+0x64>)
 80016c8:	f240 2202 	movw	r2, #514	; 0x202
 80016cc:	611a      	str	r2, [r3, #16]
	FLASH->CR |= FLASH_CR_PG;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <flash_write32+0x64>)
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <flash_write32+0x64>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6113      	str	r3, [r2, #16]
	*(volatile uint32_t *)addr = data;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	601a      	str	r2, [r3, #0]
	while(FLASH->SR & FLASH_SR_BSY);
 80016e0:	bf00      	nop
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <flash_write32+0x64>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f9      	bne.n	80016e2 <flash_write32+0x3a>
	FLASH->CR &= ~FLASH_CR_PG;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <flash_write32+0x64>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	4a06      	ldr	r2, [pc, #24]	; (800170c <flash_write32+0x64>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6113      	str	r3, [r2, #16]
	FLASH->SR = FLASH_SR_EOP;
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <flash_write32+0x64>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	60da      	str	r2, [r3, #12]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40023c00 	.word	0x40023c00

08001710 <flash_write64>:

void flash_write64(uint32_t *addr, const uint32_t *data)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	flash_write32((uint32_t *)addr, data[0]);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4619      	mov	r1, r3
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ffc1 	bl	80016a8 <flash_write32>
	flash_write32((uint32_t *)addr + 1, data[1]);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	1d1a      	adds	r2, r3, #4
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3304      	adds	r3, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f7ff ffb8 	bl	80016a8 <flash_write32>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ffc2 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <SysTick_Handler>:

uint16_t signon_timer;
#define SIGNON_TOUT	1000u	// seconds

void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	if (utimer)
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <SysTick_Handler+0x70>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <SysTick_Handler+0x16>
		--utimer;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <SysTick_Handler+0x70>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <SysTick_Handler+0x70>)
 8001828:	6013      	str	r3, [r2, #0]

	void run_every_ms(void);
	run_every_ms();
 800182a:	f004 f9f1 	bl	8005c10 <run_every_ms>

	static uint16_t tdiv;

	if (++tdiv == 1000u)
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <SysTick_Handler+0x74>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <SysTick_Handler+0x74>)
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <SysTick_Handler+0x74>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001842:	d11d      	bne.n	8001880 <SysTick_Handler+0x6c>
	{
		tdiv = 0;
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <SysTick_Handler+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	801a      	strh	r2, [r3, #0]

		LED_PORT->BSRR = LED_MSK << 16 | (~LED_PORT->ODR & LED_MSK);
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <SysTick_Handler+0x78>)
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	43db      	mvns	r3, r3
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <SysTick_Handler+0x78>)
 8001856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185a:	6193      	str	r3, [r2, #24]
		LED_DUTY ^= LED_DIM	^ LED_FULL;
 800185c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001866:	f083 0333 	eor.w	r3, r3, #51	; 0x33
 800186a:	6393      	str	r3, [r2, #56]	; 0x38

		if (signon_timer)
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <SysTick_Handler+0x7c>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <SysTick_Handler+0x6c>
			--signon_timer;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <SysTick_Handler+0x7c>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Handler+0x7c>)
 800187e:	801a      	strh	r2, [r3, #0]
	}
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000b24 	.word	0x20000b24
 8001888:	20001330 	.word	0x20001330
 800188c:	40020000 	.word	0x40020000
 8001890:	20000b28 	.word	0x20000b28

08001894 <HAL_Delay>:

void HAL_Delay(uint32_t ms)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	for (utimer = ms; utimer;) ;
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_Delay+0x28>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	bf00      	nop
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_Delay+0x28>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1fb      	bne.n	80018a4 <HAL_Delay+0x10>
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000b24 	.word	0x20000b24

080018c0 <ClockConfig_F401>:
/*
 * Configure clock to PLL fed by HSE, 84 MHz, 48 MHz for USB,
 * both APBs at 42 MHz, timers at 84 MHz
 */
static void ClockConfig_F401(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSESEL;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <ClockConfig_F401+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a16      	ldr	r2, [pc, #88]	; (8001924 <ClockConfig_F401+0x64>)
 80018ca:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80018ce:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80018d0:	bf00      	nop
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <ClockConfig_F401+0x64>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f9      	beq.n	80018d2 <ClockConfig_F401+0x12>
	RCC->PLLCFGR = (RCC->PLLCFGR & RCC_PLLCFGR_RSVD)
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <ClockConfig_F401+0x64>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a11      	ldr	r2, [pc, #68]	; (8001928 <ClockConfig_F401+0x68>)
 80018e4:	401a      	ands	r2, r3
 80018e6:	490f      	ldr	r1, [pc, #60]	; (8001924 <ClockConfig_F401+0x64>)
		| RCC_PLLCFGR_PLLSRC_HSE
		| RCC_PLLCFGR_PLLMV(HSE_VALUE / 1000000u)
		| RCC_PLLCFGR_PLLNV(336)	// 192 for F411 @ 96 MHz
		| RCC_PLLCFGR_PLLPV(4)		// 2 for F411 @ 96 MHz
		| RCC_PLLCFGR_PLLQV(7);		// 4 for F411 @ 96 MHz
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <ClockConfig_F401+0x6c>)
 80018ea:	4313      	orrs	r3, r2
	RCC->PLLCFGR = (RCC->PLLCFGR & RCC_PLLCFGR_RSVD)
 80018ec:	604b      	str	r3, [r1, #4]
	RCC->CR |= RCC_CR_PLLON;	//
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <ClockConfig_F401+0x64>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <ClockConfig_F401+0x64>)
 80018f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f8:	6013      	str	r3, [r2, #0]
	// set Flash speed
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_2WS;	// 1ws 30..64, 3 ws 90..100
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <ClockConfig_F401+0x70>)
 80018fc:	f240 7202 	movw	r2, #1794	; 0x702
 8001900:	601a      	str	r2, [r3, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8001902:	bf00      	nop
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <ClockConfig_F401+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f9      	beq.n	8001904 <ClockConfig_F401+0x44>

	RCC->CFGR = RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_SW_PLL;	// APB2, APB1 prescaler = 2
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <ClockConfig_F401+0x64>)
 8001912:	f249 0202 	movw	r2, #36866	; 0x9002
 8001916:	609a      	str	r2, [r3, #8]
	//while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	f0bc8000 	.word	0xf0bc8000
 800192c:	07415408 	.word	0x07415408
 8001930:	40023c00 	.word	0x40023c00

08001934 <hw_init>:

#define APB1_FREQ	(HCLK_FREQ / 2)
#define CON_BAUD	115200u

void hw_init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	ClockConfig_F401();
 8001938:	f7ff ffc2 	bl	80018c0 <ClockConfig_F401>

	RCC->AHB1ENR = RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <hw_init+0x118>)
 800193e:	4a44      	ldr	r2, [pc, #272]	; (8001a50 <hw_init+0x11c>)
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
		| RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_DMA1EN;
//	RCC->AHB2ENR = RCC_AHB2ENR_OTGFSEN;

	RCC->APB1ENR = RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM5EN | RCC_APB1ENR_USART2EN;
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <hw_init+0x118>)
 8001944:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <hw_init+0x120>)
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

	LED_TIM->PSC = HCLK_FREQ / LED_FREQ / LED_STEPS - 1;
 8001948:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800194c:	f241 0267 	movw	r2, #4199	; 0x1067
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
	LED_TIM->ARR = LED_STEPS - 1;
 8001952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001956:	2231      	movs	r2, #49	; 0x31
 8001958:	62da      	str	r2, [r3, #44]	; 0x2c
	LED_TIM->CCR1 = LED_DIM;
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	2202      	movs	r2, #2
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
	LED_TIM->CCMR1 = TIM_CCMR1_OC1M_PWM1 | TIM_CCMR1_OC1PE;
 8001962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001966:	2268      	movs	r2, #104	; 0x68
 8001968:	619a      	str	r2, [r3, #24]
	LED_TIM->BDTR = TIM_BDTR_MOE;
 800196a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800196e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001972:	645a      	str	r2, [r3, #68]	; 0x44
	LED_TIM->CCER = TIM_CCER_CC1E;
 8001974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001978:	2201      	movs	r2, #1
 800197a:	621a      	str	r2, [r3, #32]
	//LED_TIM->DIER = TIM_DIER_CC1IE | TIM_DIER_UIE;
	LED_TIM->CR1 = TIM_CR1_ARPE | TIM_CR1_CEN;
 800197c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001980:	2281      	movs	r2, #129	; 0x81
 8001982:	601a      	str	r2, [r3, #0]

	USART2->BRR = (APB1_FREQ + CON_BAUD / 2) / CON_BAUD;
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <hw_init+0x124>)
 8001986:	f240 126d 	movw	r2, #365	; 0x16d
 800198a:	609a      	str	r2, [r3, #8]
	USART2->CR1 = USART_CR1_RE | USART_CR1_TE | USART_CR1_UE | USART_CR1_RXNEIE;
 800198c:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <hw_init+0x124>)
 800198e:	f242 022c 	movw	r2, #8236	; 0x202c
 8001992:	60da      	str	r2, [r3, #12]

	GPIOA->AFR[0] = (union bf4_){
 8001994:	2300      	movs	r3, #0
 8001996:	2202      	movs	r2, #2
 8001998:	f362 0303 	bfi	r3, r2, #0, #4
 800199c:	2202      	movs	r2, #2
 800199e:	f362 1307 	bfi	r3, r2, #4, #4
 80019a2:	2207      	movs	r2, #7
 80019a4:	f362 230b 	bfi	r3, r2, #8, #4
 80019a8:	2207      	movs	r2, #7
 80019aa:	f362 330f 	bfi	r3, r2, #12, #4
 80019ae:	2201      	movs	r2, #1
 80019b0:	f362 5317 	bfi	r3, r2, #20, #4
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <hw_init+0x128>)
 80019b6:	6213      	str	r3, [r2, #32]
		.p1 = AFN_TIM3,	// TIM5CH2 - IN2B
		.p2 = AFN_USART1_2,
		.p3 = AFN_USART1_2,
		.p5 = AFN_TIM1_2,	// TIM2CH1 - LED
	}.w;
	GPIOA->AFR[1] = (union bf4_){
 80019b8:	2300      	movs	r3, #0
 80019ba:	220a      	movs	r2, #10
 80019bc:	f362 330f 	bfi	r3, r2, #12, #4
 80019c0:	220a      	movs	r2, #10
 80019c2:	f362 4313 	bfi	r3, r2, #16, #4
 80019c6:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <hw_init+0x128>)
 80019c8:	6253      	str	r3, [r2, #36]	; 0x24
		.p11 = AFN_USB,
		.p12 = AFN_USB,
	}.w;
	GPIOA->OSPEEDR |= (union bf2_){
 80019ca:	2300      	movs	r3, #0
 80019cc:	f043 0303 	orr.w	r3, r3, #3
 80019d0:	f043 030c 	orr.w	r3, r3, #12
 80019d4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80019d8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		.p0 = GPIO_OSPEEDR_HI,
		.p1 = GPIO_OSPEEDR_HI,
		.p11 = GPIO_OSPEEDR_HI,
		.p12 = GPIO_OSPEEDR_HI	// USB
	}.w;
 80019dc:	4619      	mov	r1, r3
	GPIOA->OSPEEDR |= (union bf2_){
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <hw_init+0x128>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <hw_init+0x128>)
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6093      	str	r3, [r2, #8]
	GPIOA->MODER = (union bf2_){
 80019e8:	2300      	movs	r3, #0
 80019ea:	2202      	movs	r2, #2
 80019ec:	f362 0301 	bfi	r3, r2, #0, #2
 80019f0:	2202      	movs	r2, #2
 80019f2:	f362 0383 	bfi	r3, r2, #2, #2
 80019f6:	2202      	movs	r2, #2
 80019f8:	f362 1305 	bfi	r3, r2, #4, #2
 80019fc:	2202      	movs	r2, #2
 80019fe:	f362 1387 	bfi	r3, r2, #6, #2
 8001a02:	2202      	movs	r2, #2
 8001a04:	f362 238b 	bfi	r3, r2, #10, #2
 8001a08:	2202      	movs	r2, #2
 8001a0a:	f362 5397 	bfi	r3, r2, #22, #2
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f362 6319 	bfi	r3, r2, #24, #2
 8001a14:	2202      	movs	r2, #2
 8001a16:	f362 639b 	bfi	r3, r2, #26, #2
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f362 731d 	bfi	r3, r2, #28, #2
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <hw_init+0x128>)
 8001a22:	6013      	str	r3, [r2, #0]
		.p11 = GPIO_MODER_AF,	// USB
		.p12 = GPIO_MODER_AF,	// USB
		.p13 = GPIO_MODER_AF,
		.p14 = GPIO_MODER_AF,
	}.w;
	GPIOA->PUPDR = GPIOA_PUPDR_SWD;
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <hw_init+0x128>)
 8001a26:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 8001a2a:	60da      	str	r2, [r3, #12]

	GPIOC->MODER = (union bf2_){
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f362 0383 	bfi	r3, r2, #2, #2
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <hw_init+0x12c>)
 8001a36:	6013      	str	r3, [r2, #0]
		.p1 = GPIO_MODER_OUT,	// ENB
	}.w;

	NVIC_SetPriority(USART2_IRQn, 12);
 8001a38:	210c      	movs	r1, #12
 8001a3a:	2026      	movs	r0, #38	; 0x26
 8001a3c:	f7ff fe9e 	bl	800177c <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001a40:	2026      	movs	r0, #38	; 0x26
 8001a42:	f7ff fe7d 	bl	8001740 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	0020000f 	.word	0x0020000f
 8001a54:	00020009 	.word	0x00020009
 8001a58:	40004400 	.word	0x40004400
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020800 	.word	0x40020800

08001a64 <OwnDemo>:
	return HAL_GetTick() - TimeStarted > PressBPSwicthTime;

}

void OwnDemo(int UseSensorsMask, RangingConfig_e rangingConfig)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
	int status;
	int i;
	for (i = 0; i < 2; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	e02f      	b.n	8001ad6 <OwnDemo+0x72>
	{
		if (!VL53L0XDevs[i].Present)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	; (8001ae8 <OwnDemo+0x84>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01f      	beq.n	8001ace <OwnDemo+0x6a>
			continue;

		status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i],
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <OwnDemo+0x84>)
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 f95e 	bl	8006d60 <VL53L0X_SetDeviceMode>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
		VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
		if (status == VL53L0X_ERROR_NONE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <OwnDemo+0x62>
			status = VL53L0X_StartMeasurement(&VL53L0XDevs[i]);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <OwnDemo+0x84>)
 8001aba:	4413      	add	r3, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f006 f9a5 	bl	8007e0c <VL53L0X_StartMeasurement>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	60fb      	str	r3, [r7, #12]
		if (status != VL53L0X_ERROR_NONE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <OwnDemo+0x6c>
//			HandleError(ERR_DEMO_RANGE_MULTI);
			while(1);
 8001acc:	e7fe      	b.n	8001acc <OwnDemo+0x68>
			continue;
 8001ace:	bf00      	nop
	for (i = 0; i < 2; i++)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	ddcc      	ble.n	8001a76 <OwnDemo+0x12>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000038 	.word	0x20000038

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int ExitWithLongPress;
	RangingConfig_e RangingConfig = LONG_RANGE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af6:	f00a fb27 	bl	800c148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afa:	f000 f855 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afe:	f000 f9e3 	bl	8001ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b02:	f000 f9c1 	bl	8001e88 <MX_DMA_Init>
  MX_I2C1_Init();
 8001b06:	f000 f8bb 	bl	8001c80 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001b0a:	f000 f993 	bl	8001e34 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001b0e:	f000 f913 	bl	8001d38 <MX_TIM5_Init>
  MX_TIM10_Init();
 8001b12:	f000 f96b 	bl	8001dec <MX_TIM10_Init>
  MX_I2C3_Init();
 8001b16:	f000 f8e1 	bl	8001cdc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	hw_init(); // uart conflict // tim5 conflict // gpioa or instead of assign conflict
 8001b1a:	f7ff ff0b 	bl	8001934 <hw_init>

	// flash write unlock
	FLASH->KEYR = FLASH_FKEY1;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <main+0x98>)
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <main+0x9c>)
 8001b22:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = FLASH_FKEY2;
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <main+0x98>)
 8001b26:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <main+0xa0>)
 8001b28:	605a      	str	r2, [r3, #4]

	SysTick_Config(HCLK_FREQ / 1000u);
 8001b2a:	4819      	ldr	r0, [pc, #100]	; (8001b90 <main+0xa4>)
 8001b2c:	f7ff fe50 	bl	80017d0 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn, 11);	// must be higher than command processor priority
 8001b30:	210b      	movs	r1, #11
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	f7ff fe21 	bl	800177c <__NVIC_SetPriority>

	// load config from Flash
	loadcfg();
 8001b3a:	f003 fe89 	bl	8005850 <loadcfg>
	br_set_mode(cd.n.mode);
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <main+0xa8>)
 8001b40:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 f85f 	bl	8003c08 <br_set_mode>
	// init H-bridge operation


	uart_printf(WelcomeMsg);
 8001b4a:	4813      	ldr	r0, [pc, #76]	; (8001b98 <main+0xac>)
 8001b4c:	f004 fa54 	bl	8005ff8 <uart_printf>
	HAL_Delay(WelcomeTime);
 8001b50:	f44f 7025 	mov.w	r0, #660	; 0x294
 8001b54:	f7ff fe9e 	bl	8001894 <HAL_Delay>

	/* Set VL53L0X API trace level */
	VL53L0X_trace_config(NULL, TRACE_MODULE_NONE, TRACE_LEVEL_NONE,
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f00a faa6 	bl	800c0b0 <VL53L0X_trace_config>
			TRACE_FUNCTION_NONE); // No Trace
	//VL53L0X_trace_config(NULL,TRACE_MODULE_ALL, TRACE_LEVEL_ALL, TRACE_FUNCTION_ALL); // Full trace
	InitSensors(&hi2c3, RangingConfig);
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <main+0xb0>)
 8001b6a:	f000 fd97 	bl	800269c <InitSensors>
	OwnDemo(UseSensorsMask, LONG_RANGE);
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <main+0xb4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff75 	bl	8001a64 <OwnDemo>
	HAL_TIM_Base_Start_IT(&htim10);
 8001b7a:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <main+0xb8>)
 8001b7c:	f00c fdf8 	bl	800e770 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		__WFI();
 8001b80:	bf30      	wfi
 8001b82:	e7fd      	b.n	8001b80 <main+0x94>
 8001b84:	40023c00 	.word	0x40023c00
 8001b88:	45670123 	.word	0x45670123
 8001b8c:	cdef89ab 	.word	0xcdef89ab
 8001b90:	00014820 	.word	0x00014820
 8001b94:	200016c0 	.word	0x200016c0
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	20000950 	.word	0x20000950
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	200009ec 	.word	0x200009ec

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2230      	movs	r2, #48	; 0x30
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00d ff7c 	bl	800fab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <SystemClock_Config+0xd4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c10:	2310      	movs	r3, #16
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c14:	2302      	movs	r3, #2
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c20:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c26:	2304      	movs	r3, #4
 8001c28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00c f8b4 	bl	800dda0 <HAL_RCC_OscConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c3e:	f000 fb32 	bl	80022a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c42:	230f      	movs	r3, #15
 8001c44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c46:	2302      	movs	r3, #2
 8001c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f00c fb16 	bl	800e290 <HAL_RCC_ClockConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c6a:	f000 fb1c 	bl	80022a6 <Error_Handler>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3750      	adds	r7, #80	; 0x50
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000

08001c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c86:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <MX_I2C1_Init+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <MX_I2C1_Init+0x58>)
 8001c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <MX_I2C1_Init+0x50>)
 8001cbe:	f00b f8d9 	bl	800ce74 <HAL_I2C_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cc8:	f000 faed 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200008fc 	.word	0x200008fc
 8001cd4:	40005400 	.word	0x40005400
 8001cd8:	00061a80 	.word	0x00061a80

08001cdc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <MX_I2C3_Init+0x54>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <MX_I2C3_Init+0x58>)
 8001cea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_I2C3_Init+0x50>)
 8001d1a:	f00b f8ab 	bl	800ce74 <HAL_I2C_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d24:	f000 fabf 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000950 	.word	0x20000950
 8001d30:	40005c00 	.word	0x40005c00
 8001d34:	00061a80 	.word	0x00061a80

08001d38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08a      	sub	sp, #40	; 0x28
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001d5c:	4a22      	ldr	r2, [pc, #136]	; (8001de8 <MX_TIM5_Init+0xb0>)
 8001d5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001d62:	2253      	movs	r2, #83	; 0x53
 8001d64:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d72:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001d80:	4818      	ldr	r0, [pc, #96]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001d82:	f00c fd57 	bl	800e834 <HAL_TIM_OC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001d8c:	f000 fa8b 	bl	80022a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4811      	ldr	r0, [pc, #68]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001da0:	f00d f930 	bl	800f004 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001daa:	f000 fa7c 	bl	80022a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001dc6:	f00c fe8d 	bl	800eae4 <HAL_TIM_OC_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001dd0:	f000 fa69 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <MX_TIM5_Init+0xac>)
 8001dd6:	f000 fe61 	bl	8002a9c <HAL_TIM_MspPostInit>

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200009a4 	.word	0x200009a4
 8001de8:	40000c00 	.word	0x40000c00

08001dec <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_TIM10_Init+0x40>)
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <MX_TIM10_Init+0x44>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <MX_TIM10_Init+0x40>)
 8001df8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dfc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <MX_TIM10_Init+0x40>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1049;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <MX_TIM10_Init+0x40>)
 8001e06:	f240 4219 	movw	r2, #1049	; 0x419
 8001e0a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <MX_TIM10_Init+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_TIM10_Init+0x40>)
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <MX_TIM10_Init+0x40>)
 8001e1a:	f00c fc59 	bl	800e6d0 <HAL_TIM_Base_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001e24:	f000 fa3f 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200009ec 	.word	0x200009ec
 8001e30:	40014400 	.word	0x40014400

08001e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <MX_USART2_UART_Init+0x50>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_USART2_UART_Init+0x4c>)
 8001e6c:	f00d f94c 	bl	800f108 <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e76:	f000 fa16 	bl	80022a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000a34 	.word	0x20000a34
 8001e84:	40004400 	.word	0x40004400

08001e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_DMA_Init+0x3c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <MX_DMA_Init+0x3c>)
 8001e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_DMA_Init+0x3c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2011      	movs	r0, #17
 8001eb0:	f00a fa83 	bl	800c3ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001eb4:	2011      	movs	r0, #17
 8001eb6:	f00a fa9c 	bl	800c3f2 <HAL_NVIC_EnableIRQ>

}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b41      	ldr	r3, [pc, #260]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b3a      	ldr	r3, [pc, #232]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b37      	ldr	r3, [pc, #220]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a32      	ldr	r2, [pc, #200]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <MX_GPIO_Init+0x120>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2__Chip_enable_GPIO_Port, LD2__Chip_enable_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2120      	movs	r1, #32
 8001f52:	4826      	ldr	r0, [pc, #152]	; (8001fec <MX_GPIO_Init+0x124>)
 8001f54:	f00a ff5c 	bl	800ce10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_1_Pin|SENSOR_2_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2130      	movs	r1, #48	; 0x30
 8001f5c:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <MX_GPIO_Init+0x128>)
 8001f5e:	f00a ff57 	bl	800ce10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Push_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Push_Button_Pin;
 8001f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blue_Push_Button_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <MX_GPIO_Init+0x128>)
 8001f78:	f00a fdc6 	bl	800cb08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4816      	ldr	r0, [pc, #88]	; (8001fec <MX_GPIO_Init+0x124>)
 8001f92:	f00a fdb9 	bl	800cb08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2__Chip_enable_Pin */
  GPIO_InitStruct.Pin = LD2__Chip_enable_Pin;
 8001f96:	2320      	movs	r3, #32
 8001f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2__Chip_enable_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	480f      	ldr	r0, [pc, #60]	; (8001fec <MX_GPIO_Init+0x124>)
 8001fae:	f00a fdab 	bl	800cb08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_1_Pin SENSOR_2_Pin */
  GPIO_InitStruct.Pin = SENSOR_1_Pin|SENSOR_2_Pin;
 8001fb2:	2330      	movs	r3, #48	; 0x30
 8001fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <MX_GPIO_Init+0x128>)
 8001fca:	f00a fd9d 	bl	800cb08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f00a f9f1 	bl	800c3ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f00a fa0a 	bl	800c3f2 <HAL_NVIC_EnableIRQ>

}
 8001fde:	bf00      	nop
 8001fe0:	3728      	adds	r7, #40	; 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020800 	.word	0x40020800

08001ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	if (htim == &htim10)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a4a      	ldr	r2, [pc, #296]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002000:	4293      	cmp	r3, r2
 8002002:	f040 808c 	bne.w	800211e <HAL_TIM_PeriodElapsedCallback+0x12a>
	{
		for (int i = 0; i < 2; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e084      	b.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x122>
		{
			if (!VL53L0XDevs[i].Present)
 800200c:	4a47      	ldr	r2, [pc, #284]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002014:	fb01 f303 	mul.w	r3, r1, r3
 8002018:	4413      	add	r3, r2
 800201a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d074      	beq.n	800210e <HAL_TIM_PeriodElapsedCallback+0x11a>
				continue;
			uint8_t isReady = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	72bb      	strb	r3, [r7, #10]
			VL53L0X_Error status = VL53L0X_GetMeasurementDataReady(
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4a3e      	ldr	r2, [pc, #248]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002034:	4413      	add	r3, r2
 8002036:	f107 020a 	add.w	r2, r7, #10
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f005 ffd3 	bl	8007fe8 <VL53L0X_GetMeasurementDataReady>
 8002042:	4603      	mov	r3, r0
 8002044:	72fb      	strb	r3, [r7, #11]
					&VL53L0XDevs[i], &isReady);
			if (status == VL53L0X_ERROR_NONE)
 8002046:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d160      	bne.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x11c>
			{
				if (isReady)
 800204e:	7abb      	ldrb	r3, [r7, #10]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05a      	beq.n	800210a <HAL_TIM_PeriodElapsedCallback+0x116>
				{
					status = VL53L0X_GetRangingMeasurementData(&VL53L0XDevs[i],
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	4a33      	ldr	r2, [pc, #204]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002060:	1898      	adds	r0, r3, r2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800206e:	4413      	add	r3, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f006 f825 	bl	80080c0 <VL53L0X_GetRangingMeasurementData>
 8002076:	4603      	mov	r3, r0
 8002078:	72fb      	strb	r3, [r7, #11]
							&RangingMeasurementData[i]);

					if (status == VL53L0X_ERROR_NONE)
 800207a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <HAL_TIM_PeriodElapsedCallback+0xa8>
						status = VL53L0X_ClearInterruptMask(&VL53L0XDevs[i], 0);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800208e:	4413      	add	r3, r2
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f006 fb74 	bl	8008780 <VL53L0X_ClearInterruptMask>
 8002098:	4603      	mov	r3, r0
 800209a:	72fb      	strb	r3, [r7, #11]

					if (status == VL53L0X_ERROR_NONE)
 800209c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d110      	bne.n	80020c6 <HAL_TIM_PeriodElapsedCallback+0xd2>
						Sensor_SetNewRange(&VL53L0XDevs[i],
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a1f      	ldr	r2, [pc, #124]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80020b0:	1898      	adds	r0, r3, r2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80020be:	4413      	add	r3, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f000 fab1 	bl	8002628 <Sensor_SetNewRange>
								&RangingMeasurementData[i]);

					trace_printf("%d,%d,%d\n", VL53L0XDevs[i].Id, RangingMeasurementData[i].RangeStatus, RangingMeasurementData[i].RangeMilliMeter);
 80020c6:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	4815      	ldr	r0, [pc, #84]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4403      	add	r3, r0
 80020e8:	3318      	adds	r3, #24
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461c      	mov	r4, r3
 80020ee:	4810      	ldr	r0, [pc, #64]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4403      	add	r3, r0
 80020fc:	3308      	adds	r3, #8
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	4622      	mov	r2, r4
 8002102:	480c      	ldr	r0, [pc, #48]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002104:	f003 ff78 	bl	8005ff8 <uart_printf>
 8002108:	e002      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x11c>
					// char tab[6];
					// sprintf(tab, "%d%d%d",VL53L0XDevs[i].Id, RangingMeasurementData[i].RangeStatus + 48, RangingMeasurementData[i].RangeMilliMeter);
					// debug_printff(tab, 10);
				} else
				{
					__NOP();
 800210a:	bf00      	nop
 800210c:	e000      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x11c>
				continue;
 800210e:	bf00      	nop
		for (int i = 0; i < 2; i++)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3301      	adds	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b01      	cmp	r3, #1
 800211a:	f77f af77 	ble.w	800200c <HAL_TIM_PeriodElapsedCallback+0x18>
				}
			}
		}
    // trace_printf("%d",calculatePWM(RangingMeasurementData[0].RangeMilliMeter, RangingMeasurementData[1].RangeMilliMeter));
	}
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	200009ec 	.word	0x200009ec
 800212c:	20000038 	.word	0x20000038
 8002130:	20000ad8 	.word	0x20000ad8
 8002134:	08010488 	.word	0x08010488

08002138 <con_putchar>:
static char outbuf[OBSIZE];
static uint16_t obputidx;
static volatile uint16_t obgetidx;

void con_putchar(char c)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
	uint16_t newputidx = (obputidx + 1) % OBSIZE;
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <con_putchar+0x60>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	3301      	adds	r3, #1
 8002148:	425a      	negs	r2, r3
 800214a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800214e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002152:	bf58      	it	pl
 8002154:	4253      	negpl	r3, r2
 8002156:	81fb      	strh	r3, [r7, #14]
	if (newputidx != obgetidx)
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <con_putchar+0x64>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	89fa      	ldrh	r2, [r7, #14]
 8002160:	429a      	cmp	r2, r3
 8002162:	d012      	beq.n	800218a <con_putchar+0x52>
	{
		// buffer not full, put character
		outbuf[obputidx] = c;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <con_putchar+0x60>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <con_putchar+0x68>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	5453      	strb	r3, [r2, r1]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
		__disable_irq();
		obputidx = newputidx;
 8002174:	4a08      	ldr	r2, [pc, #32]	; (8002198 <con_putchar+0x60>)
 8002176:	89fb      	ldrh	r3, [r7, #14]
 8002178:	8013      	strh	r3, [r2, #0]
		USART2->CR1 |= USART_CR1_TXEIE;
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <con_putchar+0x6c>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <con_putchar+0x6c>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002184:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002186:	b662      	cpsie	i
}
 8002188:	bf00      	nop
		__enable_irq();
	}
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000132c 	.word	0x2000132c
 800219c:	2000132e 	.word	0x2000132e
 80021a0:	20000b2c 	.word	0x20000b2c
 80021a4:	40004400 	.word	0x40004400

080021a8 <USART2_IRQHandler>:
}

_Bool process_input(char c);

void USART2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
	uint32_t sr = USART2->SR & USART2->CR1 & (USART_CR1_RXNEIE | USART_CR1_TXEIE);	// filter only enabled interrupts
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <USART2_IRQHandler+0xac>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b28      	ldr	r3, [pc, #160]	; (8002254 <USART2_IRQHandler+0xac>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80021bc:	607b      	str	r3, [r7, #4]

	if (sr & USART_SR_RXNE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d017      	beq.n	80021f8 <USART2_IRQHandler+0x50>
	{
		if (!signon_timer)
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <USART2_IRQHandler+0xb0>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <USART2_IRQHandler+0x32>
		{
			display_signon();
 80021d0:	f003 faa6 	bl	8005720 <display_signon>
			USART2->DR;	// ignore first char
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <USART2_IRQHandler+0xac>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	e00a      	b.n	80021f0 <USART2_IRQHandler+0x48>
		}
		else if (process_input(USART2->DR))
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <USART2_IRQHandler+0xac>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fa43 	bl	800066c <process_input>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <USART2_IRQHandler+0x48>
			display_prompt();
 80021ec:	f003 fa88 	bl	8005700 <display_prompt>
		signon_timer = SIGNON_TOUT;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <USART2_IRQHandler+0xb0>)
 80021f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f6:	801a      	strh	r2, [r3, #0]
	}

	if (sr & USART_SR_TXE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d024      	beq.n	800224c <USART2_IRQHandler+0xa4>
	{
		// tx ready, something to send
		uint8_t c = outbuf[obgetidx];
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <USART2_IRQHandler+0xb4>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <USART2_IRQHandler+0xb8>)
 800220c:	5c9b      	ldrb	r3, [r3, r2]
 800220e:	70fb      	strb	r3, [r7, #3]
		if (++obgetidx == OBSIZE)
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <USART2_IRQHandler+0xb4>)
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	3301      	adds	r3, #1
 8002218:	b29b      	uxth	r3, r3
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <USART2_IRQHandler+0xb4>)
 800221c:	4619      	mov	r1, r3
 800221e:	8011      	strh	r1, [r2, #0]
 8002220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002224:	d102      	bne.n	800222c <USART2_IRQHandler+0x84>
			obgetidx = 0;
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <USART2_IRQHandler+0xb4>)
 8002228:	2200      	movs	r2, #0
 800222a:	801a      	strh	r2, [r3, #0]
		if (obgetidx == obputidx)	// buffer empty
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <USART2_IRQHandler+0xb4>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <USART2_IRQHandler+0xbc>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d105      	bne.n	8002246 <USART2_IRQHandler+0x9e>
			USART2->CR1 &= ~USART_CR1_TXEIE;	// disable further TX interrupts
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <USART2_IRQHandler+0xac>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4a05      	ldr	r2, [pc, #20]	; (8002254 <USART2_IRQHandler+0xac>)
 8002240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002244:	60d3      	str	r3, [r2, #12]
		USART2->DR = c;	// clears TCIF
 8002246:	4a03      	ldr	r2, [pc, #12]	; (8002254 <USART2_IRQHandler+0xac>)
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	6053      	str	r3, [r2, #4]
	}
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40004400 	.word	0x40004400
 8002258:	20000b28 	.word	0x20000b28
 800225c:	2000132e 	.word	0x2000132e
 8002260:	20000b2c 	.word	0x20000b2c
 8002264:	2000132c 	.word	0x2000132c

08002268 <pktdump>:
//========================================================================
void pktdump(const struct sendpacket_ *p)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <hw_boot>:

void hw_boot(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <adc_process>:
{

}

void adc_process(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <adc_store_csense>:

void adc_store_csense(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022aa:	b672      	cpsid	i
}
 80022ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022ae:	e7fe      	b.n	80022ae <Error_Handler+0x8>

080022b0 <SetI2C>:
    { .Id = XNUCLEO53L0A1_DEV_LEFT, .DevLetter = 'l', .I2cDevAddr = 0x52 },
    { .Id = XNUCLEO53L0A1_DEV_CENTER, .DevLetter = 'c', .I2cDevAddr = 0x52 }, 
};

static void SetI2C(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < sizeof(VL53L0XDevs)/sizeof(VL53L0XDevs[0]); i++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e00d      	b.n	80022da <SetI2C+0x2a>
    {
        VL53L0XDevs[i].I2cHandle = hi2c;
 80022be:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <SetI2C+0x40>)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < sizeof(VL53L0XDevs)/sizeof(VL53L0XDevs[0]); i++)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d9ee      	bls.n	80022be <SetI2C+0xe>
    }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000038 	.word	0x20000038

080022f4 <ResetId>:

static int ResetId(int DevNo, GPIO_PinState state)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
	switch (DevNo)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <ResetId+0x1a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d007      	beq.n	800231c <ResetId+0x28>

	case XNUCLEO53L0A1_DEV_CENTER:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, state);
		break;
	default:
		break;
 800230c:	e00d      	b.n	800232a <ResetId+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, state);
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	461a      	mov	r2, r3
 8002312:	2110      	movs	r1, #16
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <ResetId+0x40>)
 8002316:	f00a fd7b 	bl	800ce10 <HAL_GPIO_WritePin>
		break;
 800231a:	e006      	b.n	800232a <ResetId+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, state);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	461a      	mov	r2, r3
 8002320:	2120      	movs	r1, #32
 8002322:	4804      	ldr	r0, [pc, #16]	; (8002334 <ResetId+0x40>)
 8002324:	f00a fd74 	bl	800ce10 <HAL_GPIO_WritePin>
		break;
 8002328:	bf00      	nop
	}
	return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40020800 	.word	0x40020800

08002338 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
static void SetupSingleShot(RangingConfig_e rangingConfig)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	; 0x30
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
	int status;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t) (0.25 * 65536);
 8002342:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
	FixPoint1616_t sigmaLimit = (FixPoint1616_t) (18 * 65536);
 8002348:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timingBudget = 33000;
 800234e:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8002352:	623b      	str	r3, [r7, #32]
	uint8_t preRangeVcselPeriod = 14;
 8002354:	230e      	movs	r3, #14
 8002356:	77fb      	strb	r3, [r7, #31]
	uint8_t finalRangeVcselPeriod = 10;
 8002358:	230a      	movs	r3, #10
 800235a:	77bb      	strb	r3, [r7, #30]

	for (i = 0; i < 2; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002360:	e143      	b.n	80025ea <SetupSingleShot+0x2b2>
	{
		if (VL53L0XDevs[i].Present)
 8002362:	4aa6      	ldr	r2, [pc, #664]	; (80025fc <SetupSingleShot+0x2c4>)
 8002364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002366:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8134 	beq.w	80025e4 <SetupSingleShot+0x2ac>
		{
			status = VL53L0X_StaticInit(&VL53L0XDevs[i]);
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	4a9d      	ldr	r2, [pc, #628]	; (80025fc <SetupSingleShot+0x2c4>)
 8002388:	4413      	add	r3, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fa7a 	bl	8006884 <VL53L0X_StaticInit>
 8002390:	4603      	mov	r3, r0
 8002392:	61bb      	str	r3, [r7, #24]
			if (status)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <SetupSingleShot+0x6a>
			{
				debug_printf("VL53L0X_StaticInit %d failed\n", i);
 800239a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800239c:	4898      	ldr	r0, [pc, #608]	; (8002600 <SetupSingleShot+0x2c8>)
 800239e:	f003 fe2b 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i],
 80023a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	4a93      	ldr	r2, [pc, #588]	; (80025fc <SetupSingleShot+0x2c4>)
 80023ae:	4413      	add	r3, r2
 80023b0:	f107 0216 	add.w	r2, r7, #22
 80023b4:	f107 0117 	add.w	r1, r7, #23
 80023b8:	4618      	mov	r0, r3
 80023ba:	f005 fc7f 	bl	8007cbc <VL53L0X_PerformRefCalibration>
 80023be:	4603      	mov	r3, r0
 80023c0:	61bb      	str	r3, [r7, #24]
					&VhvSettings, &PhaseCal);
			if (status)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <SetupSingleShot+0x96>
			{
				debug_printf("VL53L0X_PerformRefCalibration failed\n");
 80023c8:	488e      	ldr	r0, [pc, #568]	; (8002604 <SetupSingleShot+0x2cc>)
 80023ca:	f003 fe15 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_PerformRefSpadManagement(&VL53L0XDevs[i],
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	4a88      	ldr	r2, [pc, #544]	; (80025fc <SetupSingleShot+0x2c4>)
 80023da:	4413      	add	r3, r2
 80023dc:	f107 020f 	add.w	r2, r7, #15
 80023e0:	f107 0110 	add.w	r1, r7, #16
 80023e4:	4618      	mov	r0, r3
 80023e6:	f006 fa85 	bl	80088f4 <VL53L0X_PerformRefSpadManagement>
 80023ea:	4603      	mov	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]
					&refSpadCount, &isApertureSpads);
			if (status)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <SetupSingleShot+0xc2>
			{
				debug_printf("VL53L0X_PerformRefSpadManagement failed\n");
 80023f4:	4884      	ldr	r0, [pc, #528]	; (8002608 <SetupSingleShot+0x2d0>)
 80023f6:	f003 fdff 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_SetDeviceMode(&VL53L0XDevs[i],
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	4a7d      	ldr	r2, [pc, #500]	; (80025fc <SetupSingleShot+0x2c4>)
 8002406:	4413      	add	r3, r2
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f004 fca8 	bl	8006d60 <VL53L0X_SetDeviceMode>
 8002410:	4603      	mov	r3, r0
 8002412:	61bb      	str	r3, [r7, #24]
			VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
			if (status)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <SetupSingleShot+0xe8>
			{
				debug_printf("VL53L0X_SetDeviceMode failed\n");
 800241a:	487c      	ldr	r0, [pc, #496]	; (800260c <SetupSingleShot+0x2d4>)
 800241c:	f003 fdec 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i],
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	4a74      	ldr	r2, [pc, #464]	; (80025fc <SetupSingleShot+0x2c4>)
 800242c:	4413      	add	r3, r2
 800242e:	2201      	movs	r2, #1
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f005 f93c 	bl	80076b0 <VL53L0X_SetLimitCheckEnable>
 8002438:	4603      	mov	r3, r0
 800243a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
			if (status)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <SetupSingleShot+0x110>
			{
				debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 8002442:	4873      	ldr	r0, [pc, #460]	; (8002610 <SetupSingleShot+0x2d8>)
 8002444:	f003 fdd8 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckEnable(&VL53L0XDevs[i],
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a6a      	ldr	r2, [pc, #424]	; (80025fc <SetupSingleShot+0x2c4>)
 8002454:	4413      	add	r3, r2
 8002456:	2201      	movs	r2, #1
 8002458:	2101      	movs	r1, #1
 800245a:	4618      	mov	r0, r3
 800245c:	f005 f928 	bl	80076b0 <VL53L0X_SetLimitCheckEnable>
 8002460:	4603      	mov	r3, r0
 8002462:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
			if (status)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <SetupSingleShot+0x138>
			{
				debug_printf("VL53L0X_SetLimitCheckEnable failed\n");
 800246a:	4869      	ldr	r0, [pc, #420]	; (8002610 <SetupSingleShot+0x2d8>)
 800246c:	f003 fdc4 	bl	8005ff8 <uart_printf>
			}
			/* Ranging configuration */
			switch (rangingConfig)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d014      	beq.n	80024a0 <SetupSingleShot+0x168>
 8002476:	2b02      	cmp	r3, #2
 8002478:	dc2d      	bgt.n	80024d6 <SetupSingleShot+0x19e>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <SetupSingleShot+0x14c>
 800247e:	2b01      	cmp	r3, #1
 8002480:	d01b      	beq.n	80024ba <SetupSingleShot+0x182>
 8002482:	e028      	b.n	80024d6 <SetupSingleShot+0x19e>
			{
			case LONG_RANGE:
				signalLimit = (FixPoint1616_t) (0.1 * 65536);
 8002484:	f641 1399 	movw	r3, #6553	; 0x1999
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t) (60 * 65536);
 800248a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 33000;
 8002490:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8002494:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 18;
 8002496:	2312      	movs	r3, #18
 8002498:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 14;
 800249a:	230e      	movs	r3, #14
 800249c:	77bb      	strb	r3, [r7, #30]
				break;
 800249e:	e01d      	b.n	80024dc <SetupSingleShot+0x1a4>
			case HIGH_ACCURACY:
				signalLimit = (FixPoint1616_t) (0.25 * 65536);
 80024a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t) (18 * 65536);
 80024a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 200000;
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <SetupSingleShot+0x2dc>)
 80024ae:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 80024b0:	230e      	movs	r3, #14
 80024b2:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 80024b4:	230a      	movs	r3, #10
 80024b6:	77bb      	strb	r3, [r7, #30]
				break;
 80024b8:	e010      	b.n	80024dc <SetupSingleShot+0x1a4>
			case HIGH_SPEED:
				signalLimit = (FixPoint1616_t) (0.25 * 65536);
 80024ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
				sigmaLimit = (FixPoint1616_t) (32 * 65536);
 80024c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
				timingBudget = 20000;
 80024c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80024ca:	623b      	str	r3, [r7, #32]
				preRangeVcselPeriod = 14;
 80024cc:	230e      	movs	r3, #14
 80024ce:	77fb      	strb	r3, [r7, #31]
				finalRangeVcselPeriod = 10;
 80024d0:	230a      	movs	r3, #10
 80024d2:	77bb      	strb	r3, [r7, #30]
				break;
 80024d4:	e002      	b.n	80024dc <SetupSingleShot+0x1a4>
			default:
				debug_printf("Not Supported");
 80024d6:	4850      	ldr	r0, [pc, #320]	; (8002618 <SetupSingleShot+0x2e0>)
 80024d8:	f003 fd8e 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	4a45      	ldr	r2, [pc, #276]	; (80025fc <SetupSingleShot+0x2c4>)
 80024e8:	4413      	add	r3, r2
 80024ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ec:	2101      	movs	r1, #1
 80024ee:	4618      	mov	r0, r3
 80024f0:	f005 f9e2 	bl	80078b8 <VL53L0X_SetLimitCheckValue>
 80024f4:	4603      	mov	r3, r0
 80024f6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
			if (status)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <SetupSingleShot+0x1cc>
			{
				debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 80024fe:	4847      	ldr	r0, [pc, #284]	; (800261c <SetupSingleShot+0x2e4>)
 8002500:	f003 fd7a 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_SetLimitCheckValue(&VL53L0XDevs[i],
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <SetupSingleShot+0x2c4>)
 8002510:	4413      	add	r3, r2
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f005 f9ce 	bl	80078b8 <VL53L0X_SetLimitCheckValue>
 800251c:	4603      	mov	r3, r0
 800251e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
			if (status)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <SetupSingleShot+0x1f4>
			{
				debug_printf("VL53L0X_SetLimitCheckValue failed\n");
 8002526:	483d      	ldr	r0, [pc, #244]	; (800261c <SetupSingleShot+0x2e4>)
 8002528:	f003 fd66 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	4a31      	ldr	r2, [pc, #196]	; (80025fc <SetupSingleShot+0x2c4>)
 8002538:	4413      	add	r3, r2
 800253a:	6a39      	ldr	r1, [r7, #32]
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fceb 	bl	8006f18 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8002542:	4603      	mov	r3, r0
 8002544:	61bb      	str	r3, [r7, #24]
					&VL53L0XDevs[i], timingBudget);
			if (status)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <SetupSingleShot+0x21a>
			{
				debug_printf(
 800254c:	4834      	ldr	r0, [pc, #208]	; (8002620 <SetupSingleShot+0x2e8>)
 800254e:	f003 fd53 	bl	8005ff8 <uart_printf>
						"VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
			}

			status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <SetupSingleShot+0x2c4>)
 800255e:	4413      	add	r3, r2
 8002560:	7ffa      	ldrb	r2, [r7, #31]
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fd53 	bl	8007010 <VL53L0X_SetVcselPulsePeriod>
 800256a:	4603      	mov	r3, r0
 800256c:	61bb      	str	r3, [r7, #24]
			VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
			if (status)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <SetupSingleShot+0x242>
			{
				debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8002574:	482b      	ldr	r0, [pc, #172]	; (8002624 <SetupSingleShot+0x2ec>)
 8002576:	f003 fd3f 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_SetVcselPulsePeriod(&VL53L0XDevs[i],
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <SetupSingleShot+0x2c4>)
 8002586:	4413      	add	r3, r2
 8002588:	7fba      	ldrb	r2, [r7, #30]
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f004 fd3f 	bl	8007010 <VL53L0X_SetVcselPulsePeriod>
 8002592:	4603      	mov	r3, r0
 8002594:	61bb      	str	r3, [r7, #24]
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
			if (status)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <SetupSingleShot+0x26a>
			{
				debug_printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800259c:	4821      	ldr	r0, [pc, #132]	; (8002624 <SetupSingleShot+0x2ec>)
 800259e:	f003 fd2b 	bl	8005ff8 <uart_printf>
			}

			status = VL53L0X_PerformRefCalibration(&VL53L0XDevs[i],
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025a8:	fb02 f303 	mul.w	r3, r2, r3
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <SetupSingleShot+0x2c4>)
 80025ae:	4413      	add	r3, r2
 80025b0:	f107 0216 	add.w	r2, r7, #22
 80025b4:	f107 0117 	add.w	r1, r7, #23
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 fb7f 	bl	8007cbc <VL53L0X_PerformRefCalibration>
 80025be:	4603      	mov	r3, r0
 80025c0:	61bb      	str	r3, [r7, #24]
					&VhvSettings, &PhaseCal);
			if (status)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <SetupSingleShot+0x296>
			{
				debug_printf("VL53L0X_PerformRefCalibration failed\n");
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <SetupSingleShot+0x2cc>)
 80025ca:	f003 fd15 	bl	8005ff8 <uart_printf>
			}

			VL53L0XDevs[i].LeakyFirst = 1;
 80025ce:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <SetupSingleShot+0x2c4>)
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 2; i++)
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	3301      	adds	r3, #1
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f77f aeb8 	ble.w	8002362 <SetupSingleShot+0x2a>
		}
	}
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	3730      	adds	r7, #48	; 0x30
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000038 	.word	0x20000038
 8002600:	08010494 	.word	0x08010494
 8002604:	080104b4 	.word	0x080104b4
 8002608:	080104dc 	.word	0x080104dc
 800260c:	08010508 	.word	0x08010508
 8002610:	08010528 	.word	0x08010528
 8002614:	00030d40 	.word	0x00030d40
 8002618:	0801054c 	.word	0x0801054c
 800261c:	0801055c 	.word	0x0801055c
 8002620:	08010580 	.word	0x08010580
 8002624:	080105b8 	.word	0x080105b8

08002628 <Sensor_SetNewRange>:

/* Store new ranging data into the device structure, apply leaky integrator if needed */
void Sensor_SetNewRange(VL53L0X_Dev_t *pDev,
		VL53L0X_RangingMeasurementData_t *pRange)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	if (pRange->RangeStatus == 0)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	7e1b      	ldrb	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d124      	bne.n	8002684 <Sensor_SetNewRange+0x5c>
	{
		if (pDev->LeakyFirst)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <Sensor_SetNewRange+0x32>
		{
			pDev->LeakyFirst = 0;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
			pDev->LeakyRange = pRange->RangeMilliMeter;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	891b      	ldrh	r3, [r3, #8]
 8002650:	461a      	mov	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		}
	} else
	{
		pDev->LeakyFirst = 1;
	}
}
 8002658:	e018      	b.n	800268c <Sensor_SetNewRange+0x64>
			pDev->LeakyRange = (pDev->LeakyRange * LeakyFactorFix8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <Sensor_SetNewRange+0x70>)
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	fb03 f202 	mul.w	r2, r3, r2
					+ (256 - LeakyFactorFix8) * pRange->RangeMilliMeter) >> 8;
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <Sensor_SetNewRange+0x70>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	8909      	ldrh	r1, [r1, #8]
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	121a      	asrs	r2, r3, #8
			pDev->LeakyRange = (pDev->LeakyRange * LeakyFactorFix8
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
}
 8002682:	e003      	b.n	800268c <Sensor_SetNewRange+0x64>
		pDev->LeakyFirst = 1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	20000034 	.word	0x20000034

0800269c <InitSensors>:

void InitSensors(I2C_HandleTypeDef *hi2c, RangingConfig_e rangingConfig)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	70fb      	strb	r3, [r7, #3]
	int i;
	uint16_t Id = 0xEEAA;
 80026a8:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 80026ac:	81fb      	strh	r3, [r7, #14]
	int status;
	int FinalAddress;
	nDevPresent = 0;
 80026ae:	4b69      	ldr	r3, [pc, #420]	; (8002854 <InitSensors+0x1b8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    SetI2C(hi2c);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fdfb 	bl	80022b0 <SetI2C>

	/* Reset all */
	for (i = 0; i < 3; i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e007      	b.n	80026d0 <InitSensors+0x34>
		status = ResetId(i, 0);
 80026c0:	2100      	movs	r1, #0
 80026c2:	69f8      	ldr	r0, [r7, #28]
 80026c4:	f7ff fe16 	bl	80022f4 <ResetId>
 80026c8:	61b8      	str	r0, [r7, #24]
	for (i = 0; i < 3; i++)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	ddf4      	ble.n	80026c0 <InitSensors+0x24>
	HAL_Delay(2);
 80026d6:	2002      	movs	r0, #2
 80026d8:	f7ff f8dc 	bl	8001894 <HAL_Delay>

	/* detect all sensors */
	for (i = 0; i < 2; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	e0a6      	b.n	8002830 <InitSensors+0x194>
	{
		VL53L0X_Dev_t *pDev;
		pDev = &VL53L0XDevs[i];
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	4a5a      	ldr	r2, [pc, #360]	; (8002858 <InitSensors+0x1bc>)
 80026ee:	4413      	add	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
		pDev->I2cDevAddr = 0x52;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2252      	movs	r2, #82	; 0x52
 80026f6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		pDev->Present = 0;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		status = ResetId(pDev->Id, 1); // XNUCLEO53L0A1_ResetId
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002708:	2101      	movs	r1, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fdf2 	bl	80022f4 <ResetId>
 8002710:	61b8      	str	r0, [r7, #24]
		HAL_Delay(2);
 8002712:	2002      	movs	r0, #2
 8002714:	f7ff f8be 	bl	8001894 <HAL_Delay>
		FinalAddress = 0x52 + (i + 1) * 5;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	3352      	adds	r3, #82	; 0x52
 8002724:	613b      	str	r3, [r7, #16]

		do
		{
			/* Set I2C standard mode (400 KHz) before doing the first register access */
			if (status == VL53L0X_ERROR_NONE)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d106      	bne.n	800273a <InitSensors+0x9e>
				status = VL53L0X_WrByte(pDev, 0x88, 0x00);
 800272c:	2200      	movs	r2, #0
 800272e:	2188      	movs	r1, #136	; 0x88
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f003 fd5d 	bl	80061f0 <VL53L0X_WrByte>
 8002736:	4603      	mov	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]

			/* Try to read one register using default 0x52 address */
			status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800273a:	f107 030e 	add.w	r3, r7, #14
 800273e:	461a      	mov	r2, r3
 8002740:	21c0      	movs	r1, #192	; 0xc0
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f003 fe00 	bl	8006348 <VL53L0X_RdWord>
 8002748:	4603      	mov	r3, r0
 800274a:	61bb      	str	r3, [r7, #24]
					&Id);
			if (status)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <InitSensors+0xc0>
			{
				debug_printf("#%d Read id fail\n", i);
 8002752:	69f9      	ldr	r1, [r7, #28]
 8002754:	4841      	ldr	r0, [pc, #260]	; (800285c <InitSensors+0x1c0>)
 8002756:	f003 fc4f 	bl	8005ff8 <uart_printf>
				break;
 800275a:	e05f      	b.n	800281c <InitSensors+0x180>
			}
			if (Id == 0xEEAA)
 800275c:	89fb      	ldrh	r3, [r7, #14]
 800275e:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8002762:	4293      	cmp	r3, r2
 8002764:	d152      	bne.n	800280c <InitSensors+0x170>
			{
				/* Sensor is found => Change its I2C address to final one */
				status = VL53L0X_SetDeviceAddress(pDev, FinalAddress);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	6978      	ldr	r0, [r7, #20]
 800276e:	f003 feb7 	bl	80064e0 <VL53L0X_SetDeviceAddress>
 8002772:	4603      	mov	r3, r0
 8002774:	61bb      	str	r3, [r7, #24]
				if (status != 0)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <InitSensors+0xea>
				{
					debug_printf("#i VL53L0X_SetDeviceAddress fail\n", i);
 800277c:	69f9      	ldr	r1, [r7, #28]
 800277e:	4838      	ldr	r0, [pc, #224]	; (8002860 <InitSensors+0x1c4>)
 8002780:	f003 fc3a 	bl	8005ff8 <uart_printf>
					break;
 8002784:	e04a      	b.n	800281c <InitSensors+0x180>
				}
				pDev->I2cDevAddr = FinalAddress;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
				/* Check all is OK with the new I2C address and initialize the sensor */
				status = VL53L0X_RdWord(pDev,
 8002790:	f107 030e 	add.w	r3, r7, #14
 8002794:	461a      	mov	r2, r3
 8002796:	21c0      	movs	r1, #192	; 0xc0
 8002798:	6978      	ldr	r0, [r7, #20]
 800279a:	f003 fdd5 	bl	8006348 <VL53L0X_RdWord>
 800279e:	4603      	mov	r3, r0
 80027a0:	61bb      	str	r3, [r7, #24]
				VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
				if (status != 0)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <InitSensors+0x116>
				{
					debug_printf("#i VL53L0X_RdWord fail\n", i);
 80027a8:	69f9      	ldr	r1, [r7, #28]
 80027aa:	482e      	ldr	r0, [pc, #184]	; (8002864 <InitSensors+0x1c8>)
 80027ac:	f003 fc24 	bl	8005ff8 <uart_printf>
					break;
 80027b0:	e034      	b.n	800281c <InitSensors+0x180>
				}

				status = VL53L0X_DataInit(pDev);
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f003 fed8 	bl	8006568 <VL53L0X_DataInit>
 80027b8:	4603      	mov	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
				if (status == 0)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d11f      	bne.n	8002802 <InitSensors+0x166>
				{
					pDev->Present = 1;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
				} else
				{
					debug_printf("VL53L0X_DataInit %d fail\n", i);
					break;
				}
				trace_printf("VL53L0X %d Present and initiated to final 0x%x\n",
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
						pDev->Id, pDev->I2cDevAddr);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
				trace_printf("VL53L0X %d Present and initiated to final 0x%x\n",
 80027d6:	461a      	mov	r2, r3
 80027d8:	4823      	ldr	r0, [pc, #140]	; (8002868 <InitSensors+0x1cc>)
 80027da:	f003 fc0d 	bl	8005ff8 <uart_printf>
				nDevPresent++;
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <InitSensors+0x1b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <InitSensors+0x1b8>)
 80027e6:	6013      	str	r3, [r2, #0]
				nDevMask |= 1 << i;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	409a      	lsls	r2, r3
 80027ee:	4b1f      	ldr	r3, [pc, #124]	; (800286c <InitSensors+0x1d0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	4a1d      	ldr	r2, [pc, #116]	; (800286c <InitSensors+0x1d0>)
 80027f6:	6013      	str	r3, [r2, #0]
				pDev->Present = 1;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8002800:	e00c      	b.n	800281c <InitSensors+0x180>
					debug_printf("VL53L0X_DataInit %d fail\n", i);
 8002802:	69f9      	ldr	r1, [r7, #28]
 8002804:	481a      	ldr	r0, [pc, #104]	; (8002870 <InitSensors+0x1d4>)
 8002806:	f003 fbf7 	bl	8005ff8 <uart_printf>
					break;
 800280a:	e007      	b.n	800281c <InitSensors+0x180>
			} 
            else
			{
				debug_printf("#%d unknown ID %x\n", i, Id);
 800280c:	89fb      	ldrh	r3, [r7, #14]
 800280e:	461a      	mov	r2, r3
 8002810:	69f9      	ldr	r1, [r7, #28]
 8002812:	4818      	ldr	r0, [pc, #96]	; (8002874 <InitSensors+0x1d8>)
 8002814:	f003 fbf0 	bl	8005ff8 <uart_printf>
				status = 1;
 8002818:	2301      	movs	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
			}

		} while (0);
		/* if fail r can't use for any reason then put the  device back to reset */
		if (status)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <InitSensors+0x18e>
		{
			ResetId(i, 0);
 8002822:	2100      	movs	r1, #0
 8002824:	69f8      	ldr	r0, [r7, #28]
 8002826:	f7ff fd65 	bl	80022f4 <ResetId>
	for (i = 0; i < 2; i++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	f77f af55 	ble.w	80026e2 <InitSensors+0x46>
		}
	}
	if ((nDevPresent <= 0))
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <InitSensors+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	dc00      	bgt.n	8002842 <InitSensors+0x1a6>
	{
//		HandleError(ERR_DETECT);
		while(1);
 8002840:	e7fe      	b.n	8002840 <InitSensors+0x1a4>
	};

    SetupSingleShot(rangingConfig); // calibration
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fd77 	bl	8002338 <SetupSingleShot>
}
 800284a:	bf00      	nop
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20001338 	.word	0x20001338
 8002858:	20000038 	.word	0x20000038
 800285c:	080105dc 	.word	0x080105dc
 8002860:	080105f0 	.word	0x080105f0
 8002864:	08010614 	.word	0x08010614
 8002868:	08010648 	.word	0x08010648
 800286c:	20001334 	.word	0x20001334
 8002870:	0801062c 	.word	0x0801062c
 8002874:	08010678 	.word	0x08010678

08002878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_MspInit+0x4c>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80028b6:	2005      	movs	r0, #5
 80028b8:	f009 fd74 	bl	800c3a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_I2C_MspInit+0x128>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d12d      	bne.n	8002946 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a40      	ldr	r2, [pc, #256]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290c:	2312      	movs	r3, #18
 800290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002918:	2304      	movs	r3, #4
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	f107 031c 	add.w	r3, r7, #28
 8002920:	4619      	mov	r1, r3
 8002922:	4835      	ldr	r0, [pc, #212]	; (80029f8 <HAL_I2C_MspInit+0x130>)
 8002924:	f00a f8f0 	bl	800cb08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 8002932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002936:	6413      	str	r3, [r2, #64]	; 0x40
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002944:	e050      	b.n	80029e8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <HAL_I2C_MspInit+0x134>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d14b      	bne.n	80029e8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6313      	str	r3, [r2, #48]	; 0x30
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6313      	str	r3, [r2, #48]	; 0x30
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298e:	2312      	movs	r3, #18
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800299a:	2304      	movs	r3, #4
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299e:	f107 031c 	add.w	r3, r7, #28
 80029a2:	4619      	mov	r1, r3
 80029a4:	4816      	ldr	r0, [pc, #88]	; (8002a00 <HAL_I2C_MspInit+0x138>)
 80029a6:	f00a f8af 	bl	800cb08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b0:	2312      	movs	r3, #18
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029bc:	2304      	movs	r3, #4
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	4619      	mov	r1, r3
 80029c6:	480f      	ldr	r0, [pc, #60]	; (8002a04 <HAL_I2C_MspInit+0x13c>)
 80029c8:	f00a f89e 	bl	800cb08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 80029d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029da:	6413      	str	r3, [r2, #64]	; 0x40
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_I2C_MspInit+0x12c>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
}
 80029e8:	bf00      	nop
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40005400 	.word	0x40005400
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40005c00 	.word	0x40005c00
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020000 	.word	0x40020000

08002a08 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <HAL_TIM_OC_MspInit+0x3c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10d      	bne.n	8002a36 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_TIM_OC_MspInit+0x40>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_TIM_OC_MspInit+0x40>)
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_TIM_OC_MspInit+0x40>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_TIM_Base_MspInit+0x48>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d115      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_TIM_Base_MspInit+0x4c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	4a0c      	ldr	r2, [pc, #48]	; (8002a98 <HAL_TIM_Base_MspInit+0x4c>)
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_TIM_Base_MspInit+0x4c>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	2019      	movs	r0, #25
 8002a80:	f009 fc9b 	bl	800c3ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a84:	2019      	movs	r0, #25
 8002a86:	f009 fcb4 	bl	800c3f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40014400 	.word	0x40014400
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <HAL_TIM_MspPostInit+0x68>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d11d      	bne.n	8002afa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_TIM_MspPostInit+0x6c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_TIM_MspPostInit+0x6c>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_TIM_MspPostInit+0x6c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ada:	2301      	movs	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002aea:	2302      	movs	r3, #2
 8002aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	; (8002b0c <HAL_TIM_MspPostInit+0x70>)
 8002af6:	f00a f807 	bl	800cb08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002afa:	bf00      	nop
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40000c00 	.word	0x40000c00
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020000 	.word	0x40020000

08002b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a34      	ldr	r2, [pc, #208]	; (8002c00 <HAL_UART_MspInit+0xf0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d161      	bne.n	8002bf6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_UART_MspInit+0xf4>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <HAL_UART_MspInit+0xf4>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <HAL_UART_MspInit+0xf4>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_UART_MspInit+0xf4>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <HAL_UART_MspInit+0xf4>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_UART_MspInit+0xf4>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4820      	ldr	r0, [pc, #128]	; (8002c08 <HAL_UART_MspInit+0xf8>)
 8002b86:	f009 ffbf 	bl	800cb08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b8c:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <HAL_UART_MspInit+0x100>)
 8002b8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002b90:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b96:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002baa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bbe:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bca:	4810      	ldr	r0, [pc, #64]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bcc:	f009 fc2c 	bl	800c428 <HAL_DMA_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002bd6:	f7ff fb66 	bl	80022a6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <HAL_UART_MspInit+0xfc>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2026      	movs	r0, #38	; 0x26
 8002bec:	f009 fbe5 	bl	800c3ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf0:	2026      	movs	r0, #38	; 0x26
 8002bf2:	f009 fbfe 	bl	800c3f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	; 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	20000a78 	.word	0x20000a78
 8002c10:	400260a0 	.word	0x400260a0

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <NMI_Handler+0x4>

08002c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <HardFault_Handler+0x4>

08002c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <MemManage_Handler+0x4>

08002c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2a:	e7fe      	b.n	8002c2a <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002c60:	2010      	movs	r0, #16
 8002c62:	f00a f8ef 	bl	800ce44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <DMA1_Stream6_IRQHandler+0x10>)
 8002c72:	f009 fcdf 	bl	800c634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000a78 	.word	0x20000a78

08002c80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c86:	f00b fe24 	bl	800e8d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200009ec 	.word	0x200009ec

08002c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <_sbrk+0x5c>)
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <_sbrk+0x60>)
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <_sbrk+0x64>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <_sbrk+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc4:	f00c fea4 	bl	800fa10 <__errno>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	220c      	movs	r2, #12
 8002ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e009      	b.n	8002ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_sbrk+0x64>)
 8002ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20018000 	.word	0x20018000
 8002cf4:	00000400 	.word	0x00000400
 8002cf8:	2000133c 	.word	0x2000133c
 8002cfc:	200019c0 	.word	0x200019c0

08002d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <SystemInit+0x20>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <SystemInit+0x20>)
 8002d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d28:	480d      	ldr	r0, [pc, #52]	; (8002d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d2a:	490e      	ldr	r1, [pc, #56]	; (8002d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d40:	4c0b      	ldr	r4, [pc, #44]	; (8002d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d4e:	f7ff ffd7 	bl	8002d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d52:	f00c fe63 	bl	800fa1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d56:	f7fe fec9 	bl	8001aec <main>
  bx  lr    
 8002d5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d64:	200006a4 	.word	0x200006a4
  ldr r2, =_sidata
 8002d68:	080118f4 	.word	0x080118f4
  ldr r2, =_sbss
 8002d6c:	200006a8 	.word	0x200006a8
  ldr r4, =_ebss
 8002d70:	200019c0 	.word	0x200019c0

08002d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC_IRQHandler>
	...

08002d78 <autorun_exec>:
uint8_t curr_step;
uint8_t curr_step_time;
_Bool autorun_active;

static void autorun_exec(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
	curr_step_time = 0;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <autorun_exec+0x70>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
	// set state
	const struct autostep_ *sp = &autopgm[curr_step];
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <autorun_exec+0x74>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <autorun_exec+0x78>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	607b      	str	r3, [r7, #4]
	uint8_t l = sp->locnum;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	70fb      	strb	r3, [r7, #3]
	loco[l].rev = sp->rev;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7898      	ldrb	r0, [r3, #2]
 8002d9c:	4915      	ldr	r1, [pc, #84]	; (8002df4 <autorun_exec+0x7c>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3301      	adds	r3, #1
 8002daa:	4602      	mov	r2, r0
 8002dac:	701a      	strb	r2, [r3, #0]
	loco[l].dspeed = sp->speed;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	78d8      	ldrb	r0, [r3, #3]
 8002db4:	490f      	ldr	r1, [pc, #60]	; (8002df4 <autorun_exec+0x7c>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	701a      	strb	r2, [r3, #0]
	loco[l].fun.w[0] = sp->f0_28;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	4809      	ldr	r0, [pc, #36]	; (8002df4 <autorun_exec+0x7c>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4403      	add	r3, r0
 8002dd8:	3304      	adds	r3, #4
 8002dda:	6019      	str	r1, [r3, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	200013e1 	.word	0x200013e1
 8002dec:	200013e0 	.word	0x200013e0
 8002df0:	20001340 	.word	0x20001340
 8002df4:	200013e4 	.word	0x200013e4

08002df8 <autorun_start>:

void autorun_start(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
	curr_step = 0;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <autorun_start+0x20>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
	if (autopgm[0].stime)
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <autorun_start+0x24>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <autorun_start+0x1c>
	{
		autorun_active = 1;
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <autorun_start+0x28>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
		autorun_exec();
 8002e10:	f7ff ffb2 	bl	8002d78 <autorun_exec>
	}
}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200013e0 	.word	0x200013e0
 8002e1c:	20001340 	.word	0x20001340
 8002e20:	200013e2 	.word	0x200013e2

08002e24 <autorun_stop>:

void autorun_stop(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	autorun_active = 0;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <autorun_stop+0x14>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	200013e2 	.word	0x200013e2

08002e3c <autorun>:

// called every second
void autorun(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
	if (autorun_active && ++curr_step_time == autopgm[curr_step].stime)
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <autorun+0x78>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d032      	beq.n	8002eae <autorun+0x72>
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <autorun+0x7c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <autorun+0x7c>)
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <autorun+0x7c>)
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <autorun+0x80>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <autorun+0x84>)
 8002e60:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d122      	bne.n	8002eae <autorun+0x72>
	{
		if (++curr_step == NAUTOSTEPS || autopgm[curr_step].stime == 0)
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <autorun+0x80>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <autorun+0x80>)
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <autorun+0x80>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b14      	cmp	r3, #20
 8002e7a:	d007      	beq.n	8002e8c <autorun+0x50>
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <autorun+0x80>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <autorun+0x84>)
 8002e84:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <autorun+0x56>
			curr_step = 0;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <autorun+0x80>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
		if (autopgm[curr_step].stime == 0)
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <autorun+0x80>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <autorun+0x84>)
 8002e9a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <autorun+0x6e>
			autorun_active = 0;
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <autorun+0x78>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
		else
			autorun_exec();
	}
}
 8002ea8:	e001      	b.n	8002eae <autorun+0x72>
			autorun_exec();
 8002eaa:	f7ff ff65 	bl	8002d78 <autorun_exec>
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200013e2 	.word	0x200013e2
 8002eb8:	200013e1 	.word	0x200013e1
 8002ebc:	200013e0 	.word	0x200013e0
 8002ec0:	20001340 	.word	0x20001340

08002ec4 <__NVIC_SetPendingIRQ>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	db0c      	blt.n	8002ef0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4907      	ldr	r1, [pc, #28]	; (8002efc <__NVIC_SetPendingIRQ+0x38>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eea:	3340      	adds	r3, #64	; 0x40
 8002eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100

08002f00 <prepare_idle_packet>:
	.pktbuf[0] = 0xff,
	.pktbuf[1] = 0,
};

static void prepare_idle_packet(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
	sendpkt.pktbuf[0] = 0xff;
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <prepare_idle_packet+0x28>)
 8002f06:	22ff      	movs	r2, #255	; 0xff
 8002f08:	709a      	strb	r2, [r3, #2]
	sendpkt.pktbuf[1] = 0;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <prepare_idle_packet+0x28>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	70da      	strb	r2, [r3, #3]
	sendpkt.pktlen = 2;
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <prepare_idle_packet+0x28>)
 8002f12:	2202      	movs	r2, #2
 8002f14:	705a      	strb	r2, [r3, #1]
	sendpkt.preamble_len = OPM_PRE_LEN;
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <prepare_idle_packet+0x28>)
 8002f18:	2210      	movs	r2, #16
 8002f1a:	701a      	strb	r2, [r3, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000035c 	.word	0x2000035c

08002f2c <prepare_reset_packet>:

static void prepare_reset_packet(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
	// check!!!!
	sendpkt.pktbuf[0] = 0;
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <prepare_reset_packet+0x28>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	709a      	strb	r2, [r3, #2]
	sendpkt.pktbuf[1] = 0;
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <prepare_reset_packet+0x28>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	70da      	strb	r2, [r3, #3]
	sendpkt.pktlen = 2;
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <prepare_reset_packet+0x28>)
 8002f3e:	2202      	movs	r2, #2
 8002f40:	705a      	strb	r2, [r3, #1]
	sendpkt.preamble_len = PGM_PRE_LEN;
 8002f42:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <prepare_reset_packet+0x28>)
 8002f44:	2214      	movs	r2, #20
 8002f46:	701a      	strb	r2, [r3, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	2000035c 	.word	0x2000035c

08002f58 <storeld>:
#define LDCOUNT 4u
static uint8_t lastdev[LDCOUNT];
static uint8_t ldidx;

static void storeld(uint8_t n)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
	lastdev[ldidx++] = n;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <storeld+0x38>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	b2d1      	uxtb	r1, r2
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <storeld+0x38>)
 8002f6c:	7011      	strb	r1, [r2, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <storeld+0x3c>)
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	5453      	strb	r3, [r2, r1]
	ldidx %= LDCOUNT;
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <storeld+0x38>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <storeld+0x38>)
 8002f82:	701a      	strb	r2, [r3, #0]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	20001678 	.word	0x20001678
 8002f94:	20001674 	.word	0x20001674

08002f98 <add2pkt>:
// utility routines for packet construction ==============================
// add 1 byte to a packet, increment loco phase
static void add2pkt(uint8_t v)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
	sendpkt.pktbuf[sendpkt.pktlen++] = v;
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <add2pkt+0x2c>)
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	b2d1      	uxtb	r1, r2
 8002faa:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <add2pkt+0x2c>)
 8002fac:	7051      	strb	r1, [r2, #1]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <add2pkt+0x2c>)
 8002fb2:	4413      	add	r3, r2
 8002fb4:	79fa      	ldrb	r2, [r7, #7]
 8002fb6:	709a      	strb	r2, [r3, #2]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	2000035c 	.word	0x2000035c

08002fc8 <mkspeed128>:
	add2pkt(c);
	add2pkt1(v);
}

static uint8_t mkspeed128(uint8_t locoidx)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t speed = loco[locoidx].dspeed;
 8002fd2:	79fa      	ldrb	r2, [r7, #7]
 8002fd4:	491c      	ldr	r1, [pc, #112]	; (8003048 <mkspeed128+0x80>)
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	73fb      	strb	r3, [r7, #15]
	// speed /= 2;	// Katowice !
	if (speed > 126)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b7e      	cmp	r3, #126	; 0x7e
 8002fea:	d901      	bls.n	8002ff0 <mkspeed128+0x28>
		speed = 126;
 8002fec:	237e      	movs	r3, #126	; 0x7e
 8002fee:	73fb      	strb	r3, [r7, #15]
	if (speed)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <mkspeed128+0x34>
		speed++;	// skip step 1 (estop)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
	if (loco[locoidx].estop)
 8002ffc:	79fa      	ldrb	r2, [r7, #7]
 8002ffe:	4912      	ldr	r1, [pc, #72]	; (8003048 <mkspeed128+0x80>)
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <mkspeed128+0x4c>
		speed = 1;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
	return !loco[locoidx].rev << 7 | speed;
 8003014:	79fa      	ldrb	r2, [r7, #7]
 8003016:	490c      	ldr	r1, [pc, #48]	; (8003048 <mkspeed128+0x80>)
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3301      	adds	r3, #1
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	f083 0301 	eor.w	r3, r3, #1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	01db      	lsls	r3, r3, #7
 800302e:	b25a      	sxtb	r2, r3
 8003030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003034:	4313      	orrs	r3, r2
 8003036:	b25b      	sxtb	r3, r3
 8003038:	b2db      	uxtb	r3, r3
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	200013e4 	.word	0x200013e4

0800304c <mkspeed28pkt>:

static uint8_t mkspeed28pkt(uint8_t locoidx)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	uint8_t speed = loco[locoidx].dspeed;
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	4921      	ldr	r1, [pc, #132]	; (80030e0 <mkspeed28pkt+0x94>)
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3302      	adds	r3, #2
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	73fb      	strb	r3, [r7, #15]
	if (speed > 28)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b1c      	cmp	r3, #28
 800306e:	d901      	bls.n	8003074 <mkspeed28pkt+0x28>
		speed = 28;
 8003070:	231c      	movs	r3, #28
 8003072:	73fb      	strb	r3, [r7, #15]
	if (speed)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <mkspeed28pkt+0x34>
		speed += 3;	// skip step 1 (estop)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	3303      	adds	r3, #3
 800307e:	73fb      	strb	r3, [r7, #15]
	// 0, 4..31
	if (loco[locoidx].estop)
 8003080:	79fa      	ldrb	r2, [r7, #7]
 8003082:	4917      	ldr	r1, [pc, #92]	; (80030e0 <mkspeed28pkt+0x94>)
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <mkspeed28pkt+0x4c>
		speed = 2;
 8003094:	2302      	movs	r3, #2
 8003096:	73fb      	strb	r3, [r7, #15]
	return 2u << 5 | !loco[locoidx].rev << 5 | (speed & 1) << 4 | speed >> 1;
 8003098:	79fa      	ldrb	r2, [r7, #7]
 800309a:	4911      	ldr	r1, [pc, #68]	; (80030e0 <mkspeed28pkt+0x94>)
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3301      	adds	r3, #1
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	015b      	lsls	r3, r3, #5
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d2:	b2db      	uxtb	r3, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	200013e4 	.word	0x200013e4

080030e4 <mkf14pkt>:

static uint8_t mkf14pkt(uint8_t locoidx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
	return 4u << 5 | loco[locoidx].fun.bf.f4_1 | loco[locoidx].fun.bf.fl << 4;
 80030ee:	79fa      	ldrb	r2, [r7, #7]
 80030f0:	4911      	ldr	r1, [pc, #68]	; (8003138 <mkf14pkt+0x54>)
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	791b      	ldrb	r3, [r3, #4]
 80030fe:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4618      	mov	r0, r3
 8003106:	79fa      	ldrb	r2, [r7, #7]
 8003108:	490b      	ldr	r1, [pc, #44]	; (8003138 <mkf14pkt+0x54>)
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	791b      	ldrb	r3, [r3, #4]
 8003116:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	b2db      	uxtb	r3, r3
 8003120:	4303      	orrs	r3, r0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003128:	b2db      	uxtb	r3, r3
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	200013e4 	.word	0x200013e4

0800313c <USART6_IRQHandler>:
	A classic packet may have up to 5 payload bytes + checksum.
	With 6 or more payload bytes, CRC is added before the checksum,
	so the packet is at least 8 bytes long (there are no 7-byte packets in pure DCC standard).
*/
void DCC_PktAs_IRQHandler(void)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
	static uint8_t seqidx;
#endif	
	static _Bool dumping;
	static _Bool need_another_pass;
	
	switch (astate)
 8003142:	4b90      	ldr	r3, [pc, #576]	; (8003384 <USART6_IRQHandler+0x248>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b03      	cmp	r3, #3
 8003148:	f200 83b8 	bhi.w	80038bc <USART6_IRQHandler+0x780>
 800314c:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <USART6_IRQHandler+0x18>)
 800314e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003152:	bf00      	nop
 8003154:	08003165 	.word	0x08003165
 8003158:	08003305 	.word	0x08003305
 800315c:	08003759 	.word	0x08003759
 8003160:	08003789 	.word	0x08003789
	{
	case AS_IDLE:	// nothing to do, transmitting idle packets
		if (!dccs.dump_rq)
 8003164:	4b88      	ldr	r3, [pc, #544]	; (8003388 <USART6_IRQHandler+0x24c>)
 8003166:	7b9b      	ldrb	r3, [r3, #14]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <USART6_IRQHandler+0x36>
			dumping = 0;
 800316c:	4b87      	ldr	r3, [pc, #540]	; (800338c <USART6_IRQHandler+0x250>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
		//pktlen = 2;	// keep sending idle
		if (pkt_repeat)	// must repeat idle
 8003172:	4b87      	ldr	r3, [pc, #540]	; (8003390 <USART6_IRQHandler+0x254>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <USART6_IRQHandler+0x4c>
		{
			--pkt_repeat;
 800317a:	4b85      	ldr	r3, [pc, #532]	; (8003390 <USART6_IRQHandler+0x254>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	3b01      	subs	r3, #1
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4b83      	ldr	r3, [pc, #524]	; (8003390 <USART6_IRQHandler+0x254>)
 8003184:	701a      	strb	r2, [r3, #0]
				astate = AS_LOCO;
				// no packet is prepared here, so idle is transmitted again!!!
			}
			//else	// no active device found - stay in idle
		}
		break;
 8003186:	e394      	b.n	80038b2 <USART6_IRQHandler+0x776>
		else if (dccs.pgmmode)	// programming mode switch request
 8003188:	4b7f      	ldr	r3, [pc, #508]	; (8003388 <USART6_IRQHandler+0x24c>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <USART6_IRQHandler+0x62>
			astate = AS_PGM;
 8003190:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <USART6_IRQHandler+0x248>)
 8003192:	2203      	movs	r2, #3
 8003194:	701a      	strb	r2, [r3, #0]
			pgm_seq = PGM_START;
 8003196:	4b7f      	ldr	r3, [pc, #508]	; (8003394 <USART6_IRQHandler+0x258>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
		break;
 800319c:	e389      	b.n	80038b2 <USART6_IRQHandler+0x776>
		else if (dccs.pgm_rq)
 800319e:	4b7a      	ldr	r3, [pc, #488]	; (8003388 <USART6_IRQHandler+0x24c>)
 80031a0:	78db      	ldrb	r3, [r3, #3]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d011      	beq.n	80031cc <USART6_IRQHandler+0x90>
			memcpy(sendpkt.pktbuf, dccs.cmdpkt, dccs.cmdpktlen);
 80031a8:	4b77      	ldr	r3, [pc, #476]	; (8003388 <USART6_IRQHandler+0x24c>)
 80031aa:	7adb      	ldrb	r3, [r3, #11]
 80031ac:	461a      	mov	r2, r3
 80031ae:	497a      	ldr	r1, [pc, #488]	; (8003398 <USART6_IRQHandler+0x25c>)
 80031b0:	487a      	ldr	r0, [pc, #488]	; (800339c <USART6_IRQHandler+0x260>)
 80031b2:	f00c fc57 	bl	800fa64 <memcpy>
			sendpkt.pktlen = dccs.cmdpktlen;
 80031b6:	4b74      	ldr	r3, [pc, #464]	; (8003388 <USART6_IRQHandler+0x24c>)
 80031b8:	7ada      	ldrb	r2, [r3, #11]
 80031ba:	4b79      	ldr	r3, [pc, #484]	; (80033a0 <USART6_IRQHandler+0x264>)
 80031bc:	705a      	strb	r2, [r3, #1]
			pkt_repeat = 3;	// 2 are required
 80031be:	4b74      	ldr	r3, [pc, #464]	; (8003390 <USART6_IRQHandler+0x254>)
 80031c0:	2203      	movs	r2, #3
 80031c2:	701a      	strb	r2, [r3, #0]
			astate = AS_POM;
 80031c4:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <USART6_IRQHandler+0x248>)
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]
		break;
 80031ca:	e372      	b.n	80038b2 <USART6_IRQHandler+0x776>
			if (dccs.dump_rq)
 80031cc:	4b6e      	ldr	r3, [pc, #440]	; (8003388 <USART6_IRQHandler+0x24c>)
 80031ce:	7b9b      	ldrb	r3, [r3, #14]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <USART6_IRQHandler+0xac>
				if (dccs.dump_rq == 1)
 80031d4:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <USART6_IRQHandler+0x24c>)
 80031d6:	7b9b      	ldrb	r3, [r3, #14]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <USART6_IRQHandler+0xa6>
					dccs.dump_rq = 0;
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <USART6_IRQHandler+0x24c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	739a      	strb	r2, [r3, #14]
				dumping = 1;
 80031e2:	4b6a      	ldr	r3, [pc, #424]	; (800338c <USART6_IRQHandler+0x250>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
			for (firstloco = 0; firstloco < NDEVICES && !cd.n.dev[firstloco].flags.w; firstloco++);
 80031e8:	4b6e      	ldr	r3, [pc, #440]	; (80033a4 <USART6_IRQHandler+0x268>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e005      	b.n	80031fc <USART6_IRQHandler+0xc0>
 80031f0:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <USART6_IRQHandler+0x268>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <USART6_IRQHandler+0x268>)
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	4b69      	ldr	r3, [pc, #420]	; (80033a4 <USART6_IRQHandler+0x268>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b1f      	cmp	r3, #31
 8003202:	d807      	bhi.n	8003214 <USART6_IRQHandler+0xd8>
 8003204:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <USART6_IRQHandler+0x268>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4a67      	ldr	r2, [pc, #412]	; (80033a8 <USART6_IRQHandler+0x26c>)
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	88db      	ldrh	r3, [r3, #6]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ed      	beq.n	80031f0 <USART6_IRQHandler+0xb4>
			if (firstloco < NDEVICES)
 8003214:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <USART6_IRQHandler+0x268>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b1f      	cmp	r3, #31
 800321a:	f200 834a 	bhi.w	80038b2 <USART6_IRQHandler+0x776>
				oredflags = cd.n.dev[firstloco].flags.w;
 800321e:	4b61      	ldr	r3, [pc, #388]	; (80033a4 <USART6_IRQHandler+0x268>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	4a61      	ldr	r2, [pc, #388]	; (80033a8 <USART6_IRQHandler+0x26c>)
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	88da      	ldrh	r2, [r3, #6]
 800322a:	4b60      	ldr	r3, [pc, #384]	; (80033ac <USART6_IRQHandler+0x270>)
 800322c:	801a      	strh	r2, [r3, #0]
				loco[firstloco].phase = 0;	// new - reset loco phase
 800322e:	4b5d      	ldr	r3, [pc, #372]	; (80033a4 <USART6_IRQHandler+0x268>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	4a5e      	ldr	r2, [pc, #376]	; (80033b0 <USART6_IRQHandler+0x274>)
 8003236:	460b      	mov	r3, r1
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3311      	adds	r3, #17
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
				for (uint8_t li = firstloco + 1; li < NDEVICES; li++)
 8003246:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <USART6_IRQHandler+0x268>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	71fb      	strb	r3, [r7, #7]
 800324e:	e017      	b.n	8003280 <USART6_IRQHandler+0x144>
					oredflags |= cd.n.dev[li].flags.w;
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	4a55      	ldr	r2, [pc, #340]	; (80033a8 <USART6_IRQHandler+0x26c>)
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	88da      	ldrh	r2, [r3, #6]
 800325a:	4b54      	ldr	r3, [pc, #336]	; (80033ac <USART6_IRQHandler+0x270>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	b29a      	uxth	r2, r3
 8003262:	4b52      	ldr	r3, [pc, #328]	; (80033ac <USART6_IRQHandler+0x270>)
 8003264:	801a      	strh	r2, [r3, #0]
					loco[li].phase = 0;	// new - reset loco phase
 8003266:	79fa      	ldrb	r2, [r7, #7]
 8003268:	4951      	ldr	r1, [pc, #324]	; (80033b0 <USART6_IRQHandler+0x274>)
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3311      	adds	r3, #17
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
				for (uint8_t li = firstloco + 1; li < NDEVICES; li++)
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	3301      	adds	r3, #1
 800327e:	71fb      	strb	r3, [r7, #7]
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	2b1f      	cmp	r3, #31
 8003284:	d9e4      	bls.n	8003250 <USART6_IRQHandler+0x114>
				memset(seqflags, 0, sizeof(seqflags));
 8003286:	221c      	movs	r2, #28
 8003288:	2100      	movs	r1, #0
 800328a:	484a      	ldr	r0, [pc, #296]	; (80033b4 <USART6_IRQHandler+0x278>)
 800328c:	f00c fc12 	bl	800fab4 <memset>
				seqidx = 0;
 8003290:	4b49      	ldr	r3, [pc, #292]	; (80033b8 <USART6_IRQHandler+0x27c>)
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
				for (uint8_t phidx = 0; phidx < sizeof(phaseflags) / sizeof(phaseflags[0]); phidx++)
 8003296:	2300      	movs	r3, #0
 8003298:	71bb      	strb	r3, [r7, #6]
 800329a:	e01f      	b.n	80032dc <USART6_IRQHandler+0x1a0>
					if (oredflags & phaseflags[phidx])
 800329c:	79bb      	ldrb	r3, [r7, #6]
 800329e:	4a47      	ldr	r2, [pc, #284]	; (80033bc <USART6_IRQHandler+0x280>)
 80032a0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <USART6_IRQHandler+0x270>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <USART6_IRQHandler+0x19a>
						seqflags[seqidx++] = oredflags & phaseflags[phidx];
 80032b0:	79bb      	ldrb	r3, [r7, #6]
 80032b2:	4a42      	ldr	r2, [pc, #264]	; (80033bc <USART6_IRQHandler+0x280>)
 80032b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <USART6_IRQHandler+0x270>)
 80032ba:	881a      	ldrh	r2, [r3, #0]
 80032bc:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <USART6_IRQHandler+0x27c>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	1c58      	adds	r0, r3, #1
 80032c2:	b2c4      	uxtb	r4, r0
 80032c4:	483c      	ldr	r0, [pc, #240]	; (80033b8 <USART6_IRQHandler+0x27c>)
 80032c6:	7004      	strb	r4, [r0, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	ea01 0302 	and.w	r3, r1, r2
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <USART6_IRQHandler+0x278>)
 80032d2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
				for (uint8_t phidx = 0; phidx < sizeof(phaseflags) / sizeof(phaseflags[0]); phidx++)
 80032d6:	79bb      	ldrb	r3, [r7, #6]
 80032d8:	3301      	adds	r3, #1
 80032da:	71bb      	strb	r3, [r7, #6]
 80032dc:	79bb      	ldrb	r3, [r7, #6]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d9dc      	bls.n	800329c <USART6_IRQHandler+0x160>
				seqidx = 0;
 80032e2:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <USART6_IRQHandler+0x27c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
				locoidx = firstloco;
 80032e8:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <USART6_IRQHandler+0x268>)
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <USART6_IRQHandler+0x284>)
 80032ee:	701a      	strb	r2, [r3, #0]
				nlocos = 0;	// no. of locos in the current pass
 80032f0:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <USART6_IRQHandler+0x288>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
				need_another_pass = 0;
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <USART6_IRQHandler+0x28c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
				astate = AS_LOCO;
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <USART6_IRQHandler+0x248>)
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
		break;
 8003302:	e2d6      	b.n	80038b2 <USART6_IRQHandler+0x776>
	case AS_LOCO:	// normal operation mode
		if (pkt_repeat)
 8003304:	4b22      	ldr	r3, [pc, #136]	; (8003390 <USART6_IRQHandler+0x254>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <USART6_IRQHandler+0x1ec>
		{
			// idle packets between passes through device list
			if (--pkt_repeat == 0)
 800330c:	4b20      	ldr	r3, [pc, #128]	; (8003390 <USART6_IRQHandler+0x254>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	3b01      	subs	r3, #1
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <USART6_IRQHandler+0x254>)
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <USART6_IRQHandler+0x254>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <USART6_IRQHandler+0x1ec>
			{
				locoidx = firstloco;	// restart sequence
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <USART6_IRQHandler+0x268>)
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <USART6_IRQHandler+0x284>)
 8003326:	701a      	strb	r2, [r3, #0]
				//nlocos = 0;	// no. of locos in the current pass
			}
		}
		if (!pkt_repeat)
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <USART6_IRQHandler+0x254>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 82c2 	bne.w	80038b6 <USART6_IRQHandler+0x77a>
		{
			// find next active device to send the packet to
#ifdef DCFG2
			for (; locoidx < NDEVICES && (cd.n.dev[locoidx].flags.w & LOCOFLAGSMSK) < (1u << loco[locoidx].phase);	++locoidx);
#else
			for (; locoidx < NDEVICES && !(cd.n.dev[locoidx].flags.w & seqflags[seqidx]); ++locoidx);
 8003332:	e005      	b.n	8003340 <USART6_IRQHandler+0x204>
 8003334:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <USART6_IRQHandler+0x284>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <USART6_IRQHandler+0x284>)
 800333e:	701a      	strb	r2, [r3, #0]
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <USART6_IRQHandler+0x284>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b1f      	cmp	r3, #31
 8003346:	d80f      	bhi.n	8003368 <USART6_IRQHandler+0x22c>
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <USART6_IRQHandler+0x284>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <USART6_IRQHandler+0x26c>)
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	88da      	ldrh	r2, [r3, #6]
 8003354:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <USART6_IRQHandler+0x27c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <USART6_IRQHandler+0x278>)
 800335c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0e5      	beq.n	8003334 <USART6_IRQHandler+0x1f8>
#endif
			if (locoidx == NDEVICES)
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <USART6_IRQHandler+0x284>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b20      	cmp	r3, #32
 800336e:	d14f      	bne.n	8003410 <USART6_IRQHandler+0x2d4>
			{
				// end of pass through all devices, check if extra idle packet needed
				// due to small number of devices
				pkt_repeat = nlocos + MIN_IDLE_PACKETS < MIN_LOCO_PACKET_SPACING ?
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <USART6_IRQHandler+0x288>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d829      	bhi.n	80033cc <USART6_IRQHandler+0x290>
					MIN_LOCO_PACKET_SPACING - MIN_IDLE_PACKETS - nlocos : MIN_IDLE_PACKETS;
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <USART6_IRQHandler+0x288>)
 800337a:	781b      	ldrb	r3, [r3, #0]
				pkt_repeat = nlocos + MIN_IDLE_PACKETS < MIN_LOCO_PACKET_SPACING ?
 800337c:	f1c3 0302 	rsb	r3, r3, #2
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e024      	b.n	80033ce <USART6_IRQHandler+0x292>
 8003384:	20001684 	.word	0x20001684
 8003388:	20001664 	.word	0x20001664
 800338c:	20001685 	.word	0x20001685
 8003390:	20001686 	.word	0x20001686
 8003394:	20001687 	.word	0x20001687
 8003398:	2000166a 	.word	0x2000166a
 800339c:	2000035e 	.word	0x2000035e
 80033a0:	2000035c 	.word	0x2000035c
 80033a4:	20001688 	.word	0x20001688
 80033a8:	200016c0 	.word	0x200016c0
 80033ac:	2000168a 	.word	0x2000168a
 80033b0:	200013e4 	.word	0x200013e4
 80033b4:	2000168c 	.word	0x2000168c
 80033b8:	200016a8 	.word	0x200016a8
 80033bc:	0801103c 	.word	0x0801103c
 80033c0:	20001679 	.word	0x20001679
 80033c4:	200016a9 	.word	0x200016a9
 80033c8:	200016aa 	.word	0x200016aa
 80033cc:	2301      	movs	r3, #1
 80033ce:	4aa6      	ldr	r2, [pc, #664]	; (8003668 <USART6_IRQHandler+0x52c>)
 80033d0:	7013      	strb	r3, [r2, #0]
				prepare_idle_packet();
 80033d2:	f7ff fd95 	bl	8002f00 <prepare_idle_packet>
				// advance to next phase if needed
#ifdef DCFG2
				if (need_another_pass)
#else
				if (seqflags[++seqidx])
 80033d6:	4ba5      	ldr	r3, [pc, #660]	; (800366c <USART6_IRQHandler+0x530>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4ba3      	ldr	r3, [pc, #652]	; (800366c <USART6_IRQHandler+0x530>)
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	4ba2      	ldr	r3, [pc, #648]	; (800366c <USART6_IRQHandler+0x530>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4ba1      	ldr	r3, [pc, #644]	; (8003670 <USART6_IRQHandler+0x534>)
 80033ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <USART6_IRQHandler+0x2cc>
#endif
				{
					locoidx = firstloco;	// start next sequence
 80033f2:	4ba0      	ldr	r3, [pc, #640]	; (8003674 <USART6_IRQHandler+0x538>)
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	4ba0      	ldr	r3, [pc, #640]	; (8003678 <USART6_IRQHandler+0x53c>)
 80033f8:	701a      	strb	r2, [r3, #0]
					nlocos = 0;	// no. of locos in the current pass
 80033fa:	4ba0      	ldr	r3, [pc, #640]	; (800367c <USART6_IRQHandler+0x540>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
					need_another_pass = 0;
 8003400:	4b9f      	ldr	r3, [pc, #636]	; (8003680 <USART6_IRQHandler+0x544>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e19e      	b.n	8003746 <USART6_IRQHandler+0x60a>
				}
				else
					astate = AS_IDLE;
 8003408:	4b9e      	ldr	r3, [pc, #632]	; (8003684 <USART6_IRQHandler+0x548>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e19a      	b.n	8003746 <USART6_IRQHandler+0x60a>
			else
			{
				// prepare packet
				
				// first, record locomotive number for eventual packet spacing
				storeld(ldidx);
 8003410:	4b9d      	ldr	r3, [pc, #628]	; (8003688 <USART6_IRQHandler+0x54c>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fd9f 	bl	8002f58 <storeld>
				// start packet assembly - address
				sendpkt.pktlen = 0;
 800341a:	4b9c      	ldr	r3, [pc, #624]	; (800368c <USART6_IRQHandler+0x550>)
 800341c:	2200      	movs	r2, #0
 800341e:	705a      	strb	r2, [r3, #1]
				if (cd.n.dev[locoidx].dccaddr > 127)
 8003420:	4b95      	ldr	r3, [pc, #596]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	4a9a      	ldr	r2, [pc, #616]	; (8003690 <USART6_IRQHandler+0x554>)
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	889b      	ldrh	r3, [r3, #4]
 800342c:	2b7f      	cmp	r3, #127	; 0x7f
 800342e:	d90e      	bls.n	800344e <USART6_IRQHandler+0x312>
					add2pkt(0xc0 | cd.n.dev[locoidx].dccaddr >> 8);
 8003430:	4b91      	ldr	r3, [pc, #580]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4a96      	ldr	r2, [pc, #600]	; (8003690 <USART6_IRQHandler+0x554>)
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	889b      	ldrh	r3, [r3, #4]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	b29b      	uxth	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003446:	b2db      	uxtb	r3, r3
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fda5 	bl	8002f98 <add2pkt>
				add2pkt(cd.n.dev[locoidx].dccaddr);
 800344e:	4b8a      	ldr	r3, [pc, #552]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4a8f      	ldr	r2, [pc, #572]	; (8003690 <USART6_IRQHandler+0x554>)
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	889b      	ldrh	r3, [r3, #4]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fd9b 	bl	8002f98 <add2pkt>
				}
				if ((cd.n.dev[locoidx].flags.w & LOCOFLAGSMSK) >= (1u << loco[locoidx].phase))
					need_another_pass = 1;
#else
				union locoflags_ lflags;
				lflags.w = cd.n.dev[locoidx].flags.w & seqflags[seqidx];
 8003462:	4b85      	ldr	r3, [pc, #532]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	4a8a      	ldr	r2, [pc, #552]	; (8003690 <USART6_IRQHandler+0x554>)
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	88da      	ldrh	r2, [r3, #6]
 800346e:	4b7f      	ldr	r3, [pc, #508]	; (800366c <USART6_IRQHandler+0x530>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	4619      	mov	r1, r3
 8003474:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <USART6_IRQHandler+0x534>)
 8003476:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800347a:	4013      	ands	r3, r2
 800347c:	b29b      	uxth	r3, r3
 800347e:	80bb      	strh	r3, [r7, #4]
				
				if (lflags.w & PH_S)
 8003480:	88bb      	ldrh	r3, [r7, #4]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	2b00      	cmp	r3, #0
 8003488:	d064      	beq.n	8003554 <USART6_IRQHandler+0x418>
				{
					// speed
					if (cd.n.dev[locoidx].flags.bit.fl256)
 800348a:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <USART6_IRQHandler+0x53c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4a80      	ldr	r2, [pc, #512]	; (8003690 <USART6_IRQHandler+0x554>)
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	799b      	ldrb	r3, [r3, #6]
 8003496:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d017      	beq.n	80034d0 <USART6_IRQHandler+0x394>
					{
						// Akwi: F1..4 and speed
						add2pkt(mkf14pkt(locoidx));
 80034a0:	4b75      	ldr	r3, [pc, #468]	; (8003678 <USART6_IRQHandler+0x53c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fe1d 	bl	80030e4 <mkf14pkt>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fd73 	bl	8002f98 <add2pkt>
						add2pkt(loco[locoidx].dspeed);
 80034b2:	4b71      	ldr	r3, [pc, #452]	; (8003678 <USART6_IRQHandler+0x53c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	4a76      	ldr	r2, [pc, #472]	; (8003694 <USART6_IRQHandler+0x558>)
 80034ba:	460b      	mov	r3, r1
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	3302      	adds	r3, #2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fd65 	bl	8002f98 <add2pkt>
 80034ce:	e02b      	b.n	8003528 <USART6_IRQHandler+0x3ec>
					}
					else if (cd.n.dev[locoidx].flags.bit.speed128)
 80034d0:	4b69      	ldr	r3, [pc, #420]	; (8003678 <USART6_IRQHandler+0x53c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	; (8003690 <USART6_IRQHandler+0x554>)
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	799b      	ldrb	r3, [r3, #6]
 80034dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <USART6_IRQHandler+0x3c4>
					{
						add2pkt(0x3f); // 128 step speed
 80034e6:	203f      	movs	r0, #63	; 0x3f
 80034e8:	f7ff fd56 	bl	8002f98 <add2pkt>
						add2pkt(mkspeed128(locoidx));
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <USART6_IRQHandler+0x53c>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fd69 	bl	8002fc8 <mkspeed128>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fd4d 	bl	8002f98 <add2pkt>
 80034fe:	e013      	b.n	8003528 <USART6_IRQHandler+0x3ec>
					}
					else if (cd.n.dev[locoidx].flags.bit.speed28)
 8003500:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4a62      	ldr	r2, [pc, #392]	; (8003690 <USART6_IRQHandler+0x554>)
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	799b      	ldrb	r3, [r3, #6]
 800350c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <USART6_IRQHandler+0x3ec>
					{
						add2pkt(mkspeed28pkt(locoidx));
 8003516:	4b58      	ldr	r3, [pc, #352]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fd96 	bl	800304c <mkspeed28pkt>
 8003520:	4603      	mov	r3, r0
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fd38 	bl	8002f98 <add2pkt>
					}
					if (cd.n.dev[locoidx].flags.bit.f1_4s)
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <USART6_IRQHandler+0x53c>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	4a58      	ldr	r2, [pc, #352]	; (8003690 <USART6_IRQHandler+0x554>)
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	799b      	ldrb	r3, [r3, #6]
 8003534:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80f7 	beq.w	800372e <USART6_IRQHandler+0x5f2>
						add2pkt(mkf14pkt(locoidx));
 8003540:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fdcd 	bl	80030e4 <mkf14pkt>
 800354a:	4603      	mov	r3, r0
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fd23 	bl	8002f98 <add2pkt>
 8003552:	e0ec      	b.n	800372e <USART6_IRQHandler+0x5f2>
				}
				else if (lflags.w & PH_F1_4)
 8003554:	88bb      	ldrh	r3, [r7, #4]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <USART6_IRQHandler+0x444>
				{
					if (lflags.bit.f1_4)
 800355e:	793b      	ldrb	r3, [r7, #4]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80e1 	beq.w	800372e <USART6_IRQHandler+0x5f2>
						add2pkt(mkf14pkt(locoidx));
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <USART6_IRQHandler+0x53c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fdb7 	bl	80030e4 <mkf14pkt>
 8003576:	4603      	mov	r3, r0
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fd0d 	bl	8002f98 <add2pkt>
 800357e:	e0d6      	b.n	800372e <USART6_IRQHandler+0x5f2>
				}
				else if (lflags.w & PH_F5_12)
 8003580:	88bb      	ldrh	r3, [r7, #4]
 8003582:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d04e      	beq.n	8003628 <USART6_IRQHandler+0x4ec>
				{
					if (lflags.bit.f5_8 && lflags.bit.f5_12)	// send F1_12 in a single packet
 800358a:	793b      	ldrb	r3, [r7, #4]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00e      	beq.n	80035b4 <USART6_IRQHandler+0x478>
 8003596:	793b      	ldrb	r3, [r7, #4]
 8003598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <USART6_IRQHandler+0x478>
						add2pkt(mkf14pkt(locoidx));
 80035a2:	4b35      	ldr	r3, [pc, #212]	; (8003678 <USART6_IRQHandler+0x53c>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fd9c 	bl	80030e4 <mkf14pkt>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fcf2 	bl	8002f98 <add2pkt>
					if (lflags.bit.f5_8 || lflags.bit.f5_12)
 80035b4:	793b      	ldrb	r3, [r7, #4]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <USART6_IRQHandler+0x490>
 80035c0:	793b      	ldrb	r3, [r7, #4]
 80035c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <USART6_IRQHandler+0x4b6>
						add2pkt(5u << 5 | 1u << 4 | loco[locoidx].fun.bf.f8_5);
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <USART6_IRQHandler+0x53c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	4a30      	ldr	r2, [pc, #192]	; (8003694 <USART6_IRQHandler+0x558>)
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	889b      	ldrh	r3, [r3, #4]
 80035e0:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fcd3 	bl	8002f98 <add2pkt>
					if (lflags.bit.f5_12)
 80035f2:	793b      	ldrb	r3, [r7, #4]
 80035f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8097 	beq.w	800372e <USART6_IRQHandler+0x5f2>
						add2pkt(5u << 5 | loco[locoidx].fun.bf.f12_9);
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	4a23      	ldr	r2, [pc, #140]	; (8003694 <USART6_IRQHandler+0x558>)
 8003608:	460b      	mov	r3, r1
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	795b      	ldrb	r3, [r3, #5]
 8003614:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800361e:	b2db      	uxtb	r3, r3
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fcb9 	bl	8002f98 <add2pkt>
 8003626:	e082      	b.n	800372e <USART6_IRQHandler+0x5f2>
				}
				else if (lflags.w & PH_F9_12)
 8003628:	88bb      	ldrh	r3, [r7, #4]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d032      	beq.n	8003698 <USART6_IRQHandler+0x55c>
				{
					if (lflags.bit.f9_12)
 8003632:	793b      	ldrb	r3, [r7, #4]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d077      	beq.n	800372e <USART6_IRQHandler+0x5f2>
						add2pkt(5u << 5 | loco[locoidx].fun.bf.f12_9);
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <USART6_IRQHandler+0x53c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	4a13      	ldr	r2, [pc, #76]	; (8003694 <USART6_IRQHandler+0x558>)
 8003646:	460b      	mov	r3, r1
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	795b      	ldrb	r3, [r3, #5]
 8003652:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fc9a 	bl	8002f98 <add2pkt>
 8003664:	e063      	b.n	800372e <USART6_IRQHandler+0x5f2>
 8003666:	bf00      	nop
 8003668:	20001686 	.word	0x20001686
 800366c:	200016a8 	.word	0x200016a8
 8003670:	2000168c 	.word	0x2000168c
 8003674:	20001688 	.word	0x20001688
 8003678:	20001679 	.word	0x20001679
 800367c:	200016a9 	.word	0x200016a9
 8003680:	200016aa 	.word	0x200016aa
 8003684:	20001684 	.word	0x20001684
 8003688:	20001678 	.word	0x20001678
 800368c:	2000035c 	.word	0x2000035c
 8003690:	200016c0 	.word	0x200016c0
 8003694:	200013e4 	.word	0x200013e4
				}
				else if (lflags.bit.f13_20)
 8003698:	797b      	ldrb	r3, [r7, #5]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <USART6_IRQHandler+0x590>
				{
					add2pkt(6u << 5 | 0x1e);
 80036a4:	20de      	movs	r0, #222	; 0xde
 80036a6:	f7ff fc77 	bl	8002f98 <add2pkt>
					add2pkt(loco[locoidx].fun.bf.f20_13);
 80036aa:	4b8a      	ldr	r3, [pc, #552]	; (80038d4 <USART6_IRQHandler+0x798>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	4619      	mov	r1, r3
 80036b0:	4a89      	ldr	r2, [pc, #548]	; (80038d8 <USART6_IRQHandler+0x79c>)
 80036b2:	460b      	mov	r3, r1
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f3c3 3347 	ubfx	r3, r3, #13, #8
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fc67 	bl	8002f98 <add2pkt>
 80036ca:	e030      	b.n	800372e <USART6_IRQHandler+0x5f2>
				}
				else if (lflags.bit.f21_28)
 80036cc:	797b      	ldrb	r3, [r7, #5]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <USART6_IRQHandler+0x5c4>
				{
					add2pkt(6u << 5 | 0x1f);
 80036d8:	20df      	movs	r0, #223	; 0xdf
 80036da:	f7ff fc5d 	bl	8002f98 <add2pkt>
					add2pkt(loco[locoidx].fun.bf.f28_21);
 80036de:	4b7d      	ldr	r3, [pc, #500]	; (80038d4 <USART6_IRQHandler+0x798>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4a7c      	ldr	r2, [pc, #496]	; (80038d8 <USART6_IRQHandler+0x79c>)
 80036e6:	460b      	mov	r3, r1
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	88db      	ldrh	r3, [r3, #6]
 80036f2:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fc4d 	bl	8002f98 <add2pkt>
 80036fe:	e016      	b.n	800372e <USART6_IRQHandler+0x5f2>
				}
				else if (lflags.bit.speedlimit)
 8003700:	797b      	ldrb	r3, [r7, #5]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <USART6_IRQHandler+0x5f2>
				{
					add2pkt(0x3e);
 800370c:	203e      	movs	r0, #62	; 0x3e
 800370e:	f7ff fc43 	bl	8002f98 <add2pkt>
					add2pkt(loco[locoidx].slimit);
 8003712:	4b70      	ldr	r3, [pc, #448]	; (80038d4 <USART6_IRQHandler+0x798>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	4619      	mov	r1, r3
 8003718:	4a6f      	ldr	r2, [pc, #444]	; (80038d8 <USART6_IRQHandler+0x79c>)
 800371a:	460b      	mov	r3, r1
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	3303      	adds	r3, #3
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fc35 	bl	8002f98 <add2pkt>
				}
#endif
				++nlocos;
 800372e:	4b6b      	ldr	r3, [pc, #428]	; (80038dc <USART6_IRQHandler+0x7a0>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b69      	ldr	r3, [pc, #420]	; (80038dc <USART6_IRQHandler+0x7a0>)
 8003738:	701a      	strb	r2, [r3, #0]
				++locoidx;
 800373a:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <USART6_IRQHandler+0x798>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <USART6_IRQHandler+0x798>)
 8003744:	701a      	strb	r2, [r3, #0]
			}
			if (dumping)
 8003746:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <USART6_IRQHandler+0x7a4>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80b3 	beq.w	80038b6 <USART6_IRQHandler+0x77a>
				pktdump(&sendpkt);	// the only call to pktdump()
 8003750:	4864      	ldr	r0, [pc, #400]	; (80038e4 <USART6_IRQHandler+0x7a8>)
 8003752:	f7fe fd89 	bl	8002268 <pktdump>
		}
		break;
 8003756:	e0ae      	b.n	80038b6 <USART6_IRQHandler+0x77a>
	case AS_POM:
		// programming on main
		if (--pkt_repeat == 0)
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	3b01      	subs	r3, #1
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <USART6_IRQHandler+0x642>
		{
			dccs.pgm_rq = 0;
 800376c:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <USART6_IRQHandler+0x7b0>)
 800376e:	2200      	movs	r2, #0
 8003770:	70da      	strb	r2, [r3, #3]
			prepare_idle_packet();
 8003772:	f7ff fbc5 	bl	8002f00 <prepare_idle_packet>
			astate = AS_IDLE;
 8003776:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <USART6_IRQHandler+0x7b4>)
 8003778:	2200      	movs	r2, #0
 800377a:	701a      	strb	r2, [r3, #0]
		}
		else
			sendpkt.pktlen = dccs.cmdpktlen;
		break;
 800377c:	e09e      	b.n	80038bc <USART6_IRQHandler+0x780>
			sendpkt.pktlen = dccs.cmdpktlen;
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <USART6_IRQHandler+0x7b0>)
 8003780:	7ada      	ldrb	r2, [r3, #11]
 8003782:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <USART6_IRQHandler+0x7a8>)
 8003784:	705a      	strb	r2, [r3, #1]
		break;
 8003786:	e099      	b.n	80038bc <USART6_IRQHandler+0x780>
	case AS_PGM:
		// programming mode
		dccs.pgmmode_active = 1;
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <USART6_IRQHandler+0x7b0>)
 800378a:	2201      	movs	r2, #1
 800378c:	709a      	strb	r2, [r3, #2]
		if (pkt_repeat)
 800378e:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <USART6_IRQHandler+0x666>
			--pkt_repeat;
 8003796:	4b54      	ldr	r3, [pc, #336]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	3b01      	subs	r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4b52      	ldr	r3, [pc, #328]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 80037a0:	701a      	strb	r2, [r3, #0]
		switch (pgm_seq)
 80037a2:	4b54      	ldr	r3, [pc, #336]	; (80038f4 <USART6_IRQHandler+0x7b8>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	f200 8087 	bhi.w	80038ba <USART6_IRQHandler+0x77e>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <USART6_IRQHandler+0x678>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d7 	.word	0x080037d7
 80037bc:	0800384d 	.word	0x0800384d
 80037c0:	08003881 	.word	0x08003881
		{
		case PGM_START:
			// 5 reset packets with long preamble
			prepare_reset_packet();
 80037c4:	f7ff fbb2 	bl	8002f2c <prepare_reset_packet>
			pkt_repeat = 4;	// NMRA: 3 or more
 80037c8:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 80037ca:	2204      	movs	r2, #4
 80037cc:	701a      	strb	r2, [r3, #0]
			pgm_seq = PGM_RESET;
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <USART6_IRQHandler+0x7b8>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
			break;
 80037d4:	e06c      	b.n	80038b0 <USART6_IRQHandler+0x774>
		case PGM_RESET:	// sending reset packets
			if (!dccs.pgmmode)
 80037d6:	4b45      	ldr	r3, [pc, #276]	; (80038ec <USART6_IRQHandler+0x7b0>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	f083 0301 	eor.w	r3, r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <USART6_IRQHandler+0x6c0>
			{
				// exit pgm mode
				prepare_idle_packet();
 80037e4:	f7ff fb8c 	bl	8002f00 <prepare_idle_packet>
				pkt_repeat = 1;
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
				astate = AS_IDLE;
 80037ee:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <USART6_IRQHandler+0x7b4>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
				dccs.pgmmode_active = 0;
 80037f4:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <USART6_IRQHandler+0x7b0>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	709a      	strb	r2, [r3, #2]
				isense_max = 0;
				pgm_seq = PGM_CMD;
			}
			else
				;//pktlen = 2;	// continue sending reset packet if no request
			break;
 80037fa:	e056      	b.n	80038aa <USART6_IRQHandler+0x76e>
			else if (!pkt_repeat && dccs.pgm_rq)
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d152      	bne.n	80038aa <USART6_IRQHandler+0x76e>
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <USART6_IRQHandler+0x7b0>)
 8003806:	78db      	ldrb	r3, [r3, #3]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d04d      	beq.n	80038aa <USART6_IRQHandler+0x76e>
				memcpy(sendpkt.pktbuf, dccs.cmdpkt, dccs.cmdpktlen);
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <USART6_IRQHandler+0x7b0>)
 8003810:	7adb      	ldrb	r3, [r3, #11]
 8003812:	461a      	mov	r2, r3
 8003814:	4938      	ldr	r1, [pc, #224]	; (80038f8 <USART6_IRQHandler+0x7bc>)
 8003816:	4839      	ldr	r0, [pc, #228]	; (80038fc <USART6_IRQHandler+0x7c0>)
 8003818:	f00c f924 	bl	800fa64 <memcpy>
				sendpkt.pktlen = dccs.cmdpktlen;
 800381c:	4b33      	ldr	r3, [pc, #204]	; (80038ec <USART6_IRQHandler+0x7b0>)
 800381e:	7ada      	ldrb	r2, [r3, #11]
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <USART6_IRQHandler+0x7a8>)
 8003822:	705a      	strb	r2, [r3, #1]
				pkt_repeat = 5;	// 5 or more
 8003824:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 8003826:	2205      	movs	r2, #5
 8003828:	701a      	strb	r2, [r3, #0]
				dccs.ack = 0;	// should be cleared by requestor
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <USART6_IRQHandler+0x7b0>)
 800382c:	2200      	movs	r2, #0
 800382e:	711a      	strb	r2, [r3, #4]
				dccs.ack_released = 0;
 8003830:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <USART6_IRQHandler+0x7b0>)
 8003832:	2200      	movs	r2, #0
 8003834:	715a      	strb	r2, [r3, #5]
				isenseq_mA = adcval[AC_IS1];
 8003836:	4b32      	ldr	r3, [pc, #200]	; (8003900 <USART6_IRQHandler+0x7c4>)
 8003838:	88da      	ldrh	r2, [r3, #6]
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <USART6_IRQHandler+0x7c8>)
 800383c:	801a      	strh	r2, [r3, #0]
				isense_max = 0;
 800383e:	4b32      	ldr	r3, [pc, #200]	; (8003908 <USART6_IRQHandler+0x7cc>)
 8003840:	2200      	movs	r2, #0
 8003842:	801a      	strh	r2, [r3, #0]
				pgm_seq = PGM_CMD;
 8003844:	4b2b      	ldr	r3, [pc, #172]	; (80038f4 <USART6_IRQHandler+0x7b8>)
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
			break;
 800384a:	e02e      	b.n	80038aa <USART6_IRQHandler+0x76e>
		case PGM_CMD:
			// keep sending command until ACK received
			if (pkt_repeat && !dccs.ack)
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00c      	beq.n	800386e <USART6_IRQHandler+0x732>
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <USART6_IRQHandler+0x7b0>)
 8003856:	791b      	ldrb	r3, [r3, #4]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f083 0301 	eor.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <USART6_IRQHandler+0x732>
				sendpkt.pktlen = dccs.cmdpktlen;	// repeat pgm command
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <USART6_IRQHandler+0x7b0>)
 8003866:	7ada      	ldrb	r2, [r3, #11]
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <USART6_IRQHandler+0x7a8>)
 800386a:	705a      	strb	r2, [r3, #1]
			{
				prepare_reset_packet();
				pkt_repeat = 6;	// ACK timeout
				pgm_seq = PGM_W4ACK;
			}
			break;
 800386c:	e020      	b.n	80038b0 <USART6_IRQHandler+0x774>
				prepare_reset_packet();
 800386e:	f7ff fb5d 	bl	8002f2c <prepare_reset_packet>
				pkt_repeat = 6;	// ACK timeout
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 8003874:	2206      	movs	r2, #6
 8003876:	701a      	strb	r2, [r3, #0]
				pgm_seq = PGM_W4ACK;
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <USART6_IRQHandler+0x7b8>)
 800387a:	2203      	movs	r2, #3
 800387c:	701a      	strb	r2, [r3, #0]
			break;
 800387e:	e017      	b.n	80038b0 <USART6_IRQHandler+0x774>
		case PGM_W4ACK:
			if (!pkt_repeat || (dccs.ack && dccs.ack_released))
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <USART6_IRQHandler+0x7ac>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <USART6_IRQHandler+0x760>
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <USART6_IRQHandler+0x7b0>)
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <USART6_IRQHandler+0x772>
 8003892:	4b16      	ldr	r3, [pc, #88]	; (80038ec <USART6_IRQHandler+0x7b0>)
 8003894:	795b      	ldrb	r3, [r3, #5]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <USART6_IRQHandler+0x772>
			{
				dccs.pgm_rq = 0;
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <USART6_IRQHandler+0x7b0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	70da      	strb	r2, [r3, #3]
				pgm_seq = PGM_START;
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <USART6_IRQHandler+0x7b8>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
			}
			//pktlen = 2; removed 08.07.22
			break;
 80038a8:	e001      	b.n	80038ae <USART6_IRQHandler+0x772>
			break;
 80038aa:	bf00      	nop
 80038ac:	e005      	b.n	80038ba <USART6_IRQHandler+0x77e>
			break;
 80038ae:	bf00      	nop
		}
		break;
 80038b0:	e003      	b.n	80038ba <USART6_IRQHandler+0x77e>
		break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <USART6_IRQHandler+0x780>
		break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <USART6_IRQHandler+0x780>
		break;
 80038ba:	bf00      	nop
	}
	if (sendpkt.pktlen > 5)
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <USART6_IRQHandler+0x7a8>)
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d902      	bls.n	80038ca <USART6_IRQHandler+0x78e>
	{
		// add CRC
		add2pkt(0);
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7ff fb67 	bl	8002f98 <add2pkt>
	}
	// dump the packet
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20001679 	.word	0x20001679
 80038d8:	200013e4 	.word	0x200013e4
 80038dc:	200016a9 	.word	0x200016a9
 80038e0:	20001685 	.word	0x20001685
 80038e4:	2000035c 	.word	0x2000035c
 80038e8:	20001686 	.word	0x20001686
 80038ec:	20001664 	.word	0x20001664
 80038f0:	20001684 	.word	0x20001684
 80038f4:	20001687 	.word	0x20001687
 80038f8:	2000166a 	.word	0x2000166a
 80038fc:	2000035e 	.word	0x2000035e
 8003900:	20000b10 	.word	0x20000b10
 8003904:	20000b20 	.word	0x20000b20
 8003908:	20000b1e 	.word	0x20000b1e

0800390c <dcc_tx_next_bit>:
enum dccbt_ {DBT_PRE, DBT_DATA, DBT_CHECK, DBT_STOP, DBT_CUTOUT};
/* Called at the end/start of bit tx period ====================================
Prepares the NEXT bit transfer (the current one is being transmitted now
*/
void dcc_tx_next_bit(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
	static uint32_t senddata;
	static uint8_t bitcnt;
	static _Bool sending_data = 0;
	
	if (bitcnt == 0)
 8003910:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 8091 	bne.w	8003a3c <dcc_tx_next_bit+0x130>
	{
		if (dcc_direct_mode.on)
 800391a:	4b5a      	ldr	r3, [pc, #360]	; (8003a84 <dcc_tx_next_bit+0x178>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <dcc_tx_next_bit+0x44>
		{
			if (dcc_direct_mode.drdy)
 8003922:	4b58      	ldr	r3, [pc, #352]	; (8003a84 <dcc_tx_next_bit+0x178>)
 8003924:	785b      	ldrb	r3, [r3, #1]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00d      	beq.n	8003948 <dcc_tx_next_bit+0x3c>
			{
				senddata = dcc_direct_mode.data;
 800392c:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <dcc_tx_next_bit+0x178>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a55      	ldr	r2, [pc, #340]	; (8003a88 <dcc_tx_next_bit+0x17c>)
 8003932:	6013      	str	r3, [r2, #0]
				bitcnt = 32;
 8003934:	4b52      	ldr	r3, [pc, #328]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003936:	2220      	movs	r2, #32
 8003938:	701a      	strb	r2, [r3, #0]
				dcc_direct_mode.drdy = 0;
 800393a:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <dcc_tx_next_bit+0x178>)
 800393c:	2200      	movs	r2, #0
 800393e:	705a      	strb	r2, [r3, #1]
				sending_data = 1;
 8003940:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <dcc_tx_next_bit+0x180>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e07c      	b.n	8003a42 <dcc_tx_next_bit+0x136>
			}
			else
				prepare_DCC_bit(1); // like preamble
 8003948:	2001      	movs	r0, #1
 800394a:	f000 f8ed 	bl	8003b28 <prepare_DCC_bit>
 800394e:	e078      	b.n	8003a42 <dcc_tx_next_bit+0x136>
			// init byte/preamble xfer & send first bit
			
			static uint8_t sendidx, chksum;
			static enum dccbt_ sstate;
			
			switch (sstate)
 8003950:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <dcc_tx_next_bit+0x184>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d874      	bhi.n	8003a42 <dcc_tx_next_bit+0x136>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <dcc_tx_next_bit+0x54>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003975 	.word	0x08003975
 8003964:	080039a3 	.word	0x080039a3
 8003968:	080039f7 	.word	0x080039f7
 800396c:	08003a21 	.word	0x08003a21
 8003970:	08003a31 	.word	0x08003a31
			{
			case DBT_PRE:	// prepare for preamble
				NVIC_SetPendingIRQ(DCC_PktAs_IRQn);
 8003974:	2047      	movs	r0, #71	; 0x47
 8003976:	f7ff faa5 	bl	8002ec4 <__NVIC_SetPendingIRQ>
				sending_data = 0;
 800397a:	4b44      	ldr	r3, [pc, #272]	; (8003a8c <dcc_tx_next_bit+0x180>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
				bitcnt = sendpkt.preamble_len;
 8003980:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <dcc_tx_next_bit+0x188>)
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	4b3e      	ldr	r3, [pc, #248]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003986:	701a      	strb	r2, [r3, #0]
				sstate = DBT_DATA;
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <dcc_tx_next_bit+0x184>)
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
				sendidx = 0;
 800398e:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <dcc_tx_next_bit+0x18c>)
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
				chksum = 0;
 8003994:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <dcc_tx_next_bit+0x190>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
				prepare_DCC_bit(1);
 800399a:	2001      	movs	r0, #1
 800399c:	f000 f8c4 	bl	8003b28 <prepare_DCC_bit>
				break;
 80039a0:	e04f      	b.n	8003a42 <dcc_tx_next_bit+0x136>
			case DBT_DATA:
				if (sendpkt.pktlen)
 80039a2:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <dcc_tx_next_bit+0x188>)
 80039a4:	785b      	ldrb	r3, [r3, #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d04a      	beq.n	8003a40 <dcc_tx_next_bit+0x134>
				{
					sending_data = 1;
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <dcc_tx_next_bit+0x180>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
					bitcnt = 9;
 80039b0:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <dcc_tx_next_bit+0x174>)
 80039b2:	2209      	movs	r2, #9
 80039b4:	701a      	strb	r2, [r3, #0]
					chksum ^= senddata = sendpkt.pktbuf[sendidx++];
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <dcc_tx_next_bit+0x18c>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	b2d1      	uxtb	r1, r2
 80039be:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <dcc_tx_next_bit+0x18c>)
 80039c0:	7011      	strb	r1, [r2, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <dcc_tx_next_bit+0x188>)
 80039c6:	4413      	add	r3, r2
 80039c8:	789b      	ldrb	r3, [r3, #2]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <dcc_tx_next_bit+0x17c>)
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <dcc_tx_next_bit+0x17c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <dcc_tx_next_bit+0x190>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	4053      	eors	r3, r2
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <dcc_tx_next_bit+0x190>)
 80039e0:	701a      	strb	r2, [r3, #0]
					if (sendidx >= sendpkt.pktlen)
 80039e2:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <dcc_tx_next_bit+0x188>)
 80039e4:	785a      	ldrb	r2, [r3, #1]
 80039e6:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <dcc_tx_next_bit+0x18c>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d828      	bhi.n	8003a40 <dcc_tx_next_bit+0x134>
						sstate = DBT_CHECK;
 80039ee:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <dcc_tx_next_bit+0x184>)
 80039f0:	2202      	movs	r2, #2
 80039f2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80039f4:	e024      	b.n	8003a40 <dcc_tx_next_bit+0x134>
			case DBT_CHECK:
				bitcnt = 10;
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <dcc_tx_next_bit+0x174>)
 80039f8:	220a      	movs	r2, #10
 80039fa:	701a      	strb	r2, [r3, #0]
				senddata = chksum << 1 | 1;	// include the stop bit and one more
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <dcc_tx_next_bit+0x190>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <dcc_tx_next_bit+0x17c>)
 8003a0a:	601a      	str	r2, [r3, #0]
				sstate = dccs.rc_cutout ? DBT_STOP : DBT_PRE;
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <dcc_tx_next_bit+0x194>)
 8003a0e:	7b5b      	ldrb	r3, [r3, #13]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <dcc_tx_next_bit+0x10c>
 8003a14:	2203      	movs	r2, #3
 8003a16:	e000      	b.n	8003a1a <dcc_tx_next_bit+0x10e>
 8003a18:	2200      	movs	r2, #0
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <dcc_tx_next_bit+0x184>)
 8003a1c:	701a      	strb	r2, [r3, #0]
				break;
 8003a1e:	e010      	b.n	8003a42 <dcc_tx_next_bit+0x136>
			case DBT_STOP:	// the 1st bit after stop bit is being sent, activate the cutout
				br_cutout_start();
 8003a20:	f000 fa52 	bl	8003ec8 <br_cutout_start>
				bitcnt = 0;	// no. of cutout bits
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
				sstate = DBT_CUTOUT;
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <dcc_tx_next_bit+0x184>)
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	701a      	strb	r2, [r3, #0]
			case DBT_CUTOUT:	// deactivate cutout and start preamble
				br_cutout_end();
 8003a30:	f000 fa51 	bl	8003ed6 <br_cutout_end>
				sstate = DBT_PRE;
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <dcc_tx_next_bit+0x184>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
				break;
 8003a3a:	e002      	b.n	8003a42 <dcc_tx_next_bit+0x136>
			}
		}
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <dcc_tx_next_bit+0x136>
				break;
 8003a40:	bf00      	nop
	}
	
	if (bitcnt)
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <dcc_tx_next_bit+0x14a>
		--bitcnt;
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003a54:	701a      	strb	r2, [r3, #0]
	if (sending_data)
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <dcc_tx_next_bit+0x180>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00e      	beq.n	8003a7c <dcc_tx_next_bit+0x170>
		prepare_DCC_bit(senddata >> bitcnt & 1);
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <dcc_tx_next_bit+0x17c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <dcc_tx_next_bit+0x174>)
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	40d3      	lsrs	r3, r2
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f856 	bl	8003b28 <prepare_DCC_bit>
	// otherwise stay in preamble, sending ones
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200016ab 	.word	0x200016ab
 8003a84:	2000167c 	.word	0x2000167c
 8003a88:	200016ac 	.word	0x200016ac
 8003a8c:	200016b0 	.word	0x200016b0
 8003a90:	200016b1 	.word	0x200016b1
 8003a94:	2000035c 	.word	0x2000035c
 8003a98:	200016b2 	.word	0x200016b2
 8003a9c:	200016b3 	.word	0x200016b3
 8003aa0:	20001664 	.word	0x20001664

08003aa4 <__NVIC_EnableIRQ>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db0b      	blt.n	8003ace <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	4907      	ldr	r1, [pc, #28]	; (8003adc <__NVIC_EnableIRQ+0x38>)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <__NVIC_DisableIRQ>:
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db12      	blt.n	8003b18 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	490a      	ldr	r1, [pc, #40]	; (8003b24 <__NVIC_DisableIRQ+0x44>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2001      	movs	r0, #1
 8003b02:	fa00 f202 	lsl.w	r2, r0, r2
 8003b06:	3320      	adds	r3, #32
 8003b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b0c:	f3bf 8f4f 	dsb	sy
}
 8003b10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b12:	f3bf 8f6f 	isb	sy
}
 8003b16:	bf00      	nop
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000e100 	.word	0xe000e100

08003b28 <prepare_DCC_bit>:
#define NEWDCC_PRE1	(TIM_us_DIV * ONE_HALFPERIOD * 2u / NEWDCC_STEPS)
#define NEWDCC_PRE0	(TIM_us_DIV * ZERO_HALFPERIOD * 2u / NEWDCC_STEPS)
// Sender ================================================================
// Called by DCC Tx control to set the next bit value
void prepare_DCC_bit(_Bool bit)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71fb      	strb	r3, [r7, #7]
#ifdef NEWDCCTX
	DCC_TIM->PSC = (bit ? NEWDCC_PRE1 : NEWDCC_PRE0) - 1;
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <prepare_DCC_bit+0x16>
 8003b38:	f241 3307 	movw	r3, #4871	; 0x1307
 8003b3c:	e001      	b.n	8003b42 <prepare_DCC_bit+0x1a>
 8003b3e:	f242 630f 	movw	r3, #9743	; 0x260f
 8003b42:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <prepare_DCC_bit+0x2c>)
 8003b44:	6293      	str	r3, [r2, #40]	; 0x28
	DCC_DUTY = halfperiod;
#ifdef DCC_CCRB
	DCC_TIM->DCC_CCRB = halfperiod;
#endif
#endif
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40000400 	.word	0x40000400

08003b58 <prepare_SX_bit>:

// called by SX Tx control
void prepare_SX_bit(_Bool bit)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
	if (bit)
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <prepare_SX_bit+0x1c>
		DCC_TIM->CCER ^= TIM_CCER_CC1E | TIM_CCER_CC1NE
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <prepare_SX_bit+0x28>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <prepare_SX_bit+0x28>)
 8003b6e:	f083 0355 	eor.w	r3, r3, #85	; 0x55
 8003b72:	6213      	str	r3, [r2, #32]
			| TIM_CCER_CC2E	| TIM_CCER_CC2NE;	// toggle active out 
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40000400 	.word	0x40000400

08003b84 <TIM3_IRQHandler>:

// H-bridge period interrupt ==============================================
void DCC_TIM_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
	//if (DCC_TIM1->SR & TIM_SR_UIF)
	{
		DCC_TIM->SR = ~TIM_SR_UIF;	// the only source
 8003b88:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <TIM3_IRQHandler+0x18>)
 8003b8a:	f06f 0201 	mvn.w	r2, #1
 8003b8e:	611a      	str	r2, [r3, #16]
		// store adc current sense readouts
		adc_store_csense();
 8003b90:	f7fe fb82 	bl	8002298 <adc_store_csense>
		dcc_tx_next_bit();
 8003b94:	f7ff feba 	bl	800390c <dcc_tx_next_bit>
	}
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40000400 	.word	0x40000400

08003ba0 <br_init_analog>:
	.freq = AN_DEF_FREQ,
	.steps = AN_DEF_STEPS
};

static void br_init_analog(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
	// set forward dir, speed 0
	// DCC TIM duty is PH2, 1-duty is PH1
	DCC_TIM->PSC = TIMCLK_FREQ / ans.steps / ans.freq - 1;
 8003ba4:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <br_init_analog+0x5c>)
 8003ba6:	88db      	ldrh	r3, [r3, #6]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <br_init_analog+0x60>)
 8003bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <br_init_analog+0x5c>)
 8003bb2:	8892      	ldrh	r2, [r2, #4]
 8003bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bb8:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <br_init_analog+0x64>)
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6293      	str	r3, [r2, #40]	; 0x28
	DCC_TIM->ARR = ans.steps - 1;
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <br_init_analog+0x5c>)
 8003bc0:	88db      	ldrh	r3, [r3, #6]
 8003bc2:	1e5a      	subs	r2, r3, #1
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <br_init_analog+0x64>)
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
	AN_TIM->PSC = TIMCLK_FREQ / ans.steps / ans.freq - 1;
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <br_init_analog+0x5c>)
 8003bca:	88db      	ldrh	r3, [r3, #6]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <br_init_analog+0x60>)
 8003bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bd4:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <br_init_analog+0x5c>)
 8003bd6:	8892      	ldrh	r2, [r2, #4]
 8003bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bdc:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <br_init_analog+0x64>)
 8003bde:	3b01      	subs	r3, #1
 8003be0:	6293      	str	r3, [r2, #40]	; 0x28
	AN_TIM->ARR = ans.steps + 2;
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <br_init_analog+0x5c>)
 8003be4:	88db      	ldrh	r3, [r3, #6]
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <br_init_analog+0x64>)
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c

	ans.active = 1;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <br_init_analog+0x5c>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	20000368 	.word	0x20000368
 8003c00:	0501bd00 	.word	0x0501bd00
 8003c04:	40000400 	.word	0x40000400

08003c08 <br_set_mode>:
	Init for Selectrix operation - 50 us period, 40 us active pulse on one of outputs.
	Interrupt at the end of active pulse to select active output for the next period
*/

void br_set_mode(enum ctrlmode_ mode)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
	NVIC_DisableIRQ(DCC_TIM_IRQn);	// DCC
 8003c12:	201d      	movs	r0, #29
 8003c14:	f7ff ff64 	bl	8003ae0 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(TIM1_CC_IRQn);	// analog BEMF & SX
 8003c18:	201b      	movs	r0, #27
 8003c1a:	f7ff ff61 	bl	8003ae0 <__NVIC_DisableIRQ>
	ans.active = 0;
 8003c1e:	4b77      	ldr	r3, [pc, #476]	; (8003dfc <br_set_mode+0x1f4>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
	DCC_TIM->CCER = 0;	// all outputs low
 8003c24:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <br_set_mode+0x1f8>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	621a      	str	r2, [r3, #32]
#ifdef NUCLEO_L6206
	EN1_PORT->BSRR = EN1_MSK << 16;
 8003c2a:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <br_set_mode+0x1fc>)
 8003c2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003c30:	619a      	str	r2, [r3, #24]
#endif
	// With OSSR set, the disabled output of complementary pair outputs inactive state
	DCC_TIM->BDTR = TIM_BDTR_MOE | TIM_BDTR_OSSR;	// default - output inactive state on inactive complementary outputs
 8003c32:	4b73      	ldr	r3, [pc, #460]	; (8003e00 <br_set_mode+0x1f8>)
 8003c34:	f44f 4208 	mov.w	r2, #34816	; 0x8800
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
	// for non-analog operation
//	DCC_TIM->DIER = TIM_DIER_UIE | TIM_DIER_CC2IE;	// tak bylo na F103
	DCC_TIM->DIER = TIM_DIER_UIE;
 8003c3a:	4b71      	ldr	r3, [pc, #452]	; (8003e00 <br_set_mode+0x1f8>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	60da      	str	r2, [r3, #12]
	
	switch (mode)
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	f200 80d3 	bhi.w	8003df0 <br_set_mode+0x1e8>
 8003c4a:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <br_set_mode+0x48>)
 8003c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003d0f 	.word	0x08003d0f
 8003c58:	08003d8b 	.word	0x08003d8b
 8003c5c:	08003dbb 	.word	0x08003dbb
	{
	case CM_OFF:
	default:
		break;
	case CM_ANCOAST:	// one terminal at GND, other V+ or off
		br_init_analog();
 8003c60:	f7ff ff9e 	bl	8003ba0 <br_init_analog>
		switch (cd.n.hbtype)
 8003c64:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <br_set_mode+0x200>)
 8003c66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d01c      	beq.n	8003ca8 <br_set_mode+0xa0>
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d029      	beq.n	8003cc6 <br_set_mode+0xbe>
		{
		case HB_IFX:
		default:
			// PWM on ENx, INx state depends on direction
			DCC_DUTY = ans.dir_rev ? 0xffff : 0;
 8003c72:	4b62      	ldr	r3, [pc, #392]	; (8003dfc <br_set_mode+0x1f4>)
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <br_set_mode+0x78>
 8003c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c7e:	e000      	b.n	8003c82 <br_set_mode+0x7a>
 8003c80:	2300      	movs	r3, #0
 8003c82:	4a5f      	ldr	r2, [pc, #380]	; (8003e00 <br_set_mode+0x1f8>)
 8003c84:	6353      	str	r3, [r2, #52]	; 0x34
			AN_FWD_DUTY = 0;
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <br_set_mode+0x1f8>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	635a      	str	r2, [r3, #52]	; 0x34
			if (ans.dir_rev)
 8003c8c:	4b5b      	ldr	r3, [pc, #364]	; (8003dfc <br_set_mode+0x1f4>)
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <br_set_mode+0x96>
				DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE | TIM_CCER_CC2E | TIM_CCER_CC2NE	// PWM out on IN1
 8003c94:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <br_set_mode+0x1f8>)
 8003c96:	f641 1255 	movw	r2, #6485	; 0x1955
 8003c9a:	621a      	str	r2, [r3, #32]
					| TIM_CCER_CC4E;	// for DCON1a EN2 control
			else
				DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE | TIM_CCER_CC2E | TIM_CCER_CC2NE	// PWM out on IN1
					| TIM_CCER_CC3P | TIM_CCER_CC3NE	// CC3 output high
					| TIM_CCER_CC4E;	// for DCON1a EN2 control
			break;
 8003c9c:	e036      	b.n	8003d0c <br_set_mode+0x104>
				DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE | TIM_CCER_CC2E | TIM_CCER_CC2NE	// PWM out on IN1
 8003c9e:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <br_set_mode+0x1f8>)
 8003ca0:	f241 6255 	movw	r2, #5717	; 0x1655
 8003ca4:	621a      	str	r2, [r3, #32]
			break;
 8003ca6:	e031      	b.n	8003d0c <br_set_mode+0x104>
			
		case HB_DRV8871:
			DCC_DUTY = 0;
 8003ca8:	4b55      	ldr	r3, [pc, #340]	; (8003e00 <br_set_mode+0x1f8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
			if (ans.dir_rev)
 8003cae:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <br_set_mode+0x1f4>)
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <br_set_mode+0xb6>
				DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;	// PWM out on IN1
 8003cb6:	4b52      	ldr	r3, [pc, #328]	; (8003e00 <br_set_mode+0x1f8>)
 8003cb8:	2211      	movs	r2, #17
 8003cba:	621a      	str	r2, [r3, #32]
			else
				DCC_TIM->CCER = TIM_CCER_CC1NE | TIM_CCER_CC2NE;	// PWM out on IN2
			break;
 8003cbc:	e026      	b.n	8003d0c <br_set_mode+0x104>
				DCC_TIM->CCER = TIM_CCER_CC1NE | TIM_CCER_CC2NE;	// PWM out on IN2
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <br_set_mode+0x1f8>)
 8003cc0:	2244      	movs	r2, #68	; 0x44
 8003cc2:	621a      	str	r2, [r3, #32]
			break;
 8003cc4:	e022      	b.n	8003d0c <br_set_mode+0x104>
			
		case HB_TB6612:
			DCC_DUTY = 0;
 8003cc6:	4b4e      	ldr	r3, [pc, #312]	; (8003e00 <br_set_mode+0x1f8>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34
			AN_FWD_DUTY = 0xffff;	// TB6612 PWM input HIGH
 8003ccc:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <br_set_mode+0x1f8>)
 8003cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cd2:	635a      	str	r2, [r3, #52]	; 0x34
			if (ans.dir_rev)	// one IN Low, the other - PWM
 8003cd4:	4b49      	ldr	r3, [pc, #292]	; (8003dfc <br_set_mode+0x1f4>)
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <br_set_mode+0xde>
				DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E;	// PWM out on IN1
 8003cdc:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <br_set_mode+0x1f8>)
 8003cde:	f240 1211 	movw	r2, #273	; 0x111
 8003ce2:	621a      	str	r2, [r3, #32]
 8003ce4:	e003      	b.n	8003cee <br_set_mode+0xe6>
			else
				DCC_TIM->CCER = TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3E;	// PWM out on IN2
 8003ce6:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <br_set_mode+0x1f8>)
 8003ce8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8003cec:	621a      	str	r2, [r3, #32]
			// BEMF experimental
			DCC_TIM->DIER = TIM_DIER_CC1IE;
 8003cee:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <br_set_mode+0x1f8>)
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	60da      	str	r2, [r3, #12]
			DCC_TIM->CCR1 = ans.steps + 1;
 8003cf4:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <br_set_mode+0x1f4>)
 8003cf6:	88db      	ldrh	r3, [r3, #6]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	4b41      	ldr	r3, [pc, #260]	; (8003e00 <br_set_mode+0x1f8>)
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34
			DCC_TIM->SR = 0;
 8003cfe:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <br_set_mode+0x1f8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
			NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003d04:	201b      	movs	r0, #27
 8003d06:	f7ff fecd 	bl	8003aa4 <__NVIC_EnableIRQ>
			break;
 8003d0a:	bf00      	nop
		}
		break;
 8003d0c:	e071      	b.n	8003df2 <br_set_mode+0x1ea>
		
	case CM_ANBRAKE:	// one terminal at GND, other V+ or GND
		br_init_analog();
 8003d0e:	f7ff ff47 	bl	8003ba0 <br_init_analog>
		switch (cd.n.hbtype)
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <br_set_mode+0x200>)
 8003d14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d014      	beq.n	8003d46 <br_set_mode+0x13e>
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d021      	beq.n	8003d64 <br_set_mode+0x15c>
		{
		case HB_IFX:
		default:
			DCC_DUTY = 0;	// controls analog op
 8003d20:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <br_set_mode+0x1f8>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	635a      	str	r2, [r3, #52]	; 0x34
			AN_FWD_DUTY = 0xffff;	// EN1/2 high
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <br_set_mode+0x1f8>)
 8003d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d2c:	635a      	str	r2, [r3, #52]	; 0x34
#ifdef AN_REV_DUTY
			AN_REV_DUTY = 0xffff;
#endif
			// PWM on one of INx
			DCC_TIM->CCER = ans.dir_rev
 8003d2e:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <br_set_mode+0x1f4>)
 8003d30:	785b      	ldrb	r3, [r3, #1]
				? TIM_CCER_CC1E | TIM_CCER_CC2E	// PWM out on IN1, IN2 = 0
					| TIM_CCER_CC3E | TIM_CCER_CC3NE | TIM_CCER_CC3NP	// CC3N output same polarity as CC3
					| TIM_CCER_CC4E	// for DCON1a EN2 control
				: TIM_CCER_CC1NE | TIM_CCER_CC2NE	// PWM out on IN2, IN1 = 0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <br_set_mode+0x134>
 8003d36:	f641 5311 	movw	r3, #7441	; 0x1d11
 8003d3a:	e001      	b.n	8003d40 <br_set_mode+0x138>
 8003d3c:	f641 5344 	movw	r3, #7492	; 0x1d44
			DCC_TIM->CCER = ans.dir_rev
 8003d40:	4a2f      	ldr	r2, [pc, #188]	; (8003e00 <br_set_mode+0x1f8>)
 8003d42:	6213      	str	r3, [r2, #32]
					| TIM_CCER_CC3E | TIM_CCER_CC3NE | TIM_CCER_CC3NP	// CC3N output same polarity as CC3
					| TIM_CCER_CC4E;	// for DCON1a EN2 control
			break;
 8003d44:	e020      	b.n	8003d88 <br_set_mode+0x180>
				
		case HB_DRV8871:
			DCC_DUTY = 0;
 8003d46:	4b2e      	ldr	r3, [pc, #184]	; (8003e00 <br_set_mode+0x1f8>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34
			if (ans.dir_rev)
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <br_set_mode+0x1f4>)
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <br_set_mode+0x154>
				// IN1 high, IN2 -DUTY
				DCC_TIM->CCER = TIM_CCER_CC1NE | TIM_CCER_CC1NP | TIM_CCER_CC2NE | TIM_CCER_CC2NP;	// PWM out on IN1
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <br_set_mode+0x1f8>)
 8003d56:	22cc      	movs	r2, #204	; 0xcc
 8003d58:	621a      	str	r2, [r3, #32]
			else	// IN2 high, IN1 -DUTY
				DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC2E | TIM_CCER_CC2P;	// PWM out on IN1
			break;
 8003d5a:	e015      	b.n	8003d88 <br_set_mode+0x180>
				DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC1P | TIM_CCER_CC2E | TIM_CCER_CC2P;	// PWM out on IN1
 8003d5c:	4b28      	ldr	r3, [pc, #160]	; (8003e00 <br_set_mode+0x1f8>)
 8003d5e:	2233      	movs	r2, #51	; 0x33
 8003d60:	621a      	str	r2, [r3, #32]
			break;
 8003d62:	e011      	b.n	8003d88 <br_set_mode+0x180>
			
		case HB_TB6612:
			DCC_DUTY = ans.dir_rev ? 0xffff : 0;
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <br_set_mode+0x1f4>)
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <br_set_mode+0x16a>
 8003d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d70:	e000      	b.n	8003d74 <br_set_mode+0x16c>
 8003d72:	2300      	movs	r3, #0
 8003d74:	4a22      	ldr	r2, [pc, #136]	; (8003e00 <br_set_mode+0x1f8>)
 8003d76:	6353      	str	r3, [r2, #52]	; 0x34
			AN_FWD_DUTY = 0;
 8003d78:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <br_set_mode+0x1f8>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	635a      	str	r2, [r3, #52]	; 0x34
			DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE
 8003d7e:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <br_set_mode+0x1f8>)
 8003d80:	f240 1255 	movw	r2, #341	; 0x155
 8003d84:	621a      	str	r2, [r3, #32]
				| TIM_CCER_CC2E | TIM_CCER_CC2NE	// PWM out on EN1/EN2/PWM
				| TIM_CCER_CC3E;	// analog pwm out
			break;
 8003d86:	bf00      	nop
		}
		break;
 8003d88:	e033      	b.n	8003df2 <br_set_mode+0x1ea>

	case CM_DCC:
		// same for all 3 bridge types, IN1/2 = DCC, EN1/2 = high
#ifdef NEWDCCTX
		DCC_DUTY = NEWDCC_STEPS / 2;	// CCR2 is DCC duty/controls INx, CCR3 controls EN 
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <br_set_mode+0x1f8>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34
		DCC_TIM->ARR = NEWDCC_STEPS - 1;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <br_set_mode+0x1f8>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
		DCC_TIM->PSC = NEWDCC_PRE1 - 1;
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <br_set_mode+0x1f8>)
 8003d98:	f241 3207 	movw	r2, #4871	; 0x1307
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
		DCC_TIM->ARR = ONE_HALFPERIOD * 2 - 1;
		DCC_DUTY = ONE_HALFPERIOD;	// CCR2 is DCC duty/controls INx, CCR3 controls EN 
#endif
#ifdef NUCLEO_L6206
		// complementary outputs from TIM3CH1 and TIM3CH2
		DCC_DUTY2 = NEWDCC_STEPS / 2;	// CCR2 is DCC duty/controls INx, CCR3 controls EN 
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <br_set_mode+0x1f8>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
		DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC2P;
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <br_set_mode+0x1f8>)
 8003da6:	2231      	movs	r2, #49	; 0x31
 8003da8:	621a      	str	r2, [r3, #32]
		// enable high by port setting
		EN1_PORT->BSRR = EN1_MSK;
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <br_set_mode+0x1fc>)
 8003dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003db0:	619a      	str	r2, [r3, #24]
		AN_FWD_DUTY = 0xffff;
	#ifdef AN_REV_DUTY
		AN_REV_DUTY = 0xffff;
	#endif
#endif
		NVIC_EnableIRQ(DCC_TIM_IRQn);
 8003db2:	201d      	movs	r0, #29
 8003db4:	f7ff fe76 	bl	8003aa4 <__NVIC_EnableIRQ>
		break;
 8003db8:	e01b      	b.n	8003df2 <br_set_mode+0x1ea>

	case CM_SX:
		DCC_TIM->BDTR = TIM_BDTR_MOE;	// turn off OSSR for Selectrix only
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <br_set_mode+0x1f8>)
 8003dbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
		// same for all 3 bridge types, IN1/2 = DCC, EN1/2 = high
		DCC_TIM->PSC = TIM_us_DIV - 1;
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <br_set_mode+0x1f8>)
 8003dc4:	2253      	movs	r2, #83	; 0x53
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
		DCC_TIM->ARR = SX_ACTIVE + SX_INACTIVE - 1;
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <br_set_mode+0x1f8>)
 8003dca:	2231      	movs	r2, #49	; 0x31
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
		DCC_DUTY = SX_ACTIVE; 
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <br_set_mode+0x1f8>)
 8003dd0:	2228      	movs	r2, #40	; 0x28
 8003dd2:	635a      	str	r2, [r3, #52]	; 0x34
		DCC_TIM->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E	// one of IN outputs active, the other is 0
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <br_set_mode+0x1f8>)
 8003dd6:	f641 5211 	movw	r2, #7441	; 0x1d11
 8003dda:	621a      	str	r2, [r3, #32]
			| TIM_CCER_CC3E | TIM_CCER_CC3NE | TIM_CCER_CC3NP	// CC3N output same polarity as CC3
			| TIM_CCER_CC4E;	// for DCON1a EN2 control
		AN_FWD_DUTY = 0xffff;
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <br_set_mode+0x1f8>)
 8003dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34
	#ifdef AN_REV_DUTY
		AN_REV_DUTY = 0xffff;
	#endif
		sx_start();
 8003de4:	f002 f8ac 	bl	8005f40 <sx_start>
		NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003de8:	201b      	movs	r0, #27
 8003dea:	f7ff fe5b 	bl	8003aa4 <__NVIC_EnableIRQ>
		break;
 8003dee:	e000      	b.n	8003df2 <br_set_mode+0x1ea>
		break;
 8003df0:	bf00      	nop
	}
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000368 	.word	0x20000368
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40020000 	.word	0x40020000
 8003e08:	200016c0 	.word	0x200016c0

08003e0c <br_set_andir>:

void br_set_andir(_Bool fwd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
	if (ans.dir_rev != fwd)
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <br_set_andir+0x34>)
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	79fa      	ldrb	r2, [r7, #7]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d00b      	beq.n	8003e38 <br_set_andir+0x2c>
	{
		ans.dir_rev = fwd;
 8003e20:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <br_set_andir+0x34>)
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	7053      	strb	r3, [r2, #1]
		ans.duty = 0;
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <br_set_andir+0x34>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	815a      	strh	r2, [r3, #10]
		br_set_mode((enum ctrlmode_) cd.n.mode);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <br_set_andir+0x38>)
 8003e2e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fee8 	bl	8003c08 <br_set_mode>
	}
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20000368 	.word	0x20000368
 8003e44:	200016c0 	.word	0x200016c0

08003e48 <br_set_anduty>:

void br_set_anduty(uint16_t duty)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	80fb      	strh	r3, [r7, #6]
	if (duty > ans.steps)
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <br_set_anduty+0x74>)
 8003e54:	88db      	ldrh	r3, [r3, #6]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d902      	bls.n	8003e62 <br_set_anduty+0x1a>
		duty = ans.steps;
 8003e5c:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <br_set_anduty+0x74>)
 8003e5e:	88db      	ldrh	r3, [r3, #6]
 8003e60:	80fb      	strh	r3, [r7, #6]
	switch (cd.n.hbtype)
 8003e62:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <br_set_anduty+0x78>)
 8003e64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d00e      	beq.n	8003e8a <br_set_anduty+0x42>
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d010      	beq.n	8003e92 <br_set_anduty+0x4a>
	{
	case HB_IFX:
	default:
		if (cd.n.mode == CM_ANBRAKE)
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <br_set_anduty+0x78>)
 8003e72:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d103      	bne.n	8003e82 <br_set_anduty+0x3a>
			DCC_DUTY = duty;
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <br_set_anduty+0x7c>)
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	6353      	str	r3, [r2, #52]	; 0x34
		else
			AN_FWD_DUTY = duty;
		break;
 8003e80:	e013      	b.n	8003eaa <br_set_anduty+0x62>
			AN_FWD_DUTY = duty;
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <br_set_anduty+0x7c>)
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8003e88:	e00f      	b.n	8003eaa <br_set_anduty+0x62>
	case HB_DRV8871:
		DCC_DUTY = duty;
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <br_set_anduty+0x7c>)
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8003e90:	e00b      	b.n	8003eaa <br_set_anduty+0x62>
	case HB_TB6612:
		if (cd.n.mode == CM_ANBRAKE)
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <br_set_anduty+0x78>)
 8003e94:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d103      	bne.n	8003ea4 <br_set_anduty+0x5c>
			AN_FWD_DUTY = duty;
 8003e9c:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <br_set_anduty+0x7c>)
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	6353      	str	r3, [r2, #52]	; 0x34
 8003ea2:	e002      	b.n	8003eaa <br_set_anduty+0x62>
		else
			DCC_DUTY = duty;
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <br_set_anduty+0x7c>)
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	6353      	str	r3, [r2, #52]	; 0x34
	}
	ans.duty = duty;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <br_set_anduty+0x74>)
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	8153      	strh	r3, [r2, #10]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000368 	.word	0x20000368
 8003ec0:	200016c0 	.word	0x200016c0
 8003ec4:	40000400 	.word	0x40000400

08003ec8 <br_cutout_start>:

void br_cutout_start(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
	// setup DMA for BDTR MOE bit clearing
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <br_cutout_end>:

void br_cutout_end(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM1_CC_IRQHandler>:
#endif

// TODO: make portable!
// Analog speed control by BEMF, Selectrix next bit loading
void TIM1_CC_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
	// may use any CC channel, so clear all CCIF flags
	TIM1->SR = ~(TIM_SR_CC1IF | TIM_SR_CC2IF | TIM_SR_CC3IF | TIM_SR_CC4IF);
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <TIM1_CC_IRQHandler+0x28>)
 8003eea:	f06f 021e 	mvn.w	r2, #30
 8003eee:	611a      	str	r2, [r3, #16]
#define FSH 1
	switch (cd.n.mode)
 8003ef0:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <TIM1_CC_IRQHandler+0x2c>)
 8003ef2:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <TIM1_CC_IRQHandler+0x22>
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d000      	beq.n	8003f00 <TIM1_CC_IRQHandler+0x1c>
		sx_tx_next_bit();
		break;
	default:
		;
	}
}
 8003efe:	e003      	b.n	8003f08 <TIM1_CC_IRQHandler+0x24>
		sx_tx_next_bit();
 8003f00:	f001 ffde 	bl	8005ec0 <sx_tx_next_bit>
		break;
 8003f04:	e000      	b.n	8003f08 <TIM1_CC_IRQHandler+0x24>
		break;
 8003f06:	bf00      	nop
}
 8003f08:	bf00      	nop
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	200016c0 	.word	0x200016c0

08003f14 <cmd_estopa>:
//==============================================================================
// COMMANDS
//==============================================================================
// emergency stop in any mode
uint8_t cmd_estopa(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
	stack_pop();
 8003f18:	f7fd f984 	bl	8001224 <stack_pop>
	return 0;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <cmd_vdisp>:

uint8_t cmd_vdisp(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b09b      	sub	sp, #108	; 0x6c
 8003f28:	af00      	add	r7, sp, #0
#if 0
	sprintf(s, "Pot: %u, Enc: %u\r\n",
		adcval[AC_POT], encval);
	con_putstr(s);
#endif
	lastcmd = cmd_vdisp;
 8003f2a:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <cmd_vdisp+0x1c>)
 8003f2c:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <cmd_vdisp+0x20>)
 8003f2e:	601a      	str	r2, [r3, #0]
	return 0;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	376c      	adds	r7, #108	; 0x6c
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	200016b4 	.word	0x200016b4
 8003f44:	08003f25 	.word	0x08003f25

08003f48 <cmd_statusdisp>:

extern uint16_t sxdatagram[128];
//extern uint32_t csid;

uint8_t cmd_statusdisp(void)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b09d      	sub	sp, #116	; 0x74
 8003f4c:	af02      	add	r7, sp, #8
	sprintf(s, "H-bridge: %s, isK: %u "
#ifdef CSENSOR
	"sensor: %s, "
#endif
	"mode: %s, command i/f: %s\r\n",
		hbname[cd.n.hbtype], 
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <cmd_statusdisp+0x78>)
 8003f50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f54:	461a      	mov	r2, r3
	sprintf(s, "H-bridge: %s, isK: %u "
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <cmd_statusdisp+0x7c>)
 8003f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		cd.n.isensek,
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <cmd_statusdisp+0x78>)
 8003f5e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	sprintf(s, "H-bridge: %s, isK: %u "
 8003f62:	461c      	mov	r4, r3
#ifdef CSENSOR
	csname[ina219.cstype],
#endif
	modename[cd.n.mode],  
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <cmd_statusdisp+0x78>)
 8003f66:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003f6a:	461a      	mov	r2, r3
	sprintf(s, "H-bridge: %s, isK: %u "
 8003f6c:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <cmd_statusdisp+0x80>)
 8003f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		cmdifname[cd.n.cmdif]);
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <cmd_statusdisp+0x78>)
 8003f74:	7892      	ldrb	r2, [r2, #2]
 8003f76:	4610      	mov	r0, r2
	sprintf(s, "H-bridge: %s, isK: %u "
 8003f78:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <cmd_statusdisp+0x84>)
 8003f7a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8003f7e:	1d38      	adds	r0, r7, #4
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4623      	mov	r3, r4
 8003f86:	460a      	mov	r2, r1
 8003f88:	4911      	ldr	r1, [pc, #68]	; (8003fd0 <cmd_statusdisp+0x88>)
 8003f8a:	f00b fd9b 	bl	800fac4 <siprintf>
	con_putstr(s);
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fc fb0f 	bl	80005b4 <con_putstr>
	cmd_vdisp();
 8003f96:	f7ff ffc5 	bl	8003f24 <cmd_vdisp>
			con_putstr(s);
		}
		con_put_nl();
	}
#endif
	sprintf(s, "Pot. ctrl channel: %d\r\n", cd.n.potctrl);
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <cmd_statusdisp+0x78>)
 8003f9c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	490b      	ldr	r1, [pc, #44]	; (8003fd4 <cmd_statusdisp+0x8c>)
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f00b fd8c 	bl	800fac4 <siprintf>
	con_putstr(s);
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fb00 	bl	80005b4 <con_putstr>
	return 0;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	376c      	adds	r7, #108	; 0x6c
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd90      	pop	{r4, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200016c0 	.word	0x200016c0
 8003fc4:	0801104c 	.word	0x0801104c
 8003fc8:	0801105c 	.word	0x0801105c
 8003fcc:	08011070 	.word	0x08011070
 8003fd0:	080106f0 	.word	0x080106f0
 8003fd4:	08010724 	.word	0x08010724

08003fd8 <cmd_andisp>:

// analog mode
uint8_t cmd_andisp(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b096      	sub	sp, #88	; 0x58
 8003fdc:	af02      	add	r7, sp, #8
	char s[80];
	sprintf(s, "dir: %s, speed: %d %d\r\n", ans.dir_rev ? "rev" : "fwd", ans.speed, ans.duty);
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <cmd_andisp+0x3c>)
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <cmd_andisp+0x12>
 8003fe6:	4a0c      	ldr	r2, [pc, #48]	; (8004018 <cmd_andisp+0x40>)
 8003fe8:	e000      	b.n	8003fec <cmd_andisp+0x14>
 8003fea:	4a0c      	ldr	r2, [pc, #48]	; (800401c <cmd_andisp+0x44>)
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <cmd_andisp+0x3c>)
 8003fee:	891b      	ldrh	r3, [r3, #8]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <cmd_andisp+0x3c>)
 8003ff4:	895b      	ldrh	r3, [r3, #10]
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4908      	ldr	r1, [pc, #32]	; (8004020 <cmd_andisp+0x48>)
 8003ffe:	f00b fd61 	bl	800fac4 <siprintf>
	con_putstr(s);
 8004002:	463b      	mov	r3, r7
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc fad5 	bl	80005b4 <con_putstr>
	return 0;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3750      	adds	r7, #80	; 0x50
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000368 	.word	0x20000368
 8004018:	0801073c 	.word	0x0801073c
 800401c:	08010740 	.word	0x08010740
 8004020:	08010744 	.word	0x08010744

08004024 <cmd_hbridge>:

//========================================================================
// pwm mode: brake/coast, bridge type
uint8_t cmd_hbridge(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
	uint8_t hbt = stack_get(0);
 800402a:	2000      	movs	r0, #0
 800402c:	f7fd f8c2 	bl	80011b4 <stack_get>
 8004030:	4603      	mov	r3, r0
 8004032:	71fb      	strb	r3, [r7, #7]
	if (hbt < HB_NTYPES)
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d803      	bhi.n	8004042 <cmd_hbridge+0x1e>
		cd.n.hbtype = hbt;
 800403a:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <cmd_hbridge+0x4c>)
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	f882 3084 	strb.w	r3, [r2, #132]	; 0x84
	br_set_mode((enum ctrlmode_) cd.n.mode);
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <cmd_hbridge+0x4c>)
 8004044:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fddd 	bl	8003c08 <br_set_mode>
	con_putstr(hbname[cd.n.hbtype]);
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <cmd_hbridge+0x4c>)
 8004050:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004054:	461a      	mov	r2, r3
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <cmd_hbridge+0x50>)
 8004058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc faa9 	bl	80005b4 <con_putstr>
	con_put_nl();
 8004062:	f7fc fabd 	bl	80005e0 <con_put_nl>
	return 0;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200016c0 	.word	0x200016c0
 8004074:	0801104c 	.word	0x0801104c

08004078 <cmd_isenseconst>:

uint8_t cmd_isenseconst(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
	cd.n.isensek = stack_get(0);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fd f899 	bl	80011b4 <stack_get>
 8004082:	4603      	mov	r3, r0
 8004084:	b29a      	uxth	r2, r3
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <cmd_isenseconst+0x34>)
 8004088:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	con_putstr(hbname[cd.n.hbtype]);
 800408c:	4b07      	ldr	r3, [pc, #28]	; (80040ac <cmd_isenseconst+0x34>)
 800408e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004092:	461a      	mov	r2, r3
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <cmd_isenseconst+0x38>)
 8004096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fa8a 	bl	80005b4 <con_putstr>
	con_put_nl();
 80040a0:	f7fc fa9e 	bl	80005e0 <con_put_nl>
	return 0;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200016c0 	.word	0x200016c0
 80040b0:	0801104c 	.word	0x0801104c

080040b4 <cmd_mode>:

uint8_t cmd_mode(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
	uint8_t cm = stack_get(0);
 80040ba:	2000      	movs	r0, #0
 80040bc:	f7fd f87a 	bl	80011b4 <stack_get>
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
	if (cm < CM_NMODES)
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d803      	bhi.n	80040d2 <cmd_mode+0x1e>
		cd.n.mode = (enum ctrlmode_)cm;
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <cmd_mode+0x6c>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	f882 3085 	strb.w	r3, [r2, #133]	; 0x85
	if (cd.n.mode == CM_ANCOAST || cd.n.mode == CM_ANBRAKE)
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <cmd_mode+0x6c>)
 80040d4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d004      	beq.n	80040e6 <cmd_mode+0x32>
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <cmd_mode+0x6c>)
 80040de:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d10e      	bne.n	8004104 <cmd_mode+0x50>
	{
		dccs.pgmmode = 0;
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <cmd_mode+0x70>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
		// suspend DCC operation
		dccs.pgmmode_active = 0;
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <cmd_mode+0x70>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	709a      	strb	r2, [r3, #2]
		
		ans.speed = 0;
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <cmd_mode+0x74>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	811a      	strh	r2, [r3, #8]
		ans.duty = 0;
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <cmd_mode+0x74>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	815a      	strh	r2, [r3, #10]
		ans.dir_rev = 1;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <cmd_mode+0x74>)
 8004100:	2201      	movs	r2, #1
 8004102:	705a      	strb	r2, [r3, #1]
	}
	br_set_mode(cd.n.mode);
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <cmd_mode+0x6c>)
 8004106:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fd7c 	bl	8003c08 <br_set_mode>
	cmd_statusdisp();
 8004110:	f7ff ff1a 	bl	8003f48 <cmd_statusdisp>
	return 0;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200016c0 	.word	0x200016c0
 8004124:	20001664 	.word	0x20001664
 8004128:	20000368 	.word	0x20000368

0800412c <cmd_ctrlif>:

uint8_t cmd_ctrlif(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	cd.n.mode = (enum ctrlmode_)stack_get(0);
 8004130:	2000      	movs	r0, #0
 8004132:	f7fd f83f 	bl	80011b4 <stack_get>
 8004136:	4603      	mov	r3, r0
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4b03      	ldr	r3, [pc, #12]	; (8004148 <cmd_ctrlif+0x1c>)
 800413c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	return 0;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200016c0 	.word	0x200016c0

0800414c <cmd_encctrl>:

static uint8_t cmd_encctrl(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
	cd.n.encctrl = stack_get(0);
 8004150:	2000      	movs	r0, #0
 8004152:	f7fd f82f 	bl	80011b4 <stack_get>
 8004156:	4603      	mov	r3, r0
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4b03      	ldr	r3, [pc, #12]	; (8004168 <cmd_encctrl+0x1c>)
 800415c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	return 0;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200016c0 	.word	0x200016c0

0800416c <cmd_potctrl>:

static uint8_t cmd_potctrl(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
	cd.n.potctrl = stack_get(0);
 8004170:	2000      	movs	r0, #0
 8004172:	f7fd f81f 	bl	80011b4 <stack_get>
 8004176:	4603      	mov	r3, r0
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4b03      	ldr	r3, [pc, #12]	; (8004188 <cmd_potctrl+0x1c>)
 800417c:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	return 0;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200016c0 	.word	0x200016c0

0800418c <andisp>:

//========================================================================
// Analog mode commands

static void andisp(void)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b09b      	sub	sp, #108	; 0x6c
 8004190:	af04      	add	r7, sp, #16
	char s[80];
	uint32_t freq = SYSCLK_FREQ / ans.steps / (SYSCLK_FREQ / ans.steps / ans.freq);
 8004192:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <andisp+0x6c>)
 8004194:	88db      	ldrh	r3, [r3, #6]
 8004196:	461a      	mov	r2, r3
 8004198:	4b18      	ldr	r3, [pc, #96]	; (80041fc <andisp+0x70>)
 800419a:	fbb3 f2f2 	udiv	r2, r3, r2
 800419e:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <andisp+0x6c>)
 80041a0:	88db      	ldrh	r3, [r3, #6]
 80041a2:	4619      	mov	r1, r3
 80041a4:	4b15      	ldr	r3, [pc, #84]	; (80041fc <andisp+0x70>)
 80041a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041aa:	4913      	ldr	r1, [pc, #76]	; (80041f8 <andisp+0x6c>)
 80041ac:	8889      	ldrh	r1, [r1, #4]
 80041ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	657b      	str	r3, [r7, #84]	; 0x54
	sprintf(s, "%" PRIu32 " Hz, %u steps, %s %u, %u\r\n", freq, ans.steps, ans.dir_rev ? "fwd" : "rev", ans.speed, ans.duty);
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <andisp+0x6c>)
 80041ba:	88db      	ldrh	r3, [r3, #6]
 80041bc:	461c      	mov	r4, r3
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <andisp+0x6c>)
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <andisp+0x3e>
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <andisp+0x74>)
 80041c8:	e000      	b.n	80041cc <andisp+0x40>
 80041ca:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <andisp+0x78>)
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <andisp+0x6c>)
 80041ce:	8912      	ldrh	r2, [r2, #8]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <andisp+0x6c>)
 80041d4:	8952      	ldrh	r2, [r2, #10]
 80041d6:	1d38      	adds	r0, r7, #4
 80041d8:	9202      	str	r2, [sp, #8]
 80041da:	9101      	str	r1, [sp, #4]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4623      	mov	r3, r4
 80041e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041e2:	4909      	ldr	r1, [pc, #36]	; (8004208 <andisp+0x7c>)
 80041e4:	f00b fc6e 	bl	800fac4 <siprintf>
	con_putstr(s);
 80041e8:	1d3b      	adds	r3, r7, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc f9e2 	bl	80005b4 <con_putstr>
}
 80041f0:	bf00      	nop
 80041f2:	375c      	adds	r7, #92	; 0x5c
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}
 80041f8:	20000368 	.word	0x20000368
 80041fc:	0501bd00 	.word	0x0501bd00
 8004200:	08010740 	.word	0x08010740
 8004204:	0801073c 	.word	0x0801073c
 8004208:	0801075c 	.word	0x0801075c

0800420c <cmd_aparms>:

static uint8_t cmd_aparms(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
	// steps freq
	ans.freq = stack_get(0);
 8004210:	2000      	movs	r0, #0
 8004212:	f7fc ffcf 	bl	80011b4 <stack_get>
 8004216:	4603      	mov	r3, r0
 8004218:	b29a      	uxth	r2, r3
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <cmd_aparms+0x38>)
 800421c:	809a      	strh	r2, [r3, #4]
	ans.steps = stack_get(1);
 800421e:	2001      	movs	r0, #1
 8004220:	f7fc ffc8 	bl	80011b4 <stack_get>
 8004224:	4603      	mov	r3, r0
 8004226:	b29a      	uxth	r2, r3
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <cmd_aparms+0x38>)
 800422a:	80da      	strh	r2, [r3, #6]
	br_set_mode(cd.n.mode);
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <cmd_aparms+0x3c>)
 800422e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fce8 	bl	8003c08 <br_set_mode>
	cmd_statusdisp();
 8004238:	f7ff fe86 	bl	8003f48 <cmd_statusdisp>
	return 0;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000368 	.word	0x20000368
 8004248:	200016c0 	.word	0x200016c0

0800424c <pgmode_check>:
// DCC programming mode commands =========================================
static _Bool pgmode_check(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
	if (!dccs.pgmmode_active)
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <pgmode_check+0x24>)
 8004252:	789b      	ldrb	r3, [r3, #2]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <pgmode_check+0x1a>
		con_putstr("Not in programming mode!\r\n");
 8004260:	4804      	ldr	r0, [pc, #16]	; (8004274 <pgmode_check+0x28>)
 8004262:	f7fc f9a7 	bl	80005b4 <con_putstr>
	return dccs.pgmmode_active;
 8004266:	4b02      	ldr	r3, [pc, #8]	; (8004270 <pgmode_check+0x24>)
 8004268:	789b      	ldrb	r3, [r3, #2]
 800426a:	b2db      	uxtb	r3, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20001664 	.word	0x20001664
 8004274:	0801077c 	.word	0x0801077c

08004278 <pgm_cmdstart>:

static _Bool pgm_cmdstart(uint16_t cv, uint8_t b1, uint8_t b3)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	80fb      	strh	r3, [r7, #6]
 8004282:	460b      	mov	r3, r1
 8004284:	717b      	strb	r3, [r7, #5]
 8004286:	4613      	mov	r3, r2
 8004288:	713b      	strb	r3, [r7, #4]
	if (pgmode_check())
 800428a:	f7ff ffdf 	bl	800424c <pgmode_check>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d026      	beq.n	80042e2 <pgm_cmdstart+0x6a>
	{
		// store sensed current value
		--cv;
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	3b01      	subs	r3, #1
 8004298:	80fb      	strh	r3, [r7, #6]
		cv &= 0x3ff;
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a0:	80fb      	strh	r3, [r7, #6]
		dccs.cmdpkt[0] = b1 | cv >> 8;
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	797b      	ldrb	r3, [r7, #5]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <pgm_cmdstart+0x74>)
 80042b2:	719a      	strb	r2, [r3, #6]
		dccs.cmdpkt[1] = cv;
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <pgm_cmdstart+0x74>)
 80042ba:	71da      	strb	r2, [r3, #7]
		dccs.cmdpkt[2] = b3;
 80042bc:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <pgm_cmdstart+0x74>)
 80042be:	793b      	ldrb	r3, [r7, #4]
 80042c0:	7213      	strb	r3, [r2, #8]
		dccs.cmdpktlen = 3;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <pgm_cmdstart+0x74>)
 80042c4:	2203      	movs	r2, #3
 80042c6:	72da      	strb	r2, [r3, #11]
		dccs.pgm_rq = 1;
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <pgm_cmdstart+0x74>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	70da      	strb	r2, [r3, #3]
		while (dccs.pgm_rq);
 80042ce:	bf00      	nop
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <pgm_cmdstart+0x74>)
 80042d2:	78db      	ldrb	r3, [r3, #3]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1fa      	bne.n	80042d0 <pgm_cmdstart+0x58>
		return dccs.ack;
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <pgm_cmdstart+0x74>)
 80042dc:	791b      	ldrb	r3, [r3, #4]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e000      	b.n	80042e4 <pgm_cmdstart+0x6c>
	}
	else return 0;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20001664 	.word	0x20001664

080042f0 <pgm_verify_bit>:

static _Bool pgm_verify_bit(uint16_t cv, uint8_t bit, _Bool bv)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	80fb      	strh	r3, [r7, #6]
 80042fa:	460b      	mov	r3, r1
 80042fc:	717b      	strb	r3, [r7, #5]
 80042fe:	4613      	mov	r3, r2
 8004300:	713b      	strb	r3, [r7, #4]
	return pgm_cmdstart(cv, 0x78, 0xe0 | bv << 3 | bit);
 8004302:	793b      	ldrb	r3, [r7, #4]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	b2da      	uxtb	r2, r3
 8004308:	797b      	ldrb	r3, [r7, #5]
 800430a:	4313      	orrs	r3, r2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f063 031f 	orn	r3, r3, #31
 8004312:	b2da      	uxtb	r2, r3
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	2178      	movs	r1, #120	; 0x78
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ffad 	bl	8004278 <pgm_cmdstart>
 800431e:	4603      	mov	r3, r0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <pgm_write_byte>:

static _Bool pgm_write_byte(uint16_t cv, uint8_t val)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	460a      	mov	r2, r1
 8004332:	80fb      	strh	r3, [r7, #6]
 8004334:	4613      	mov	r3, r2
 8004336:	717b      	strb	r3, [r7, #5]
	return pgm_cmdstart(cv, 0x7c, val);
 8004338:	797a      	ldrb	r2, [r7, #5]
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	217c      	movs	r1, #124	; 0x7c
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff9a 	bl	8004278 <pgm_cmdstart>
 8004344:	4603      	mov	r3, r0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <pgm_verify_byte>:

static _Bool pgm_verify_byte(uint16_t cv, uint8_t val)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	460a      	mov	r2, r1
 8004358:	80fb      	strh	r3, [r7, #6]
 800435a:	4613      	mov	r3, r2
 800435c:	717b      	strb	r3, [r7, #5]
	return pgm_cmdstart(cv, 0x74, val);
 800435e:	797a      	ldrb	r2, [r7, #5]
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	2174      	movs	r1, #116	; 0x74
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff ff87 	bl	8004278 <pgm_cmdstart>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <cv_write>:

static void cv_write(uint16_t cv, uint8_t val)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	460a      	mov	r2, r1
 800437e:	80fb      	strh	r3, [r7, #6]
 8004380:	4613      	mov	r3, r2
 8004382:	717b      	strb	r3, [r7, #5]
	con_putstr(pgm_write_byte(cv, val) ? "ok\r\n" : "no ACK\r\n");
 8004384:	797a      	ldrb	r2, [r7, #5]
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ffcc 	bl	8004328 <pgm_write_byte>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <cv_write+0x26>
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <cv_write+0x38>)
 8004398:	e000      	b.n	800439c <cv_write+0x28>
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <cv_write+0x3c>)
 800439c:	4618      	mov	r0, r3
 800439e:	f7fc f909 	bl	80005b4 <con_putstr>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	08010798 	.word	0x08010798
 80043b0:	080107a0 	.word	0x080107a0

080043b4 <cv_read>:
};

#define NAMEDCVS (sizeof(cvname) / sizeof(cvname[0]))
	
static uint8_t cv_read(uint16_t cvnum)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b094      	sub	sp, #80	; 0x50
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	80fb      	strh	r3, [r7, #6]
	char s[64];
	sprintf(s, "CV%-3d bin: ", cvnum);
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	4941      	ldr	r1, [pc, #260]	; (80044cc <cv_read+0x118>)
 80043c6:	4618      	mov	r0, r3
 80043c8:	f00b fb7c 	bl	800fac4 <siprintf>
	con_putstr(s);
 80043cc:	f107 030c 	add.w	r3, r7, #12
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fc f8ef 	bl	80005b4 <con_putstr>
	uint8_t val  = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t i;
	for (i = 0; i < 8; i ++)
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80043e2:	e036      	b.n	8004452 <cv_read+0x9e>
	{
		val <<= 1;
 80043e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (pgm_verify_bit(cvnum, 7 - i, 1))
 80043ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	b2d9      	uxtb	r1, r3
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	2201      	movs	r2, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff77 	bl	80042f0 <pgm_verify_bit>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <cv_read+0x60>
			val++;
 8004408:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800440c:	3301      	adds	r3, #1
 800440e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004412:	e00f      	b.n	8004434 <cv_read+0x80>
		else if (!pgm_verify_bit(cvnum, 7 - i, 0))
 8004414:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004418:	f1c3 0307 	rsb	r3, r3, #7
 800441c:	b2d9      	uxtb	r1, r3
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2200      	movs	r2, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff ff64 	bl	80042f0 <pgm_verify_bit>
 8004428:	4603      	mov	r3, r0
 800442a:	f083 0301 	eor.w	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d113      	bne.n	800445c <cv_read+0xa8>
			break;
		con_putchar((val & 1) + '0');
 8004434:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3330      	adds	r3, #48	; 0x30
 8004440:	b2db      	uxtb	r3, r3
 8004442:	4618      	mov	r0, r3
 8004444:	f7fd fe78 	bl	8002138 <con_putchar>
	for (i = 0; i < 8; i ++)
 8004448:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800444c:	3301      	adds	r3, #1
 800444e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8004452:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004456:	2b07      	cmp	r3, #7
 8004458:	d9c4      	bls.n	80043e4 <cv_read+0x30>
 800445a:	e000      	b.n	800445e <cv_read+0xaa>
			break;
 800445c:	bf00      	nop
	}
	if (i == 8)
 800445e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004462:	2b08      	cmp	r3, #8
 8004464:	d129      	bne.n	80044ba <cv_read+0x106>
	{
		sprintf(s, ", hex: %02x, dec: %3d ", val, val);
 8004466:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800446a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800446e:	f107 000c 	add.w	r0, r7, #12
 8004472:	4917      	ldr	r1, [pc, #92]	; (80044d0 <cv_read+0x11c>)
 8004474:	f00b fb26 	bl	800fac4 <siprintf>
		con_putstr(s);
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc f899 	bl	80005b4 <con_putstr>
		if (cvnum <= NAMEDCVS && cvname[cvnum - 1][0])
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	2b1d      	cmp	r3, #29
 8004486:	d81b      	bhi.n	80044c0 <cv_read+0x10c>
 8004488:	88fb      	ldrh	r3, [r7, #6]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a11      	ldr	r2, [pc, #68]	; (80044d4 <cv_read+0x120>)
 800448e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <cv_read+0x10c>
		{
			sprintf(s, "%s, ",cvname[cvnum - 1]);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	3b01      	subs	r3, #1
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <cv_read+0x120>)
 800449e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044a2:	f107 030c 	add.w	r3, r7, #12
 80044a6:	490c      	ldr	r1, [pc, #48]	; (80044d8 <cv_read+0x124>)
 80044a8:	4618      	mov	r0, r3
 80044aa:	f00b fb0b 	bl	800fac4 <siprintf>
			con_putstr(s);
 80044ae:	f107 030c 	add.w	r3, r7, #12
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc f87e 	bl	80005b4 <con_putstr>
 80044b8:	e002      	b.n	80044c0 <cv_read+0x10c>
		}
	}
	else
		con_putstr(" no ACK\r\n");
 80044ba:	4808      	ldr	r0, [pc, #32]	; (80044dc <cv_read+0x128>)
 80044bc:	f7fc f87a 	bl	80005b4 <con_putstr>
	return val;
 80044c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3750      	adds	r7, #80	; 0x50
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	08010840 	.word	0x08010840
 80044d0:	08010850 	.word	0x08010850
 80044d4:	0801107c 	.word	0x0801107c
 80044d8:	08010868 	.word	0x08010868
 80044dc:	08010870 	.word	0x08010870

080044e0 <cv_verify>:

static void cv_verify(uint16_t cvnum, uint8_t val)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	460a      	mov	r2, r1
 80044ea:	80fb      	strh	r3, [r7, #6]
 80044ec:	4613      	mov	r3, r2
 80044ee:	717b      	strb	r3, [r7, #5]
	con_putstr("verify: ");
 80044f0:	480a      	ldr	r0, [pc, #40]	; (800451c <cv_verify+0x3c>)
 80044f2:	f7fc f85f 	bl	80005b4 <con_putstr>
	con_putstr(pgm_verify_byte(cvnum, val) ? "ok\r\n" : "no ACK\r\n");
 80044f6:	797a      	ldrb	r2, [r7, #5]
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff26 	bl	800434e <pgm_verify_byte>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <cv_verify+0x2c>
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <cv_verify+0x40>)
 800450a:	e000      	b.n	800450e <cv_verify+0x2e>
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <cv_verify+0x44>)
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc f850 	bl	80005b4 <con_putstr>
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	0801087c 	.word	0x0801087c
 8004520:	08010798 	.word	0x08010798
 8004524:	080107a0 	.word	0x080107a0

08004528 <cv_readv>:

static uint8_t cv_readv(uint16_t cvnum)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	80fb      	strh	r3, [r7, #6]
	if (pgmode_check())
 8004532:	f7ff fe8b 	bl	800424c <pgmode_check>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <cv_readv+0x30>
	{
		uint8_t val = cv_read(cvnum);
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ff38 	bl	80043b4 <cv_read>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]
		cv_verify(cvnum, val);
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ffc6 	bl	80044e0 <cv_verify>
		return val;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	e000      	b.n	800455a <cv_readv+0x32>
	}
	return 0;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <cmd_cvrd>:

static uint8_t cmd_cvrd(void)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
	// cvnum
	uint16_t cvnum = stack_get(0);
 8004568:	2000      	movs	r0, #0
 800456a:	f7fc fe23 	bl	80011b4 <stack_get>
 800456e:	4603      	mov	r3, r0
 8004570:	80fb      	strh	r3, [r7, #6]
	cv_readv(cvnum);
 8004572:	88fb      	ldrh	r3, [r7, #6]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ffd7 	bl	8004528 <cv_readv>
	return 0;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <cmd_cvrdm>:

static uint8_t cmd_cvrdm(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
	if (pgmode_check())
 800458a:	f7ff fe5f 	bl	800424c <pgmode_check>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d019      	beq.n	80045c8 <cmd_cvrdm+0x44>
	{
		// cnt cvnum
		uint16_t cvnum = stack_get(0);
 8004594:	2000      	movs	r0, #0
 8004596:	f7fc fe0d 	bl	80011b4 <stack_get>
 800459a:	4603      	mov	r3, r0
 800459c:	80fb      	strh	r3, [r7, #6]
		uint16_t cnt = stack_get(1) & 0x1f;
 800459e:	2001      	movs	r0, #1
 80045a0:	f7fc fe08 	bl	80011b4 <stack_get>
 80045a4:	4603      	mov	r3, r0
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	80bb      	strh	r3, [r7, #4]
		while (cnt)
 80045ae:	e008      	b.n	80045c2 <cmd_cvrdm+0x3e>
		{
			cv_readv(cvnum++);
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	80fa      	strh	r2, [r7, #6]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff ffb6 	bl	8004528 <cv_readv>
			cnt--;
 80045bc:	88bb      	ldrh	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	80bb      	strh	r3, [r7, #4]
		while (cnt)
 80045c2:	88bb      	ldrh	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f3      	bne.n	80045b0 <cmd_cvrdm+0x2c>
		}
	}
	return 0;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <cmd_cvrda>:

static uint8_t cmd_cvrda(void)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	af00      	add	r7, sp, #0
	cv_readv(1);
 80045d6:	2001      	movs	r0, #1
 80045d8:	f7ff ffa6 	bl	8004528 <cv_readv>
	return 0;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <cmd_cvwr>:

static uint8_t cmd_cvwr(void)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
	// val cvnum
	uint16_t cvnum = stack_get(0);
 80045e8:	2000      	movs	r0, #0
 80045ea:	f7fc fde3 	bl	80011b4 <stack_get>
 80045ee:	4603      	mov	r3, r0
 80045f0:	80fb      	strh	r3, [r7, #6]
	uint8_t val = stack_get(1);
 80045f2:	2001      	movs	r0, #1
 80045f4:	f7fc fdde 	bl	80011b4 <stack_get>
 80045f8:	4603      	mov	r3, r0
 80045fa:	717b      	strb	r3, [r7, #5]
	cv_write(cvnum, val);
 80045fc:	797a      	ldrb	r2, [r7, #5]
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff feb6 	bl	8004374 <cv_write>
	return 0;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <cmd_cvwra>:

static uint8_t cmd_cvwra(void)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
	// DCC address
	uint16_t val = stack_get(0);
 8004618:	2000      	movs	r0, #0
 800461a:	f7fc fdcb 	bl	80011b4 <stack_get>
 800461e:	4603      	mov	r3, r0
 8004620:	80fb      	strh	r3, [r7, #6]
	cv_write(1, val);
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	4619      	mov	r1, r3
 8004628:	2001      	movs	r0, #1
 800462a:	f7ff fea3 	bl	8004374 <cv_write>
	return 0;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <cmd_cvwrxa>:

static uint8_t cmd_cvwrxa(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
	// DCC address
	uint16_t val = stack_get(0);
 800463e:	2000      	movs	r0, #0
 8004640:	f7fc fdb8 	bl	80011b4 <stack_get>
 8004644:	4603      	mov	r3, r0
 8004646:	80fb      	strh	r3, [r7, #6]
	cv_write(17, val >> 8 | 0xc0);
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	b29b      	uxth	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	2011      	movs	r0, #17
 800465a:	f7ff fe8b 	bl	8004374 <cv_write>
	cv_write(18, val);
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	4619      	mov	r1, r3
 8004664:	2012      	movs	r0, #18
 8004666:	f7ff fe85 	bl	8004374 <cv_write>
	return 0;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <cmd_cvbwr>:

static uint8_t cmd_cvbwr(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
	// val cvnum
	uint16_t cv = stack_get(0);
 800467a:	2000      	movs	r0, #0
 800467c:	f7fc fd9a 	bl	80011b4 <stack_get>
 8004680:	4603      	mov	r3, r0
 8004682:	80fb      	strh	r3, [r7, #6]
	uint8_t bit = stack_get(1) & 7;
 8004684:	2001      	movs	r0, #1
 8004686:	f7fc fd95 	bl	80011b4 <stack_get>
 800468a:	4603      	mov	r3, r0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	717b      	strb	r3, [r7, #5]
	_Bool bv = stack_get(2);
 8004694:	2002      	movs	r0, #2
 8004696:	f7fc fd8d 	bl	80011b4 <stack_get>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	713b      	strb	r3, [r7, #4]
	pgm_cmdstart(cv, 0x78, 0xf0 | bv << 3 | bit);
 80046a6:	793b      	ldrb	r3, [r7, #4]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	797b      	ldrb	r3, [r7, #5]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f063 030f 	orn	r3, r3, #15
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	2178      	movs	r1, #120	; 0x78
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fddb 	bl	8004278 <pgm_cmdstart>
	return 0;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <cmd_cvvf>:

static uint8_t cmd_cvvf(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
	// val cvnum
	uint16_t cvnum = stack_get(0);
 80046d2:	2000      	movs	r0, #0
 80046d4:	f7fc fd6e 	bl	80011b4 <stack_get>
 80046d8:	4603      	mov	r3, r0
 80046da:	80fb      	strh	r3, [r7, #6]
	uint8_t val = stack_get(1);
 80046dc:	2001      	movs	r0, #1
 80046de:	f7fc fd69 	bl	80011b4 <stack_get>
 80046e2:	4603      	mov	r3, r0
 80046e4:	717b      	strb	r3, [r7, #5]
	cv_verify(cvnum, val);
 80046e6:	797a      	ldrb	r2, [r7, #5]
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fef7 	bl	80044e0 <cv_verify>
	return 0;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <cmd_cvwrv>:

static uint8_t cmd_cvwrv(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
	// val cvnum
	cmd_cvwr();
 8004700:	f7ff ff6f 	bl	80045e2 <cmd_cvwr>
	cmd_cvvf();
 8004704:	f7ff ffe2 	bl	80046cc <cmd_cvvf>
	return 0;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <pom_cv_write>:

// POM commands ==========================================================
static void pom_cv_write(uint16_t addr, uint16_t cv, uint8_t val)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	80fb      	strh	r3, [r7, #6]
 800471a:	460b      	mov	r3, r1
 800471c:	80bb      	strh	r3, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	73fb      	strb	r3, [r7, #15]
	if (addr > 127)
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b7f      	cmp	r3, #127	; 0x7f
 800472a:	d90d      	bls.n	8004748 <pom_cv_write+0x38>
		dccs.cmdpkt[i++] = 0xc0 | addr >> 8;
 800472c:	88fb      	ldrh	r3, [r7, #6]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	b29b      	uxth	r3, r3
 8004732:	b2da      	uxtb	r2, r3
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	73f9      	strb	r1, [r7, #15]
 800473a:	4619      	mov	r1, r3
 800473c:	f062 033f 	orn	r3, r2, #63	; 0x3f
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <pom_cv_write+0xbc>)
 8004744:	440b      	add	r3, r1
 8004746:	719a      	strb	r2, [r3, #6]
	dccs.cmdpkt[i++] = addr;
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	73fa      	strb	r2, [r7, #15]
 800474e:	4619      	mov	r1, r3
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	b2da      	uxtb	r2, r3
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <pom_cv_write+0xbc>)
 8004756:	440b      	add	r3, r1
 8004758:	719a      	strb	r2, [r3, #6]
	--cv;
 800475a:	88bb      	ldrh	r3, [r7, #4]
 800475c:	3b01      	subs	r3, #1
 800475e:	80bb      	strh	r3, [r7, #4]
	cv &= 0x3ff;
 8004760:	88bb      	ldrh	r3, [r7, #4]
 8004762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004766:	80bb      	strh	r3, [r7, #4]
	dccs.cmdpkt[i++] = 0xec | cv >> 8;
 8004768:	88bb      	ldrh	r3, [r7, #4]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	b29b      	uxth	r3, r3
 800476e:	b2da      	uxtb	r2, r3
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	1c59      	adds	r1, r3, #1
 8004774:	73f9      	strb	r1, [r7, #15]
 8004776:	4619      	mov	r1, r3
 8004778:	f062 0313 	orn	r3, r2, #19
 800477c:	b2da      	uxtb	r2, r3
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <pom_cv_write+0xbc>)
 8004780:	440b      	add	r3, r1
 8004782:	719a      	strb	r2, [r3, #6]
	dccs.cmdpkt[i++] = cv;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	73fa      	strb	r2, [r7, #15]
 800478a:	4619      	mov	r1, r3
 800478c:	88bb      	ldrh	r3, [r7, #4]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <pom_cv_write+0xbc>)
 8004792:	440b      	add	r3, r1
 8004794:	719a      	strb	r2, [r3, #6]
	dccs.cmdpkt[i++] = val;
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	73fa      	strb	r2, [r7, #15]
 800479c:	461a      	mov	r2, r3
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <pom_cv_write+0xbc>)
 80047a0:	4413      	add	r3, r2
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	719a      	strb	r2, [r3, #6]
	dccs.cmdpktlen = i;
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <pom_cv_write+0xbc>)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	72d3      	strb	r3, [r2, #11]
	dccs.pgm_rq = 1;
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <pom_cv_write+0xbc>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	70da      	strb	r2, [r3, #3]
	while (dccs.pgm_rq);
 80047b2:	bf00      	nop
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <pom_cv_write+0xbc>)
 80047b6:	78db      	ldrb	r3, [r3, #3]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1fa      	bne.n	80047b4 <pom_cv_write+0xa4>
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	20001664 	.word	0x20001664

080047d0 <cmd_pomcvwr>:

static uint8_t cmd_pomcvwr(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
	if (dccs.pgmmode_active)
 80047d6:	4b11      	ldr	r3, [pc, #68]	; (800481c <cmd_pomcvwr+0x4c>)
 80047d8:	789b      	ldrb	r3, [r3, #2]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <cmd_pomcvwr+0x1a>
		con_putstr("Pgm mode!\r\n");
 80047e0:	480f      	ldr	r0, [pc, #60]	; (8004820 <cmd_pomcvwr+0x50>)
 80047e2:	f7fb fee7 	bl	80005b4 <con_putstr>
		uint16_t cv = stack_pop();
		uint8_t val = stack_pop();
		pom_cv_write(addr, cv, val);
		return dccs.ack;
	}
	return 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e014      	b.n	8004814 <cmd_pomcvwr+0x44>
		uint16_t addr = stack_pop();
 80047ea:	f7fc fd1b 	bl	8001224 <stack_pop>
 80047ee:	4603      	mov	r3, r0
 80047f0:	80fb      	strh	r3, [r7, #6]
		uint16_t cv = stack_pop();
 80047f2:	f7fc fd17 	bl	8001224 <stack_pop>
 80047f6:	4603      	mov	r3, r0
 80047f8:	80bb      	strh	r3, [r7, #4]
		uint8_t val = stack_pop();
 80047fa:	f7fc fd13 	bl	8001224 <stack_pop>
 80047fe:	4603      	mov	r3, r0
 8004800:	70fb      	strb	r3, [r7, #3]
		pom_cv_write(addr, cv, val);
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	88b9      	ldrh	r1, [r7, #4]
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff81 	bl	8004710 <pom_cv_write>
		return dccs.ack;
 800480e:	4b03      	ldr	r3, [pc, #12]	; (800481c <cmd_pomcvwr+0x4c>)
 8004810:	791b      	ldrb	r3, [r3, #4]
 8004812:	b2db      	uxtb	r3, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20001664 	.word	0x20001664
 8004820:	08010888 	.word	0x08010888

08004824 <cmd_addrdisp>:

// controller parameters =================================================
static uint8_t cmd_addrdisp(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b090      	sub	sp, #64	; 0x40
 8004828:	af00      	add	r7, sp, #0
	char resp[64];
	
	sprintf(resp, "addr: 0x%02x, ctrl mode: %u\r\n", cd.n.rs485_addr, cd.n.cmdif);//, nframes, goodframes);
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <cmd_addrdisp+0x2c>)
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	461a      	mov	r2, r3
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <cmd_addrdisp+0x2c>)
 8004832:	789b      	ldrb	r3, [r3, #2]
 8004834:	4638      	mov	r0, r7
 8004836:	4907      	ldr	r1, [pc, #28]	; (8004854 <cmd_addrdisp+0x30>)
 8004838:	f00b f944 	bl	800fac4 <siprintf>
	con_putstr(resp);
 800483c:	463b      	mov	r3, r7
 800483e:	4618      	mov	r0, r3
 8004840:	f7fb feb8 	bl	80005b4 <con_putstr>
	return 0;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3740      	adds	r7, #64	; 0x40
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200016c0 	.word	0x200016c0
 8004854:	08010894 	.word	0x08010894

08004858 <cmd_addr>:

static uint8_t cmd_addr(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
	cd.n.rs485_addr = stack_pop();
 800485c:	f7fc fce2 	bl	8001224 <stack_pop>
 8004860:	4603      	mov	r3, r0
 8004862:	b2da      	uxtb	r2, r3
 8004864:	4b02      	ldr	r3, [pc, #8]	; (8004870 <cmd_addr+0x18>)
 8004866:	705a      	strb	r2, [r3, #1]
	return 0;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	200016c0 	.word	0x200016c0

08004874 <get_devidx>:
// DCC device control ------------------------------------------------------------------
static uint8_t get_devidx(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
	return stack_pop() % NDEVICES;
 8004878:	f7fc fcd4 	bl	8001224 <stack_pop>
 800487c:	4603      	mov	r3, r0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	b2db      	uxtb	r3, r3
}
 8004886:	4618      	mov	r0, r3
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <devdisp>:

static void devdisp(uint8_t idx)
{
 800488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488e:	b09f      	sub	sp, #124	; 0x7c
 8004890:	af06      	add	r7, sp, #24
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]
	char s[80];
	sprintf(s, "%2u: addr %4u, fl %04x, %s %3u, fun %02" PRIx32 " %08" PRIx32 " %08" PRIx32 "\r\n",
 8004896:	7bfe      	ldrb	r6, [r7, #15]
		idx, cd.n.dev[idx].dccaddr, cd.n.dev[idx].flags.w,
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	4a2b      	ldr	r2, [pc, #172]	; (8004948 <devdisp+0xbc>)
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	889b      	ldrh	r3, [r3, #4]
	sprintf(s, "%2u: addr %4u, fl %04x, %s %3u, fun %02" PRIx32 " %08" PRIx32 " %08" PRIx32 "\r\n",
 80048a2:	469c      	mov	ip, r3
		idx, cd.n.dev[idx].dccaddr, cd.n.dev[idx].flags.w,
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	4a28      	ldr	r2, [pc, #160]	; (8004948 <devdisp+0xbc>)
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	88db      	ldrh	r3, [r3, #6]
	sprintf(s, "%2u: addr %4u, fl %04x, %s %3u, fun %02" PRIx32 " %08" PRIx32 " %08" PRIx32 "\r\n",
 80048ae:	60bb      	str	r3, [r7, #8]
	loco[idx].rev ? "Rev" : "Fwd", loco[idx].dspeed,
 80048b0:	7bfa      	ldrb	r2, [r7, #15]
 80048b2:	4926      	ldr	r1, [pc, #152]	; (800494c <devdisp+0xc0>)
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	3301      	adds	r3, #1
 80048c0:	781b      	ldrb	r3, [r3, #0]
	sprintf(s, "%2u: addr %4u, fl %04x, %s %3u, fun %02" PRIx32 " %08" PRIx32 " %08" PRIx32 "\r\n",
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <devdisp+0x3e>
 80048c6:	4922      	ldr	r1, [pc, #136]	; (8004950 <devdisp+0xc4>)
 80048c8:	e000      	b.n	80048cc <devdisp+0x40>
 80048ca:	4922      	ldr	r1, [pc, #136]	; (8004954 <devdisp+0xc8>)
	loco[idx].rev ? "Rev" : "Fwd", loco[idx].dspeed,
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	481f      	ldr	r0, [pc, #124]	; (800494c <devdisp+0xc0>)
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4403      	add	r3, r0
 80048da:	3302      	adds	r3, #2
 80048dc:	781b      	ldrb	r3, [r3, #0]
	sprintf(s, "%2u: addr %4u, fl %04x, %s %3u, fun %02" PRIx32 " %08" PRIx32 " %08" PRIx32 "\r\n",
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	7bfa      	ldrb	r2, [r7, #15]
 80048e2:	481a      	ldr	r0, [pc, #104]	; (800494c <devdisp+0xc0>)
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4403      	add	r3, r0
 80048ee:	330c      	adds	r3, #12
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	4c15      	ldr	r4, [pc, #84]	; (800494c <devdisp+0xc0>)
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4423      	add	r3, r4
 8004900:	3308      	adds	r3, #8
 8004902:	681c      	ldr	r4, [r3, #0]
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	4d11      	ldr	r5, [pc, #68]	; (800494c <devdisp+0xc0>)
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	442b      	add	r3, r5
 8004912:	3304      	adds	r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f107 0510 	add.w	r5, r7, #16
 800491a:	9305      	str	r3, [sp, #20]
 800491c:	9404      	str	r4, [sp, #16]
 800491e:	9003      	str	r0, [sp, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	9302      	str	r3, [sp, #8]
 8004924:	9101      	str	r1, [sp, #4]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4663      	mov	r3, ip
 800492c:	4632      	mov	r2, r6
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <devdisp+0xcc>)
 8004930:	4628      	mov	r0, r5
 8004932:	f00b f8c7 	bl	800fac4 <siprintf>
	loco[idx].fun.w[2], loco[idx].fun.w[1], loco[idx].fun.w[0]);
	con_putstr(s);
 8004936:	f107 0310 	add.w	r3, r7, #16
 800493a:	4618      	mov	r0, r3
 800493c:	f7fb fe3a 	bl	80005b4 <con_putstr>
}
 8004940:	bf00      	nop
 8004942:	3764      	adds	r7, #100	; 0x64
 8004944:	46bd      	mov	sp, r7
 8004946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004948:	200016c0 	.word	0x200016c0
 800494c:	200013e4 	.word	0x200013e4
 8004950:	080108b4 	.word	0x080108b4
 8004954:	080108b8 	.word	0x080108b8
 8004958:	080108bc 	.word	0x080108bc

0800495c <cmd_devdisp>:

static uint8_t cmd_devdisp(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
	// idx
	uint8_t idx = get_devidx();
 8004962:	f7ff ff87 	bl	8004874 <get_devidx>
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
	devdisp(idx);
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ff8d 	bl	800488c <devdisp>
	return 0;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <cmd_devdef>:

static uint8_t cmd_devdef(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
	// DCCaddr idx
	uint8_t devidx = get_devidx();
 8004982:	f7ff ff77 	bl	8004874 <get_devidx>
 8004986:	4603      	mov	r3, r0
 8004988:	717b      	strb	r3, [r7, #5]
	uint16_t addr = stack_pop();
 800498a:	f7fc fc4b 	bl	8001224 <stack_pop>
 800498e:	4603      	mov	r3, r0
 8004990:	80fb      	strh	r3, [r7, #6]
	if (addr < 0xc000 && addr > 127)
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004998:	d209      	bcs.n	80049ae <cmd_devdef+0x32>
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	2b7f      	cmp	r3, #127	; 0x7f
 800499e:	d906      	bls.n	80049ae <cmd_devdef+0x32>
		addr = 0xc000 + (addr & 0x3fff);	// implicit long address
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80049ac:	80fb      	strh	r3, [r7, #6]
	uint32_t devflags = stack_pop();
 80049ae:	f7fc fc39 	bl	8001224 <stack_pop>
 80049b2:	6038      	str	r0, [r7, #0]
	cd.n.dev[devidx].dccaddr = addr;
 80049b4:	797b      	ldrb	r3, [r7, #5]
 80049b6:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <cmd_devdef+0x98>)
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	809a      	strh	r2, [r3, #4]
	cd.n.dev[devidx].flags.w = devflags;
 80049c0:	797b      	ldrb	r3, [r7, #5]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	b291      	uxth	r1, r2
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <cmd_devdef+0x98>)
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	460a      	mov	r2, r1
 80049ce:	80da      	strh	r2, [r3, #6]
	loco[devidx].dspeed = 0;
 80049d0:	797a      	ldrb	r2, [r7, #5]
 80049d2:	4911      	ldr	r1, [pc, #68]	; (8004a18 <cmd_devdef+0x9c>)
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3302      	adds	r3, #2
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
	loco[devidx].fun.w[0] = cd.n.dev[devidx].flags.bit.def_f1_4 << 1;
 80049e4:	797b      	ldrb	r3, [r7, #5]
 80049e6:	4a0b      	ldr	r2, [pc, #44]	; (8004a14 <cmd_devdef+0x98>)
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	79db      	ldrb	r3, [r3, #7]
 80049ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	797a      	ldrb	r2, [r7, #5]
 80049f8:	4618      	mov	r0, r3
 80049fa:	4907      	ldr	r1, [pc, #28]	; (8004a18 <cmd_devdef+0x9c>)
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	3304      	adds	r3, #4
 8004a08:	6018      	str	r0, [r3, #0]
	return 0;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200016c0 	.word	0x200016c0
 8004a18:	200013e4 	.word	0x200013e4

08004a1c <cmd_speedgroup>:
	return 0;
}
#endif
// set speed for group
static uint8_t cmd_speedgroup(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
	// DCCaddr idx
	uint8_t last = stack_pop() % NDEVICES;
 8004a22:	f7fc fbff 	bl	8001224 <stack_pop>
 8004a26:	4603      	mov	r3, r0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	71bb      	strb	r3, [r7, #6]
	uint8_t i = stack_pop() % NDEVICES;
 8004a30:	f7fc fbf8 	bl	8001224 <stack_pop>
 8004a34:	4603      	mov	r3, r0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t speed = stack_pop();
 8004a3e:	f7fc fbf1 	bl	8001224 <stack_pop>
 8004a42:	4603      	mov	r3, r0
 8004a44:	717b      	strb	r3, [r7, #5]
	for (; i <= last; i++)
 8004a46:	e00c      	b.n	8004a62 <cmd_speedgroup+0x46>
		loco[i].dspeed = speed;
 8004a48:	79fa      	ldrb	r2, [r7, #7]
 8004a4a:	490a      	ldr	r1, [pc, #40]	; (8004a74 <cmd_speedgroup+0x58>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	3302      	adds	r3, #2
 8004a58:	797a      	ldrb	r2, [r7, #5]
 8004a5a:	701a      	strb	r2, [r3, #0]
	for (; i <= last; i++)
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	71fb      	strb	r3, [r7, #7]
 8004a62:	79fa      	ldrb	r2, [r7, #7]
 8004a64:	79bb      	ldrb	r3, [r7, #6]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d9ee      	bls.n	8004a48 <cmd_speedgroup+0x2c>
	return 0;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	200013e4 	.word	0x200013e4

08004a78 <cmd_devdelgroup>:

// delete group of devices
static uint8_t cmd_devdelgroup(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	// DCCaddr idx
	uint8_t last = stack_pop() % NDEVICES;
 8004a7e:	f7fc fbd1 	bl	8001224 <stack_pop>
 8004a82:	4603      	mov	r3, r0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = stack_pop() % NDEVICES; i <= last; i++)
 8004a8c:	f7fc fbca 	bl	8001224 <stack_pop>
 8004a90:	4603      	mov	r3, r0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f003 031f 	and.w	r3, r3, #31
 8004a98:	71fb      	strb	r3, [r7, #7]
 8004a9a:	e023      	b.n	8004ae4 <cmd_devdelgroup+0x6c>
	{
		memset(&cd.n.dev[i], 0, sizeof(cd.n.dev[i]));
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <cmd_devdelgroup+0x80>)
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f00b f802 	bl	800fab4 <memset>
		loco[i].dspeed = 0;
 8004ab0:	79fa      	ldrb	r2, [r7, #7]
 8004ab2:	4912      	ldr	r1, [pc, #72]	; (8004afc <cmd_devdelgroup+0x84>)
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	3302      	adds	r3, #2
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
		memset(&loco[i].fun, 0, sizeof(loco[i].fun));
 8004ac4:	79fa      	ldrb	r2, [r7, #7]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4a0b      	ldr	r2, [pc, #44]	; (8004afc <cmd_devdelgroup+0x84>)
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	220c      	movs	r2, #12
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f00a ffeb 	bl	800fab4 <memset>
	for (uint8_t i = stack_pop() % NDEVICES; i <= last; i++)
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	71fb      	strb	r3, [r7, #7]
 8004ae4:	79fa      	ldrb	r2, [r7, #7]
 8004ae6:	79bb      	ldrb	r3, [r7, #6]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d9d7      	bls.n	8004a9c <cmd_devdelgroup+0x24>
	}
	return 0;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200016c0 	.word	0x200016c0
 8004afc:	200013e4 	.word	0x200013e4

08004b00 <cmd_devlist>:
// list all devices - no args
static uint8_t cmd_devlist(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
	for (uint8_t idx = 0; idx < NDEVICES; idx++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	71fb      	strb	r3, [r7, #7]
 8004b0a:	e014      	b.n	8004b36 <cmd_devlist+0x36>
		if (cd.n.dev[idx].dccaddr || cd.n.dev[idx].flags.w)
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <cmd_devlist+0x48>)
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	889b      	ldrh	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <cmd_devlist+0x28>
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <cmd_devlist+0x48>)
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	88db      	ldrh	r3, [r3, #6]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <cmd_devlist+0x30>
			devdisp(idx);
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff feae 	bl	800488c <devdisp>
	for (uint8_t idx = 0; idx < NDEVICES; idx++)
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	3301      	adds	r3, #1
 8004b34:	71fb      	strb	r3, [r7, #7]
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	2b1f      	cmp	r3, #31
 8004b3a:	d9e7      	bls.n	8004b0c <cmd_devlist+0xc>
	return 0;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	200016c0 	.word	0x200016c0

08004b4c <cmd_devoff>:

static uint8_t cmd_devoff(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
	// idx
	uint8_t devidx = get_devidx();
 8004b52:	f7ff fe8f 	bl	8004874 <get_devidx>
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
	cd.n.dev[devidx].flags.w = 0;
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <cmd_devoff+0x24>)
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	2200      	movs	r2, #0
 8004b64:	80da      	strh	r2, [r3, #6]
	return 0;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	200016c0 	.word	0x200016c0

08004b74 <cmd_funbitfield>:
	return 0;
}
#endif
// Function control ======================================================
static uint8_t cmd_funbitfield(void)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
	// value width start devidx
	uint8_t devidx = get_devidx();
 8004b7a:	f7ff fe7b 	bl	8004874 <get_devidx>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	73fb      	strb	r3, [r7, #15]
	uint8_t start = stack_pop();
 8004b82:	f7fc fb4f 	bl	8001224 <stack_pop>
 8004b86:	4603      	mov	r3, r0
 8004b88:	73bb      	strb	r3, [r7, #14]
	uint8_t width = stack_pop() % 32;
 8004b8a:	f7fc fb4b 	bl	8001224 <stack_pop>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	737b      	strb	r3, [r7, #13]
	uint8_t val = stack_pop();
 8004b98:	f7fc fb44 	bl	8001224 <stack_pop>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	733b      	strb	r3, [r7, #12]
	uint8_t widx = start / 32;
 8004ba0:	7bbb      	ldrb	r3, [r7, #14]
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	72fb      	strb	r3, [r7, #11]
	start %= 32;
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	73bb      	strb	r3, [r7, #14]
	uint32_t lmask = 0xffffffff >> (32 - width) << start;
 8004bae:	7b7b      	ldrb	r3, [r7, #13]
 8004bb0:	f1c3 0320 	rsb	r3, r3, #32
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	40da      	lsrs	r2, r3
 8004bba:	7bbb      	ldrb	r3, [r7, #14]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	607b      	str	r3, [r7, #4]
	loco[devidx].fun.w[widx] = (loco[devidx].fun.w[widx] & ~lmask) | (val << start & lmask);
 8004bc2:	7bfa      	ldrb	r2, [r7, #15]
 8004bc4:	7af9      	ldrb	r1, [r7, #11]
 8004bc6:	4830      	ldr	r0, [pc, #192]	; (8004c88 <cmd_funbitfield+0x114>)
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	440b      	add	r3, r1
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4403      	add	r3, r0
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	ea02 0103 	and.w	r1, r2, r3
 8004bde:	7b3a      	ldrb	r2, [r7, #12]
 8004be0:	7bbb      	ldrb	r3, [r7, #14]
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4013      	ands	r3, r2
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	7af8      	ldrb	r0, [r7, #11]
 8004bf0:	4319      	orrs	r1, r3
 8004bf2:	4c25      	ldr	r4, [pc, #148]	; (8004c88 <cmd_funbitfield+0x114>)
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4403      	add	r3, r0
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4423      	add	r3, r4
 8004c00:	6059      	str	r1, [r3, #4]
	if (start + width > 32)
 8004c02:	7bba      	ldrb	r2, [r7, #14]
 8004c04:	7b7b      	ldrb	r3, [r7, #13]
 8004c06:	4413      	add	r3, r2
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	dd33      	ble.n	8004c74 <cmd_funbitfield+0x100>
	{
		val >>= 32 - start;
 8004c0c:	7b3a      	ldrb	r2, [r7, #12]
 8004c0e:	7bbb      	ldrb	r3, [r7, #14]
 8004c10:	f1c3 0320 	rsb	r3, r3, #32
 8004c14:	fa42 f303 	asr.w	r3, r2, r3
 8004c18:	733b      	strb	r3, [r7, #12]
		width = start + width - 32;
 8004c1a:	7bba      	ldrb	r2, [r7, #14]
 8004c1c:	7b7b      	ldrb	r3, [r7, #13]
 8004c1e:	4413      	add	r3, r2
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3b20      	subs	r3, #32
 8004c24:	737b      	strb	r3, [r7, #13]
		uint32_t hmask = 0xffffffff >> (32 - width);
 8004c26:	7b7b      	ldrb	r3, [r7, #13]
 8004c28:	f1c3 0320 	rsb	r3, r3, #32
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	603b      	str	r3, [r7, #0]
		++widx;
 8004c36:	7afb      	ldrb	r3, [r7, #11]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	72fb      	strb	r3, [r7, #11]
		loco[devidx].fun.w[widx] = (loco[devidx].fun.w[widx] & ~hmask) | (val & hmask);
 8004c3c:	7bfa      	ldrb	r2, [r7, #15]
 8004c3e:	7af9      	ldrb	r1, [r7, #11]
 8004c40:	4811      	ldr	r0, [pc, #68]	; (8004c88 <cmd_funbitfield+0x114>)
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	440b      	add	r3, r1
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4403      	add	r3, r0
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	ea02 0103 	and.w	r1, r2, r3
 8004c58:	7b3a      	ldrb	r2, [r7, #12]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	7af8      	ldrb	r0, [r7, #11]
 8004c62:	4319      	orrs	r1, r3
 8004c64:	4c08      	ldr	r4, [pc, #32]	; (8004c88 <cmd_funbitfield+0x114>)
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	4403      	add	r3, r0
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4423      	add	r3, r4
 8004c72:	6059      	str	r1, [r3, #4]
	}
	devdisp(devidx);
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fe08 	bl	800488c <devdisp>

	return 0;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd90      	pop	{r4, r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200013e4 	.word	0x200013e4

08004c8c <cmd_fun>:

static uint8_t cmd_fun(void)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
	// fstate idx
	uint8_t devidx = get_devidx();
 8004c92:	f7ff fdef 	bl	8004874 <get_devidx>
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
	loco[devidx].fun.w[0] = stack_pop();
 8004c9a:	79fc      	ldrb	r4, [r7, #7]
 8004c9c:	f7fc fac2 	bl	8001224 <stack_pop>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4908      	ldr	r1, [pc, #32]	; (8004cc4 <cmd_fun+0x38>)
 8004ca4:	4623      	mov	r3, r4
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4423      	add	r3, r4
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3304      	adds	r3, #4
 8004cb0:	601a      	str	r2, [r3, #0]
	devdisp(devidx);
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff fde9 	bl	800488c <devdisp>

	return 0;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd90      	pop	{r4, r7, pc}
 8004cc4:	200013e4 	.word	0x200013e4

08004cc8 <cmd_fun32>:

static uint8_t cmd_fun32(void)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
	// fstate idx
	uint8_t devidx = get_devidx();
 8004cce:	f7ff fdd1 	bl	8004874 <get_devidx>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	71fb      	strb	r3, [r7, #7]
	loco[devidx].fun.w[1] = stack_pop();
 8004cd6:	79fc      	ldrb	r4, [r7, #7]
 8004cd8:	f7fc faa4 	bl	8001224 <stack_pop>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4908      	ldr	r1, [pc, #32]	; (8004d00 <cmd_fun32+0x38>)
 8004ce0:	4623      	mov	r3, r4
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4423      	add	r3, r4
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	3308      	adds	r3, #8
 8004cec:	601a      	str	r2, [r3, #0]
	devdisp(devidx);
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fdcb 	bl	800488c <devdisp>

	return 0;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}
 8004d00:	200013e4 	.word	0x200013e4

08004d04 <cmd_fun64>:

static uint8_t cmd_fun64(void)
{
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
	// fstate idx
	uint8_t devidx = get_devidx();
 8004d0a:	f7ff fdb3 	bl	8004874 <get_devidx>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	71fb      	strb	r3, [r7, #7]
	loco[devidx].fun.w[2] = stack_pop();
 8004d12:	79fc      	ldrb	r4, [r7, #7]
 8004d14:	f7fc fa86 	bl	8001224 <stack_pop>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4908      	ldr	r1, [pc, #32]	; (8004d3c <cmd_fun64+0x38>)
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4423      	add	r3, r4
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	330c      	adds	r3, #12
 8004d28:	601a      	str	r2, [r3, #0]
	devdisp(devidx);
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fdad 	bl	800488c <devdisp>

	return 0;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd90      	pop	{r4, r7, pc}
 8004d3c:	200013e4 	.word	0x200013e4

08004d40 <cmd_fdly>:

// turn on for a specified time
static uint8_t cmd_fdly(void)
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
	// val fnum idx
	uint8_t devidx = get_devidx();
 8004d46:	f7ff fd95 	bl	8004874 <get_devidx>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	717b      	strb	r3, [r7, #5]
	uint8_t fnum = stack_pop();
 8004d4e:	f7fc fa69 	bl	8001224 <stack_pop>
 8004d52:	4603      	mov	r3, r0
 8004d54:	71fb      	strb	r3, [r7, #7]
	uint8_t ontime = stack_pop();
 8004d56:	f7fc fa65 	bl	8001224 <stack_pop>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71bb      	strb	r3, [r7, #6]
	if (ontime == 0)
 8004d5e:	79bb      	ldrb	r3, [r7, #6]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <cmd_fdly+0x2a>
		ontime = 1;
 8004d64:	2301      	movs	r3, #1
 8004d66:	71bb      	strb	r3, [r7, #6]
 8004d68:	e004      	b.n	8004d74 <cmd_fdly+0x34>
	else if (ontime > 10)
 8004d6a:	79bb      	ldrb	r3, [r7, #6]
 8004d6c:	2b0a      	cmp	r3, #10
 8004d6e:	d901      	bls.n	8004d74 <cmd_fdly+0x34>
		ontime = 10;
 8004d70:	230a      	movs	r3, #10
 8004d72:	71bb      	strb	r3, [r7, #6]
	if (fnum > 68)
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	2b44      	cmp	r3, #68	; 0x44
 8004d78:	d901      	bls.n	8004d7e <cmd_fdly+0x3e>
		fnum = 68;
 8004d7a:	2344      	movs	r3, #68	; 0x44
 8004d7c:	71fb      	strb	r3, [r7, #7]
	loco[devidx].fun.w[fnum / 32] |= 1u << (fnum % 32);
 8004d7e:	797a      	ldrb	r2, [r7, #5]
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	b2d8      	uxtb	r0, r3
 8004d86:	4604      	mov	r4, r0
 8004d88:	4926      	ldr	r1, [pc, #152]	; (8004e24 <cmd_fdly+0xe4>)
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	4423      	add	r3, r4
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	6859      	ldr	r1, [r3, #4]
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	2201      	movs	r2, #1
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	797a      	ldrb	r2, [r7, #5]
 8004da6:	4604      	mov	r4, r0
 8004da8:	4319      	orrs	r1, r3
 8004daa:	481e      	ldr	r0, [pc, #120]	; (8004e24 <cmd_fdly+0xe4>)
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	4423      	add	r3, r4
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4403      	add	r3, r0
 8004db8:	6059      	str	r1, [r3, #4]
	devdisp(devidx);
 8004dba:	797b      	ldrb	r3, [r7, #5]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fd65 	bl	800488c <devdisp>
	// delay - change !!!
	void HAL_Delay(__IO uint32_t Delay);
	HAL_Delay(ontime * 1000);
 8004dc2:	79bb      	ldrb	r3, [r7, #6]
 8004dc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fc fd61 	bl	8001894 <HAL_Delay>
	loco[devidx].fun.w[fnum / 32] &= ~(1u << (fnum % 32));
 8004dd2:	797a      	ldrb	r2, [r7, #5]
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	b2d8      	uxtb	r0, r3
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4911      	ldr	r1, [pc, #68]	; (8004e24 <cmd_fdly+0xe4>)
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	4423      	add	r3, r4
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2201      	movs	r2, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	797a      	ldrb	r2, [r7, #5]
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	4019      	ands	r1, r3
 8004e00:	4808      	ldr	r0, [pc, #32]	; (8004e24 <cmd_fdly+0xe4>)
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	4423      	add	r3, r4
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4403      	add	r3, r0
 8004e0e:	6059      	str	r1, [r3, #4]
	devdisp(devidx);
 8004e10:	797b      	ldrb	r3, [r7, #5]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fd3a 	bl	800488c <devdisp>
	return 0;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200013e4 	.word	0x200013e4

08004e28 <cmd_ftoggle>:

static uint8_t cmd_ftoggle(void)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
	// val fnum idx
	uint8_t devidx = get_devidx();
 8004e2e:	f7ff fd21 	bl	8004874 <get_devidx>
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]
	uint8_t fnum = stack_pop();
 8004e36:	f7fc f9f5 	bl	8001224 <stack_pop>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	71bb      	strb	r3, [r7, #6]
	if (fnum < 32)
 8004e3e:	79bb      	ldrb	r3, [r7, #6]
 8004e40:	2b1f      	cmp	r3, #31
 8004e42:	d816      	bhi.n	8004e72 <cmd_ftoggle+0x4a>
		loco[devidx].fun.w[0] ^= 1u << fnum;
 8004e44:	79fa      	ldrb	r2, [r7, #7]
 8004e46:	4923      	ldr	r1, [pc, #140]	; (8004ed4 <cmd_ftoggle+0xac>)
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	3304      	adds	r3, #4
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	79bb      	ldrb	r3, [r7, #6]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	79fa      	ldrb	r2, [r7, #7]
 8004e60:	4059      	eors	r1, r3
 8004e62:	481c      	ldr	r0, [pc, #112]	; (8004ed4 <cmd_ftoggle+0xac>)
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4403      	add	r3, r0
 8004e6e:	3304      	adds	r3, #4
 8004e70:	6019      	str	r1, [r3, #0]
	if (fnum >= 28 && fnum <= 68)
 8004e72:	79bb      	ldrb	r3, [r7, #6]
 8004e74:	2b1b      	cmp	r3, #27
 8004e76:	d923      	bls.n	8004ec0 <cmd_ftoggle+0x98>
 8004e78:	79bb      	ldrb	r3, [r7, #6]
 8004e7a:	2b44      	cmp	r3, #68	; 0x44
 8004e7c:	d820      	bhi.n	8004ec0 <cmd_ftoggle+0x98>
	{
		fnum += 3;
 8004e7e:	79bb      	ldrb	r3, [r7, #6]
 8004e80:	3303      	adds	r3, #3
 8004e82:	71bb      	strb	r3, [r7, #6]
		loco[devidx].fun.w[fnum / 32] ^= 1u << (fnum % 32);
 8004e84:	79fa      	ldrb	r2, [r7, #7]
 8004e86:	79bb      	ldrb	r3, [r7, #6]
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	b2d8      	uxtb	r0, r3
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	4911      	ldr	r1, [pc, #68]	; (8004ed4 <cmd_ftoggle+0xac>)
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	4423      	add	r3, r4
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	79bb      	ldrb	r3, [r7, #6]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	79fa      	ldrb	r2, [r7, #7]
 8004eac:	4604      	mov	r4, r0
 8004eae:	4059      	eors	r1, r3
 8004eb0:	4808      	ldr	r0, [pc, #32]	; (8004ed4 <cmd_ftoggle+0xac>)
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	4423      	add	r3, r4
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4403      	add	r3, r0
 8004ebe:	6059      	str	r1, [r3, #4]
	}
	devdisp(devidx);
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fce2 	bl	800488c <devdisp>
	return 0;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200013e4 	.word	0x200013e4

08004ed8 <cmd_fx>:

// set single function by number
static uint8_t cmd_fx(void)
{
 8004ed8:	b590      	push	{r4, r7, lr}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
	// val fnum idx
	uint8_t devidx = get_devidx();
 8004ede:	f7ff fcc9 	bl	8004874 <get_devidx>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t fnum = stack_pop();
 8004ee6:	f7fc f99d 	bl	8001224 <stack_pop>
 8004eea:	4603      	mov	r3, r0
 8004eec:	71bb      	strb	r3, [r7, #6]
	_Bool on = stack_pop();
 8004eee:	f7fc f999 	bl	8001224 <stack_pop>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf14      	ite	ne
 8004ef8:	2301      	movne	r3, #1
 8004efa:	2300      	moveq	r3, #0
 8004efc:	717b      	strb	r3, [r7, #5]
	if (fnum < 32)
 8004efe:	79bb      	ldrb	r3, [r7, #6]
 8004f00:	2b1f      	cmp	r3, #31
 8004f02:	d832      	bhi.n	8004f6a <cmd_fx+0x92>
	{
		if (on)
 8004f04:	797b      	ldrb	r3, [r7, #5]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d017      	beq.n	8004f3a <cmd_fx+0x62>
			loco[devidx].fun.w[0] |= 1u << fnum;
 8004f0a:	79fa      	ldrb	r2, [r7, #7]
 8004f0c:	4940      	ldr	r1, [pc, #256]	; (8005010 <cmd_fx+0x138>)
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3304      	adds	r3, #4
 8004f1a:	6819      	ldr	r1, [r3, #0]
 8004f1c:	79bb      	ldrb	r3, [r7, #6]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	79fa      	ldrb	r2, [r7, #7]
 8004f26:	4319      	orrs	r1, r3
 8004f28:	4839      	ldr	r0, [pc, #228]	; (8005010 <cmd_fx+0x138>)
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4403      	add	r3, r0
 8004f34:	3304      	adds	r3, #4
 8004f36:	6019      	str	r1, [r3, #0]
 8004f38:	e017      	b.n	8004f6a <cmd_fx+0x92>
		else
			loco[devidx].fun.w[0] &= ~(1u << fnum);
 8004f3a:	79fa      	ldrb	r2, [r7, #7]
 8004f3c:	4934      	ldr	r1, [pc, #208]	; (8005010 <cmd_fx+0x138>)
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3304      	adds	r3, #4
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	79bb      	ldrb	r3, [r7, #6]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	43db      	mvns	r3, r3
 8004f56:	79fa      	ldrb	r2, [r7, #7]
 8004f58:	4019      	ands	r1, r3
 8004f5a:	482d      	ldr	r0, [pc, #180]	; (8005010 <cmd_fx+0x138>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4403      	add	r3, r0
 8004f66:	3304      	adds	r3, #4
 8004f68:	6019      	str	r1, [r3, #0]
	}
	if (fnum >= 28 && fnum <= 68)
 8004f6a:	79bb      	ldrb	r3, [r7, #6]
 8004f6c:	2b1b      	cmp	r3, #27
 8004f6e:	d946      	bls.n	8004ffe <cmd_fx+0x126>
 8004f70:	79bb      	ldrb	r3, [r7, #6]
 8004f72:	2b44      	cmp	r3, #68	; 0x44
 8004f74:	d843      	bhi.n	8004ffe <cmd_fx+0x126>
	{
		fnum += 3;
 8004f76:	79bb      	ldrb	r3, [r7, #6]
 8004f78:	3303      	adds	r3, #3
 8004f7a:	71bb      	strb	r3, [r7, #6]
		if (on)
 8004f7c:	797b      	ldrb	r3, [r7, #5]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01e      	beq.n	8004fc0 <cmd_fx+0xe8>
			loco[devidx].fun.w[fnum / 32] |= 1u << (fnum % 32);
 8004f82:	79fa      	ldrb	r2, [r7, #7]
 8004f84:	79bb      	ldrb	r3, [r7, #6]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	b2d8      	uxtb	r0, r3
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4920      	ldr	r1, [pc, #128]	; (8005010 <cmd_fx+0x138>)
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	4423      	add	r3, r4
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	79bb      	ldrb	r3, [r7, #6]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	79fa      	ldrb	r2, [r7, #7]
 8004faa:	4604      	mov	r4, r0
 8004fac:	4319      	orrs	r1, r3
 8004fae:	4818      	ldr	r0, [pc, #96]	; (8005010 <cmd_fx+0x138>)
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	4423      	add	r3, r4
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4403      	add	r3, r0
 8004fbc:	6059      	str	r1, [r3, #4]
 8004fbe:	e01e      	b.n	8004ffe <cmd_fx+0x126>
		else
			loco[devidx].fun.w[fnum / 32] &= ~(1u << (fnum % 32));
 8004fc0:	79fa      	ldrb	r2, [r7, #7]
 8004fc2:	79bb      	ldrb	r3, [r7, #6]
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	b2d8      	uxtb	r0, r3
 8004fc8:	4604      	mov	r4, r0
 8004fca:	4911      	ldr	r1, [pc, #68]	; (8005010 <cmd_fx+0x138>)
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	4423      	add	r3, r4
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	6859      	ldr	r1, [r3, #4]
 8004fda:	79bb      	ldrb	r3, [r7, #6]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	79fa      	ldrb	r2, [r7, #7]
 8004fea:	4604      	mov	r4, r0
 8004fec:	4019      	ands	r1, r3
 8004fee:	4808      	ldr	r0, [pc, #32]	; (8005010 <cmd_fx+0x138>)
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4423      	add	r3, r4
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4403      	add	r3, r0
 8004ffc:	6059      	str	r1, [r3, #4]
	}
	devdisp(devidx);
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fc43 	bl	800488c <devdisp>
	return 0;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bd90      	pop	{r4, r7, pc}
 8005010:	200013e4 	.word	0x200013e4

08005014 <cmd_opmode>:

// operatiing mode, diagnostics ==========================================
static uint8_t cmd_opmode(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
	dccs.pgmmode = 0;
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <cmd_opmode+0x18>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
	return 0;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20001664 	.word	0x20001664

08005030 <cmd_pgmmode>:

static uint8_t cmd_pgmmode(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
	dccs.pgmmode = 1;
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <cmd_pgmmode+0x18>)
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
	return 0;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20001664 	.word	0x20001664

0800504c <cmd_pktdump>:

static uint8_t cmd_pktdump(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
	// 1 - zrzut jednego przebiegu, > 1 - zrzut ciagly
	dccs.dump_rq = stack_pop();;
 8005050:	f7fc f8e8 	bl	8001224 <stack_pop>
 8005054:	4603      	mov	r3, r0
 8005056:	b2da      	uxtb	r2, r3
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <cmd_pktdump+0x18>)
 800505a:	739a      	strb	r2, [r3, #14]
	return 0;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20001664 	.word	0x20001664

08005068 <cmd_start>:

static uint8_t cmd_start(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
	return 0;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <cmd_stop>:

// addr mask type bknum
static uint8_t cmd_stop(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
	return 0;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <cmd_bidi>:
static uint8_t cmd_bidi(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	cd.n.bidi = stack_pop();
 800508c:	f7fc f8ca 	bl	8001224 <stack_pop>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf14      	ite	ne
 8005096:	2301      	movne	r3, #1
 8005098:	2300      	moveq	r3, #0
 800509a:	b2da      	uxtb	r2, r3
 800509c:	4b02      	ldr	r3, [pc, #8]	; (80050a8 <cmd_bidi+0x20>)
 800509e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
	return 0;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	200016c0 	.word	0x200016c0

080050ac <cmd_bemf>:

static uint8_t cmd_bemf(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
	ans.bemf_on = stack_pop();
 80050b0:	f7fc f8b8 	bl	8001224 <stack_pop>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	4b02      	ldr	r3, [pc, #8]	; (80050cc <cmd_bemf+0x20>)
 80050c2:	709a      	strb	r2, [r3, #2]
	return 0;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000368 	.word	0x20000368

080050d0 <cmd_dir>:

// Speed control =========================================================
static uint8_t cmd_dir(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
	uint8_t devidx = get_devidx();
 80050d6:	f7ff fbcd 	bl	8004874 <get_devidx>
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
	loco[devidx].rev = stack_pop();
 80050de:	f7fc f8a1 	bl	8001224 <stack_pop>
 80050e2:	4603      	mov	r3, r0
 80050e4:	79fa      	ldrb	r2, [r7, #7]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	b2d8      	uxtb	r0, r3
 80050f0:	4908      	ldr	r1, [pc, #32]	; (8005114 <cmd_dir+0x44>)
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3301      	adds	r3, #1
 80050fe:	4602      	mov	r2, r0
 8005100:	701a      	strb	r2, [r3, #0]
	devdisp(devidx);
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff fbc1 	bl	800488c <devdisp>
	return 0;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	200013e4 	.word	0x200013e4

08005118 <cmd_estop>:

static uint8_t cmd_estop(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
	if (ans.active)
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <cmd_estop+0x4c>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <cmd_estop+0x40>
		;
	else
	{
		uint8_t devidx = get_devidx();
 8005126:	f7ff fba5 	bl	8004874 <get_devidx>
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
		loco[devidx].estop = stack_pop();;
 800512e:	f7fc f879 	bl	8001224 <stack_pop>
 8005132:	4603      	mov	r3, r0
 8005134:	79fa      	ldrb	r2, [r7, #7]
 8005136:	2b00      	cmp	r3, #0
 8005138:	bf14      	ite	ne
 800513a:	2301      	movne	r3, #1
 800513c:	2300      	moveq	r3, #0
 800513e:	b2d8      	uxtb	r0, r3
 8005140:	4909      	ldr	r1, [pc, #36]	; (8005168 <cmd_estop+0x50>)
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	4602      	mov	r2, r0
 800514e:	701a      	strb	r2, [r3, #0]
		devdisp(devidx);
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fb9a 	bl	800488c <devdisp>
	}
	return 0;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000368 	.word	0x20000368
 8005168:	200013e4 	.word	0x200013e4

0800516c <cmd_fwd>:

static uint8_t cmd_fwd(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
	if (ans.active)
 8005172:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <cmd_fwd+0x44>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <cmd_fwd+0x16>
		br_set_andir(1);
 800517a:	2001      	movs	r0, #1
 800517c:	f7fe fe46 	bl	8003e0c <br_set_andir>
 8005180:	e011      	b.n	80051a6 <cmd_fwd+0x3a>
	else
	{
		uint8_t devidx = get_devidx();
 8005182:	f7ff fb77 	bl	8004874 <get_devidx>
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
		loco[devidx].rev = 0;
 800518a:	79fa      	ldrb	r2, [r7, #7]
 800518c:	4909      	ldr	r1, [pc, #36]	; (80051b4 <cmd_fwd+0x48>)
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3301      	adds	r3, #1
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
		devdisp(devidx);
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fb73 	bl	800488c <devdisp>
	}
	return 0;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000368 	.word	0x20000368
 80051b4:	200013e4 	.word	0x200013e4

080051b8 <cmd_rev>:

static uint8_t cmd_rev(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	if (ans.active)
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <cmd_rev+0x44>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <cmd_rev+0x16>
		br_set_andir(0);
 80051c6:	2000      	movs	r0, #0
 80051c8:	f7fe fe20 	bl	8003e0c <br_set_andir>
 80051cc:	e011      	b.n	80051f2 <cmd_rev+0x3a>
	else
	{
		uint8_t devidx = get_devidx();
 80051ce:	f7ff fb51 	bl	8004874 <get_devidx>
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
		loco[devidx].rev = 1;
 80051d6:	79fa      	ldrb	r2, [r7, #7]
 80051d8:	4909      	ldr	r1, [pc, #36]	; (8005200 <cmd_rev+0x48>)
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3301      	adds	r3, #1
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
		devdisp(devidx);
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fb4d 	bl	800488c <devdisp>
	}
	return 0;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000368 	.word	0x20000368
 8005200:	200013e4 	.word	0x200013e4

08005204 <cmd_speed>:

static uint8_t cmd_speed(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
	if (ans.active)
 800520a:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <cmd_speed+0x80>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01d      	beq.n	800524e <cmd_speed+0x4a>
	{
		uint16_t speed = stack_pop();
 8005212:	f7fc f807 	bl	8001224 <stack_pop>
 8005216:	4603      	mov	r3, r0
 8005218:	80bb      	strh	r3, [r7, #4]
		if (ans.bemf_on)
 800521a:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <cmd_speed+0x80>)
 800521c:	789b      	ldrb	r3, [r3, #2]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d006      	beq.n	8005230 <cmd_speed+0x2c>
		{
			if (speed <= 100u)
 8005222:	88bb      	ldrh	r3, [r7, #4]
 8005224:	2b64      	cmp	r3, #100	; 0x64
 8005226:	d80f      	bhi.n	8005248 <cmd_speed+0x44>
				ans.speed = speed;
 8005228:	4a16      	ldr	r2, [pc, #88]	; (8005284 <cmd_speed+0x80>)
 800522a:	88bb      	ldrh	r3, [r7, #4]
 800522c:	8113      	strh	r3, [r2, #8]
 800522e:	e00b      	b.n	8005248 <cmd_speed+0x44>
		}
		else
		{
			ans.speed = speed;
 8005230:	4a14      	ldr	r2, [pc, #80]	; (8005284 <cmd_speed+0x80>)
 8005232:	88bb      	ldrh	r3, [r7, #4]
 8005234:	8113      	strh	r3, [r2, #8]
			br_set_anduty(ans.duty = ans.speed);
 8005236:	4b13      	ldr	r3, [pc, #76]	; (8005284 <cmd_speed+0x80>)
 8005238:	891a      	ldrh	r2, [r3, #8]
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <cmd_speed+0x80>)
 800523c:	815a      	strh	r2, [r3, #10]
 800523e:	4b11      	ldr	r3, [pc, #68]	; (8005284 <cmd_speed+0x80>)
 8005240:	895b      	ldrh	r3, [r3, #10]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fe00 	bl	8003e48 <br_set_anduty>
		}
		andisp();
 8005248:	f7fe ffa0 	bl	800418c <andisp>
 800524c:	e015      	b.n	800527a <cmd_speed+0x76>
	}
	else
	{
		uint8_t devidx = get_devidx();
 800524e:	f7ff fb11 	bl	8004874 <get_devidx>
 8005252:	4603      	mov	r3, r0
 8005254:	71fb      	strb	r3, [r7, #7]
		uint8_t speed = stack_pop();
 8005256:	f7fb ffe5 	bl	8001224 <stack_pop>
 800525a:	4603      	mov	r3, r0
 800525c:	71bb      	strb	r3, [r7, #6]
		loco[devidx].dspeed = speed;
 800525e:	79fa      	ldrb	r2, [r7, #7]
 8005260:	4909      	ldr	r1, [pc, #36]	; (8005288 <cmd_speed+0x84>)
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3302      	adds	r3, #2
 800526e:	79ba      	ldrb	r2, [r7, #6]
 8005270:	701a      	strb	r2, [r3, #0]
		devdisp(devidx);
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fb09 	bl	800488c <devdisp>
	}
	return 0;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20000368 	.word	0x20000368
 8005288:	200013e4 	.word	0x200013e4

0800528c <cmd_vol>:

static uint8_t cmd_vol(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
	uint8_t devidx = get_devidx();
 8005292:	f7ff faef 	bl	8004874 <get_devidx>
 8005296:	4603      	mov	r3, r0
 8005298:	71fb      	strb	r3, [r7, #7]
	uint8_t vol = stack_pop();
 800529a:	f7fb ffc3 	bl	8001224 <stack_pop>
 800529e:	4603      	mov	r3, r0
 80052a0:	71bb      	strb	r3, [r7, #6]
	loco[devidx].volume = vol;
 80052a2:	79fa      	ldrb	r2, [r7, #7]
 80052a4:	4908      	ldr	r1, [pc, #32]	; (80052c8 <cmd_vol+0x3c>)
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	3310      	adds	r3, #16
 80052b2:	79ba      	ldrb	r2, [r7, #6]
 80052b4:	701a      	strb	r2, [r3, #0]
	devdisp(devidx);
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fae7 	bl	800488c <devdisp>
	return 0;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	200013e4 	.word	0x200013e4

080052cc <cmd_arctrl>:
// Autorun commands ======================================================
static uint8_t cmd_arctrl(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
	if (stack_pop())
 80052d0:	f7fb ffa8 	bl	8001224 <stack_pop>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <cmd_arctrl+0x14>
		autorun_start();
 80052da:	f7fd fd8d 	bl	8002df8 <autorun_start>
 80052de:	e001      	b.n	80052e4 <cmd_arctrl+0x18>
	else
		autorun_stop();
 80052e0:	f7fd fda0 	bl	8002e24 <autorun_stop>
	return 0;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <print_ar>:

static void print_ar(uint8_t i)
{
 80052ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ee:	b09b      	sub	sp, #108	; 0x6c
 80052f0:	af04      	add	r7, sp, #16
 80052f2:	4603      	mov	r3, r0
 80052f4:	71fb      	strb	r3, [r7, #7]
	char s[80];
	sprintf(s, "%2d %3d s: %2d %s %3d %08" PRIx32 "\r\n",
 80052f6:	79f9      	ldrb	r1, [r7, #7]
		i, autopgm[i].stime, autopgm[i].locnum, autopgm[i].rev ? "rev" : "fwd",
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	4a19      	ldr	r2, [pc, #100]	; (8005360 <print_ar+0x74>)
 80052fc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
	sprintf(s, "%2d %3d s: %2d %s %3d %08" PRIx32 "\r\n",
 8005300:	461e      	mov	r6, r3
		i, autopgm[i].stime, autopgm[i].locnum, autopgm[i].rev ? "rev" : "fwd",
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	4a16      	ldr	r2, [pc, #88]	; (8005360 <print_ar+0x74>)
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	4413      	add	r3, r2
 800530a:	785b      	ldrb	r3, [r3, #1]
	sprintf(s, "%2d %3d s: %2d %s %3d %08" PRIx32 "\r\n",
 800530c:	461c      	mov	r4, r3
		i, autopgm[i].stime, autopgm[i].locnum, autopgm[i].rev ? "rev" : "fwd",
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <print_ar+0x74>)
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	789b      	ldrb	r3, [r3, #2]
	sprintf(s, "%2d %3d s: %2d %s %3d %08" PRIx32 "\r\n",
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <print_ar+0x34>
 800531c:	4a11      	ldr	r2, [pc, #68]	; (8005364 <print_ar+0x78>)
 800531e:	e000      	b.n	8005322 <print_ar+0x36>
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <print_ar+0x7c>)
		autopgm[i].speed, autopgm[i].f0_28);
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	480e      	ldr	r0, [pc, #56]	; (8005360 <print_ar+0x74>)
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4403      	add	r3, r0
 800532a:	78db      	ldrb	r3, [r3, #3]
	sprintf(s, "%2d %3d s: %2d %s %3d %08" PRIx32 "\r\n",
 800532c:	461d      	mov	r5, r3
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <print_ar+0x74>)
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4403      	add	r3, r0
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f107 0008 	add.w	r0, r7, #8
 800533c:	9303      	str	r3, [sp, #12]
 800533e:	9502      	str	r5, [sp, #8]
 8005340:	9201      	str	r2, [sp, #4]
 8005342:	9400      	str	r4, [sp, #0]
 8005344:	4633      	mov	r3, r6
 8005346:	460a      	mov	r2, r1
 8005348:	4908      	ldr	r1, [pc, #32]	; (800536c <print_ar+0x80>)
 800534a:	f00a fbbb 	bl	800fac4 <siprintf>
	con_putstr(s);
 800534e:	f107 0308 	add.w	r3, r7, #8
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb f92e 	bl	80005b4 <con_putstr>
}
 8005358:	bf00      	nop
 800535a:	375c      	adds	r7, #92	; 0x5c
 800535c:	46bd      	mov	sp, r7
 800535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005360:	20001340 	.word	0x20001340
 8005364:	0801073c 	.word	0x0801073c
 8005368:	08010740 	.word	0x08010740
 800536c:	080108f4 	.word	0x080108f4

08005370 <cmd_ardef>:
// define autorun step
static uint8_t cmd_ardef(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
	// fun speed rev loco time ar_slot
	uint8_t pos = stack_pop();
 8005376:	f7fb ff55 	bl	8001224 <stack_pop>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]
	uint8_t t = stack_pop();
 800537e:	f7fb ff51 	bl	8001224 <stack_pop>
 8005382:	4603      	mov	r3, r0
 8005384:	73bb      	strb	r3, [r7, #14]
	uint8_t l = stack_pop();
 8005386:	f7fb ff4d 	bl	8001224 <stack_pop>
 800538a:	4603      	mov	r3, r0
 800538c:	737b      	strb	r3, [r7, #13]
	_Bool rev = stack_pop();
 800538e:	f7fb ff49 	bl	8001224 <stack_pop>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	733b      	strb	r3, [r7, #12]
	uint8_t speed = stack_pop();
 800539e:	f7fb ff41 	bl	8001224 <stack_pop>
 80053a2:	4603      	mov	r3, r0
 80053a4:	72fb      	strb	r3, [r7, #11]
	uint32_t fun = stack_pop();
 80053a6:	f7fb ff3d 	bl	8001224 <stack_pop>
 80053aa:	6078      	str	r0, [r7, #4]
	
	if (pos < NAUTOSTEPS && l < NDEVICES)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b13      	cmp	r3, #19
 80053b0:	d823      	bhi.n	80053fa <cmd_ardef+0x8a>
 80053b2:	7b7b      	ldrb	r3, [r7, #13]
 80053b4:	2b1f      	cmp	r3, #31
 80053b6:	d820      	bhi.n	80053fa <cmd_ardef+0x8a>
	{
		autopgm[pos].stime = t;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	4912      	ldr	r1, [pc, #72]	; (8005404 <cmd_ardef+0x94>)
 80053bc:	7bba      	ldrb	r2, [r7, #14]
 80053be:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		autopgm[pos].locnum = l;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	4a0f      	ldr	r2, [pc, #60]	; (8005404 <cmd_ardef+0x94>)
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	7b7a      	ldrb	r2, [r7, #13]
 80053cc:	705a      	strb	r2, [r3, #1]
		autopgm[pos].rev = rev;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <cmd_ardef+0x94>)
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	7b3a      	ldrb	r2, [r7, #12]
 80053d8:	709a      	strb	r2, [r3, #2]
		autopgm[pos].speed = speed;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	4a09      	ldr	r2, [pc, #36]	; (8005404 <cmd_ardef+0x94>)
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	4413      	add	r3, r2
 80053e2:	7afa      	ldrb	r2, [r7, #11]
 80053e4:	70da      	strb	r2, [r3, #3]
		autopgm[pos].f0_28 = fun;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	4a06      	ldr	r2, [pc, #24]	; (8005404 <cmd_ardef+0x94>)
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	605a      	str	r2, [r3, #4]
		print_ar(pos);
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff79 	bl	80052ec <print_ar>
	}
	return 0;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20001340 	.word	0x20001340

08005408 <cmd_arsave>:

static uint8_t cmd_arsave(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
#ifndef CFG_SINGLE_PAGE
	storeautorun();
#endif
	return 0;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <cmd_arshuttle>:
// define six-step shuttle operation for autorun
static uint8_t cmd_arshuttle(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
	// fun full_speed loco stop_time run_rime start_slot
	uint8_t pos = stack_pop();
 800541e:	f7fb ff01 	bl	8001224 <stack_pop>
 8005422:	4603      	mov	r3, r0
 8005424:	75fb      	strb	r3, [r7, #23]
	uint8_t tr = stack_pop();
 8005426:	f7fb fefd 	bl	8001224 <stack_pop>
 800542a:	4603      	mov	r3, r0
 800542c:	75bb      	strb	r3, [r7, #22]
	uint8_t ts = stack_pop();
 800542e:	f7fb fef9 	bl	8001224 <stack_pop>
 8005432:	4603      	mov	r3, r0
 8005434:	757b      	strb	r3, [r7, #21]
	uint8_t l = stack_pop();
 8005436:	f7fb fef5 	bl	8001224 <stack_pop>
 800543a:	4603      	mov	r3, r0
 800543c:	753b      	strb	r3, [r7, #20]
	uint8_t speed = stack_pop();
 800543e:	f7fb fef1 	bl	8001224 <stack_pop>
 8005442:	4603      	mov	r3, r0
 8005444:	74fb      	strb	r3, [r7, #19]
	uint32_t fun = stack_pop();
 8005446:	f7fb feed 	bl	8001224 <stack_pop>
 800544a:	60f8      	str	r0, [r7, #12]
	
	if (pos < NAUTOSTEPS && l < NDEVICES)
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b13      	cmp	r3, #19
 8005450:	d863      	bhi.n	800551a <cmd_arshuttle+0x102>
 8005452:	7d3b      	ldrb	r3, [r7, #20]
 8005454:	2b1f      	cmp	r3, #31
 8005456:	d860      	bhi.n	800551a <cmd_arshuttle+0x102>
	{
		struct autostep_ step = {.stime = ts, .locnum = l, .rev = 0, .speed = 0, .f0_28 = fun}; 
 8005458:	7d7b      	ldrb	r3, [r7, #21]
 800545a:	713b      	strb	r3, [r7, #4]
 800545c:	7d3b      	ldrb	r3, [r7, #20]
 800545e:	717b      	strb	r3, [r7, #5]
 8005460:	2300      	movs	r3, #0
 8005462:	71bb      	strb	r3, [r7, #6]
 8005464:	2300      	movs	r3, #0
 8005466:	71fb      	strb	r3, [r7, #7]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	60bb      	str	r3, [r7, #8]
		autopgm[pos + 0] = step;
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <cmd_arshuttle+0x10c>)
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	1d3a      	adds	r2, r7, #4
 8005476:	e892 0003 	ldmia.w	r2, {r0, r1}
 800547a:	e883 0003 	stmia.w	r3, {r0, r1}
		autopgm[pos + 1] = step;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	3301      	adds	r3, #1
 8005482:	4a28      	ldr	r2, [pc, #160]	; (8005524 <cmd_arshuttle+0x10c>)
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	1d3a      	adds	r2, r7, #4
 800548a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800548e:	e883 0003 	stmia.w	r3, {r0, r1}
		autopgm[pos + 1].stime = tr;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	3301      	adds	r3, #1
 8005496:	4923      	ldr	r1, [pc, #140]	; (8005524 <cmd_arshuttle+0x10c>)
 8005498:	7dba      	ldrb	r2, [r7, #22]
 800549a:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		autopgm[pos + 1].speed = speed;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a20      	ldr	r2, [pc, #128]	; (8005524 <cmd_arshuttle+0x10c>)
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4413      	add	r3, r2
 80054a8:	7cfa      	ldrb	r2, [r7, #19]
 80054aa:	70da      	strb	r2, [r3, #3]
		autopgm[pos + 2] = step;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	3302      	adds	r3, #2
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <cmd_arshuttle+0x10c>)
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	1d3a      	adds	r2, r7, #4
 80054b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054bc:	e883 0003 	stmia.w	r3, {r0, r1}
		step.rev = 1;
 80054c0:	2301      	movs	r3, #1
 80054c2:	71bb      	strb	r3, [r7, #6]
		autopgm[pos + 3] = step;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	3303      	adds	r3, #3
 80054c8:	4a16      	ldr	r2, [pc, #88]	; (8005524 <cmd_arshuttle+0x10c>)
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4413      	add	r3, r2
 80054ce:	1d3a      	adds	r2, r7, #4
 80054d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054d4:	e883 0003 	stmia.w	r3, {r0, r1}
		autopgm[pos + 4] = step;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	3304      	adds	r3, #4
 80054dc:	4a11      	ldr	r2, [pc, #68]	; (8005524 <cmd_arshuttle+0x10c>)
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4413      	add	r3, r2
 80054e2:	1d3a      	adds	r2, r7, #4
 80054e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054e8:	e883 0003 	stmia.w	r3, {r0, r1}
		autopgm[pos + 4].stime = tr;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	3304      	adds	r3, #4
 80054f0:	490c      	ldr	r1, [pc, #48]	; (8005524 <cmd_arshuttle+0x10c>)
 80054f2:	7dba      	ldrb	r2, [r7, #22]
 80054f4:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
		autopgm[pos + 4].speed = speed;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4a09      	ldr	r2, [pc, #36]	; (8005524 <cmd_arshuttle+0x10c>)
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4413      	add	r3, r2
 8005502:	7cfa      	ldrb	r2, [r7, #19]
 8005504:	70da      	strb	r2, [r3, #3]
		autopgm[pos + 5] = step;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	3305      	adds	r3, #5
 800550a:	4a06      	ldr	r2, [pc, #24]	; (8005524 <cmd_arshuttle+0x10c>)
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	1d3a      	adds	r2, r7, #4
 8005512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005516:	e883 0003 	stmia.w	r3, {r0, r1}
	}
	return 0;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20001340 	.word	0x20001340

08005528 <cmd_arlist>:

extern volatile uint16_t seccnt;

static uint8_t cmd_arlist(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af02      	add	r7, sp, #8
	for (uint8_t i = 0; i < NAUTOSTEPS && autopgm[i].stime; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	77fb      	strb	r3, [r7, #31]
 8005532:	e006      	b.n	8005542 <cmd_arlist+0x1a>
		print_ar(i);
 8005534:	7ffb      	ldrb	r3, [r7, #31]
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff fed8 	bl	80052ec <print_ar>
	for (uint8_t i = 0; i < NAUTOSTEPS && autopgm[i].stime; i++)
 800553c:	7ffb      	ldrb	r3, [r7, #31]
 800553e:	3301      	adds	r3, #1
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	7ffb      	ldrb	r3, [r7, #31]
 8005544:	2b13      	cmp	r3, #19
 8005546:	d805      	bhi.n	8005554 <cmd_arlist+0x2c>
 8005548:	7ffb      	ldrb	r3, [r7, #31]
 800554a:	4a0e      	ldr	r2, [pc, #56]	; (8005584 <cmd_arlist+0x5c>)
 800554c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ef      	bne.n	8005534 <cmd_arlist+0xc>
	char s[30];
	sprintf(s, "step: %d, time: %d, seccnt: %d\r\n", curr_step, curr_step_time, seccnt);
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <cmd_arlist+0x60>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <cmd_arlist+0x64>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	4619      	mov	r1, r3
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <cmd_arlist+0x68>)
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	4638      	mov	r0, r7
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	460b      	mov	r3, r1
 800556c:	4909      	ldr	r1, [pc, #36]	; (8005594 <cmd_arlist+0x6c>)
 800556e:	f00a faa9 	bl	800fac4 <siprintf>
	con_putstr(s);
 8005572:	463b      	mov	r3, r7
 8005574:	4618      	mov	r0, r3
 8005576:	f7fb f81d 	bl	80005b4 <con_putstr>
	return 0;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20001340 	.word	0x20001340
 8005588:	200013e0 	.word	0x200013e0
 800558c:	200013e1 	.word	0x200013e1
 8005590:	2000174e 	.word	0x2000174e
 8005594:	08010914 	.word	0x08010914

08005598 <cmd_save>:

static uint8_t cmd_save(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
	storecfg();
 800559c:	f000 fa9e 	bl	8005adc <storecfg>
	return 0;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <cmd_rstcfg>:

static uint8_t cmd_rstcfg(void)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	af00      	add	r7, sp, #0
	rstcfg();
 80055aa:	f000 f8c9 	bl	8005740 <rstcfg>
	return 0;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <cmd_boot>:

static uint8_t cmd_boot(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	hw_boot();
 80055b8:	f7fc fe60 	bl	800227c <hw_boot>
	return 0;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <cmd_casesens>:
extern uint32_t usbchars;

static _Bool case_sens;

static uint8_t cmd_casesens(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
	case_sens = stack_pop();
 80055c8:	f7fb fe2c 	bl	8001224 <stack_pop>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf14      	ite	ne
 80055d2:	2301      	movne	r3, #1
 80055d4:	2300      	moveq	r3, #0
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b02      	ldr	r3, [pc, #8]	; (80055e4 <cmd_casesens+0x20>)
 80055da:	701a      	strb	r2, [r3, #0]
	return 0;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	200016b8 	.word	0x200016b8

080055e8 <cmd_help>:

// help and utilities ====================================================
static uint8_t cmd_help(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
	if (dccs.pgmmode)
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <cmd_help+0x20>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <cmd_help+0x14>
		con_putstr("Programming mode commands:\r\n"
 80055f4:	4805      	ldr	r0, [pc, #20]	; (800560c <cmd_help+0x24>)
 80055f6:	f7fa ffdd 	bl	80005b4 <con_putstr>
 80055fa:	e002      	b.n	8005602 <cmd_help+0x1a>
		"\t"		"<val>\t"	"<cv>\t"	"wr\t"		"CV write\r\n"
		"\t"		"\t"		"<val>\t"	"wra\t"		"write short address\r\n"
		"<val>\t"	"<pos>\t"	"<cv>\t"	"bwr\t"		"CV bit write\r\n"
		);
	else
		con_putstr("Commands:\r\n"
 80055fc:	4804      	ldr	r0, [pc, #16]	; (8005610 <cmd_help+0x28>)
 80055fe:	f7fa ffd9 	bl	80005b4 <con_putstr>
		"\t"		"\t"		"\t"		"save\t"	"save setup data\r\n"
#endif
		"<on> ar, <fun><sp><fwd><loc><time><pos>ard\r\n"
		"arl, arsave\r\n"
		);
	return 0;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20001664 	.word	0x20001664
 800560c:	08010938 	.word	0x08010938
 8005610:	08010a94 	.word	0x08010a94

08005614 <cmd_lookup>:
	{0, 0}
};

// device-specific command lookup, calls std command lookup defined in cmdproc
_Bool cmd_lookup(const char *cmds)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	_Bool ret = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	77fb      	strb	r3, [r7, #31]
	if (!ret)
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	f083 0301 	eor.w	r3, r3, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d046      	beq.n	80056ba <cmd_lookup+0xa6>
	{
		if (!case_sens)
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <cmd_lookup+0xc8>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	f083 0301 	eor.w	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d039      	beq.n	80056ae <cmd_lookup+0x9a>
		{
			//convert command string to lower case
			char lccmd[16];
			uint8_t i;
			for (i = 0; i < 15 && cmds[i]; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	77bb      	strb	r3, [r7, #30]
 800563e:	e01e      	b.n	800567e <cmd_lookup+0x6a>
				lccmd[i] = cmds[i] >= 'A' && cmds[i] <= 'Z' ? cmds[i] + 'a' - 'A' : cmds[i];
 8005640:	7fbb      	ldrb	r3, [r7, #30]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d90c      	bls.n	8005666 <cmd_lookup+0x52>
 800564c:	7fbb      	ldrb	r3, [r7, #30]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b5a      	cmp	r3, #90	; 0x5a
 8005656:	d806      	bhi.n	8005666 <cmd_lookup+0x52>
 8005658:	7fbb      	ldrb	r3, [r7, #30]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	3320      	adds	r3, #32
 8005662:	b2db      	uxtb	r3, r3
 8005664:	e003      	b.n	800566e <cmd_lookup+0x5a>
 8005666:	7fbb      	ldrb	r3, [r7, #30]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4413      	add	r3, r2
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	7fba      	ldrb	r2, [r7, #30]
 8005670:	3220      	adds	r2, #32
 8005672:	443a      	add	r2, r7
 8005674:	f802 3c14 	strb.w	r3, [r2, #-20]
			for (i = 0; i < 15 && cmds[i]; i++)
 8005678:	7fbb      	ldrb	r3, [r7, #30]
 800567a:	3301      	adds	r3, #1
 800567c:	77bb      	strb	r3, [r7, #30]
 800567e:	7fbb      	ldrb	r3, [r7, #30]
 8005680:	2b0e      	cmp	r3, #14
 8005682:	d805      	bhi.n	8005690 <cmd_lookup+0x7c>
 8005684:	7fbb      	ldrb	r3, [r7, #30]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	4413      	add	r3, r2
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1d7      	bne.n	8005640 <cmd_lookup+0x2c>
			lccmd[i] = 0;
 8005690:	7fbb      	ldrb	r3, [r7, #30]
 8005692:	3320      	adds	r3, #32
 8005694:	443b      	add	r3, r7
 8005696:	2200      	movs	r2, #0
 8005698:	f803 2c14 	strb.w	r2, [r3, #-20]
			ret = cmd_tlookup(lccmd, cmdtab);
 800569c:	f107 030c 	add.w	r3, r7, #12
 80056a0:	490f      	ldr	r1, [pc, #60]	; (80056e0 <cmd_lookup+0xcc>)
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fb ff2c 	bl	8001500 <cmd_tlookup>
 80056a8:	4603      	mov	r3, r0
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e005      	b.n	80056ba <cmd_lookup+0xa6>
		}
		else
			ret = cmd_tlookup(cmds, cmdtab);
 80056ae:	490c      	ldr	r1, [pc, #48]	; (80056e0 <cmd_lookup+0xcc>)
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fb ff25 	bl	8001500 <cmd_tlookup>
 80056b6:	4603      	mov	r3, r0
 80056b8:	77fb      	strb	r3, [r7, #31]
	}
	if (!ret)
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
 80056bc:	f083 0301 	eor.w	r3, r3, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <cmd_lookup+0xbc>
		ret = stdcmd_lookup(cmds);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fb ff44 	bl	8001554 <stdcmd_lookup>
 80056cc:	4603      	mov	r3, r0
 80056ce:	77fb      	strb	r3, [r7, #31]
	
//	new_prompt = 1;
	return ret;
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	200016b8 	.word	0x200016b8
 80056e0:	080110f0 	.word	0x080110f0

080056e4 <cmd_repeat>:

void cmd_repeat(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
	if (lastcmd)
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <cmd_repeat+0x18>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <cmd_repeat+0x12>
		lastcmd();
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <cmd_repeat+0x18>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4798      	blx	r3
//	new_prompt = 1;
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200016b4 	.word	0x200016b4

08005700 <display_prompt>:
//==============================================================================
// PROMPT
//==============================================================================
// NOT called from this module
void display_prompt(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
	cmdline_start = 2;
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <display_prompt+0x1c>)
 8005706:	2202      	movs	r2, #2
 8005708:	701a      	strb	r2, [r3, #0]
	con_putchar('\r');
 800570a:	200d      	movs	r0, #13
 800570c:	f7fc fd14 	bl	8002138 <con_putchar>
	con_putchar('>');
 8005710:	203e      	movs	r0, #62	; 0x3e
 8005712:	f7fc fd11 	bl	8002138 <con_putchar>
}
 8005716:	bf00      	nop
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200008b3 	.word	0x200008b3

08005720 <display_signon>:

void display_signon(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
	con_putstr("\r\n\r\n" DEVNAME
 8005724:	4804      	ldr	r0, [pc, #16]	; (8005738 <display_signon+0x18>)
 8005726:	f7fa ff45 	bl	80005b4 <con_putstr>
	"  fv." FIRMWARE_VERSION "  (? - command help)\r\n\r\n");
	display_prompt();
 800572a:	f7ff ffe9 	bl	8005700 <display_prompt>
	echo_on = 1;
 800572e:	4b03      	ldr	r3, [pc, #12]	; (800573c <display_signon+0x1c>)
 8005730:	2201      	movs	r2, #1
 8005732:	701a      	strb	r2, [r3, #0]
}
 8005734:	bf00      	nop
 8005736:	bd80      	pop	{r7, pc}
 8005738:	08010f1c 	.word	0x08010f1c
 800573c:	20000000 	.word	0x20000000

08005740 <rstcfg>:

#define savedcfg (*(union cfgdata_ *)CFGADDR)
#define savedauto ((struct autostep_ *)ARUNADDR)
	
void rstcfg(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	flash_erase_page((void *)CFGADDR);
 8005744:	4840      	ldr	r0, [pc, #256]	; (8005848 <rstcfg+0x108>)
 8005746:	f7fb ff75 	bl	8001634 <flash_erase_page>
	cd = defcd;
 800574a:	4b40      	ldr	r3, [pc, #256]	; (800584c <rstcfg+0x10c>)
 800574c:	4618      	mov	r0, r3
 800574e:	238c      	movs	r3, #140	; 0x8c
 8005750:	461a      	mov	r2, r3
 8005752:	2100      	movs	r1, #0
 8005754:	f00a f9ae 	bl	800fab4 <memset>
 8005758:	4b3c      	ldr	r3, [pc, #240]	; (800584c <rstcfg+0x10c>)
 800575a:	2242      	movs	r2, #66	; 0x42
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	4b3b      	ldr	r3, [pc, #236]	; (800584c <rstcfg+0x10c>)
 8005760:	2201      	movs	r2, #1
 8005762:	811a      	strh	r2, [r3, #8]
 8005764:	4b39      	ldr	r3, [pc, #228]	; (800584c <rstcfg+0x10c>)
 8005766:	2202      	movs	r2, #2
 8005768:	819a      	strh	r2, [r3, #12]
 800576a:	4b38      	ldr	r3, [pc, #224]	; (800584c <rstcfg+0x10c>)
 800576c:	2203      	movs	r2, #3
 800576e:	821a      	strh	r2, [r3, #16]
 8005770:	4b36      	ldr	r3, [pc, #216]	; (800584c <rstcfg+0x10c>)
 8005772:	2204      	movs	r2, #4
 8005774:	829a      	strh	r2, [r3, #20]
 8005776:	4b35      	ldr	r3, [pc, #212]	; (800584c <rstcfg+0x10c>)
 8005778:	2205      	movs	r2, #5
 800577a:	831a      	strh	r2, [r3, #24]
 800577c:	4b33      	ldr	r3, [pc, #204]	; (800584c <rstcfg+0x10c>)
 800577e:	2206      	movs	r2, #6
 8005780:	839a      	strh	r2, [r3, #28]
 8005782:	4b32      	ldr	r3, [pc, #200]	; (800584c <rstcfg+0x10c>)
 8005784:	2207      	movs	r2, #7
 8005786:	841a      	strh	r2, [r3, #32]
 8005788:	4b30      	ldr	r3, [pc, #192]	; (800584c <rstcfg+0x10c>)
 800578a:	2208      	movs	r2, #8
 800578c:	849a      	strh	r2, [r3, #36]	; 0x24
 800578e:	4b2f      	ldr	r3, [pc, #188]	; (800584c <rstcfg+0x10c>)
 8005790:	2209      	movs	r2, #9
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
 8005794:	4b2d      	ldr	r3, [pc, #180]	; (800584c <rstcfg+0x10c>)
 8005796:	220a      	movs	r2, #10
 8005798:	859a      	strh	r2, [r3, #44]	; 0x2c
 800579a:	4b2c      	ldr	r3, [pc, #176]	; (800584c <rstcfg+0x10c>)
 800579c:	220b      	movs	r2, #11
 800579e:	861a      	strh	r2, [r3, #48]	; 0x30
 80057a0:	4b2a      	ldr	r3, [pc, #168]	; (800584c <rstcfg+0x10c>)
 80057a2:	220c      	movs	r2, #12
 80057a4:	869a      	strh	r2, [r3, #52]	; 0x34
 80057a6:	4b29      	ldr	r3, [pc, #164]	; (800584c <rstcfg+0x10c>)
 80057a8:	220d      	movs	r2, #13
 80057aa:	871a      	strh	r2, [r3, #56]	; 0x38
 80057ac:	4b27      	ldr	r3, [pc, #156]	; (800584c <rstcfg+0x10c>)
 80057ae:	220e      	movs	r2, #14
 80057b0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80057b2:	4b26      	ldr	r3, [pc, #152]	; (800584c <rstcfg+0x10c>)
 80057b4:	220f      	movs	r2, #15
 80057b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80057ba:	4b24      	ldr	r3, [pc, #144]	; (800584c <rstcfg+0x10c>)
 80057bc:	2210      	movs	r2, #16
 80057be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80057c2:	4b22      	ldr	r3, [pc, #136]	; (800584c <rstcfg+0x10c>)
 80057c4:	2211      	movs	r2, #17
 80057c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <rstcfg+0x10c>)
 80057cc:	2212      	movs	r2, #18
 80057ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80057d2:	4b1e      	ldr	r3, [pc, #120]	; (800584c <rstcfg+0x10c>)
 80057d4:	2213      	movs	r2, #19
 80057d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80057da:	4b1c      	ldr	r3, [pc, #112]	; (800584c <rstcfg+0x10c>)
 80057dc:	2215      	movs	r2, #21
 80057de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80057e2:	4b1a      	ldr	r3, [pc, #104]	; (800584c <rstcfg+0x10c>)
 80057e4:	2216      	movs	r2, #22
 80057e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80057ea:	4b18      	ldr	r3, [pc, #96]	; (800584c <rstcfg+0x10c>)
 80057ec:	2217      	movs	r2, #23
 80057ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057f2:	4b16      	ldr	r3, [pc, #88]	; (800584c <rstcfg+0x10c>)
 80057f4:	2218      	movs	r2, #24
 80057f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057fa:	4b14      	ldr	r3, [pc, #80]	; (800584c <rstcfg+0x10c>)
 80057fc:	2219      	movs	r2, #25
 80057fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005802:	4b12      	ldr	r3, [pc, #72]	; (800584c <rstcfg+0x10c>)
 8005804:	221a      	movs	r2, #26
 8005806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <rstcfg+0x10c>)
 800580c:	221b      	movs	r2, #27
 800580e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005812:	4b0e      	ldr	r3, [pc, #56]	; (800584c <rstcfg+0x10c>)
 8005814:	221c      	movs	r2, #28
 8005816:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <rstcfg+0x10c>)
 800581c:	221d      	movs	r2, #29
 800581e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <rstcfg+0x10c>)
 8005824:	221e      	movs	r2, #30
 8005826:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800582a:	4b08      	ldr	r3, [pc, #32]	; (800584c <rstcfg+0x10c>)
 800582c:	221f      	movs	r2, #31
 800582e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <rstcfg+0x10c>)
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 800583a:	4b04      	ldr	r3, [pc, #16]	; (800584c <rstcfg+0x10c>)
 800583c:	22ff      	movs	r2, #255	; 0xff
 800583e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
}
 8005842:	bf00      	nop
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	0800c000 	.word	0x0800c000
 800584c:	200016c0 	.word	0x200016c0

08005850 <loadcfg>:

void loadcfg(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
	if (savedcfg.n.ver == 'A' || savedcfg.n.ver == 'B')
 8005856:	4b9c      	ldr	r3, [pc, #624]	; (8005ac8 <loadcfg+0x278>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b41      	cmp	r3, #65	; 0x41
 800585c:	d003      	beq.n	8005866 <loadcfg+0x16>
 800585e:	4b9a      	ldr	r3, [pc, #616]	; (8005ac8 <loadcfg+0x278>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b42      	cmp	r3, #66	; 0x42
 8005864:	d108      	bne.n	8005878 <loadcfg+0x28>
	{
		cd = savedcfg;
 8005866:	4b98      	ldr	r3, [pc, #608]	; (8005ac8 <loadcfg+0x278>)
 8005868:	4a98      	ldr	r2, [pc, #608]	; (8005acc <loadcfg+0x27c>)
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	238c      	movs	r3, #140	; 0x8c
 8005870:	461a      	mov	r2, r3
 8005872:	f00a f8f7 	bl	800fa64 <memcpy>
 8005876:	e07b      	b.n	8005970 <loadcfg+0x120>
	}
	else
		cd = defcd;
 8005878:	4b94      	ldr	r3, [pc, #592]	; (8005acc <loadcfg+0x27c>)
 800587a:	4618      	mov	r0, r3
 800587c:	238c      	movs	r3, #140	; 0x8c
 800587e:	461a      	mov	r2, r3
 8005880:	2100      	movs	r1, #0
 8005882:	f00a f917 	bl	800fab4 <memset>
 8005886:	4b91      	ldr	r3, [pc, #580]	; (8005acc <loadcfg+0x27c>)
 8005888:	2242      	movs	r2, #66	; 0x42
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	4b8f      	ldr	r3, [pc, #572]	; (8005acc <loadcfg+0x27c>)
 800588e:	2201      	movs	r2, #1
 8005890:	811a      	strh	r2, [r3, #8]
 8005892:	4b8e      	ldr	r3, [pc, #568]	; (8005acc <loadcfg+0x27c>)
 8005894:	2202      	movs	r2, #2
 8005896:	819a      	strh	r2, [r3, #12]
 8005898:	4b8c      	ldr	r3, [pc, #560]	; (8005acc <loadcfg+0x27c>)
 800589a:	2203      	movs	r2, #3
 800589c:	821a      	strh	r2, [r3, #16]
 800589e:	4b8b      	ldr	r3, [pc, #556]	; (8005acc <loadcfg+0x27c>)
 80058a0:	2204      	movs	r2, #4
 80058a2:	829a      	strh	r2, [r3, #20]
 80058a4:	4b89      	ldr	r3, [pc, #548]	; (8005acc <loadcfg+0x27c>)
 80058a6:	2205      	movs	r2, #5
 80058a8:	831a      	strh	r2, [r3, #24]
 80058aa:	4b88      	ldr	r3, [pc, #544]	; (8005acc <loadcfg+0x27c>)
 80058ac:	2206      	movs	r2, #6
 80058ae:	839a      	strh	r2, [r3, #28]
 80058b0:	4b86      	ldr	r3, [pc, #536]	; (8005acc <loadcfg+0x27c>)
 80058b2:	2207      	movs	r2, #7
 80058b4:	841a      	strh	r2, [r3, #32]
 80058b6:	4b85      	ldr	r3, [pc, #532]	; (8005acc <loadcfg+0x27c>)
 80058b8:	2208      	movs	r2, #8
 80058ba:	849a      	strh	r2, [r3, #36]	; 0x24
 80058bc:	4b83      	ldr	r3, [pc, #524]	; (8005acc <loadcfg+0x27c>)
 80058be:	2209      	movs	r2, #9
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80058c2:	4b82      	ldr	r3, [pc, #520]	; (8005acc <loadcfg+0x27c>)
 80058c4:	220a      	movs	r2, #10
 80058c6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80058c8:	4b80      	ldr	r3, [pc, #512]	; (8005acc <loadcfg+0x27c>)
 80058ca:	220b      	movs	r2, #11
 80058cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80058ce:	4b7f      	ldr	r3, [pc, #508]	; (8005acc <loadcfg+0x27c>)
 80058d0:	220c      	movs	r2, #12
 80058d2:	869a      	strh	r2, [r3, #52]	; 0x34
 80058d4:	4b7d      	ldr	r3, [pc, #500]	; (8005acc <loadcfg+0x27c>)
 80058d6:	220d      	movs	r2, #13
 80058d8:	871a      	strh	r2, [r3, #56]	; 0x38
 80058da:	4b7c      	ldr	r3, [pc, #496]	; (8005acc <loadcfg+0x27c>)
 80058dc:	220e      	movs	r2, #14
 80058de:	879a      	strh	r2, [r3, #60]	; 0x3c
 80058e0:	4b7a      	ldr	r3, [pc, #488]	; (8005acc <loadcfg+0x27c>)
 80058e2:	220f      	movs	r2, #15
 80058e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80058e8:	4b78      	ldr	r3, [pc, #480]	; (8005acc <loadcfg+0x27c>)
 80058ea:	2210      	movs	r2, #16
 80058ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80058f0:	4b76      	ldr	r3, [pc, #472]	; (8005acc <loadcfg+0x27c>)
 80058f2:	2211      	movs	r2, #17
 80058f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80058f8:	4b74      	ldr	r3, [pc, #464]	; (8005acc <loadcfg+0x27c>)
 80058fa:	2212      	movs	r2, #18
 80058fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005900:	4b72      	ldr	r3, [pc, #456]	; (8005acc <loadcfg+0x27c>)
 8005902:	2213      	movs	r2, #19
 8005904:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005908:	4b70      	ldr	r3, [pc, #448]	; (8005acc <loadcfg+0x27c>)
 800590a:	2215      	movs	r2, #21
 800590c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005910:	4b6e      	ldr	r3, [pc, #440]	; (8005acc <loadcfg+0x27c>)
 8005912:	2216      	movs	r2, #22
 8005914:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005918:	4b6c      	ldr	r3, [pc, #432]	; (8005acc <loadcfg+0x27c>)
 800591a:	2217      	movs	r2, #23
 800591c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005920:	4b6a      	ldr	r3, [pc, #424]	; (8005acc <loadcfg+0x27c>)
 8005922:	2218      	movs	r2, #24
 8005924:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005928:	4b68      	ldr	r3, [pc, #416]	; (8005acc <loadcfg+0x27c>)
 800592a:	2219      	movs	r2, #25
 800592c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005930:	4b66      	ldr	r3, [pc, #408]	; (8005acc <loadcfg+0x27c>)
 8005932:	221a      	movs	r2, #26
 8005934:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005938:	4b64      	ldr	r3, [pc, #400]	; (8005acc <loadcfg+0x27c>)
 800593a:	221b      	movs	r2, #27
 800593c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005940:	4b62      	ldr	r3, [pc, #392]	; (8005acc <loadcfg+0x27c>)
 8005942:	221c      	movs	r2, #28
 8005944:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005948:	4b60      	ldr	r3, [pc, #384]	; (8005acc <loadcfg+0x27c>)
 800594a:	221d      	movs	r2, #29
 800594c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005950:	4b5e      	ldr	r3, [pc, #376]	; (8005acc <loadcfg+0x27c>)
 8005952:	221e      	movs	r2, #30
 8005954:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005958:	4b5c      	ldr	r3, [pc, #368]	; (8005acc <loadcfg+0x27c>)
 800595a:	221f      	movs	r2, #31
 800595c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005960:	4b5a      	ldr	r3, [pc, #360]	; (8005acc <loadcfg+0x27c>)
 8005962:	22ff      	movs	r2, #255	; 0xff
 8005964:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8005968:	4b58      	ldr	r3, [pc, #352]	; (8005acc <loadcfg+0x27c>)
 800596a:	22ff      	movs	r2, #255	; 0xff
 800596c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	
	if (savedcfg.n.ver == 'A')
 8005970:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <loadcfg+0x278>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b41      	cmp	r3, #65	; 0x41
 8005976:	d17b      	bne.n	8005a70 <loadcfg+0x220>
	{
		// update cfg to version B
		cd = defcd;
 8005978:	4b54      	ldr	r3, [pc, #336]	; (8005acc <loadcfg+0x27c>)
 800597a:	4618      	mov	r0, r3
 800597c:	238c      	movs	r3, #140	; 0x8c
 800597e:	461a      	mov	r2, r3
 8005980:	2100      	movs	r1, #0
 8005982:	f00a f897 	bl	800fab4 <memset>
 8005986:	4b51      	ldr	r3, [pc, #324]	; (8005acc <loadcfg+0x27c>)
 8005988:	2242      	movs	r2, #66	; 0x42
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	4b4f      	ldr	r3, [pc, #316]	; (8005acc <loadcfg+0x27c>)
 800598e:	2201      	movs	r2, #1
 8005990:	811a      	strh	r2, [r3, #8]
 8005992:	4b4e      	ldr	r3, [pc, #312]	; (8005acc <loadcfg+0x27c>)
 8005994:	2202      	movs	r2, #2
 8005996:	819a      	strh	r2, [r3, #12]
 8005998:	4b4c      	ldr	r3, [pc, #304]	; (8005acc <loadcfg+0x27c>)
 800599a:	2203      	movs	r2, #3
 800599c:	821a      	strh	r2, [r3, #16]
 800599e:	4b4b      	ldr	r3, [pc, #300]	; (8005acc <loadcfg+0x27c>)
 80059a0:	2204      	movs	r2, #4
 80059a2:	829a      	strh	r2, [r3, #20]
 80059a4:	4b49      	ldr	r3, [pc, #292]	; (8005acc <loadcfg+0x27c>)
 80059a6:	2205      	movs	r2, #5
 80059a8:	831a      	strh	r2, [r3, #24]
 80059aa:	4b48      	ldr	r3, [pc, #288]	; (8005acc <loadcfg+0x27c>)
 80059ac:	2206      	movs	r2, #6
 80059ae:	839a      	strh	r2, [r3, #28]
 80059b0:	4b46      	ldr	r3, [pc, #280]	; (8005acc <loadcfg+0x27c>)
 80059b2:	2207      	movs	r2, #7
 80059b4:	841a      	strh	r2, [r3, #32]
 80059b6:	4b45      	ldr	r3, [pc, #276]	; (8005acc <loadcfg+0x27c>)
 80059b8:	2208      	movs	r2, #8
 80059ba:	849a      	strh	r2, [r3, #36]	; 0x24
 80059bc:	4b43      	ldr	r3, [pc, #268]	; (8005acc <loadcfg+0x27c>)
 80059be:	2209      	movs	r2, #9
 80059c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80059c2:	4b42      	ldr	r3, [pc, #264]	; (8005acc <loadcfg+0x27c>)
 80059c4:	220a      	movs	r2, #10
 80059c6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80059c8:	4b40      	ldr	r3, [pc, #256]	; (8005acc <loadcfg+0x27c>)
 80059ca:	220b      	movs	r2, #11
 80059cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80059ce:	4b3f      	ldr	r3, [pc, #252]	; (8005acc <loadcfg+0x27c>)
 80059d0:	220c      	movs	r2, #12
 80059d2:	869a      	strh	r2, [r3, #52]	; 0x34
 80059d4:	4b3d      	ldr	r3, [pc, #244]	; (8005acc <loadcfg+0x27c>)
 80059d6:	220d      	movs	r2, #13
 80059d8:	871a      	strh	r2, [r3, #56]	; 0x38
 80059da:	4b3c      	ldr	r3, [pc, #240]	; (8005acc <loadcfg+0x27c>)
 80059dc:	220e      	movs	r2, #14
 80059de:	879a      	strh	r2, [r3, #60]	; 0x3c
 80059e0:	4b3a      	ldr	r3, [pc, #232]	; (8005acc <loadcfg+0x27c>)
 80059e2:	220f      	movs	r2, #15
 80059e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80059e8:	4b38      	ldr	r3, [pc, #224]	; (8005acc <loadcfg+0x27c>)
 80059ea:	2210      	movs	r2, #16
 80059ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80059f0:	4b36      	ldr	r3, [pc, #216]	; (8005acc <loadcfg+0x27c>)
 80059f2:	2211      	movs	r2, #17
 80059f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80059f8:	4b34      	ldr	r3, [pc, #208]	; (8005acc <loadcfg+0x27c>)
 80059fa:	2212      	movs	r2, #18
 80059fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <loadcfg+0x27c>)
 8005a02:	2213      	movs	r2, #19
 8005a04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005a08:	4b30      	ldr	r3, [pc, #192]	; (8005acc <loadcfg+0x27c>)
 8005a0a:	2215      	movs	r2, #21
 8005a0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005a10:	4b2e      	ldr	r3, [pc, #184]	; (8005acc <loadcfg+0x27c>)
 8005a12:	2216      	movs	r2, #22
 8005a14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005a18:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <loadcfg+0x27c>)
 8005a1a:	2217      	movs	r2, #23
 8005a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a20:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <loadcfg+0x27c>)
 8005a22:	2218      	movs	r2, #24
 8005a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <loadcfg+0x27c>)
 8005a2a:	2219      	movs	r2, #25
 8005a2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005a30:	4b26      	ldr	r3, [pc, #152]	; (8005acc <loadcfg+0x27c>)
 8005a32:	221a      	movs	r2, #26
 8005a34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005a38:	4b24      	ldr	r3, [pc, #144]	; (8005acc <loadcfg+0x27c>)
 8005a3a:	221b      	movs	r2, #27
 8005a3c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005a40:	4b22      	ldr	r3, [pc, #136]	; (8005acc <loadcfg+0x27c>)
 8005a42:	221c      	movs	r2, #28
 8005a44:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <loadcfg+0x27c>)
 8005a4a:	221d      	movs	r2, #29
 8005a4c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005a50:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <loadcfg+0x27c>)
 8005a52:	221e      	movs	r2, #30
 8005a54:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <loadcfg+0x27c>)
 8005a5a:	221f      	movs	r2, #31
 8005a5c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005a60:	4b1a      	ldr	r3, [pc, #104]	; (8005acc <loadcfg+0x27c>)
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8005a68:	4b18      	ldr	r3, [pc, #96]	; (8005acc <loadcfg+0x27c>)
 8005a6a:	22ff      	movs	r2, #255	; 0xff
 8005a6c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
	}
	for (uint8_t i = 0; i < NDEVICES; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	71fb      	strb	r3, [r7, #7]
 8005a74:	e015      	b.n	8005aa2 <loadcfg+0x252>
		loco[i].fun.bf.f4_1 = cd.n.dev[i].flags.bit.def_f1_4;	// send F3, F1
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	79fa      	ldrb	r2, [r7, #7]
 8005a7a:	4914      	ldr	r1, [pc, #80]	; (8005acc <loadcfg+0x27c>)
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	79db      	ldrb	r3, [r3, #7]
 8005a82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a86:	b2d9      	uxtb	r1, r3
 8005a88:	4811      	ldr	r0, [pc, #68]	; (8005ad0 <loadcfg+0x280>)
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	18c2      	adds	r2, r0, r3
 8005a94:	7913      	ldrb	r3, [r2, #4]
 8005a96:	f361 0344 	bfi	r3, r1, #1, #4
 8005a9a:	7113      	strb	r3, [r2, #4]
	for (uint8_t i = 0; i < NDEVICES; i++)
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	71fb      	strb	r3, [r7, #7]
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	2b1f      	cmp	r3, #31
 8005aa6:	d9e6      	bls.n	8005a76 <loadcfg+0x226>
	
	if (savedauto[0].stime != 0xff)
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <loadcfg+0x284>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2bff      	cmp	r3, #255	; 0xff
 8005aae:	d007      	beq.n	8005ac0 <loadcfg+0x270>
	{
		memcpy(autopgm, savedauto, sizeof(autopgm));
 8005ab0:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <loadcfg+0x288>)
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <loadcfg+0x284>)
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	23a0      	movs	r3, #160	; 0xa0
 8005aba:	461a      	mov	r2, r3
 8005abc:	f009 ffd2 	bl	800fa64 <memcpy>
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	0800c000 	.word	0x0800c000
 8005acc:	200016c0 	.word	0x200016c0
 8005ad0:	200013e4 	.word	0x200013e4
 8005ad4:	0800d000 	.word	0x0800d000
 8005ad8:	20001340 	.word	0x20001340

08005adc <storecfg>:

void storecfg(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
	// erase cfg page
	flash_erase_page((void *)CFGADDR);
 8005ae2:	481b      	ldr	r0, [pc, #108]	; (8005b50 <storecfg+0x74>)
 8005ae4:	f7fb fda6 	bl	8001634 <flash_erase_page>
	// write
	for (uint32_t a = 0; a < (sizeof(cd) + 7) / 8; a++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	e010      	b.n	8005b10 <storecfg+0x34>
	{
		flash_write64((uint32_t *)(CFGADDR + a * 8), (uint32_t *)(&cd.b[a * 8]));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8005af4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4618      	mov	r0, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4a14      	ldr	r2, [pc, #80]	; (8005b54 <storecfg+0x78>)
 8005b02:	4413      	add	r3, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f7fb fe03 	bl	8001710 <flash_write64>
	for (uint32_t a = 0; a < (sizeof(cd) + 7) / 8; a++)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	607b      	str	r3, [r7, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b11      	cmp	r3, #17
 8005b14:	d9eb      	bls.n	8005aee <storecfg+0x12>
	}
#ifdef CFG_SINGLE_PAGE
	for (uint32_t a = 0; a < (sizeof(autopgm) + 7) / 8; a++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	e010      	b.n	8005b3e <storecfg+0x62>
	{
		flash_write64((uint32_t *)(ARUNADDR + a * 8), (uint32_t *)((uint8_t *)autopgm + a * 8));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8005b22:	f503 53d0 	add.w	r3, r3, #6656	; 0x1a00
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4618      	mov	r0, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <storecfg+0x7c>)
 8005b30:	4413      	add	r3, r2
 8005b32:	4619      	mov	r1, r3
 8005b34:	f7fb fdec 	bl	8001710 <flash_write64>
	for (uint32_t a = 0; a < (sizeof(autopgm) + 7) / 8; a++)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b13      	cmp	r3, #19
 8005b42:	d9eb      	bls.n	8005b1c <storecfg+0x40>
	}
#endif
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	0800c000 	.word	0x0800c000
 8005b54:	200016c0 	.word	0x200016c0
 8005b58:	20001340 	.word	0x20001340

08005b5c <led_control>:
// 50 steps, led control run with 10 ms interval
// setting led_timer to 100 results in LED turning on, then off in 1 second
uint16_t led_timer;

static void led_control(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
	static uint8_t led_target = LED_DIM;
	
	if (led_timer)
 8005b62:	4b19      	ldr	r3, [pc, #100]	; (8005bc8 <led_control+0x6c>)
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00e      	beq.n	8005b88 <led_control+0x2c>
		led_target = --led_timer == 0 ? LED_DIM : LED_FULL;
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <led_control+0x6c>)
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <led_control+0x6c>)
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <led_control+0x6c>)
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <led_control+0x26>
 8005b7e:	2202      	movs	r2, #2
 8005b80:	e000      	b.n	8005b84 <led_control+0x28>
 8005b82:	2231      	movs	r2, #49	; 0x31
 8005b84:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <led_control+0x70>)
 8005b86:	701a      	strb	r2, [r3, #0]
	uint16_t led_curr = LED_DUTY;
 8005b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	80fb      	strh	r3, [r7, #6]
	if (led_curr != led_target)
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <led_control+0x70>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d00f      	beq.n	8005bbc <led_control+0x60>
		LED_DUTY = led_curr < led_target ? led_curr + 2 : led_curr - 1;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <led_control+0x70>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d203      	bcs.n	8005bb0 <led_control+0x54>
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	3302      	adds	r3, #2
 8005bac:	461a      	mov	r2, r3
 8005bae:	e002      	b.n	8005bb6 <led_control+0x5a>
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	2000174c 	.word	0x2000174c
 8005bcc:	20000376 	.word	0x20000376

08005bd0 <run_every_10ms>:

volatile uint16_t seccnt;

static void run_every_10ms(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
#ifdef USE_ADC
	void adc_control(void);

	adc_control();
#endif
	led_control();
 8005bd4:	f7ff ffc2 	bl	8005b5c <led_control>

	// sensor data acquisition

	static uint8_t tdiv;
	if (++tdiv == 100u)
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <run_every_10ms+0x38>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <run_every_10ms+0x38>)
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <run_every_10ms+0x38>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b64      	cmp	r3, #100	; 0x64
 8005bea:	d10b      	bne.n	8005c04 <run_every_10ms+0x34>
	{
		// 1 s elapsed
		tdiv = 0;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <run_every_10ms+0x38>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
		seccnt++;
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <run_every_10ms+0x3c>)
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <run_every_10ms+0x3c>)
 8005bfe:	801a      	strh	r2, [r3, #0]
		autorun();
 8005c00:	f7fd f91c 	bl	8002e3c <autorun>
	}
}
 8005c04:	bf00      	nop
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20001750 	.word	0x20001750
 8005c0c:	2000174e 	.word	0x2000174e

08005c10 <run_every_ms>:

void run_every_ms(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
	adc_process();
 8005c14:	f7fc fb39 	bl	800228a <adc_process>
		}
	}
	
#else
	// DCC Ack detector logic input
	if (~NACK_PORT->IDR & NACK_MSK)
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <run_every_ms+0x58>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	43db      	mvns	r3, r3
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <run_every_ms+0x26>
	{
		dccs.ack = 1;
 8005c26:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <run_every_ms+0x5c>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	711a      	strb	r2, [r3, #4]
		led_timer = LED_FREQ;
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <run_every_ms+0x60>)
 8005c2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	e007      	b.n	8005c46 <run_every_ms+0x36>
	}
	else if (dccs.ack)
 8005c36:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <run_every_ms+0x5c>)
 8005c38:	791b      	ldrb	r3, [r3, #4]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <run_every_ms+0x36>
		dccs.ack_released = 1;
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <run_every_ms+0x5c>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	715a      	strb	r2, [r3, #5]
			}
		}
	}
#endif
	static uint8_t tdiv;
	if (++tdiv == 10)
 8005c46:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <run_every_ms+0x64>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <run_every_ms+0x64>)
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <run_every_ms+0x64>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b0a      	cmp	r3, #10
 8005c58:	d104      	bne.n	8005c64 <run_every_ms+0x54>
	{
		tdiv = 0;
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <run_every_ms+0x64>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
		void run_every_10ms(void);
		run_every_10ms();
 8005c60:	f7ff ffb6 	bl	8005bd0 <run_every_10ms>
	}
}
 8005c64:	bf00      	nop
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40020800 	.word	0x40020800
 8005c6c:	20001664 	.word	0x20001664
 8005c70:	2000174c 	.word	0x2000174c
 8005c74:	20001751 	.word	0x20001751

08005c78 <__NVIC_SetPendingIRQ>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	db0c      	blt.n	8005ca4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	f003 021f 	and.w	r2, r3, #31
 8005c90:	4907      	ldr	r1, [pc, #28]	; (8005cb0 <__NVIC_SetPendingIRQ+0x38>)
 8005c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	2001      	movs	r0, #1
 8005c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c9e:	3340      	adds	r3, #64	; 0x40
 8005ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	e000e100 	.word	0xe000e100

08005cb4 <write8sync>:
static const uint8_t baddr[] = {000, 020, 010, 030, 002, 022, 012, 032,
	001, 021, 011, 031, 003, 023, 013, 033};
uint16_t sxdatagram[128];
	
static void write8sync(uint8_t start)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
 8005cc2:	e016      	b.n	8005cf2 <write8sync+0x3e>
		sxdatagram[(start + i) * 8] = baddr[start + i] << 6 | 04470;
 8005cc4:	79fa      	ldrb	r2, [r7, #7]
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	4413      	add	r3, r2
 8005cca:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <write8sync+0x54>)
 8005ccc:	5cd3      	ldrb	r3, [r2, r3]
 8005cce:	019b      	lsls	r3, r3, #6
 8005cd0:	b21b      	sxth	r3, r3
 8005cd2:	f443 6313 	orr.w	r3, r3, #2352	; 0x930
 8005cd6:	f043 0308 	orr.w	r3, r3, #8
 8005cda:	b219      	sxth	r1, r3
 8005cdc:	79fa      	ldrb	r2, [r7, #7]
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	b289      	uxth	r1, r1
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <write8sync+0x58>)
 8005ce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 8; i++)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b07      	cmp	r3, #7
 8005cf6:	d9e5      	bls.n	8005cc4 <write8sync+0x10>
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	080112e0 	.word	0x080112e0
 8005d0c:	2000175c 	.word	0x2000175c

08005d10 <sxidx>:

static uint8_t sxidx(uint8_t addr)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
	// addr: 0..112
	addr = ~addr & 0x7f;
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d24:	71fb      	strb	r3, [r7, #7]
	return (addr & 0xf) << 3 | addr >> 4;
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	b25b      	sxtb	r3, r3
 8005d2c:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005d30:	b25a      	sxtb	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	b2db      	uxtb	r3, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <sx_preparedata>:
		sx_set_datagram(cd.n.dev[ln].dccaddr, (loco[ln].dspeed & 0x1f) | loco[ln].rev << 5 | (loco[ln].fun.b[0] & 3) << 6);
	}
}

void sx_preparedata(_Bool sector)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 64; i++)
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
 8005d5a:	e00b      	b.n	8005d74 <sx_preparedata+0x28>
		sxdatagram[sector * 64 + i] = 04444;
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	019a      	lsls	r2, r3, #6
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	4413      	add	r3, r2
 8005d64:	4a49      	ldr	r2, [pc, #292]	; (8005e8c <sx_preparedata+0x140>)
 8005d66:	f640 1124 	movw	r1, #2340	; 0x924
 8005d6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t i = 0; i < 64; i++)
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	3301      	adds	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b3f      	cmp	r3, #63	; 0x3f
 8005d78:	d9f0      	bls.n	8005d5c <sx_preparedata+0x10>
	write8sync(sector * 8);
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff ff97 	bl	8005cb4 <write8sync>
	
	for (uint8_t ln = 0; ln < NDEVICES; ln++)
 8005d86:	2300      	movs	r3, #0
 8005d88:	73bb      	strb	r3, [r7, #14]
 8005d8a:	e077      	b.n	8005e7c <sx_preparedata+0x130>
	{
		uint8_t sxaddr = cd.n.dev[ln].dccaddr;
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	4a40      	ldr	r2, [pc, #256]	; (8005e90 <sx_preparedata+0x144>)
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	889b      	ldrh	r3, [r3, #4]
 8005d96:	737b      	strb	r3, [r7, #13]
		if (sxaddr < SX_LOCOS && ((~sxaddr >> 3 & 1) == sector) && cd.n.dev[ln].flags.w)
 8005d98:	7b7b      	ldrb	r3, [r7, #13]
 8005d9a:	2b6f      	cmp	r3, #111	; 0x6f
 8005d9c:	d86b      	bhi.n	8005e76 <sx_preparedata+0x12a>
 8005d9e:	7b7b      	ldrb	r3, [r7, #13]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	10db      	asrs	r3, r3, #3
 8005da4:	f003 0201 	and.w	r2, r3, #1
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d163      	bne.n	8005e76 <sx_preparedata+0x12a>
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	4a37      	ldr	r2, [pc, #220]	; (8005e90 <sx_preparedata+0x144>)
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	88db      	ldrh	r3, [r3, #6]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05c      	beq.n	8005e76 <sx_preparedata+0x12a>
		{
			uint8_t idx = sxidx(sxaddr);
 8005dbc:	7b7b      	ldrb	r3, [r7, #13]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff ffa6 	bl	8005d10 <sxidx>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	733b      	strb	r3, [r7, #12]
			//sxdatagram[0] = idx;
			//sxdatagram[64] = idx;
			// sent LSB first
			uint8_t speed = loco[ln].dspeed;
 8005dc8:	7bba      	ldrb	r2, [r7, #14]
 8005dca:	4932      	ldr	r1, [pc, #200]	; (8005e94 <sx_preparedata+0x148>)
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	72fb      	strb	r3, [r7, #11]
			sxdatagram[idx] = (speed & 3) | (speed & 0xc) << 1 | (speed & 0x10) << 2
 8005ddc:	7afb      	ldrb	r3, [r7, #11]
 8005dde:	b21b      	sxth	r3, r3
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	b21a      	sxth	r2, r3
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	f003 0318 	and.w	r3, r3, #24
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b21a      	sxth	r2, r3
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	b21b      	sxth	r3, r3
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	b21b      	sxth	r3, r3
 8005e02:	4313      	orrs	r3, r2
 8005e04:	b219      	sxth	r1, r3
				| loco[ln].rev << 7	// 0 - fwd, 1 - rev
 8005e06:	7bba      	ldrb	r2, [r7, #14]
 8005e08:	4822      	ldr	r0, [pc, #136]	; (8005e94 <sx_preparedata+0x148>)
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4403      	add	r3, r0
 8005e14:	3301      	adds	r3, #1
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	b21b      	sxth	r3, r3
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	b219      	sxth	r1, r3
				| loco[ln].fun.bf.fl << 9 | (loco[ln].fun.bf.f4_1 & 1) << 10
 8005e20:	7bba      	ldrb	r2, [r7, #14]
 8005e22:	481c      	ldr	r0, [pc, #112]	; (8005e94 <sx_preparedata+0x148>)
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4403      	add	r3, r0
 8005e2e:	791b      	ldrb	r3, [r3, #4]
 8005e30:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	025b      	lsls	r3, r3, #9
 8005e38:	b21b      	sxth	r3, r3
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	b219      	sxth	r1, r3
 8005e3e:	7bba      	ldrb	r2, [r7, #14]
 8005e40:	4814      	ldr	r0, [pc, #80]	; (8005e94 <sx_preparedata+0x148>)
 8005e42:	4613      	mov	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4403      	add	r3, r0
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	b21b      	sxth	r3, r3
 8005e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e5c:	b21b      	sxth	r3, r3
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	b21b      	sxth	r3, r3
				| 04444;
 8005e62:	f443 6312 	orr.w	r3, r3, #2336	; 0x920
 8005e66:	f043 0304 	orr.w	r3, r3, #4
 8005e6a:	b21a      	sxth	r2, r3
			sxdatagram[idx] = (speed & 3) | (speed & 0xc) << 1 | (speed & 0x10) << 2
 8005e6c:	7b3b      	ldrb	r3, [r7, #12]
				| 04444;
 8005e6e:	b291      	uxth	r1, r2
			sxdatagram[idx] = (speed & 3) | (speed & 0xc) << 1 | (speed & 0x10) << 2
 8005e70:	4a06      	ldr	r2, [pc, #24]	; (8005e8c <sx_preparedata+0x140>)
 8005e72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t ln = 0; ln < NDEVICES; ln++)
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	73bb      	strb	r3, [r7, #14]
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	2b1f      	cmp	r3, #31
 8005e80:	d984      	bls.n	8005d8c <sx_preparedata+0x40>
		}
	}		
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	2000175c 	.word	0x2000175c
 8005e90:	200016c0 	.word	0x200016c0
 8005e94:	200013e4 	.word	0x200013e4

08005e98 <RCC_IRQHandler>:
/*
	Packet assembler
	invoked via s/w interrupt by SX bit sender
*/
void SX_PktAs_IRQHandler(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
	sx_preparedata(~sx.sidx >> 6 & 1);
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <RCC_IRQHandler+0x24>)
 8005e9e:	78db      	ldrb	r3, [r3, #3]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	119b      	asrs	r3, r3, #6
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff ff4a 	bl	8005d4c <sx_preparedata>
}
 8005eb8:	bf00      	nop
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20001754 	.word	0x20001754

08005ec0 <sx_tx_next_bit>:
// Sender ================================================================
/* Called at the end/start of bit tx period ====================================
Prepares the NEXT bit transfer (the current one is being transmitted now
*/
void sx_tx_next_bit(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
	prepare_SX_bit(sxdatagram[sx.sidx] >> sx.bitcnt & 1);
 8005ec4:	4b1c      	ldr	r3, [pc, #112]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <sx_tx_next_bit+0x7c>)
 8005ecc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	fa42 f303 	asr.w	r3, r2, r3
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bf14      	ite	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	2300      	moveq	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fd fe35 	bl	8003b58 <prepare_SX_bit>
	
	if (++sx.bitcnt == 12)
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005ef8:	705a      	strb	r2, [r3, #1]
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b0c      	cmp	r3, #12
 8005f00:	d118      	bne.n	8005f34 <sx_tx_next_bit+0x74>
	{
		sx.bitcnt = 0;
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	705a      	strb	r2, [r3, #1]
		++sx.sidx;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005f0a:	78db      	ldrb	r3, [r3, #3]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005f12:	70da      	strb	r2, [r3, #3]
		sx.sidx &= 0x7f;
 8005f14:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005f16:	78db      	ldrb	r3, [r3, #3]
 8005f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005f20:	70da      	strb	r2, [r3, #3]
		
		if ((sx.sidx & 0x3f) == 0)
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <sx_tx_next_bit+0x78>)
 8005f24:	78db      	ldrb	r3, [r3, #3]
 8005f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <sx_tx_next_bit+0x74>
			NVIC_SetPendingIRQ(SX_PktAs_IRQn);
 8005f2e:	2005      	movs	r0, #5
 8005f30:	f7ff fea2 	bl	8005c78 <__NVIC_SetPendingIRQ>
	}
}
 8005f34:	bf00      	nop
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20001754 	.word	0x20001754
 8005f3c:	2000175c 	.word	0x2000175c

08005f40 <sx_start>:

// Start Selectrix operation
void sx_start(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
	sx_preparedata(0);
 8005f44:	2000      	movs	r0, #0
 8005f46:	f7ff ff01 	bl	8005d4c <sx_preparedata>
	sx_preparedata(1);
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	f7ff fefe 	bl	8005d4c <sx_preparedata>
}
 8005f50:	bf00      	nop
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_UART_TxCpltCallback>:

static volatile int InUsed=0;
static char uart_buffer[256];
static uint32_t UartErrCnt=0;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
    // TODO check if any more to send and do it
    InUsed=0;
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <HAL_UART_TxCpltCallback+0x28>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
    TEST_PIN_HIGH();
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <HAL_UART_TxCpltCallback+0x2c>)
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <HAL_UART_TxCpltCallback+0x2c>)
 8005f68:	f083 0320 	eor.w	r3, r3, #32
 8005f6c:	6193      	str	r3, [r2, #24]
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	2000185c 	.word	0x2000185c
 8005f80:	40020000 	.word	0x40020000

08005f84 <uart_vprintf>:

int uart_vprintf(const char *msg, va_list ap){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
    int n;
    int status;
    while( InUsed ){
 8005f8e:	e000      	b.n	8005f92 <uart_vprintf+0xe>
           //
        __WFI();
 8005f90:	bf30      	wfi
    while( InUsed ){
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <uart_vprintf+0x64>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1fa      	bne.n	8005f90 <uart_vprintf+0xc>
    }
    InUsed|=1;
 8005f9a:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <uart_vprintf+0x64>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	4a11      	ldr	r2, [pc, #68]	; (8005fe8 <uart_vprintf+0x64>)
 8005fa4:	6013      	str	r3, [r2, #0]
    n=vsnprintf(uart_buffer, sizeof(uart_buffer),  msg, ap);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fae:	480f      	ldr	r0, [pc, #60]	; (8005fec <uart_vprintf+0x68>)
 8005fb0:	f009 fddc 	bl	800fb6c <vsniprintf>
 8005fb4:	60f8      	str	r0, [r7, #12]
    status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, n );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	490b      	ldr	r1, [pc, #44]	; (8005fec <uart_vprintf+0x68>)
 8005fbe:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <uart_vprintf+0x6c>)
 8005fc0:	f009 f8f0 	bl	800f1a4 <HAL_UART_Transmit_DMA>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	60bb      	str	r3, [r7, #8]
    if( status ){
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d007      	beq.n	8005fde <uart_vprintf+0x5a>
        UartErrCnt++;
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <uart_vprintf+0x70>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <uart_vprintf+0x70>)
 8005fd6:	6013      	str	r3, [r2, #0]
        InUsed=0;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <uart_vprintf+0x64>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
    }
    return n;
 8005fde:	68fb      	ldr	r3, [r7, #12]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	2000185c 	.word	0x2000185c
 8005fec:	20001860 	.word	0x20001860
 8005ff0:	20000a34 	.word	0x20000a34
 8005ff4:	20001960 	.word	0x20001960

08005ff8 <uart_printf>:

int uart_printf(const char *msg, ...){
 8005ff8:	b40f      	push	{r0, r1, r2, r3}
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
	va_list ap;
    int n;
    while( InUsed ){
 8006000:	e000      	b.n	8006004 <uart_printf+0xc>
        //
        __WFI();
 8006002:	bf30      	wfi
    while( InUsed ){
 8006004:	4b09      	ldr	r3, [pc, #36]	; (800602c <uart_printf+0x34>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1fa      	bne.n	8006002 <uart_printf+0xa>
    }
    va_start(ap, msg);
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	603b      	str	r3, [r7, #0]
    n=uart_vprintf(msg, ap);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6938      	ldr	r0, [r7, #16]
 8006016:	f7ff ffb5 	bl	8005f84 <uart_vprintf>
 800601a:	6078      	str	r0, [r7, #4]
    va_end(ap);
    return n;
 800601c:	687b      	ldr	r3, [r7, #4]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006028:	b004      	add	sp, #16
 800602a:	4770      	bx	lr
 800602c:	2000185c 	.word	0x2000185c

08006030 <VL53L0A1_EXTI_Callback>:
 */

#include  "X-NUCLEO-53L0A1.h"


__weak void VL53L0A1_EXTI_Callback(int DevNo, int GPIO_Pin){
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_GPIO_EXTI_Callback>:

/**
 * HAl Callback for EXTI
 * @param GPIO_Pin The GPIO pin EXTI was invoked
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	4603      	mov	r3, r0
 800604e:	80fb      	strh	r3, [r7, #6]
#if VL53L0A1_GPIO1_SHARED
    if( GPIO_Pin == VL53L0A1_GPIO1_C_GPIO_PIN ){
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
    }
#else
    switch(  GPIO_Pin  ){
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006056:	d013      	beq.n	8006080 <HAL_GPIO_EXTI_Callback+0x3a>
 8006058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605c:	dc16      	bgt.n	800608c <HAL_GPIO_EXTI_Callback+0x46>
 800605e:	2b10      	cmp	r3, #16
 8006060:	d002      	beq.n	8006068 <HAL_GPIO_EXTI_Callback+0x22>
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d006      	beq.n	8006074 <HAL_GPIO_EXTI_Callback+0x2e>
    case VL53L0A1_GPIO1_R_GPIO_PIN :
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
        break;

    default:
        break;
 8006066:	e011      	b.n	800608c <HAL_GPIO_EXTI_Callback+0x46>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_CENTER, GPIO_Pin);
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	4619      	mov	r1, r3
 800606c:	2001      	movs	r0, #1
 800606e:	f7ff ffdf 	bl	8006030 <VL53L0A1_EXTI_Callback>
        break;
 8006072:	e00c      	b.n	800608e <HAL_GPIO_EXTI_Callback+0x48>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_LEFT, GPIO_Pin);
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	4619      	mov	r1, r3
 8006078:	2000      	movs	r0, #0
 800607a:	f7ff ffd9 	bl	8006030 <VL53L0A1_EXTI_Callback>
        break;
 800607e:	e006      	b.n	800608e <HAL_GPIO_EXTI_Callback+0x48>
        VL53L0A1_EXTI_Callback(XNUCLEO53L0A1_DEV_RIGHT, GPIO_Pin);
 8006080:	88fb      	ldrh	r3, [r7, #6]
 8006082:	4619      	mov	r1, r3
 8006084:	2002      	movs	r0, #2
 8006086:	f7ff ffd3 	bl	8006030 <VL53L0A1_EXTI_Callback>
        break;
 800608a:	e000      	b.n	800608e <HAL_GPIO_EXTI_Callback+0x48>
        break;
 800608c:	bf00      	nop
    }
#endif
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <EXTI9_5_IRQHandler>:
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI9_5_IRQHandler(void)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI9_5_USE_PIN);
 800609a:	2080      	movs	r0, #128	; 0x80
 800609c:	f006 fed2 	bl	800ce44 <HAL_GPIO_EXTI_IRQHandler>
}
 80060a0:	bf00      	nop
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <EXTI15_10_IRQHandler>:
 * @note is only implemented if needed by configuration
 * @warning this handler assume ther's no shared pin on the EXTI
 * For share interrupt  end user must fix this code to find the originating pins
 * and dispatch accordingly see __HAL_GPIO_EXTI_GET_FLAG  etc ..
 */
void EXTI15_10_IRQHandler(void){
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(VL53L0A1_EXTI15_10_USE_PIN);
 80060a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80060ac:	f006 feca 	bl	800ce44 <HAL_GPIO_EXTI_IRQHandler>
}
 80060b0:	bf00      	nop
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	330a      	adds	r3, #10
 80060c4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80060d2:	b299      	uxth	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	f007 f80c 	bl	800d0fc <HAL_I2C_Master_Transmit>
 80060e4:	4603      	mov	r3, r0
 80060e6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
//    	__BKPT();
    }
    return status;
 80060e8:	693b      	ldr	r3, [r7, #16]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b088      	sub	sp, #32
 80060f6:	af02      	add	r7, sp, #8
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	330a      	adds	r3, #10
 8006102:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	b299      	uxth	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	b29a      	uxth	r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	f007 f8e8 	bl	800d2f8 <HAL_I2C_Master_Receive>
 8006128:	4603      	mov	r3, r0
 800612a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
//    	__BKPT();
    }
    return status;
 800612c:	693b      	ldr	r3, [r7, #16]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	460b      	mov	r3, r1
 8006146:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006148:	2300      	movs	r3, #0
 800614a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b3f      	cmp	r3, #63	; 0x3f
 8006150:	d902      	bls.n	8006158 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8006152:	f06f 0303 	mvn.w	r3, #3
 8006156:	e016      	b.n	8006186 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8006158:	4a0d      	ldr	r2, [pc, #52]	; (8006190 <VL53L0X_WriteMulti+0x58>)
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	480c      	ldr	r0, [pc, #48]	; (8006194 <VL53L0X_WriteMulti+0x5c>)
 8006164:	f009 fc7e 	bl	800fa64 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	461a      	mov	r2, r3
 800616e:	4908      	ldr	r1, [pc, #32]	; (8006190 <VL53L0X_WriteMulti+0x58>)
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff ff9f 	bl	80060b4 <_I2CWrite>
 8006176:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800617e:	23ec      	movs	r3, #236	; 0xec
 8006180:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20001964 	.word	0x20001964
 8006194:	20001965 	.word	0x20001965

08006198 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	460b      	mov	r3, r1
 80061a6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80061ac:	f107 030b 	add.w	r3, r7, #11
 80061b0:	2201      	movs	r2, #1
 80061b2:	4619      	mov	r1, r3
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff ff7d 	bl	80060b4 <_I2CWrite>
 80061ba:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80061c2:	23ec      	movs	r3, #236	; 0xec
 80061c4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80061c6:	e00c      	b.n	80061e2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff ff90 	bl	80060f2 <_I2CRead>
 80061d2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80061da:	23ec      	movs	r3, #236	; 0xec
 80061dc:	75fb      	strb	r3, [r7, #23]
 80061de:	e000      	b.n	80061e2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80061e0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80061e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
 80061fc:	4613      	mov	r3, r2
 80061fe:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006204:	4a0b      	ldr	r2, [pc, #44]	; (8006234 <VL53L0X_WrByte+0x44>)
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <VL53L0X_WrByte+0x44>)
 800620c:	78bb      	ldrb	r3, [r7, #2]
 800620e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006210:	2202      	movs	r2, #2
 8006212:	4908      	ldr	r1, [pc, #32]	; (8006234 <VL53L0X_WrByte+0x44>)
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff ff4d 	bl	80060b4 <_I2CWrite>
 800621a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006222:	23ec      	movs	r3, #236	; 0xec
 8006224:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20001964 	.word	0x20001964

08006238 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
 8006244:	4613      	mov	r3, r2
 8006246:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800624c:	4a0e      	ldr	r2, [pc, #56]	; (8006288 <VL53L0X_WrWord+0x50>)
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8006252:	883b      	ldrh	r3, [r7, #0]
 8006254:	0a1b      	lsrs	r3, r3, #8
 8006256:	b29b      	uxth	r3, r3
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <VL53L0X_WrWord+0x50>)
 800625c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800625e:	883b      	ldrh	r3, [r7, #0]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <VL53L0X_WrWord+0x50>)
 8006264:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006266:	2203      	movs	r2, #3
 8006268:	4907      	ldr	r1, [pc, #28]	; (8006288 <VL53L0X_WrWord+0x50>)
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff ff22 	bl	80060b4 <_I2CWrite>
 8006270:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006278:	23ec      	movs	r3, #236	; 0xec
 800627a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800627c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	20001964 	.word	0x20001964

0800628c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	461a      	mov	r2, r3
 800629a:	4603      	mov	r3, r0
 800629c:	70fb      	strb	r3, [r7, #3]
 800629e:	460b      	mov	r3, r1
 80062a0:	70bb      	strb	r3, [r7, #2]
 80062a2:	4613      	mov	r3, r2
 80062a4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80062aa:	f107 020e 	add.w	r2, r7, #14
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f81e 	bl	80062f4 <VL53L0X_RdByte>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80062bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d110      	bne.n	80062e6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80062c4:	7bba      	ldrb	r2, [r7, #14]
 80062c6:	78bb      	ldrb	r3, [r7, #2]
 80062c8:	4013      	ands	r3, r2
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	787b      	ldrb	r3, [r7, #1]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80062d4:	7bba      	ldrb	r2, [r7, #14]
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff88 	bl	80061f0 <VL53L0X_WrByte>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	e000      	b.n	80062e8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80062e6:	bf00      	nop
done:
    return Status;
 80062e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	460b      	mov	r3, r1
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006306:	f107 030b 	add.w	r3, r7, #11
 800630a:	2201      	movs	r2, #1
 800630c:	4619      	mov	r1, r3
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f7ff fed0 	bl	80060b4 <_I2CWrite>
 8006314:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800631c:	23ec      	movs	r3, #236	; 0xec
 800631e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006320:	e00c      	b.n	800633c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8006322:	2201      	movs	r2, #1
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff fee3 	bl	80060f2 <_I2CRead>
 800632c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006334:	23ec      	movs	r3, #236	; 0xec
 8006336:	75fb      	strb	r3, [r7, #23]
 8006338:	e000      	b.n	800633c <VL53L0X_RdByte+0x48>
    }
done:
 800633a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800633c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	460b      	mov	r3, r1
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006356:	2300      	movs	r3, #0
 8006358:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800635a:	f107 030b 	add.w	r3, r7, #11
 800635e:	2201      	movs	r2, #1
 8006360:	4619      	mov	r1, r3
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff fea6 	bl	80060b4 <_I2CWrite>
 8006368:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006370:	23ec      	movs	r3, #236	; 0xec
 8006372:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006374:	e017      	b.n	80063a6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8006376:	2202      	movs	r2, #2
 8006378:	490e      	ldr	r1, [pc, #56]	; (80063b4 <VL53L0X_RdWord+0x6c>)
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff feb9 	bl	80060f2 <_I2CRead>
 8006380:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006388:	23ec      	movs	r3, #236	; 0xec
 800638a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800638c:	e00b      	b.n	80063a6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <VL53L0X_RdWord+0x6c>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	b29a      	uxth	r2, r3
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <VL53L0X_RdWord+0x6c>)
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	b29b      	uxth	r3, r3
 800639e:	4413      	add	r3, r2
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80063a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20001964 	.word	0x20001964

080063b8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	460b      	mov	r3, r1
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80063ca:	f107 030b 	add.w	r3, r7, #11
 80063ce:	2201      	movs	r2, #1
 80063d0:	4619      	mov	r1, r3
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff fe6e 	bl	80060b4 <_I2CWrite>
 80063d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80063e0:	23ec      	movs	r3, #236	; 0xec
 80063e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80063e4:	e01b      	b.n	800641e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80063e6:	2204      	movs	r2, #4
 80063e8:	4910      	ldr	r1, [pc, #64]	; (800642c <VL53L0X_RdDWord+0x74>)
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff fe81 	bl	80060f2 <_I2CRead>
 80063f0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80063f8:	23ec      	movs	r3, #236	; 0xec
 80063fa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80063fc:	e00f      	b.n	800641e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80063fe:	4b0b      	ldr	r3, [pc, #44]	; (800642c <VL53L0X_RdDWord+0x74>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	061a      	lsls	r2, r3, #24
 8006404:	4b09      	ldr	r3, [pc, #36]	; (800642c <VL53L0X_RdDWord+0x74>)
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	441a      	add	r2, r3
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <VL53L0X_RdDWord+0x74>)
 800640e:	789b      	ldrb	r3, [r3, #2]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	4413      	add	r3, r2
 8006414:	4a05      	ldr	r2, [pc, #20]	; (800642c <VL53L0X_RdDWord+0x74>)
 8006416:	78d2      	ldrb	r2, [r2, #3]
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800641e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20001964 	.word	0x20001964

08006430 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800643c:	2300      	movs	r3, #0
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	e002      	b.n	8006448 <VL53L0X_PollingDelay+0x18>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3301      	adds	r3, #1
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f643 42ef 	movw	r2, #15599	; 0x3cef
 800644e:	4293      	cmp	r3, r2
 8006450:	ddf7      	ble.n	8006442 <VL53L0X_PollingDelay+0x12>
    return status;
 8006452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006464:	b590      	push	{r4, r7, lr}
 8006466:	b089      	sub	sp, #36	; 0x24
 8006468:	af04      	add	r7, sp, #16
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8006472:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 8006474:	681c      	ldr	r4, [r3, #0]
 8006476:	f005 feb9 	bl	800c1ec <HAL_GetTick>
 800647a:	4603      	mov	r3, r0
 800647c:	461a      	mov	r2, r3
 800647e:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	9200      	str	r2, [sp, #0]
 8006484:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x74>)
 8006486:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800648a:	4621      	mov	r1, r4
 800648c:	2001      	movs	r0, #1
 800648e:	f005 fe2f 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f002 fa6d 	bl	8008974 <VL53L0X_get_offset_calibration_data_micro_meter>
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x6c>)
 80064a0:	681c      	ldr	r4, [r3, #0]
 80064a2:	f005 fea3 	bl	800c1ec <HAL_GetTick>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x70>)
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	9200      	str	r2, [sp, #0]
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <VL53L0X_GetOffsetCalibrationDataMicroMeter+0x78>)
 80064b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80064bc:	4621      	mov	r1, r4
 80064be:	2001      	movs	r0, #1
 80064c0:	f005 fe16 	bl	800c0f0 <trace_print_module_function>
	return Status;
 80064c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd90      	pop	{r4, r7, pc}
 80064d0:	20000634 	.word	0x20000634
 80064d4:	080112f0 	.word	0x080112f0
 80064d8:	08010f5c 	.word	0x08010f5c
 80064dc:	08010f70 	.word	0x08010f70

080064e0 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b089      	sub	sp, #36	; 0x24
 80064e4:	af04      	add	r7, sp, #16
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 80064f0:	4b19      	ldr	r3, [pc, #100]	; (8006558 <VL53L0X_SetDeviceAddress+0x78>)
 80064f2:	681c      	ldr	r4, [r3, #0]
 80064f4:	f005 fe7a 	bl	800c1ec <HAL_GetTick>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	4b17      	ldr	r3, [pc, #92]	; (800655c <VL53L0X_SetDeviceAddress+0x7c>)
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	9200      	str	r2, [sp, #0]
 8006502:	4b17      	ldr	r3, [pc, #92]	; (8006560 <VL53L0X_SetDeviceAddress+0x80>)
 8006504:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006508:	4621      	mov	r1, r4
 800650a:	2001      	movs	r0, #1
 800650c:	f005 fdf0 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	b2db      	uxtb	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	218a      	movs	r1, #138	; 0x8a
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fe68 	bl	80061f0 <VL53L0X_WrByte>
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
 8006524:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <VL53L0X_SetDeviceAddress+0x78>)
 8006526:	681c      	ldr	r4, [r3, #0]
 8006528:	f005 fe60 	bl	800c1ec <HAL_GetTick>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006534:	9302      	str	r3, [sp, #8]
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <VL53L0X_SetDeviceAddress+0x7c>)
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	9200      	str	r2, [sp, #0]
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <VL53L0X_SetDeviceAddress+0x84>)
 800653e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006542:	4621      	mov	r1, r4
 8006544:	2001      	movs	r0, #1
 8006546:	f005 fdd3 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800654a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	bd90      	pop	{r4, r7, pc}
 8006556:	bf00      	nop
 8006558:	20000634 	.word	0x20000634
 800655c:	0801131c 	.word	0x0801131c
 8006560:	08010f5c 	.word	0x08010f5c
 8006564:	08010f70 	.word	0x08010f70

08006568 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006568:	b5b0      	push	{r4, r5, r7, lr}
 800656a:	b09a      	sub	sp, #104	; 0x68
 800656c:	af04      	add	r7, sp, #16
 800656e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006570:	2300      	movs	r3, #0
 8006572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	VL53L0X_DeviceParameters_t CurrentParameters;
	int i;
	uint8_t StopVariable;

	LOG_FUNCTION_START("");
 8006576:	4bbd      	ldr	r3, [pc, #756]	; (800686c <VL53L0X_DataInit+0x304>)
 8006578:	681c      	ldr	r4, [r3, #0]
 800657a:	f005 fe37 	bl	800c1ec <HAL_GetTick>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	4bbb      	ldr	r3, [pc, #748]	; (8006870 <VL53L0X_DataInit+0x308>)
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	9200      	str	r2, [sp, #0]
 8006588:	4bba      	ldr	r3, [pc, #744]	; (8006874 <VL53L0X_DataInit+0x30c>)
 800658a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800658e:	4621      	mov	r1, r4
 8006590:	2001      	movs	r0, #1
 8006592:	f005 fdad 	bl	800c0f0 <trace_print_module_function>
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006596:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800659a:	2b00      	cmp	r3, #0
 800659c:	d107      	bne.n	80065ae <VL53L0X_DataInit+0x46>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800659e:	2200      	movs	r2, #0
 80065a0:	2188      	movs	r1, #136	; 0x88
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff fe24 	bl	80061f0 <VL53L0X_WrByte>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065bc:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80065c6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4aaa      	ldr	r2, [pc, #680]	; (8006878 <VL53L0X_DataInit+0x310>)
 80065ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4aa9      	ldr	r2, [pc, #676]	; (800687c <VL53L0X_DataInit+0x314>)
 80065d6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80065e0:	f107 0310 	add.w	r3, r7, #16
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fafe 	bl	8006be8 <VL53L0X_GetDeviceParameters>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80065f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d112      	bne.n	8006620 <VL53L0X_DataInit+0xb8>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80065fa:	2300      	movs	r3, #0
 80065fc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80065fe:	2300      	movs	r3, #0
 8006600:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f103 0410 	add.w	r4, r3, #16
 8006608:	f107 0510 	add.w	r5, r7, #16
 800660c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800660e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006618:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800661c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2264      	movs	r2, #100	; 0x64
 8006624:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800662e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006638:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006642:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800664e:	2201      	movs	r2, #1
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff fdcc 	bl	80061f0 <VL53L0X_WrByte>
 8006658:	4603      	mov	r3, r0
 800665a:	461a      	mov	r2, r3
 800665c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006660:	4313      	orrs	r3, r2
 8006662:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006666:	2201      	movs	r2, #1
 8006668:	21ff      	movs	r1, #255	; 0xff
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff fdc0 	bl	80061f0 <VL53L0X_WrByte>
 8006670:	4603      	mov	r3, r0
 8006672:	461a      	mov	r2, r3
 8006674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006678:	4313      	orrs	r3, r2
 800667a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fdb4 	bl	80061f0 <VL53L0X_WrByte>
 8006688:	4603      	mov	r3, r0
 800668a:	461a      	mov	r2, r3
 800668c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006690:	4313      	orrs	r3, r2
 8006692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006696:	f107 030f 	add.w	r3, r7, #15
 800669a:	461a      	mov	r2, r3
 800669c:	2191      	movs	r1, #145	; 0x91
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fe28 	bl	80062f4 <VL53L0X_RdByte>
 80066a4:	4603      	mov	r3, r0
 80066a6:	461a      	mov	r2, r3
 80066a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80066b2:	7bfa      	ldrb	r2, [r7, #15]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80066ba:	2201      	movs	r2, #1
 80066bc:	2100      	movs	r1, #0
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff fd96 	bl	80061f0 <VL53L0X_WrByte>
 80066c4:	4603      	mov	r3, r0
 80066c6:	461a      	mov	r2, r3
 80066c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80066d2:	2200      	movs	r2, #0
 80066d4:	21ff      	movs	r1, #255	; 0xff
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff fd8a 	bl	80061f0 <VL53L0X_WrByte>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fd7e 	bl	80061f0 <VL53L0X_WrByte>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006702:	2300      	movs	r3, #0
 8006704:	653b      	str	r3, [r7, #80]	; 0x50
 8006706:	e014      	b.n	8006732 <VL53L0X_DataInit+0x1ca>
		if (Status == VL53L0X_ERROR_NONE)
 8006708:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800670c:	2b00      	cmp	r3, #0
 800670e:	d114      	bne.n	800673a <VL53L0X_DataInit+0x1d2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	2201      	movs	r2, #1
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 ffc9 	bl	80076b0 <VL53L0X_SetLimitCheckEnable>
 800671e:	4603      	mov	r3, r0
 8006720:	461a      	mov	r2, r3
 8006722:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006726:	4313      	orrs	r3, r2
 8006728:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800672c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672e:	3301      	adds	r3, #1
 8006730:	653b      	str	r3, [r7, #80]	; 0x50
 8006732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006734:	2b05      	cmp	r3, #5
 8006736:	dde7      	ble.n	8006708 <VL53L0X_DataInit+0x1a0>
 8006738:	e000      	b.n	800673c <VL53L0X_DataInit+0x1d4>
		else
			break;
 800673a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800673c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006740:	2b00      	cmp	r3, #0
 8006742:	d107      	bne.n	8006754 <VL53L0X_DataInit+0x1ec>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006744:	2200      	movs	r2, #0
 8006746:	2102      	movs	r1, #2
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 ffb1 	bl	80076b0 <VL53L0X_SetLimitCheckEnable>
 800674e:	4603      	mov	r3, r0
 8006750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006754:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <VL53L0X_DataInit+0x204>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800675c:	2200      	movs	r2, #0
 800675e:	2103      	movs	r1, #3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 ffa5 	bl	80076b0 <VL53L0X_SetLimitCheckEnable>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800676c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <VL53L0X_DataInit+0x21c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006774:	2200      	movs	r2, #0
 8006776:	2104      	movs	r1, #4
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 ff99 	bl	80076b0 <VL53L0X_SetLimitCheckEnable>
 800677e:	4603      	mov	r3, r0
 8006780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006784:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <VL53L0X_DataInit+0x234>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800678c:	2200      	movs	r2, #0
 800678e:	2105      	movs	r1, #5
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 ff8d 	bl	80076b0 <VL53L0X_SetLimitCheckEnable>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800679c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d108      	bne.n	80067b6 <VL53L0X_DataInit+0x24e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80067a4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 f884 	bl	80078b8 <VL53L0X_SetLimitCheckValue>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80067b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d108      	bne.n	80067d0 <VL53L0X_DataInit+0x268>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80067be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067c2:	2101      	movs	r1, #1
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 f877 	bl	80078b8 <VL53L0X_SetLimitCheckValue>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d108      	bne.n	80067ea <VL53L0X_DataInit+0x282>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80067d8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80067dc:	2102      	movs	r1, #2
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f86a 	bl	80078b8 <VL53L0X_SetLimitCheckValue>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <VL53L0X_DataInit+0x29a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80067f2:	2200      	movs	r2, #0
 80067f4:	2103      	movs	r1, #3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 f85e 	bl	80078b8 <VL53L0X_SetLimitCheckValue>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006802:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10f      	bne.n	800682a <VL53L0X_DataInit+0x2c2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	22ff      	movs	r2, #255	; 0xff
 800680e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006812:	22ff      	movs	r2, #255	; 0xff
 8006814:	2101      	movs	r1, #1
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fcea 	bl	80061f0 <VL53L0X_WrByte>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800682a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <VL53L0X_DataInit+0x2d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
 800683a:	4b0c      	ldr	r3, [pc, #48]	; (800686c <VL53L0X_DataInit+0x304>)
 800683c:	681c      	ldr	r4, [r3, #0]
 800683e:	f005 fcd5 	bl	800c1ec <HAL_GetTick>
 8006842:	4603      	mov	r3, r0
 8006844:	461a      	mov	r2, r3
 8006846:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800684a:	9302      	str	r3, [sp, #8]
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <VL53L0X_DataInit+0x308>)
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	9200      	str	r2, [sp, #0]
 8006852:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <VL53L0X_DataInit+0x318>)
 8006854:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006858:	4621      	mov	r1, r4
 800685a:	2001      	movs	r0, #1
 800685c:	f005 fc48 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8006860:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006864:	4618      	mov	r0, r3
 8006866:	3758      	adds	r7, #88	; 0x58
 8006868:	46bd      	mov	sp, r7
 800686a:	bdb0      	pop	{r4, r5, r7, pc}
 800686c:	20000634 	.word	0x20000634
 8006870:	08011338 	.word	0x08011338
 8006874:	08010f5c 	.word	0x08010f5c
 8006878:	00016b85 	.word	0x00016b85
 800687c:	000970a4 	.word	0x000970a4
 8006880:	08010f70 	.word	0x08010f70

08006884 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006884:	b5b0      	push	{r4, r5, r7, lr}
 8006886:	b0a0      	sub	sp, #128	; 0x80
 8006888:	af04      	add	r7, sp, #16
 800688a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800688c:	2300      	movs	r3, #0
 800688e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006892:	f107 031c 	add.w	r3, r7, #28
 8006896:	2240      	movs	r2, #64	; 0x40
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f009 f90a 	bl	800fab4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");
 80068c0:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <VL53L0X_StaticInit+0xf4>)
 80068c2:	681c      	ldr	r4, [r3, #0]
 80068c4:	f005 fc92 	bl	800c1ec <HAL_GetTick>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	4b2b      	ldr	r3, [pc, #172]	; (800697c <VL53L0X_StaticInit+0xf8>)
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	9200      	str	r2, [sp, #0]
 80068d2:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <VL53L0X_StaticInit+0xfc>)
 80068d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80068d8:	4621      	mov	r1, r4
 80068da:	2001      	movs	r0, #1
 80068dc:	f005 fc08 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80068e0:	2101      	movs	r1, #1
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f002 fff4 	bl	80098d0 <VL53L0X_get_info_from_device>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80068f4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80068fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006904:	2b01      	cmp	r3, #1
 8006906:	d80d      	bhi.n	8006924 <VL53L0X_StaticInit+0xa0>
 8006908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800690c:	2b01      	cmp	r3, #1
 800690e:	d102      	bne.n	8006916 <VL53L0X_StaticInit+0x92>
		((ApertureSpads == 1) && (count > 32)) ||
 8006910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006912:	2b20      	cmp	r3, #32
 8006914:	d806      	bhi.n	8006924 <VL53L0X_StaticInit+0xa0>
 8006916:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10e      	bne.n	800693c <VL53L0X_StaticInit+0xb8>
		((ApertureSpads == 0) && (count > 12)))
 800691e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d90b      	bls.n	800693c <VL53L0X_StaticInit+0xb8>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006924:	f107 0218 	add.w	r2, r7, #24
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f002 fa1c 	bl	8008d6c <VL53L0X_perform_ref_spad_management>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800693a:	e009      	b.n	8006950 <VL53L0X_StaticInit+0xcc>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800693c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006940:	461a      	mov	r2, r3
 8006942:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f002 fc1d 	bl	8009184 <VL53L0X_set_reference_spads>
 800694a:	4603      	mov	r3, r0
 800694c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <VL53L0X_StaticInit+0x100>)
 8006952:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006954:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006958:	2b00      	cmp	r3, #0
 800695a:	d117      	bne.n	800698c <VL53L0X_StaticInit+0x108>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006966:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10c      	bne.n	8006988 <VL53L0X_StaticInit+0x104>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006974:	66bb      	str	r3, [r7, #104]	; 0x68
 8006976:	e009      	b.n	800698c <VL53L0X_StaticInit+0x108>
 8006978:	20000634 	.word	0x20000634
 800697c:	0801134c 	.word	0x0801134c
 8006980:	08010f5c 	.word	0x08010f5c
 8006984:	20000378 	.word	0x20000378
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006988:	4b93      	ldr	r3, [pc, #588]	; (8006bd8 <VL53L0X_StaticInit+0x354>)
 800698a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800698c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006994:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f004 fc2c 	bl	800b1f4 <VL53L0X_load_tuning_settings>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80069a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <VL53L0X_StaticInit+0x13c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80069aa:	2300      	movs	r3, #0
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	2304      	movs	r3, #4
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fd2f 	bl	8008418 <VL53L0X_SetGpioConfig>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d121      	bne.n	8006a0c <VL53L0X_StaticInit+0x188>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069c8:	2201      	movs	r2, #1
 80069ca:	21ff      	movs	r1, #255	; 0xff
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff fc0f 	bl	80061f0 <VL53L0X_WrByte>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80069d8:	f107 031a 	add.w	r3, r7, #26
 80069dc:	461a      	mov	r2, r3
 80069de:	2184      	movs	r1, #132	; 0x84
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff fcb1 	bl	8006348 <VL53L0X_RdWord>
 80069e6:	4603      	mov	r3, r0
 80069e8:	461a      	mov	r2, r3
 80069ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80069f4:	2200      	movs	r2, #0
 80069f6:	21ff      	movs	r1, #255	; 0xff
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff fbf9 	bl	80061f0 <VL53L0X_WrByte>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a0c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <VL53L0X_StaticInit+0x19c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006a14:	8b7b      	ldrh	r3, [r7, #26]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006a20:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d108      	bne.n	8006a3a <VL53L0X_StaticInit+0x1b6>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006a28:	f107 031c 	add.w	r3, r7, #28
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f8da 	bl	8006be8 <VL53L0X_GetDeviceParameters>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006a3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d110      	bne.n	8006a64 <VL53L0X_StaticInit+0x1e0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006a42:	f107 0319 	add.w	r3, r7, #25
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa1b 	bl	8006e84 <VL53L0X_GetFractionEnable>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006a54:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <VL53L0X_StaticInit+0x1e0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006a5c:	7e7a      	ldrb	r2, [r7, #25]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006a64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10e      	bne.n	8006a8a <VL53L0X_StaticInit+0x206>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f103 0410 	add.w	r4, r3, #16
 8006a72:	f107 051c 	add.w	r5, r7, #28
 8006a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d111      	bne.n	8006ab6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_RdByte(Dev,
 8006a92:	f107 0319 	add.w	r3, r7, #25
 8006a96:	461a      	mov	r2, r3
 8006a98:	2101      	movs	r1, #1
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff fc2a 	bl	80062f4 <VL53L0X_RdByte>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006aa6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <VL53L0X_StaticInit+0x232>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006aae:	7e7a      	ldrb	r2, [r7, #25]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006ab6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <VL53L0X_StaticInit+0x24a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb2a 	bl	800711c <VL53L0X_SetSequenceStepEnable>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006ace:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d107      	bne.n	8006ae6 <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2102      	movs	r1, #2
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fb1e 	bl	800711c <VL53L0X_SetSequenceStepEnable>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006ae6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <VL53L0X_StaticInit+0x272>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2203      	movs	r2, #3
 8006af2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006af6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006afe:	f107 0313 	add.w	r3, r7, #19
 8006b02:	461a      	mov	r2, r3
 8006b04:	2100      	movs	r1, #0
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fac6 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <VL53L0X_StaticInit+0x29e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b1a:	7cfa      	ldrb	r2, [r7, #19]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d109      	bne.n	8006b3e <VL53L0X_StaticInit+0x2ba>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006b2a:	f107 0313 	add.w	r3, r7, #19
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2101      	movs	r1, #1
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fab0 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <VL53L0X_StaticInit+0x2ca>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b46:	7cfa      	ldrb	r2, [r7, #19]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 8006b56:	f107 030c 	add.w	r3, r7, #12
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	2103      	movs	r1, #3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f003 fc92 	bl	800a488 <get_sequence_step_timeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <VL53L0X_StaticInit+0x312>
		Status = get_sequence_step_timeout(
 8006b82:	f107 030c 	add.w	r3, r7, #12
 8006b86:	461a      	mov	r2, r3
 8006b88:	2104      	movs	r1, #4
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f003 fc7c 	bl	800a488 <get_sequence_step_timeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <VL53L0X_StaticInit+0x322>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			Dev,
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <VL53L0X_StaticInit+0x358>)
 8006ba8:	681c      	ldr	r4, [r3, #0]
 8006baa:	f005 fb1f 	bl	800c1ec <HAL_GetTick>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006bb6:	9302      	str	r3, [sp, #8]
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <VL53L0X_StaticInit+0x35c>)
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	9200      	str	r2, [sp, #0]
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <VL53L0X_StaticInit+0x360>)
 8006bc0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f005 fa92 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8006bcc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3770      	adds	r7, #112	; 0x70
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd8:	20000378 	.word	0x20000378
 8006bdc:	20000634 	.word	0x20000634
 8006be0:	0801134c 	.word	0x0801134c
 8006be4:	08010f70 	.word	0x08010f70

08006be8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b089      	sub	sp, #36	; 0x24
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");
 8006bf6:	4b56      	ldr	r3, [pc, #344]	; (8006d50 <VL53L0X_GetDeviceParameters+0x168>)
 8006bf8:	681c      	ldr	r4, [r3, #0]
 8006bfa:	f005 faf7 	bl	800c1ec <HAL_GetTick>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	4b54      	ldr	r3, [pc, #336]	; (8006d54 <VL53L0X_GetDeviceParameters+0x16c>)
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	9200      	str	r2, [sp, #0]
 8006c08:	4b53      	ldr	r3, [pc, #332]	; (8006d58 <VL53L0X_GetDeviceParameters+0x170>)
 8006c0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006c0e:	4621      	mov	r1, r4
 8006c10:	2001      	movs	r0, #1
 8006c12:	f005 fa6d 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8f6 	bl	8006e0c <VL53L0X_GetDeviceMode>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <VL53L0X_GetDeviceParameters+0x54>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fc40 	bl	80074b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <VL53L0X_GetDeviceParameters+0x62>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2200      	movs	r2, #0
 8006c48:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d107      	bne.n	8006c62 <VL53L0X_GetDeviceParameters+0x7a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	3310      	adds	r3, #16
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fccb 	bl	80075f4 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d107      	bne.n	8006c7a <VL53L0X_GetDeviceParameters+0x92>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3314      	adds	r3, #20
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fbf7 	bl	8006464 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d134      	bne.n	8006cec <VL53L0X_GetDeviceParameters+0x104>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	e02a      	b.n	8006cde <VL53L0X_GetDeviceParameters+0xf6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d12a      	bne.n	8006ce6 <VL53L0X_GetDeviceParameters+0xfe>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	b299      	uxth	r1, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	3308      	adds	r3, #8
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fe94 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d117      	bne.n	8006cea <VL53L0X_GetDeviceParameters+0x102>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	b299      	uxth	r1, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fda9 	bl	8007820 <VL53L0X_GetLimitCheckEnable>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	ddd1      	ble.n	8006c88 <VL53L0X_GetDeviceParameters+0xa0>
 8006ce4:	e002      	b.n	8006cec <VL53L0X_GetDeviceParameters+0x104>
				break;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <VL53L0X_GetDeviceParameters+0x104>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006cea:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d107      	bne.n	8006d04 <VL53L0X_GetDeviceParameters+0x11c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	333c      	adds	r3, #60	; 0x3c
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 ff20 	bl	8007b40 <VL53L0X_GetWrapAroundCheckEnable>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <VL53L0X_GetDeviceParameters+0x134>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f93e 	bl	8006f94 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <VL53L0X_GetDeviceParameters+0x168>)
 8006d1e:	681c      	ldr	r4, [r3, #0]
 8006d20:	f005 fa64 	bl	800c1ec <HAL_GetTick>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <VL53L0X_GetDeviceParameters+0x16c>)
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	9200      	str	r2, [sp, #0]
 8006d34:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <VL53L0X_GetDeviceParameters+0x174>)
 8006d36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	f005 f9d7 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8006d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd90      	pop	{r4, r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000634 	.word	0x20000634
 8006d54:	08011360 	.word	0x08011360
 8006d58:	08010f5c 	.word	0x08010f5c
 8006d5c:	08010f70 	.word	0x08010f70

08006d60 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006d60:	b590      	push	{r4, r7, lr}
 8006d62:	b089      	sub	sp, #36	; 0x24
 8006d64:	af04      	add	r7, sp, #16
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);
 8006d70:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <VL53L0X_SetDeviceMode+0x98>)
 8006d72:	681c      	ldr	r4, [r3, #0]
 8006d74:	f005 fa3a 	bl	800c1ec <HAL_GetTick>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	9302      	str	r3, [sp, #8]
 8006d80:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <VL53L0X_SetDeviceMode+0x9c>)
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	9200      	str	r2, [sp, #0]
 8006d86:	4b1e      	ldr	r3, [pc, #120]	; (8006e00 <VL53L0X_SetDeviceMode+0xa0>)
 8006d88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	2001      	movs	r0, #1
 8006d90:	f005 f9ae 	bl	800c0f0 <trace_print_module_function>

	switch (DeviceMode) {
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	2b15      	cmp	r3, #21
 8006d98:	bf8c      	ite	hi
 8006d9a:	2201      	movhi	r2, #1
 8006d9c:	2200      	movls	r2, #0
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	d10e      	bne.n	8006dc2 <VL53L0X_SetDeviceMode+0x62>
 8006da4:	2201      	movs	r2, #1
 8006da6:	409a      	lsls	r2, r3
 8006da8:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <VL53L0X_SetDeviceMode+0xa4>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bf14      	ite	ne
 8006db0:	2301      	movne	r3, #1
 8006db2:	2300      	moveq	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <VL53L0X_SetDeviceMode+0x62>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	741a      	strb	r2, [r3, #16]
		break;
 8006dc0:	e001      	b.n	8006dc6 <VL53L0X_SetDeviceMode+0x66>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006dc2:	23f8      	movs	r3, #248	; 0xf8
 8006dc4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <VL53L0X_SetDeviceMode+0x98>)
 8006dc8:	681c      	ldr	r4, [r3, #0]
 8006dca:	f005 fa0f 	bl	800c1ec <HAL_GetTick>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dd6:	9302      	str	r3, [sp, #8]
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <VL53L0X_SetDeviceMode+0x9c>)
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	9200      	str	r2, [sp, #0]
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <VL53L0X_SetDeviceMode+0xa8>)
 8006de0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006de4:	4621      	mov	r1, r4
 8006de6:	2001      	movs	r0, #1
 8006de8:	f005 f982 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8006dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd90      	pop	{r4, r7, pc}
 8006df8:	20000634 	.word	0x20000634
 8006dfc:	0801137c 	.word	0x0801137c
 8006e00:	08010f80 	.word	0x08010f80
 8006e04:	0030000b 	.word	0x0030000b
 8006e08:	08010f70 	.word	0x08010f70

08006e0c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006e0c:	b590      	push	{r4, r7, lr}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af04      	add	r7, sp, #16
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8006e1a:	4b16      	ldr	r3, [pc, #88]	; (8006e74 <VL53L0X_GetDeviceMode+0x68>)
 8006e1c:	681c      	ldr	r4, [r3, #0]
 8006e1e:	f005 f9e5 	bl	800c1ec <HAL_GetTick>
 8006e22:	4603      	mov	r3, r0
 8006e24:	461a      	mov	r2, r3
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <VL53L0X_GetDeviceMode+0x6c>)
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	9200      	str	r2, [sp, #0]
 8006e2c:	4b13      	ldr	r3, [pc, #76]	; (8006e7c <VL53L0X_GetDeviceMode+0x70>)
 8006e2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e32:	4621      	mov	r1, r4
 8006e34:	2001      	movs	r0, #1
 8006e36:	f005 f95b 	bl	800c0f0 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7c1a      	ldrb	r2, [r3, #16]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <VL53L0X_GetDeviceMode+0x68>)
 8006e44:	681c      	ldr	r4, [r3, #0]
 8006e46:	f005 f9d1 	bl	800c1ec <HAL_GetTick>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e52:	9302      	str	r3, [sp, #8]
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <VL53L0X_GetDeviceMode+0x6c>)
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	9200      	str	r2, [sp, #0]
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <VL53L0X_GetDeviceMode+0x74>)
 8006e5c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e60:	4621      	mov	r1, r4
 8006e62:	2001      	movs	r0, #1
 8006e64:	f005 f944 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8006e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd90      	pop	{r4, r7, pc}
 8006e74:	20000634 	.word	0x20000634
 8006e78:	08011394 	.word	0x08011394
 8006e7c:	08010f5c 	.word	0x08010f5c
 8006e80:	08010f70 	.word	0x08010f70

08006e84 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006e84:	b590      	push	{r4, r7, lr}
 8006e86:	b089      	sub	sp, #36	; 0x24
 8006e88:	af04      	add	r7, sp, #16
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <VL53L0X_GetFractionEnable+0x84>)
 8006e94:	681c      	ldr	r4, [r3, #0]
 8006e96:	f005 f9a9 	bl	800c1ec <HAL_GetTick>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <VL53L0X_GetFractionEnable+0x88>)
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	9200      	str	r2, [sp, #0]
 8006ea4:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <VL53L0X_GetFractionEnable+0x8c>)
 8006ea6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006eaa:	4621      	mov	r1, r4
 8006eac:	2001      	movs	r0, #1
 8006eae:	f005 f91f 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	2109      	movs	r1, #9
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff fa1c 	bl	80062f4 <VL53L0X_RdByte>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d106      	bne.n	8006ed6 <VL53L0X_GetFractionEnable+0x52>
		*pEnabled = (*pEnabled & 1);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <VL53L0X_GetFractionEnable+0x84>)
 8006ed8:	681c      	ldr	r4, [r3, #0]
 8006eda:	f005 f987 	bl	800c1ec <HAL_GetTick>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ee6:	9302      	str	r3, [sp, #8]
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <VL53L0X_GetFractionEnable+0x88>)
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	9200      	str	r2, [sp, #0]
 8006eee:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <VL53L0X_GetFractionEnable+0x90>)
 8006ef0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	f005 f8fa 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8006efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd90      	pop	{r4, r7, pc}
 8006f08:	20000634 	.word	0x20000634
 8006f0c:	080113ac 	.word	0x080113ac
 8006f10:	08010f5c 	.word	0x08010f5c
 8006f14:	08010f70 	.word	0x08010f70

08006f18 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b089      	sub	sp, #36	; 0x24
 8006f1c:	af04      	add	r7, sp, #16
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8006f26:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8006f28:	681c      	ldr	r4, [r3, #0]
 8006f2a:	f005 f95f 	bl	800c1ec <HAL_GetTick>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	461a      	mov	r2, r3
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	9200      	str	r2, [sp, #0]
 8006f38:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x74>)
 8006f3a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f3e:	4621      	mov	r1, r4
 8006f40:	2001      	movs	r0, #1
 8006f42:	f005 f8d5 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f003 ff31 	bl	800adb0 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 8006f52:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8006f54:	681c      	ldr	r4, [r3, #0]
 8006f56:	f005 f949 	bl	800c1ec <HAL_GetTick>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f62:	9302      	str	r3, [sp, #8]
 8006f64:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x70>)
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	9200      	str	r2, [sp, #0]
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds+0x78>)
 8006f6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f70:	4621      	mov	r1, r4
 8006f72:	2001      	movs	r0, #1
 8006f74:	f005 f8bc 	bl	800c0f0 <trace_print_module_function>

	return Status;
 8006f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd90      	pop	{r4, r7, pc}
 8006f84:	20000634 	.word	0x20000634
 8006f88:	080113c8 	.word	0x080113c8
 8006f8c:	08010f5c 	.word	0x08010f5c
 8006f90:	08010f70 	.word	0x08010f70

08006f94 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006f94:	b590      	push	{r4, r7, lr}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af04      	add	r7, sp, #16
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8006fa2:	4b17      	ldr	r3, [pc, #92]	; (8007000 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8006fa4:	681c      	ldr	r4, [r3, #0]
 8006fa6:	f005 f921 	bl	800c1ec <HAL_GetTick>
 8006faa:	4603      	mov	r3, r0
 8006fac:	461a      	mov	r2, r3
 8006fae:	4b15      	ldr	r3, [pc, #84]	; (8007004 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	9200      	str	r2, [sp, #0]
 8006fb4:	4b14      	ldr	r3, [pc, #80]	; (8007008 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x74>)
 8006fb6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006fba:	4621      	mov	r1, r4
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f005 f897 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f004 f825 	bl	800b014 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
 8006fce:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x6c>)
 8006fd0:	681c      	ldr	r4, [r3, #0]
 8006fd2:	f005 f90b 	bl	800c1ec <HAL_GetTick>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fde:	9302      	str	r3, [sp, #8]
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x70>)
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	9200      	str	r2, [sp, #0]
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <VL53L0X_GetMeasurementTimingBudgetMicroSeconds+0x78>)
 8006fe8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006fec:	4621      	mov	r1, r4
 8006fee:	2001      	movs	r0, #1
 8006ff0:	f005 f87e 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8006ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd90      	pop	{r4, r7, pc}
 8007000:	20000634 	.word	0x20000634
 8007004:	080113f8 	.word	0x080113f8
 8007008:	08010f5c 	.word	0x08010f5c
 800700c:	08010f70 	.word	0x08010f70

08007010 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b089      	sub	sp, #36	; 0x24
 8007014:	af04      	add	r7, sp, #16
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
 800701c:	4613      	mov	r3, r2
 800701e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007020:	2300      	movs	r3, #0
 8007022:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");
 8007024:	4b18      	ldr	r3, [pc, #96]	; (8007088 <VL53L0X_SetVcselPulsePeriod+0x78>)
 8007026:	681c      	ldr	r4, [r3, #0]
 8007028:	f005 f8e0 	bl	800c1ec <HAL_GetTick>
 800702c:	4603      	mov	r3, r0
 800702e:	461a      	mov	r2, r3
 8007030:	4b16      	ldr	r3, [pc, #88]	; (800708c <VL53L0X_SetVcselPulsePeriod+0x7c>)
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	9200      	str	r2, [sp, #0]
 8007036:	4b16      	ldr	r3, [pc, #88]	; (8007090 <VL53L0X_SetVcselPulsePeriod+0x80>)
 8007038:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800703c:	4621      	mov	r1, r4
 800703e:	2001      	movs	r0, #1
 8007040:	f005 f856 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8007044:	78ba      	ldrb	r2, [r7, #2]
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f003 fbef 	bl	800a82e <VL53L0X_set_vcsel_pulse_period>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 8007054:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <VL53L0X_SetVcselPulsePeriod+0x78>)
 8007056:	681c      	ldr	r4, [r3, #0]
 8007058:	f005 f8c8 	bl	800c1ec <HAL_GetTick>
 800705c:	4603      	mov	r3, r0
 800705e:	461a      	mov	r2, r3
 8007060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007064:	9302      	str	r3, [sp, #8]
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <VL53L0X_SetVcselPulsePeriod+0x7c>)
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	9200      	str	r2, [sp, #0]
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <VL53L0X_SetVcselPulsePeriod+0x84>)
 800706e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007072:	4621      	mov	r1, r4
 8007074:	2001      	movs	r0, #1
 8007076:	f005 f83b 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800707a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	bd90      	pop	{r4, r7, pc}
 8007086:	bf00      	nop
 8007088:	20000634 	.word	0x20000634
 800708c:	08011428 	.word	0x08011428
 8007090:	08010f5c 	.word	0x08010f5c
 8007094:	08010f70 	.word	0x08010f70

08007098 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b08b      	sub	sp, #44	; 0x2c
 800709c:	af04      	add	r7, sp, #16
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	460b      	mov	r3, r1
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 80070aa:	4b18      	ldr	r3, [pc, #96]	; (800710c <VL53L0X_GetVcselPulsePeriod+0x74>)
 80070ac:	681c      	ldr	r4, [r3, #0]
 80070ae:	f005 f89d 	bl	800c1ec <HAL_GetTick>
 80070b2:	4603      	mov	r3, r0
 80070b4:	461a      	mov	r2, r3
 80070b6:	4b16      	ldr	r3, [pc, #88]	; (8007110 <VL53L0X_GetVcselPulsePeriod+0x78>)
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	9200      	str	r2, [sp, #0]
 80070bc:	4b15      	ldr	r3, [pc, #84]	; (8007114 <VL53L0X_GetVcselPulsePeriod+0x7c>)
 80070be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80070c2:	4621      	mov	r1, r4
 80070c4:	2001      	movs	r0, #1
 80070c6:	f005 f813 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80070ca:	7afb      	ldrb	r3, [r7, #11]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	4619      	mov	r1, r3
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f003 fe35 	bl	800ad40 <VL53L0X_get_vcsel_pulse_period>
 80070d6:	4603      	mov	r3, r0
 80070d8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
 80070da:	4b0c      	ldr	r3, [pc, #48]	; (800710c <VL53L0X_GetVcselPulsePeriod+0x74>)
 80070dc:	681c      	ldr	r4, [r3, #0]
 80070de:	f005 f885 	bl	800c1ec <HAL_GetTick>
 80070e2:	4603      	mov	r3, r0
 80070e4:	461a      	mov	r2, r3
 80070e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070ea:	9302      	str	r3, [sp, #8]
 80070ec:	4b08      	ldr	r3, [pc, #32]	; (8007110 <VL53L0X_GetVcselPulsePeriod+0x78>)
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	9200      	str	r2, [sp, #0]
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <VL53L0X_GetVcselPulsePeriod+0x80>)
 80070f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80070f8:	4621      	mov	r1, r4
 80070fa:	2001      	movs	r0, #1
 80070fc:	f004 fff8 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007100:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007104:	4618      	mov	r0, r3
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	bd90      	pop	{r4, r7, pc}
 800710c:	20000634 	.word	0x20000634
 8007110:	08011444 	.word	0x08011444
 8007114:	08010f5c 	.word	0x08010f5c
 8007118:	08010f70 	.word	0x08010f70

0800711c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800711c:	b590      	push	{r4, r7, lr}
 800711e:	b08b      	sub	sp, #44	; 0x2c
 8007120:	af04      	add	r7, sp, #16
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
 8007128:	4613      	mov	r3, r2
 800712a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");
 8007138:	4b5b      	ldr	r3, [pc, #364]	; (80072a8 <VL53L0X_SetSequenceStepEnable+0x18c>)
 800713a:	681c      	ldr	r4, [r3, #0]
 800713c:	f005 f856 	bl	800c1ec <HAL_GetTick>
 8007140:	4603      	mov	r3, r0
 8007142:	461a      	mov	r2, r3
 8007144:	4b59      	ldr	r3, [pc, #356]	; (80072ac <VL53L0X_SetSequenceStepEnable+0x190>)
 8007146:	9301      	str	r3, [sp, #4]
 8007148:	9200      	str	r2, [sp, #0]
 800714a:	4b59      	ldr	r3, [pc, #356]	; (80072b0 <VL53L0X_SetSequenceStepEnable+0x194>)
 800714c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007150:	4621      	mov	r1, r4
 8007152:	2001      	movs	r0, #1
 8007154:	f004 ffcc 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007158:	f107 030f 	add.w	r3, r7, #15
 800715c:	461a      	mov	r2, r3
 800715e:	2101      	movs	r1, #1
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff f8c7 	bl	80062f4 <VL53L0X_RdByte>
 8007166:	4603      	mov	r3, r0
 8007168:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800716e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d15a      	bne.n	800722c <VL53L0X_SetSequenceStepEnable+0x110>
		if (SequenceStepEnabled == 1) {
 8007176:	78bb      	ldrb	r3, [r7, #2]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d12b      	bne.n	80071d4 <VL53L0X_SetSequenceStepEnable+0xb8>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	2b04      	cmp	r3, #4
 8007180:	d825      	bhi.n	80071ce <VL53L0X_SetSequenceStepEnable+0xb2>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <VL53L0X_SetSequenceStepEnable+0x6c>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	0800719d 	.word	0x0800719d
 800718c:	080071a7 	.word	0x080071a7
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071bb 	.word	0x080071bb
 8007198:	080071c5 	.word	0x080071c5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800719c:	7dbb      	ldrb	r3, [r7, #22]
 800719e:	f043 0310 	orr.w	r3, r3, #16
 80071a2:	75bb      	strb	r3, [r7, #22]
				break;
 80071a4:	e043      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80071a6:	7dbb      	ldrb	r3, [r7, #22]
 80071a8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80071ac:	75bb      	strb	r3, [r7, #22]
				break;
 80071ae:	e03e      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80071b0:	7dbb      	ldrb	r3, [r7, #22]
 80071b2:	f043 0304 	orr.w	r3, r3, #4
 80071b6:	75bb      	strb	r3, [r7, #22]
				break;
 80071b8:	e039      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80071ba:	7dbb      	ldrb	r3, [r7, #22]
 80071bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c0:	75bb      	strb	r3, [r7, #22]
				break;
 80071c2:	e034      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80071c4:	7dbb      	ldrb	r3, [r7, #22]
 80071c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071ca:	75bb      	strb	r3, [r7, #22]
				break;
 80071cc:	e02f      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071ce:	23fc      	movs	r3, #252	; 0xfc
 80071d0:	75fb      	strb	r3, [r7, #23]
 80071d2:	e02c      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d825      	bhi.n	8007226 <VL53L0X_SetSequenceStepEnable+0x10a>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <VL53L0X_SetSequenceStepEnable+0xc4>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f5 	.word	0x080071f5
 80071e4:	080071ff 	.word	0x080071ff
 80071e8:	08007209 	.word	0x08007209
 80071ec:	08007213 	.word	0x08007213
 80071f0:	0800721d 	.word	0x0800721d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80071f4:	7dbb      	ldrb	r3, [r7, #22]
 80071f6:	f023 0310 	bic.w	r3, r3, #16
 80071fa:	75bb      	strb	r3, [r7, #22]
				break;
 80071fc:	e017      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80071fe:	7dbb      	ldrb	r3, [r7, #22]
 8007200:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007204:	75bb      	strb	r3, [r7, #22]
				break;
 8007206:	e012      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007208:	7dbb      	ldrb	r3, [r7, #22]
 800720a:	f023 0304 	bic.w	r3, r3, #4
 800720e:	75bb      	strb	r3, [r7, #22]
				break;
 8007210:	e00d      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007212:	7dbb      	ldrb	r3, [r7, #22]
 8007214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007218:	75bb      	strb	r3, [r7, #22]
				break;
 800721a:	e008      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800721c:	7dbb      	ldrb	r3, [r7, #22]
 800721e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007222:	75bb      	strb	r3, [r7, #22]
				break;
 8007224:	e003      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007226:	23fc      	movs	r3, #252	; 0xfc
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	e000      	b.n	800722e <VL53L0X_SetSequenceStepEnable+0x112>
			}
		}
 800722c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	7dba      	ldrb	r2, [r7, #22]
 8007232:	429a      	cmp	r2, r3
 8007234:	d01e      	beq.n	8007274 <VL53L0X_SetSequenceStepEnable+0x158>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d107      	bne.n	800724e <VL53L0X_SetSequenceStepEnable+0x132>
			Status = VL53L0X_WrByte(Dev,
 800723e:	7dbb      	ldrb	r3, [r7, #22]
 8007240:	461a      	mov	r2, r3
 8007242:	2101      	movs	r1, #1
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7fe ffd3 	bl	80061f0 <VL53L0X_WrByte>
 800724a:	4603      	mov	r3, r0
 800724c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800724e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <VL53L0X_SetSequenceStepEnable+0x142>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7dba      	ldrb	r2, [r7, #22]
 800725a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800725e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d106      	bne.n	8007274 <VL53L0X_SetSequenceStepEnable+0x158>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800726c:	6939      	ldr	r1, [r7, #16]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fe52 	bl	8006f18 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
				MeasurementTimingBudgetMicroSeconds);
		}
	}

	LOG_FUNCTION_END(Status);
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <VL53L0X_SetSequenceStepEnable+0x18c>)
 8007276:	681c      	ldr	r4, [r3, #0]
 8007278:	f004 ffb8 	bl	800c1ec <HAL_GetTick>
 800727c:	4603      	mov	r3, r0
 800727e:	461a      	mov	r2, r3
 8007280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007284:	9302      	str	r3, [sp, #8]
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <VL53L0X_SetSequenceStepEnable+0x190>)
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	9200      	str	r2, [sp, #0]
 800728c:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <VL53L0X_SetSequenceStepEnable+0x198>)
 800728e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007292:	4621      	mov	r1, r4
 8007294:	2001      	movs	r0, #1
 8007296:	f004 ff2b 	bl	800c0f0 <trace_print_module_function>

	return Status;
 800729a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd90      	pop	{r4, r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000634 	.word	0x20000634
 80072ac:	08011460 	.word	0x08011460
 80072b0:	08010f5c 	.word	0x08010f5c
 80072b4:	08010f70 	.word	0x08010f70

080072b8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80072b8:	b590      	push	{r4, r7, lr}
 80072ba:	b08b      	sub	sp, #44	; 0x2c
 80072bc:	af04      	add	r7, sp, #16
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	607b      	str	r3, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	72fb      	strb	r3, [r7, #11]
 80072c6:	4613      	mov	r3, r2
 80072c8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");
 80072d4:	4b32      	ldr	r3, [pc, #200]	; (80073a0 <sequence_step_enabled+0xe8>)
 80072d6:	681c      	ldr	r4, [r3, #0]
 80072d8:	f004 ff88 	bl	800c1ec <HAL_GetTick>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	4b30      	ldr	r3, [pc, #192]	; (80073a4 <sequence_step_enabled+0xec>)
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	9200      	str	r2, [sp, #0]
 80072e6:	4b30      	ldr	r3, [pc, #192]	; (80073a8 <sequence_step_enabled+0xf0>)
 80072e8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80072ec:	4621      	mov	r1, r4
 80072ee:	2001      	movs	r0, #1
 80072f0:	f004 fefe 	bl	800c0f0 <trace_print_module_function>

	switch (SequenceStepId) {
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d836      	bhi.n	8007368 <sequence_step_enabled+0xb0>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <sequence_step_enabled+0x48>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	08007315 	.word	0x08007315
 8007304:	08007327 	.word	0x08007327
 8007308:	08007339 	.word	0x08007339
 800730c:	0800734b 	.word	0x0800734b
 8007310:	0800735d 	.word	0x0800735d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007314:	7abb      	ldrb	r3, [r7, #10]
 8007316:	111b      	asrs	r3, r3, #4
 8007318:	b2db      	uxtb	r3, r3
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	b2da      	uxtb	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	701a      	strb	r2, [r3, #0]
		break;
 8007324:	e022      	b.n	800736c <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007326:	7abb      	ldrb	r3, [r7, #10]
 8007328:	10db      	asrs	r3, r3, #3
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	701a      	strb	r2, [r3, #0]
		break;
 8007336:	e019      	b.n	800736c <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007338:	7abb      	ldrb	r3, [r7, #10]
 800733a:	109b      	asrs	r3, r3, #2
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	b2da      	uxtb	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	701a      	strb	r2, [r3, #0]
		break;
 8007348:	e010      	b.n	800736c <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800734a:	7abb      	ldrb	r3, [r7, #10]
 800734c:	119b      	asrs	r3, r3, #6
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	b2da      	uxtb	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	701a      	strb	r2, [r3, #0]
		break;
 800735a:	e007      	b.n	800736c <sequence_step_enabled+0xb4>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800735c:	7abb      	ldrb	r3, [r7, #10]
 800735e:	09db      	lsrs	r3, r3, #7
 8007360:	b2da      	uxtb	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	701a      	strb	r2, [r3, #0]
		break;
 8007366:	e001      	b.n	800736c <sequence_step_enabled+0xb4>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007368:	23fc      	movs	r3, #252	; 0xfc
 800736a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
 800736c:	4b0c      	ldr	r3, [pc, #48]	; (80073a0 <sequence_step_enabled+0xe8>)
 800736e:	681c      	ldr	r4, [r3, #0]
 8007370:	f004 ff3c 	bl	800c1ec <HAL_GetTick>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800737c:	9302      	str	r3, [sp, #8]
 800737e:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <sequence_step_enabled+0xec>)
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	9200      	str	r2, [sp, #0]
 8007384:	4b09      	ldr	r3, [pc, #36]	; (80073ac <sequence_step_enabled+0xf4>)
 8007386:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800738a:	4621      	mov	r1, r4
 800738c:	2001      	movs	r0, #1
 800738e:	f004 feaf 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd90      	pop	{r4, r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000634 	.word	0x20000634
 80073a4:	08011480 	.word	0x08011480
 80073a8:	08010f5c 	.word	0x08010f5c
 80073ac:	08010f70 	.word	0x08010f70

080073b0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");
 80073c2:	4b39      	ldr	r3, [pc, #228]	; (80074a8 <VL53L0X_GetSequenceStepEnables+0xf8>)
 80073c4:	681c      	ldr	r4, [r3, #0]
 80073c6:	f004 ff11 	bl	800c1ec <HAL_GetTick>
 80073ca:	4603      	mov	r3, r0
 80073cc:	461a      	mov	r2, r3
 80073ce:	4b37      	ldr	r3, [pc, #220]	; (80074ac <VL53L0X_GetSequenceStepEnables+0xfc>)
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	9200      	str	r2, [sp, #0]
 80073d4:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <VL53L0X_GetSequenceStepEnables+0x100>)
 80073d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80073da:	4621      	mov	r1, r4
 80073dc:	2001      	movs	r0, #1
 80073de:	f004 fe87 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80073e2:	f107 030e 	add.w	r3, r7, #14
 80073e6:	461a      	mov	r2, r3
 80073e8:	2101      	movs	r1, #1
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fe ff82 	bl	80062f4 <VL53L0X_RdByte>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80073f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d107      	bne.n	800740c <VL53L0X_GetSequenceStepEnables+0x5c>
		Status = sequence_step_enabled(Dev,
 80073fc:	7bba      	ldrb	r2, [r7, #14]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ff58 	bl	80072b8 <sequence_step_enabled>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800740c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d108      	bne.n	8007426 <VL53L0X_GetSequenceStepEnables+0x76>
		Status = sequence_step_enabled(Dev,
 8007414:	7bba      	ldrb	r2, [r7, #14]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	3302      	adds	r3, #2
 800741a:	2101      	movs	r1, #1
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff ff4b 	bl	80072b8 <sequence_step_enabled>
 8007422:	4603      	mov	r3, r0
 8007424:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d108      	bne.n	8007440 <VL53L0X_GetSequenceStepEnables+0x90>
		Status = sequence_step_enabled(Dev,
 800742e:	7bba      	ldrb	r2, [r7, #14]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	2102      	movs	r1, #2
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7ff ff3e 	bl	80072b8 <sequence_step_enabled>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d108      	bne.n	800745a <VL53L0X_GetSequenceStepEnables+0xaa>
		Status = sequence_step_enabled(Dev,
 8007448:	7bba      	ldrb	r2, [r7, #14]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	3303      	adds	r3, #3
 800744e:	2103      	movs	r1, #3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ff31 	bl	80072b8 <sequence_step_enabled>
 8007456:	4603      	mov	r3, r0
 8007458:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800745a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d108      	bne.n	8007474 <VL53L0X_GetSequenceStepEnables+0xc4>
		Status = sequence_step_enabled(Dev,
 8007462:	7bba      	ldrb	r2, [r7, #14]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	3304      	adds	r3, #4
 8007468:	2104      	movs	r1, #4
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff ff24 	bl	80072b8 <sequence_step_enabled>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <VL53L0X_GetSequenceStepEnables+0xf8>)
 8007476:	681c      	ldr	r4, [r3, #0]
 8007478:	f004 feb8 	bl	800c1ec <HAL_GetTick>
 800747c:	4603      	mov	r3, r0
 800747e:	461a      	mov	r2, r3
 8007480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007484:	9302      	str	r3, [sp, #8]
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <VL53L0X_GetSequenceStepEnables+0xfc>)
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	9200      	str	r2, [sp, #0]
 800748c:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <VL53L0X_GetSequenceStepEnables+0x104>)
 800748e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007492:	4621      	mov	r1, r4
 8007494:	2001      	movs	r0, #1
 8007496:	f004 fe2b 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800749a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd90      	pop	{r4, r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000634 	.word	0x20000634
 80074ac:	08011498 	.word	0x08011498
 80074b0:	08010f5c 	.word	0x08010f5c
 80074b4:	08010f70 	.word	0x08010f70

080074b8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80074b8:	b590      	push	{r4, r7, lr}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af04      	add	r7, sp, #16
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");
 80074c6:	4b28      	ldr	r3, [pc, #160]	; (8007568 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 80074c8:	681c      	ldr	r4, [r3, #0]
 80074ca:	f004 fe8f 	bl	800c1ec <HAL_GetTick>
 80074ce:	4603      	mov	r3, r0
 80074d0:	461a      	mov	r2, r3
 80074d2:	4b26      	ldr	r3, [pc, #152]	; (800756c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	9200      	str	r2, [sp, #0]
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb8>)
 80074da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80074de:	4621      	mov	r1, r4
 80074e0:	2001      	movs	r0, #1
 80074e2:	f004 fe05 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80074e6:	f107 030c 	add.w	r3, r7, #12
 80074ea:	461a      	mov	r2, r3
 80074ec:	21f8      	movs	r1, #248	; 0xf8
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fe ff2a 	bl	8006348 <VL53L0X_RdWord>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80074f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d108      	bne.n	8007512 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5a>
		Status = VL53L0X_RdDWord(Dev,
 8007500:	f107 0308 	add.w	r3, r7, #8
 8007504:	461a      	mov	r2, r3
 8007506:	2104      	movs	r1, #4
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fe ff55 	bl	80063b8 <VL53L0X_RdDWord>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10c      	bne.n	8007534 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7c>
		if (osc_calibrate_val != 0) {
 800751a:	89bb      	ldrh	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x74>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	89ba      	ldrh	r2, [r7, #12]
 8007524:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
 8007534:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb0>)
 8007536:	681c      	ldr	r4, [r3, #0]
 8007538:	f004 fe58 	bl	800c1ec <HAL_GetTick>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007544:	9302      	str	r3, [sp, #8]
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xb4>)
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	9200      	str	r2, [sp, #0]
 800754c:	4b09      	ldr	r3, [pc, #36]	; (8007574 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0xbc>)
 800754e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007552:	4621      	mov	r1, r4
 8007554:	2001      	movs	r0, #1
 8007556:	f004 fdcb 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800755a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	bd90      	pop	{r4, r7, pc}
 8007566:	bf00      	nop
 8007568:	20000634 	.word	0x20000634
 800756c:	080114b8 	.word	0x080114b8
 8007570:	08010f5c 	.word	0x08010f5c
 8007574:	08010f70 	.word	0x08010f70

08007578 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007578:	b590      	push	{r4, r7, lr}
 800757a:	b089      	sub	sp, #36	; 0x24
 800757c:	af04      	add	r7, sp, #16
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");
 8007586:	4b17      	ldr	r3, [pc, #92]	; (80075e4 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 8007588:	681c      	ldr	r4, [r3, #0]
 800758a:	f004 fe2f 	bl	800c1ec <HAL_GetTick>
 800758e:	4603      	mov	r3, r0
 8007590:	461a      	mov	r2, r3
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <VL53L0X_GetXTalkCompensationEnable+0x70>)
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	9200      	str	r2, [sp, #0]
 8007598:	4b14      	ldr	r3, [pc, #80]	; (80075ec <VL53L0X_GetXTalkCompensationEnable+0x74>)
 800759a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800759e:	4621      	mov	r1, r4
 80075a0:	2001      	movs	r0, #1
 80075a2:	f004 fda5 	bl	800c0f0 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7f1b      	ldrb	r3, [r3, #28]
 80075aa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	7bba      	ldrb	r2, [r7, #14]
 80075b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 80075b2:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <VL53L0X_GetXTalkCompensationEnable+0x6c>)
 80075b4:	681c      	ldr	r4, [r3, #0]
 80075b6:	f004 fe19 	bl	800c1ec <HAL_GetTick>
 80075ba:	4603      	mov	r3, r0
 80075bc:	461a      	mov	r2, r3
 80075be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <VL53L0X_GetXTalkCompensationEnable+0x70>)
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	9200      	str	r2, [sp, #0]
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <VL53L0X_GetXTalkCompensationEnable+0x78>)
 80075cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80075d0:	4621      	mov	r1, r4
 80075d2:	2001      	movs	r0, #1
 80075d4:	f004 fd8c 	bl	800c0f0 <trace_print_module_function>
	return Status;
 80075d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd90      	pop	{r4, r7, pc}
 80075e4:	20000634 	.word	0x20000634
 80075e8:	080114e8 	.word	0x080114e8
 80075ec:	08010f5c 	.word	0x08010f5c
 80075f0:	08010f70 	.word	0x08010f70

080075f4 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80075f4:	b590      	push	{r4, r7, lr}
 80075f6:	b08b      	sub	sp, #44	; 0x2c
 80075f8:	af04      	add	r7, sp, #16
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 8007602:	4b27      	ldr	r3, [pc, #156]	; (80076a0 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8007604:	681c      	ldr	r4, [r3, #0]
 8007606:	f004 fdf1 	bl	800c1ec <HAL_GetTick>
 800760a:	4603      	mov	r3, r0
 800760c:	461a      	mov	r2, r3
 800760e:	4b25      	ldr	r3, [pc, #148]	; (80076a4 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	9200      	str	r2, [sp, #0]
 8007614:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb4>)
 8007616:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800761a:	4621      	mov	r1, r4
 800761c:	2001      	movs	r0, #1
 800761e:	f004 fd67 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_RdWord(Dev,
 8007622:	f107 030e 	add.w	r3, r7, #14
 8007626:	461a      	mov	r2, r3
 8007628:	2120      	movs	r1, #32
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fe fe8c 	bl	8006348 <VL53L0X_RdWord>
 8007630:	4603      	mov	r3, r0
 8007632:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d118      	bne.n	800766e <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
		if (Value == 0) {
 800763c:	89fb      	ldrh	r3, [r7, #14]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <VL53L0X_GetXTalkCompensationRateMegaCps+0x62>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
 8007654:	e00b      	b.n	800766e <VL53L0X_GetXTalkCompensationRateMegaCps+0x7a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007656:	89fb      	ldrh	r3, [r7, #14]
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
 800766e:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <VL53L0X_GetXTalkCompensationRateMegaCps+0xac>)
 8007670:	681c      	ldr	r4, [r3, #0]
 8007672:	f004 fdbb 	bl	800c1ec <HAL_GetTick>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800767e:	9302      	str	r3, [sp, #8]
 8007680:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <VL53L0X_GetXTalkCompensationRateMegaCps+0xb0>)
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	9200      	str	r2, [sp, #0]
 8007686:	4b09      	ldr	r3, [pc, #36]	; (80076ac <VL53L0X_GetXTalkCompensationRateMegaCps+0xb8>)
 8007688:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800768c:	4621      	mov	r1, r4
 800768e:	2001      	movs	r0, #1
 8007690:	f004 fd2e 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007694:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007698:	4618      	mov	r0, r3
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	bd90      	pop	{r4, r7, pc}
 80076a0:	20000634 	.word	0x20000634
 80076a4:	0801150c 	.word	0x0801150c
 80076a8:	08010f5c 	.word	0x08010f5c
 80076ac:	08010f70 	.word	0x08010f70

080076b0 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b08b      	sub	sp, #44	; 0x2c
 80076b4:	af04      	add	r7, sp, #16
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	807b      	strh	r3, [r7, #2]
 80076bc:	4613      	mov	r3, r2
 80076be:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 80076d0:	4b4f      	ldr	r3, [pc, #316]	; (8007810 <VL53L0X_SetLimitCheckEnable+0x160>)
 80076d2:	681c      	ldr	r4, [r3, #0]
 80076d4:	f004 fd8a 	bl	800c1ec <HAL_GetTick>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	4b4d      	ldr	r3, [pc, #308]	; (8007814 <VL53L0X_SetLimitCheckEnable+0x164>)
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	9200      	str	r2, [sp, #0]
 80076e2:	4b4d      	ldr	r3, [pc, #308]	; (8007818 <VL53L0X_SetLimitCheckEnable+0x168>)
 80076e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80076e8:	4621      	mov	r1, r4
 80076ea:	2001      	movs	r0, #1
 80076ec:	f004 fd00 	bl	800c0f0 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80076f0:	887b      	ldrh	r3, [r7, #2]
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	d902      	bls.n	80076fc <VL53L0X_SetLimitCheckEnable+0x4c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076f6:	23fc      	movs	r3, #252	; 0xfc
 80076f8:	75fb      	strb	r3, [r7, #23]
 80076fa:	e05b      	b.n	80077b4 <VL53L0X_SetLimitCheckEnable+0x104>
	} else {
		if (LimitCheckEnable == 0) {
 80076fc:	787b      	ldrb	r3, [r7, #1]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <VL53L0X_SetLimitCheckEnable+0x60>
			TempFix1616 = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800770a:	2301      	movs	r3, #1
 800770c:	73bb      	strb	r3, [r7, #14]
 800770e:	e00a      	b.n	8007726 <VL53L0X_SetLimitCheckEnable+0x76>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007710:	887b      	ldrh	r3, [r7, #2]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	330c      	adds	r3, #12
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007726:	887b      	ldrh	r3, [r7, #2]
 8007728:	2b05      	cmp	r3, #5
 800772a:	d841      	bhi.n	80077b0 <VL53L0X_SetLimitCheckEnable+0x100>
 800772c:	a201      	add	r2, pc, #4	; (adr r2, 8007734 <VL53L0X_SetLimitCheckEnable+0x84>)
 800772e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007732:	bf00      	nop
 8007734:	0800774d 	.word	0x0800774d
 8007738:	08007757 	.word	0x08007757
 800773c:	0800776d 	.word	0x0800776d
 8007740:	08007777 	.word	0x08007777
 8007744:	08007781 	.word	0x08007781
 8007748:	08007799 	.word	0x08007799

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7bfa      	ldrb	r2, [r7, #15]
 8007750:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007754:	e02e      	b.n	80077b4 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	2144      	movs	r1, #68	; 0x44
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fe fd69 	bl	8006238 <VL53L0X_WrWord>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]

			break;
 800776a:	e023      	b.n	80077b4 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	7bfa      	ldrb	r2, [r7, #15]
 8007770:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007774:	e01e      	b.n	80077b4 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	7bfa      	ldrb	r2, [r7, #15]
 800777a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800777e:	e019      	b.n	80077b4 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007786:	7b7b      	ldrb	r3, [r7, #13]
 8007788:	22fe      	movs	r2, #254	; 0xfe
 800778a:	2160      	movs	r1, #96	; 0x60
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7fe fd7d 	bl	800628c <VL53L0X_UpdateByte>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007796:	e00d      	b.n	80077b4 <VL53L0X_SetLimitCheckEnable+0x104>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800779e:	7b7b      	ldrb	r3, [r7, #13]
 80077a0:	22ef      	movs	r2, #239	; 0xef
 80077a2:	2160      	movs	r1, #96	; 0x60
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7fe fd71 	bl	800628c <VL53L0X_UpdateByte>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80077ae:	e001      	b.n	80077b4 <VL53L0X_SetLimitCheckEnable+0x104>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077b0:	23fc      	movs	r3, #252	; 0xfc
 80077b2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80077b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10f      	bne.n	80077dc <VL53L0X_SetLimitCheckEnable+0x12c>
		if (LimitCheckEnable == 0) {
 80077bc:	787b      	ldrb	r3, [r7, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <VL53L0X_SetLimitCheckEnable+0x120>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80077c2:	887b      	ldrh	r3, [r7, #2]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80077ce:	e005      	b.n	80077dc <VL53L0X_SetLimitCheckEnable+0x12c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80077d0:	887b      	ldrh	r3, [r7, #2]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	4413      	add	r3, r2
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
 80077dc:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <VL53L0X_SetLimitCheckEnable+0x160>)
 80077de:	681c      	ldr	r4, [r3, #0]
 80077e0:	f004 fd04 	bl	800c1ec <HAL_GetTick>
 80077e4:	4603      	mov	r3, r0
 80077e6:	461a      	mov	r2, r3
 80077e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077ec:	9302      	str	r3, [sp, #8]
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <VL53L0X_SetLimitCheckEnable+0x164>)
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	9200      	str	r2, [sp, #0]
 80077f4:	4b09      	ldr	r3, [pc, #36]	; (800781c <VL53L0X_SetLimitCheckEnable+0x16c>)
 80077f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80077fa:	4621      	mov	r1, r4
 80077fc:	2001      	movs	r0, #1
 80077fe:	f004 fc77 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007806:	4618      	mov	r0, r3
 8007808:	371c      	adds	r7, #28
 800780a:	46bd      	mov	sp, r7
 800780c:	bd90      	pop	{r4, r7, pc}
 800780e:	bf00      	nop
 8007810:	20000634 	.word	0x20000634
 8007814:	08011534 	.word	0x08011534
 8007818:	08010f5c 	.word	0x08010f5c
 800781c:	08010f70 	.word	0x08010f70

08007820 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b08b      	sub	sp, #44	; 0x2c
 8007824:	af04      	add	r7, sp, #16
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	460b      	mov	r3, r1
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 8007832:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <VL53L0X_GetLimitCheckEnable+0x88>)
 8007834:	681c      	ldr	r4, [r3, #0]
 8007836:	f004 fcd9 	bl	800c1ec <HAL_GetTick>
 800783a:	4603      	mov	r3, r0
 800783c:	461a      	mov	r2, r3
 800783e:	4b1b      	ldr	r3, [pc, #108]	; (80078ac <VL53L0X_GetLimitCheckEnable+0x8c>)
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	9200      	str	r2, [sp, #0]
 8007844:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <VL53L0X_GetLimitCheckEnable+0x90>)
 8007846:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800784a:	4621      	mov	r1, r4
 800784c:	2001      	movs	r0, #1
 800784e:	f004 fc4f 	bl	800c0f0 <trace_print_module_function>

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007852:	897b      	ldrh	r3, [r7, #10]
 8007854:	2b05      	cmp	r3, #5
 8007856:	d905      	bls.n	8007864 <VL53L0X_GetLimitCheckEnable+0x44>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007858:	23fc      	movs	r3, #252	; 0xfc
 800785a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e008      	b.n	8007876 <VL53L0X_GetLimitCheckEnable+0x56>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007864:	897b      	ldrh	r3, [r7, #10]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800786e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7dba      	ldrb	r2, [r7, #22]
 8007874:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <VL53L0X_GetLimitCheckEnable+0x88>)
 8007878:	681c      	ldr	r4, [r3, #0]
 800787a:	f004 fcb7 	bl	800c1ec <HAL_GetTick>
 800787e:	4603      	mov	r3, r0
 8007880:	461a      	mov	r2, r3
 8007882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007886:	9302      	str	r3, [sp, #8]
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <VL53L0X_GetLimitCheckEnable+0x8c>)
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	9200      	str	r2, [sp, #0]
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <VL53L0X_GetLimitCheckEnable+0x94>)
 8007890:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007894:	4621      	mov	r1, r4
 8007896:	2001      	movs	r0, #1
 8007898:	f004 fc2a 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800789c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd90      	pop	{r4, r7, pc}
 80078a8:	20000634 	.word	0x20000634
 80078ac:	08011550 	.word	0x08011550
 80078b0:	08010f5c 	.word	0x08010f5c
 80078b4:	08010f70 	.word	0x08010f70

080078b8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80078b8:	b590      	push	{r4, r7, lr}
 80078ba:	b08b      	sub	sp, #44	; 0x2c
 80078bc:	af04      	add	r7, sp, #16
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	460b      	mov	r3, r1
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");
 80078ca:	4b3d      	ldr	r3, [pc, #244]	; (80079c0 <VL53L0X_SetLimitCheckValue+0x108>)
 80078cc:	681c      	ldr	r4, [r3, #0]
 80078ce:	f004 fc8d 	bl	800c1ec <HAL_GetTick>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	4b3b      	ldr	r3, [pc, #236]	; (80079c4 <VL53L0X_SetLimitCheckValue+0x10c>)
 80078d8:	9301      	str	r3, [sp, #4]
 80078da:	9200      	str	r2, [sp, #0]
 80078dc:	4b3a      	ldr	r3, [pc, #232]	; (80079c8 <VL53L0X_SetLimitCheckValue+0x110>)
 80078de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80078e2:	4621      	mov	r1, r4
 80078e4:	2001      	movs	r0, #1
 80078e6:	f004 fc03 	bl	800c0f0 <trace_print_module_function>

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80078ea:	897b      	ldrh	r3, [r7, #10]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80078f6:	7dbb      	ldrb	r3, [r7, #22]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d107      	bne.n	800790c <VL53L0X_SetLimitCheckValue+0x54>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80078fc:	897b      	ldrh	r3, [r7, #10]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	330c      	adds	r3, #12
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	e040      	b.n	800798e <VL53L0X_SetLimitCheckValue+0xd6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800790c:	897b      	ldrh	r3, [r7, #10]
 800790e:	2b05      	cmp	r3, #5
 8007910:	d830      	bhi.n	8007974 <VL53L0X_SetLimitCheckValue+0xbc>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <VL53L0X_SetLimitCheckValue+0x60>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007931 	.word	0x08007931
 800791c:	08007939 	.word	0x08007939
 8007920:	0800794f 	.word	0x0800794f
 8007924:	08007957 	.word	0x08007957
 8007928:	0800795f 	.word	0x0800795f
 800792c:	0800795f 	.word	0x0800795f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007936:	e01f      	b.n	8007978 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800793c:	b29b      	uxth	r3, r3
 800793e:	461a      	mov	r2, r3
 8007940:	2144      	movs	r1, #68	; 0x44
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7fe fc78 	bl	8006238 <VL53L0X_WrWord>
 8007948:	4603      	mov	r3, r0
 800794a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800794c:	e014      	b.n	8007978 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007954:	e010      	b.n	8007978 <VL53L0X_SetLimitCheckValue+0xc0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800795c:	e00c      	b.n	8007978 <VL53L0X_SetLimitCheckValue+0xc0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007962:	b29b      	uxth	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	2164      	movs	r1, #100	; 0x64
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7fe fc65 	bl	8006238 <VL53L0X_WrWord>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007972:	e001      	b.n	8007978 <VL53L0X_SetLimitCheckValue+0xc0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007974:	23fc      	movs	r3, #252	; 0xfc
 8007976:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <VL53L0X_SetLimitCheckValue+0xd6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007980:	897b      	ldrh	r3, [r7, #10]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	330c      	adds	r3, #12
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
 800798e:	4b0c      	ldr	r3, [pc, #48]	; (80079c0 <VL53L0X_SetLimitCheckValue+0x108>)
 8007990:	681c      	ldr	r4, [r3, #0]
 8007992:	f004 fc2b 	bl	800c1ec <HAL_GetTick>
 8007996:	4603      	mov	r3, r0
 8007998:	461a      	mov	r2, r3
 800799a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <VL53L0X_SetLimitCheckValue+0x10c>)
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	9200      	str	r2, [sp, #0]
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <VL53L0X_SetLimitCheckValue+0x114>)
 80079a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80079ac:	4621      	mov	r1, r4
 80079ae:	2001      	movs	r0, #1
 80079b0:	f004 fb9e 	bl	800c0f0 <trace_print_module_function>
	return Status;
 80079b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd90      	pop	{r4, r7, pc}
 80079c0:	20000634 	.word	0x20000634
 80079c4:	0801156c 	.word	0x0801156c
 80079c8:	08010f5c 	.word	0x08010f5c
 80079cc:	08010f70 	.word	0x08010f70

080079d0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80079d0:	b590      	push	{r4, r7, lr}
 80079d2:	b08d      	sub	sp, #52	; 0x34
 80079d4:	af04      	add	r7, sp, #16
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	460b      	mov	r3, r1
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079de:	2300      	movs	r3, #0
 80079e0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");
 80079e6:	4b52      	ldr	r3, [pc, #328]	; (8007b30 <VL53L0X_GetLimitCheckValue+0x160>)
 80079e8:	681c      	ldr	r4, [r3, #0]
 80079ea:	f004 fbff 	bl	800c1ec <HAL_GetTick>
 80079ee:	4603      	mov	r3, r0
 80079f0:	461a      	mov	r2, r3
 80079f2:	4b50      	ldr	r3, [pc, #320]	; (8007b34 <VL53L0X_GetLimitCheckValue+0x164>)
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	9200      	str	r2, [sp, #0]
 80079f8:	4b4f      	ldr	r3, [pc, #316]	; (8007b38 <VL53L0X_GetLimitCheckValue+0x168>)
 80079fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80079fe:	4621      	mov	r1, r4
 8007a00:	2001      	movs	r0, #1
 8007a02:	f004 fb75 	bl	800c0f0 <trace_print_module_function>

	switch (LimitCheckId) {
 8007a06:	897b      	ldrh	r3, [r7, #10]
 8007a08:	2b05      	cmp	r3, #5
 8007a0a:	d847      	bhi.n	8007a9c <VL53L0X_GetLimitCheckValue+0xcc>
 8007a0c:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <VL53L0X_GetLimitCheckValue+0x44>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a2d 	.word	0x08007a2d
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a5f 	.word	0x08007a5f
 8007a20:	08007a6b 	.word	0x08007a6b
 8007a24:	08007a77 	.word	0x08007a77
 8007a28:	08007a77 	.word	0x08007a77

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a30:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	77bb      	strb	r3, [r7, #30]
		break;
 8007a36:	e033      	b.n	8007aa0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007a38:	f107 0316 	add.w	r3, r7, #22
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	2144      	movs	r1, #68	; 0x44
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7fe fc81 	bl	8006348 <VL53L0X_RdWord>
 8007a46:	4603      	mov	r3, r0
 8007a48:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007a4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <VL53L0X_GetLimitCheckValue+0x88>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007a52:	8afb      	ldrh	r3, [r7, #22]
 8007a54:	025b      	lsls	r3, r3, #9
 8007a56:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	77bb      	strb	r3, [r7, #30]
		break;
 8007a5c:	e020      	b.n	8007aa0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a62:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	77bb      	strb	r3, [r7, #30]
		break;
 8007a68:	e01a      	b.n	8007aa0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	77bb      	strb	r3, [r7, #30]
		break;
 8007a74:	e014      	b.n	8007aa0 <VL53L0X_GetLimitCheckValue+0xd0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007a76:	f107 0316 	add.w	r3, r7, #22
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	2164      	movs	r1, #100	; 0x64
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7fe fc62 	bl	8006348 <VL53L0X_RdWord>
 8007a84:	4603      	mov	r3, r0
 8007a86:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007a88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <VL53L0X_GetLimitCheckValue+0xc6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007a90:	8afb      	ldrh	r3, [r7, #22]
 8007a92:	025b      	lsls	r3, r3, #9
 8007a94:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	77bb      	strb	r3, [r7, #30]
		break;
 8007a9a:	e001      	b.n	8007aa0 <VL53L0X_GetLimitCheckValue+0xd0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a9c:	23fc      	movs	r3, #252	; 0xfc
 8007a9e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007aa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d12a      	bne.n	8007afe <VL53L0X_GetLimitCheckValue+0x12e>

		if (EnableZeroValue == 1) {
 8007aa8:	7fbb      	ldrb	r3, [r7, #30]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d124      	bne.n	8007af8 <VL53L0X_GetLimitCheckValue+0x128>

			if (TempFix1616 == 0) {
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d110      	bne.n	8007ad6 <VL53L0X_GetLimitCheckValue+0x106>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007ab4:	897b      	ldrh	r3, [r7, #10]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	330c      	adds	r3, #12
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007ac8:	897b      	ldrh	r3, [r7, #10]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007ad4:	e013      	b.n	8007afe <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007adc:	897b      	ldrh	r3, [r7, #10]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007aea:	897b      	ldrh	r3, [r7, #10]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007af6:	e002      	b.n	8007afe <VL53L0X_GetLimitCheckValue+0x12e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <VL53L0X_GetLimitCheckValue+0x160>)
 8007b00:	681c      	ldr	r4, [r3, #0]
 8007b02:	f004 fb73 	bl	800c1ec <HAL_GetTick>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b0e:	9302      	str	r3, [sp, #8]
 8007b10:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <VL53L0X_GetLimitCheckValue+0x164>)
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	9200      	str	r2, [sp, #0]
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <VL53L0X_GetLimitCheckValue+0x16c>)
 8007b18:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f004 fae6 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007b24:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3724      	adds	r7, #36	; 0x24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd90      	pop	{r4, r7, pc}
 8007b30:	20000634 	.word	0x20000634
 8007b34:	08011588 	.word	0x08011588
 8007b38:	08010f5c 	.word	0x08010f5c
 8007b3c:	08010f70 	.word	0x08010f70

08007b40 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b089      	sub	sp, #36	; 0x24
 8007b44:	af04      	add	r7, sp, #16
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8007b4e:	4b27      	ldr	r3, [pc, #156]	; (8007bec <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 8007b50:	681c      	ldr	r4, [r3, #0]
 8007b52:	f004 fb4b 	bl	800c1ec <HAL_GetTick>
 8007b56:	4603      	mov	r3, r0
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	9200      	str	r2, [sp, #0]
 8007b60:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <VL53L0X_GetWrapAroundCheckEnable+0xb4>)
 8007b62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007b66:	4621      	mov	r1, r4
 8007b68:	2001      	movs	r0, #1
 8007b6a:	f004 fac1 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007b6e:	f107 030e 	add.w	r3, r7, #14
 8007b72:	461a      	mov	r2, r3
 8007b74:	2101      	movs	r1, #1
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fe fbbc 	bl	80062f4 <VL53L0X_RdByte>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10e      	bne.n	8007ba6 <VL53L0X_GetWrapAroundCheckEnable+0x66>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007b88:	7bba      	ldrb	r2, [r7, #14]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	b25b      	sxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da03      	bge.n	8007ba0 <VL53L0X_GetWrapAroundCheckEnable+0x60>
			*pWrapAroundCheckEnable = 0x01;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	e002      	b.n	8007ba6 <VL53L0X_GetWrapAroundCheckEnable+0x66>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d104      	bne.n	8007bb8 <VL53L0X_GetWrapAroundCheckEnable+0x78>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <VL53L0X_GetWrapAroundCheckEnable+0xac>)
 8007bba:	681c      	ldr	r4, [r3, #0]
 8007bbc:	f004 fb16 	bl	800c1ec <HAL_GetTick>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bc8:	9302      	str	r3, [sp, #8]
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <VL53L0X_GetWrapAroundCheckEnable+0xb0>)
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	9200      	str	r2, [sp, #0]
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <VL53L0X_GetWrapAroundCheckEnable+0xb8>)
 8007bd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	2001      	movs	r0, #1
 8007bda:	f004 fa89 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd90      	pop	{r4, r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000634 	.word	0x20000634
 8007bf0:	080115a4 	.word	0x080115a4
 8007bf4:	08010f5c 	.word	0x08010f5c
 8007bf8:	08010f70 	.word	0x08010f70

08007bfc <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b089      	sub	sp, #36	; 0x24
 8007c00:	af04      	add	r7, sp, #16
 8007c02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");
 8007c08:	4b28      	ldr	r3, [pc, #160]	; (8007cac <VL53L0X_PerformSingleMeasurement+0xb0>)
 8007c0a:	681c      	ldr	r4, [r3, #0]
 8007c0c:	f004 faee 	bl	800c1ec <HAL_GetTick>
 8007c10:	4603      	mov	r3, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <VL53L0X_PerformSingleMeasurement+0xb4>)
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	9200      	str	r2, [sp, #0]
 8007c1a:	4b26      	ldr	r3, [pc, #152]	; (8007cb4 <VL53L0X_PerformSingleMeasurement+0xb8>)
 8007c1c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007c20:	4621      	mov	r1, r4
 8007c22:	2001      	movs	r0, #1
 8007c24:	f004 fa64 	bl	800c0f0 <trace_print_module_function>

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007c28:	f107 030e 	add.w	r3, r7, #14
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff f8ec 	bl	8006e0c <VL53L0X_GetDeviceMode>
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <VL53L0X_PerformSingleMeasurement+0x54>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d104      	bne.n	8007c50 <VL53L0X_PerformSingleMeasurement+0x54>
		Status = VL53L0X_StartMeasurement(Dev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f8e0 	bl	8007e0c <VL53L0X_StartMeasurement>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <VL53L0X_PerformSingleMeasurement+0x66>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f001 fd15 	bl	8009688 <VL53L0X_measurement_poll_for_completion>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d106      	bne.n	8007c78 <VL53L0X_PerformSingleMeasurement+0x7c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <VL53L0X_PerformSingleMeasurement+0x7c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2203      	movs	r2, #3
 8007c74:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
 8007c78:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <VL53L0X_PerformSingleMeasurement+0xb0>)
 8007c7a:	681c      	ldr	r4, [r3, #0]
 8007c7c:	f004 fab6 	bl	800c1ec <HAL_GetTick>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c88:	9302      	str	r3, [sp, #8]
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <VL53L0X_PerformSingleMeasurement+0xb4>)
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	9200      	str	r2, [sp, #0]
 8007c90:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <VL53L0X_PerformSingleMeasurement+0xbc>)
 8007c92:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007c96:	4621      	mov	r1, r4
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f004 fa29 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd90      	pop	{r4, r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000634 	.word	0x20000634
 8007cb0:	080115c8 	.word	0x080115c8
 8007cb4:	08010f5c 	.word	0x08010f5c
 8007cb8:	08010f70 	.word	0x08010f70

08007cbc <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007cbc:	b590      	push	{r4, r7, lr}
 8007cbe:	b08b      	sub	sp, #44	; 0x2c
 8007cc0:	af04      	add	r7, sp, #16
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8007ccc:	4b18      	ldr	r3, [pc, #96]	; (8007d30 <VL53L0X_PerformRefCalibration+0x74>)
 8007cce:	681c      	ldr	r4, [r3, #0]
 8007cd0:	f004 fa8c 	bl	800c1ec <HAL_GetTick>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <VL53L0X_PerformRefCalibration+0x78>)
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	9200      	str	r2, [sp, #0]
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <VL53L0X_PerformRefCalibration+0x7c>)
 8007ce0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	f004 fa02 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007cec:	2301      	movs	r3, #1
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f001 fc8b 	bl	800960e <VL53L0X_perform_ref_calibration>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <VL53L0X_PerformRefCalibration+0x74>)
 8007cfe:	681c      	ldr	r4, [r3, #0]
 8007d00:	f004 fa74 	bl	800c1ec <HAL_GetTick>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d0c:	9302      	str	r3, [sp, #8]
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <VL53L0X_PerformRefCalibration+0x78>)
 8007d10:	9301      	str	r3, [sp, #4]
 8007d12:	9200      	str	r2, [sp, #0]
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <VL53L0X_PerformRefCalibration+0x80>)
 8007d16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f004 f9e7 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd90      	pop	{r4, r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000634 	.word	0x20000634
 8007d34:	080115ec 	.word	0x080115ec
 8007d38:	08010f5c 	.word	0x08010f5c
 8007d3c:	08010f70 	.word	0x08010f70

08007d40 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007d56:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007d58:	7dbb      	ldrb	r3, [r7, #22]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d005      	beq.n	8007d6a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007d5e:	7dbb      	ldrb	r3, [r7, #22]
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d002      	beq.n	8007d6a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007d64:	7dbb      	ldrb	r3, [r7, #22]
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d147      	bne.n	8007dfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007d6a:	f107 030c 	add.w	r3, r7, #12
 8007d6e:	f107 0210 	add.w	r2, r7, #16
 8007d72:	2101      	movs	r1, #1
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fca1 	bl	80086bc <VL53L0X_GetInterruptThresholds>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007d84:	d803      	bhi.n	8007d8e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007d86:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007d88:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007d8c:	d935      	bls.n	8007dfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d131      	bne.n	8007dfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d006      	beq.n	8007daa <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007d9c:	491a      	ldr	r1, [pc, #104]	; (8007e08 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f003 fa28 	bl	800b1f4 <VL53L0X_load_tuning_settings>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75fb      	strb	r3, [r7, #23]
 8007da8:	e027      	b.n	8007dfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007daa:	2204      	movs	r2, #4
 8007dac:	21ff      	movs	r1, #255	; 0xff
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7fe fa1e 	bl	80061f0 <VL53L0X_WrByte>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2170      	movs	r1, #112	; 0x70
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fe fa14 	bl	80061f0 <VL53L0X_WrByte>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	461a      	mov	r2, r3
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	21ff      	movs	r1, #255	; 0xff
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7fe fa0a 	bl	80061f0 <VL53L0X_WrByte>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007de6:	2200      	movs	r2, #0
 8007de8:	2180      	movs	r1, #128	; 0x80
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fe fa00 	bl	80061f0 <VL53L0X_WrByte>
 8007df0:	4603      	mov	r3, r0
 8007df2:	461a      	mov	r2, r3
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	2000046c 	.word	0x2000046c

08007e0c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b08b      	sub	sp, #44	; 0x2c
 8007e10:	af04      	add	r7, sp, #16
 8007e12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8007e1c:	4b6e      	ldr	r3, [pc, #440]	; (8007fd8 <VL53L0X_StartMeasurement+0x1cc>)
 8007e1e:	681c      	ldr	r4, [r3, #0]
 8007e20:	f004 f9e4 	bl	800c1ec <HAL_GetTick>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	4b6c      	ldr	r3, [pc, #432]	; (8007fdc <VL53L0X_StartMeasurement+0x1d0>)
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	9200      	str	r2, [sp, #0]
 8007e2e:	4b6c      	ldr	r3, [pc, #432]	; (8007fe0 <VL53L0X_StartMeasurement+0x1d4>)
 8007e30:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007e34:	4621      	mov	r1, r4
 8007e36:	2001      	movs	r0, #1
 8007e38:	f004 f95a 	bl	800c0f0 <trace_print_module_function>

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007e3c:	f107 030e 	add.w	r3, r7, #14
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fe ffe2 	bl	8006e0c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007e48:	2201      	movs	r2, #1
 8007e4a:	2180      	movs	r1, #128	; 0x80
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fe f9cf 	bl	80061f0 <VL53L0X_WrByte>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e56:	2201      	movs	r2, #1
 8007e58:	21ff      	movs	r1, #255	; 0xff
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7fe f9c8 	bl	80061f0 <VL53L0X_WrByte>
 8007e60:	4603      	mov	r3, r0
 8007e62:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007e64:	2200      	movs	r2, #0
 8007e66:	2100      	movs	r1, #0
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fe f9c1 	bl	80061f0 <VL53L0X_WrByte>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007e78:	461a      	mov	r2, r3
 8007e7a:	2191      	movs	r1, #145	; 0x91
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fe f9b7 	bl	80061f0 <VL53L0X_WrByte>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007e86:	2201      	movs	r2, #1
 8007e88:	2100      	movs	r1, #0
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fe f9b0 	bl	80061f0 <VL53L0X_WrByte>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007e94:	2200      	movs	r2, #0
 8007e96:	21ff      	movs	r1, #255	; 0xff
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7fe f9a9 	bl	80061f0 <VL53L0X_WrByte>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2180      	movs	r1, #128	; 0x80
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fe f9a2 	bl	80061f0 <VL53L0X_WrByte>
 8007eac:	4603      	mov	r3, r0
 8007eae:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d054      	beq.n	8007f60 <VL53L0X_StartMeasurement+0x154>
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	dc6c      	bgt.n	8007f94 <VL53L0X_StartMeasurement+0x188>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <VL53L0X_StartMeasurement+0xb8>
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d034      	beq.n	8007f2c <VL53L0X_StartMeasurement+0x120>
 8007ec2:	e067      	b.n	8007f94 <VL53L0X_StartMeasurement+0x188>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7fe f991 	bl	80061f0 <VL53L0X_WrByte>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007ed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d15d      	bne.n	8007f9a <VL53L0X_StartMeasurement+0x18e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <VL53L0X_StartMeasurement+0xee>
					Status = VL53L0X_RdByte(Dev,
 8007ee8:	f107 030d 	add.w	r3, r7, #13
 8007eec:	461a      	mov	r2, r3
 8007eee:	2100      	movs	r1, #0
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7fe f9ff 	bl	80062f4 <VL53L0X_RdByte>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3301      	adds	r3, #1
 8007efe:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007f00:	7b7a      	ldrb	r2, [r7, #13]
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4013      	ands	r3, r2
 8007f06:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007f08:	7bfa      	ldrb	r2, [r7, #15]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d107      	bne.n	8007f1e <VL53L0X_StartMeasurement+0x112>
				&& (Status == VL53L0X_ERROR_NONE)
 8007f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <VL53L0X_StartMeasurement+0x112>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007f1c:	d3e1      	bcc.n	8007ee2 <VL53L0X_StartMeasurement+0xd6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007f24:	d339      	bcc.n	8007f9a <VL53L0X_StartMeasurement+0x18e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007f26:	23f9      	movs	r3, #249	; 0xf9
 8007f28:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007f2a:	e036      	b.n	8007f9a <VL53L0X_StartMeasurement+0x18e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d105      	bne.n	8007f40 <VL53L0X_StartMeasurement+0x134>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007f34:	2101      	movs	r1, #1
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff ff02 	bl	8007d40 <VL53L0X_CheckAndLoadInterruptSettings>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007f40:	2202      	movs	r2, #2
 8007f42:	2100      	movs	r1, #0
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7fe f953 	bl	80061f0 <VL53L0X_WrByte>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d123      	bne.n	8007f9e <VL53L0X_StartMeasurement+0x192>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2204      	movs	r2, #4
 8007f5a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007f5e:	e01e      	b.n	8007f9e <VL53L0X_StartMeasurement+0x192>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d105      	bne.n	8007f74 <VL53L0X_StartMeasurement+0x168>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007f68:	2101      	movs	r1, #1
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fee8 	bl	8007d40 <VL53L0X_CheckAndLoadInterruptSettings>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007f74:	2204      	movs	r2, #4
 8007f76:	2100      	movs	r1, #0
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7fe f939 	bl	80061f0 <VL53L0X_WrByte>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <VL53L0X_StartMeasurement+0x196>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007f92:	e006      	b.n	8007fa2 <VL53L0X_StartMeasurement+0x196>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007f94:	23f8      	movs	r3, #248	; 0xf8
 8007f96:	75fb      	strb	r3, [r7, #23]
 8007f98:	e004      	b.n	8007fa4 <VL53L0X_StartMeasurement+0x198>
		break;
 8007f9a:	bf00      	nop
 8007f9c:	e002      	b.n	8007fa4 <VL53L0X_StartMeasurement+0x198>
		break;
 8007f9e:	bf00      	nop
 8007fa0:	e000      	b.n	8007fa4 <VL53L0X_StartMeasurement+0x198>
		break;
 8007fa2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <VL53L0X_StartMeasurement+0x1cc>)
 8007fa6:	681c      	ldr	r4, [r3, #0]
 8007fa8:	f004 f920 	bl	800c1ec <HAL_GetTick>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fb4:	9302      	str	r3, [sp, #8]
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <VL53L0X_StartMeasurement+0x1d0>)
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	9200      	str	r2, [sp, #0]
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <VL53L0X_StartMeasurement+0x1d8>)
 8007fbe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	2001      	movs	r0, #1
 8007fc6:	f004 f893 	bl	800c0f0 <trace_print_module_function>
	return Status;
 8007fca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd90      	pop	{r4, r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000634 	.word	0x20000634
 8007fdc:	0801160c 	.word	0x0801160c
 8007fe0:	08010f5c 	.word	0x08010f5c
 8007fe4:	08010f70 	.word	0x08010f70

08007fe8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007fe8:	b590      	push	{r4, r7, lr}
 8007fea:	b089      	sub	sp, #36	; 0x24
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");
 8007ff6:	4b2e      	ldr	r3, [pc, #184]	; (80080b0 <VL53L0X_GetMeasurementDataReady+0xc8>)
 8007ff8:	681c      	ldr	r4, [r3, #0]
 8007ffa:	f004 f8f7 	bl	800c1ec <HAL_GetTick>
 8007ffe:	4603      	mov	r3, r0
 8008000:	461a      	mov	r2, r3
 8008002:	4b2c      	ldr	r3, [pc, #176]	; (80080b4 <VL53L0X_GetMeasurementDataReady+0xcc>)
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	9200      	str	r2, [sp, #0]
 8008008:	4b2b      	ldr	r3, [pc, #172]	; (80080b8 <VL53L0X_GetMeasurementDataReady+0xd0>)
 800800a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800800e:	4621      	mov	r1, r4
 8008010:	2001      	movs	r0, #1
 8008012:	f004 f86d 	bl	800c0f0 <trace_print_module_function>

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800801c:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	2b04      	cmp	r3, #4
 8008022:	d112      	bne.n	800804a <VL53L0X_GetMeasurementDataReady+0x62>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008024:	f107 0308 	add.w	r3, r7, #8
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fc14 	bl	8008858 <VL53L0X_GetInterruptMaskStatus>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d103      	bne.n	8008042 <VL53L0X_GetMeasurementDataReady+0x5a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	e01c      	b.n	800807c <VL53L0X_GetMeasurementDataReady+0x94>
		else
			*pMeasurementDataReady = 0;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
 8008048:	e018      	b.n	800807c <VL53L0X_GetMeasurementDataReady+0x94>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800804a:	f107 030d 	add.w	r3, r7, #13
 800804e:	461a      	mov	r2, r3
 8008050:	2114      	movs	r1, #20
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7fe f94e 	bl	80062f4 <VL53L0X_RdByte>
 8008058:	4603      	mov	r3, r0
 800805a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800805c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10b      	bne.n	800807c <VL53L0X_GetMeasurementDataReady+0x94>
			if (SysRangeStatusRegister & 0x01)
 8008064:	7b7b      	ldrb	r3, [r7, #13]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <VL53L0X_GetMeasurementDataReady+0x8e>
				*pMeasurementDataReady = 1;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e002      	b.n	800807c <VL53L0X_GetMeasurementDataReady+0x94>
			else
				*pMeasurementDataReady = 0;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
 800807c:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <VL53L0X_GetMeasurementDataReady+0xc8>)
 800807e:	681c      	ldr	r4, [r3, #0]
 8008080:	f004 f8b4 	bl	800c1ec <HAL_GetTick>
 8008084:	4603      	mov	r3, r0
 8008086:	461a      	mov	r2, r3
 8008088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800808c:	9302      	str	r3, [sp, #8]
 800808e:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <VL53L0X_GetMeasurementDataReady+0xcc>)
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	9200      	str	r2, [sp, #0]
 8008094:	4b09      	ldr	r3, [pc, #36]	; (80080bc <VL53L0X_GetMeasurementDataReady+0xd4>)
 8008096:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800809a:	4621      	mov	r1, r4
 800809c:	2001      	movs	r0, #1
 800809e:	f004 f827 	bl	800c0f0 <trace_print_module_function>
	return Status;
 80080a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd90      	pop	{r4, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20000634 	.word	0x20000634
 80080b4:	08011628 	.word	0x08011628
 80080b8:	08010f5c 	.word	0x08010f5c
 80080bc:	08010f70 	.word	0x08010f70

080080c0 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80080c0:	b5b0      	push	{r4, r5, r7, lr}
 80080c2:	b098      	sub	sp, #96	; 0x60
 80080c4:	af04      	add	r7, sp, #16
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint16_t XtalkRangeMilliMeter;
	uint16_t LinearityCorrectiveGain;
	uint8_t localBuffer[12];
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");
 80080d0:	4b9e      	ldr	r3, [pc, #632]	; (800834c <VL53L0X_GetRangingMeasurementData+0x28c>)
 80080d2:	681c      	ldr	r4, [r3, #0]
 80080d4:	f004 f88a 	bl	800c1ec <HAL_GetTick>
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	4b9c      	ldr	r3, [pc, #624]	; (8008350 <VL53L0X_GetRangingMeasurementData+0x290>)
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	9200      	str	r2, [sp, #0]
 80080e2:	4b9c      	ldr	r3, [pc, #624]	; (8008354 <VL53L0X_GetRangingMeasurementData+0x294>)
 80080e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80080e8:	4621      	mov	r1, r4
 80080ea:	2001      	movs	r0, #1
 80080ec:	f004 f800 	bl	800c0f0 <trace_print_module_function>
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80080f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80080f4:	230c      	movs	r3, #12
 80080f6:	2114      	movs	r1, #20
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fe f84d 	bl	8006198 <VL53L0X_ReadMulti>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008104:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008108:	2b00      	cmp	r3, #0
 800810a:	f040 80d1 	bne.w	80082b0 <VL53L0X_GetRangingMeasurementData+0x1f0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2200      	movs	r2, #0
 8008112:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800811a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800811e:	b29b      	uxth	r3, r3
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	b29a      	uxth	r2, r3
 8008124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008128:	b29b      	uxth	r3, r3
 800812a:	4413      	add	r3, r2
 800812c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008136:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800813a:	b29b      	uxth	r3, r3
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	b29a      	uxth	r2, r3
 8008140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008144:	b29b      	uxth	r3, r3
 8008146:	4413      	add	r3, r2
 8008148:	b29b      	uxth	r3, r3
 800814a:	025b      	lsls	r3, r3, #9
 800814c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008152:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008154:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008158:	b29b      	uxth	r3, r3
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	b29a      	uxth	r2, r3
 800815e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008162:	b29b      	uxth	r3, r3
 8008164:	4413      	add	r3, r2
 8008166:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800816a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800816e:	025b      	lsls	r3, r3, #9
 8008170:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008176:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800817a:	b29b      	uxth	r3, r3
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	b29a      	uxth	r2, r3
 8008180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008184:	b29b      	uxth	r3, r3
 8008186:	4413      	add	r3, r2
 8008188:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008192:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008194:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80081a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80081aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80081ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081b4:	d046      	beq.n	8008244 <VL53L0X_GetRangingMeasurementData+0x184>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80081b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081b8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80081bc:	fb02 f303 	mul.w	r3, r2, r3
 80081c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80081c4:	4a64      	ldr	r2, [pc, #400]	; (8008358 <VL53L0X_GetRangingMeasurementData+0x298>)
 80081c6:	fb82 1203 	smull	r1, r2, r2, r3
 80081ca:	1192      	asrs	r2, r2, #6
 80081cc:	17db      	asrs	r3, r3, #31
 80081ce:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80081d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	7f1b      	ldrb	r3, [r3, #28]
 80081de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80081e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d02c      	beq.n	8008244 <VL53L0X_GetRangingMeasurementData+0x184>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80081ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081ec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80081f0:	fb02 f303 	mul.w	r3, r2, r3
 80081f4:	121a      	asrs	r2, r3, #8
					<= 0) {
 80081f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d10d      	bne.n	8008218 <VL53L0X_GetRangingMeasurementData+0x158>
					if (RangeFractionalEnable)
 80081fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <VL53L0X_GetRangingMeasurementData+0x14e>
						XtalkRangeMilliMeter = 8888;
 8008204:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800820c:	e016      	b.n	800823c <VL53L0X_GetRangingMeasurementData+0x17c>
					else
						XtalkRangeMilliMeter = 8888
 800820e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008212:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008216:	e011      	b.n	800823c <VL53L0X_GetRangingMeasurementData+0x17c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008218:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800821c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800821e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008222:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008224:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008228:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800822c:	121b      	asrs	r3, r3, #8
 800822e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008232:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008234:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008238:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800823c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008240:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008244:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00d      	beq.n	8008268 <VL53L0X_GetRangingMeasurementData+0x1a8>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800824c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008250:	089b      	lsrs	r3, r3, #2
 8008252:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008258:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800825c:	b2db      	uxtb	r3, r3
 800825e:	019b      	lsls	r3, r3, #6
 8008260:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	75da      	strb	r2, [r3, #23]
 8008266:	e006      	b.n	8008276 <VL53L0X_GetRangingMeasurementData+0x1b6>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800826e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2200      	movs	r2, #0
 8008274:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008276:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800827a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800827e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	4613      	mov	r3, r2
 800828a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f003 fd03 	bl	800bc98 <VL53L0X_get_pal_range_status>
 8008292:	4603      	mov	r3, r0
 8008294:	461a      	mov	r2, r3
 8008296:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800829a:	4313      	orrs	r3, r2
 800829c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80082a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <VL53L0X_GetRangingMeasurementData+0x1f0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80082a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082b0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d12f      	bne.n	8008318 <VL53L0X_GetRangingMeasurementData+0x258>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f107 040c 	add.w	r4, r7, #12
 80082be:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80082c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80082d2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80082d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80082e0:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80082e6:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80082ec:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80082f2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80082f8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80082fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008308:	f107 050c 	add.w	r5, r7, #12
 800830c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800830e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008314:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
 8008318:	4b0c      	ldr	r3, [pc, #48]	; (800834c <VL53L0X_GetRangingMeasurementData+0x28c>)
 800831a:	681c      	ldr	r4, [r3, #0]
 800831c:	f003 ff66 	bl	800c1ec <HAL_GetTick>
 8008320:	4603      	mov	r3, r0
 8008322:	461a      	mov	r2, r3
 8008324:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008328:	9302      	str	r3, [sp, #8]
 800832a:	4b09      	ldr	r3, [pc, #36]	; (8008350 <VL53L0X_GetRangingMeasurementData+0x290>)
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	9200      	str	r2, [sp, #0]
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <VL53L0X_GetRangingMeasurementData+0x29c>)
 8008332:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008336:	4621      	mov	r1, r4
 8008338:	2001      	movs	r0, #1
 800833a:	f003 fed9 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800833e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008342:	4618      	mov	r0, r3
 8008344:	3750      	adds	r7, #80	; 0x50
 8008346:	46bd      	mov	sp, r7
 8008348:	bdb0      	pop	{r4, r5, r7, pc}
 800834a:	bf00      	nop
 800834c:	20000634 	.word	0x20000634
 8008350:	08011648 	.word	0x08011648
 8008354:	08010f5c 	.word	0x08010f5c
 8008358:	10624dd3 	.word	0x10624dd3
 800835c:	08010f70 	.word	0x08010f70

08008360 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b089      	sub	sp, #36	; 0x24
 8008364:	af04      	add	r7, sp, #16
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");
 800836e:	4b26      	ldr	r3, [pc, #152]	; (8008408 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 8008370:	681c      	ldr	r4, [r3, #0]
 8008372:	f003 ff3b 	bl	800c1ec <HAL_GetTick>
 8008376:	4603      	mov	r3, r0
 8008378:	461a      	mov	r2, r3
 800837a:	4b24      	ldr	r3, [pc, #144]	; (800840c <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	9200      	str	r2, [sp, #0]
 8008380:	4b23      	ldr	r3, [pc, #140]	; (8008410 <VL53L0X_PerformSingleRangingMeasurement+0xb0>)
 8008382:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008386:	4621      	mov	r1, r4
 8008388:	2001      	movs	r0, #1
 800838a:	f003 feb1 	bl	800c0f0 <trace_print_module_function>

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fe fce5 	bl	8006d60 <VL53L0X_SetDeviceMode>
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800839a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d104      	bne.n	80083ac <VL53L0X_PerformSingleRangingMeasurement+0x4c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fc2a 	bl	8007bfc <VL53L0X_PerformSingleMeasurement>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80083ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d105      	bne.n	80083c0 <VL53L0X_PerformSingleRangingMeasurement+0x60>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff fe82 	bl	80080c0 <VL53L0X_GetRangingMeasurementData>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80083c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d105      	bne.n	80083d4 <VL53L0X_PerformSingleRangingMeasurement+0x74>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f9d8 	bl	8008780 <VL53L0X_ClearInterruptMask>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
 80083d4:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <VL53L0X_PerformSingleRangingMeasurement+0xa8>)
 80083d6:	681c      	ldr	r4, [r3, #0]
 80083d8:	f003 ff08 	bl	800c1ec <HAL_GetTick>
 80083dc:	4603      	mov	r3, r0
 80083de:	461a      	mov	r2, r3
 80083e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <VL53L0X_PerformSingleRangingMeasurement+0xac>)
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	9200      	str	r2, [sp, #0]
 80083ec:	4b09      	ldr	r3, [pc, #36]	; (8008414 <VL53L0X_PerformSingleRangingMeasurement+0xb4>)
 80083ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80083f2:	4621      	mov	r1, r4
 80083f4:	2001      	movs	r0, #1
 80083f6:	f003 fe7b 	bl	800c0f0 <trace_print_module_function>
	return Status;
 80083fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop
 8008408:	20000634 	.word	0x20000634
 800840c:	0801166c 	.word	0x0801166c
 8008410:	08010f5c 	.word	0x08010f5c
 8008414:	08010f70 	.word	0x08010f70

08008418 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b089      	sub	sp, #36	; 0x24
 800841c:	af04      	add	r7, sp, #16
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	4608      	mov	r0, r1
 8008422:	4611      	mov	r1, r2
 8008424:	461a      	mov	r2, r3
 8008426:	4603      	mov	r3, r0
 8008428:	70fb      	strb	r3, [r7, #3]
 800842a:	460b      	mov	r3, r1
 800842c:	70bb      	strb	r3, [r7, #2]
 800842e:	4613      	mov	r3, r2
 8008430:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008432:	2300      	movs	r3, #0
 8008434:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");
 8008436:	4b9d      	ldr	r3, [pc, #628]	; (80086ac <VL53L0X_SetGpioConfig+0x294>)
 8008438:	681c      	ldr	r4, [r3, #0]
 800843a:	f003 fed7 	bl	800c1ec <HAL_GetTick>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	4b9b      	ldr	r3, [pc, #620]	; (80086b0 <VL53L0X_SetGpioConfig+0x298>)
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	9200      	str	r2, [sp, #0]
 8008448:	4b9a      	ldr	r3, [pc, #616]	; (80086b4 <VL53L0X_SetGpioConfig+0x29c>)
 800844a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800844e:	4621      	mov	r1, r4
 8008450:	2001      	movs	r0, #1
 8008452:	f003 fe4d 	bl	800c0f0 <trace_print_module_function>

	if (Pin != 0) {
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <VL53L0X_SetGpioConfig+0x4a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800845c:	23f6      	movs	r3, #246	; 0xf6
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	e10a      	b.n	8008678 <VL53L0X_SetGpioConfig+0x260>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008462:	78bb      	ldrb	r3, [r7, #2]
 8008464:	2b14      	cmp	r3, #20
 8008466:	d111      	bne.n	800848c <VL53L0X_SetGpioConfig+0x74>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d102      	bne.n	8008476 <VL53L0X_SetGpioConfig+0x5e>
			data = 0x10;
 8008470:	2310      	movs	r3, #16
 8008472:	73bb      	strb	r3, [r7, #14]
 8008474:	e001      	b.n	800847a <VL53L0X_SetGpioConfig+0x62>
		else
			data = 1;
 8008476:	2301      	movs	r3, #1
 8008478:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	461a      	mov	r2, r3
 800847e:	2184      	movs	r1, #132	; 0x84
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7fd feb5 	bl	80061f0 <VL53L0X_WrByte>
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]
 800848a:	e0f5      	b.n	8008678 <VL53L0X_SetGpioConfig+0x260>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800848c:	78bb      	ldrb	r3, [r7, #2]
 800848e:	2b15      	cmp	r3, #21
 8008490:	f040 8097 	bne.w	80085c2 <VL53L0X_SetGpioConfig+0x1aa>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008494:	2201      	movs	r2, #1
 8008496:	21ff      	movs	r1, #255	; 0xff
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7fd fea9 	bl	80061f0 <VL53L0X_WrByte>
 800849e:	4603      	mov	r3, r0
 80084a0:	461a      	mov	r2, r3
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80084a8:	2200      	movs	r2, #0
 80084aa:	2100      	movs	r1, #0
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7fd fe9f 	bl	80061f0 <VL53L0X_WrByte>
 80084b2:	4603      	mov	r3, r0
 80084b4:	461a      	mov	r2, r3
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084bc:	2200      	movs	r2, #0
 80084be:	21ff      	movs	r1, #255	; 0xff
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7fd fe95 	bl	80061f0 <VL53L0X_WrByte>
 80084c6:	4603      	mov	r3, r0
 80084c8:	461a      	mov	r2, r3
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80084d0:	2201      	movs	r2, #1
 80084d2:	2180      	movs	r1, #128	; 0x80
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7fd fe8b 	bl	80061f0 <VL53L0X_WrByte>
 80084da:	4603      	mov	r3, r0
 80084dc:	461a      	mov	r2, r3
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80084e4:	2202      	movs	r2, #2
 80084e6:	2185      	movs	r1, #133	; 0x85
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7fd fe81 	bl	80061f0 <VL53L0X_WrByte>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80084f8:	2204      	movs	r2, #4
 80084fa:	21ff      	movs	r1, #255	; 0xff
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fd fe77 	bl	80061f0 <VL53L0X_WrByte>
 8008502:	4603      	mov	r3, r0
 8008504:	461a      	mov	r2, r3
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	4313      	orrs	r3, r2
 800850a:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800850c:	2200      	movs	r2, #0
 800850e:	21cd      	movs	r1, #205	; 0xcd
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7fd fe6d 	bl	80061f0 <VL53L0X_WrByte>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4313      	orrs	r3, r2
 800851e:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008520:	2211      	movs	r2, #17
 8008522:	21cc      	movs	r1, #204	; 0xcc
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7fd fe63 	bl	80061f0 <VL53L0X_WrByte>
 800852a:	4603      	mov	r3, r0
 800852c:	461a      	mov	r2, r3
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	4313      	orrs	r3, r2
 8008532:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008534:	2207      	movs	r2, #7
 8008536:	21ff      	movs	r1, #255	; 0xff
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7fd fe59 	bl	80061f0 <VL53L0X_WrByte>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	4313      	orrs	r3, r2
 8008546:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008548:	2200      	movs	r2, #0
 800854a:	21be      	movs	r1, #190	; 0xbe
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7fd fe4f 	bl	80061f0 <VL53L0X_WrByte>
 8008552:	4603      	mov	r3, r0
 8008554:	461a      	mov	r2, r3
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	4313      	orrs	r3, r2
 800855a:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800855c:	2206      	movs	r2, #6
 800855e:	21ff      	movs	r1, #255	; 0xff
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fd fe45 	bl	80061f0 <VL53L0X_WrByte>
 8008566:	4603      	mov	r3, r0
 8008568:	461a      	mov	r2, r3
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	4313      	orrs	r3, r2
 800856e:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008570:	2209      	movs	r2, #9
 8008572:	21cc      	movs	r1, #204	; 0xcc
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fd fe3b 	bl	80061f0 <VL53L0X_WrByte>
 800857a:	4603      	mov	r3, r0
 800857c:	461a      	mov	r2, r3
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	4313      	orrs	r3, r2
 8008582:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008584:	2200      	movs	r2, #0
 8008586:	21ff      	movs	r1, #255	; 0xff
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7fd fe31 	bl	80061f0 <VL53L0X_WrByte>
 800858e:	4603      	mov	r3, r0
 8008590:	461a      	mov	r2, r3
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	4313      	orrs	r3, r2
 8008596:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008598:	2201      	movs	r2, #1
 800859a:	21ff      	movs	r1, #255	; 0xff
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7fd fe27 	bl	80061f0 <VL53L0X_WrByte>
 80085a2:	4603      	mov	r3, r0
 80085a4:	461a      	mov	r2, r3
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80085ac:	2200      	movs	r2, #0
 80085ae:	2100      	movs	r1, #0
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7fd fe1d 	bl	80061f0 <VL53L0X_WrByte>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	4313      	orrs	r3, r2
 80085be:	73fb      	strb	r3, [r7, #15]
 80085c0:	e05a      	b.n	8008678 <VL53L0X_SetGpioConfig+0x260>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80085c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d122      	bne.n	8008610 <VL53L0X_SetGpioConfig+0x1f8>
			switch (Functionality) {
 80085ca:	787b      	ldrb	r3, [r7, #1]
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d81c      	bhi.n	800860a <VL53L0X_SetGpioConfig+0x1f2>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <VL53L0X_SetGpioConfig+0x1c0>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085ed 	.word	0x080085ed
 80085dc:	080085f3 	.word	0x080085f3
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	080085ff 	.word	0x080085ff
 80085e8:	08008605 	.word	0x08008605
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]
				break;
 80085f0:	e00f      	b.n	8008612 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80085f2:	2301      	movs	r3, #1
 80085f4:	73bb      	strb	r3, [r7, #14]
				break;
 80085f6:	e00c      	b.n	8008612 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80085f8:	2302      	movs	r3, #2
 80085fa:	73bb      	strb	r3, [r7, #14]
				break;
 80085fc:	e009      	b.n	8008612 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80085fe:	2303      	movs	r3, #3
 8008600:	73bb      	strb	r3, [r7, #14]
				break;
 8008602:	e006      	b.n	8008612 <VL53L0X_SetGpioConfig+0x1fa>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008604:	2304      	movs	r3, #4
 8008606:	73bb      	strb	r3, [r7, #14]
				break;
 8008608:	e003      	b.n	8008612 <VL53L0X_SetGpioConfig+0x1fa>
			default:
				Status =
 800860a:	23f5      	movs	r3, #245	; 0xf5
 800860c:	73fb      	strb	r3, [r7, #15]
 800860e:	e000      	b.n	8008612 <VL53L0X_SetGpioConfig+0x1fa>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008610:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d107      	bne.n	800862a <VL53L0X_SetGpioConfig+0x212>
			Status = VL53L0X_WrByte(Dev,
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	461a      	mov	r2, r3
 800861e:	210a      	movs	r1, #10
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7fd fde5 	bl	80061f0 <VL53L0X_WrByte>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800862a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d110      	bne.n	8008654 <VL53L0X_SetGpioConfig+0x23c>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008632:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <VL53L0X_SetGpioConfig+0x228>
				data = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	73bb      	strb	r3, [r7, #14]
 800863e:	e001      	b.n	8008644 <VL53L0X_SetGpioConfig+0x22c>
			else
				data = (uint8_t)(1 << 4);
 8008640:	2310      	movs	r3, #16
 8008642:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	22ef      	movs	r2, #239	; 0xef
 8008648:	2184      	movs	r1, #132	; 0x84
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7fd fe1e 	bl	800628c <VL53L0X_UpdateByte>
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d103      	bne.n	8008664 <VL53L0X_SetGpioConfig+0x24c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	787a      	ldrb	r2, [r7, #1]
 8008660:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d105      	bne.n	8008678 <VL53L0X_SetGpioConfig+0x260>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800866c:	2100      	movs	r1, #0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f886 	bl	8008780 <VL53L0X_ClearInterruptMask>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <VL53L0X_SetGpioConfig+0x294>)
 800867a:	681c      	ldr	r4, [r3, #0]
 800867c:	f003 fdb6 	bl	800c1ec <HAL_GetTick>
 8008680:	4603      	mov	r3, r0
 8008682:	461a      	mov	r2, r3
 8008684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008688:	9302      	str	r3, [sp, #8]
 800868a:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <VL53L0X_SetGpioConfig+0x298>)
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	9200      	str	r2, [sp, #0]
 8008690:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <VL53L0X_SetGpioConfig+0x2a0>)
 8008692:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008696:	4621      	mov	r1, r4
 8008698:	2001      	movs	r0, #1
 800869a:	f003 fd29 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800869e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd90      	pop	{r4, r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000634 	.word	0x20000634
 80086b0:	08011694 	.word	0x08011694
 80086b4:	08010f5c 	.word	0x08010f5c
 80086b8:	08010f70 	.word	0x08010f70

080086bc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80086bc:	b590      	push	{r4, r7, lr}
 80086be:	b08b      	sub	sp, #44	; 0x2c
 80086c0:	af04      	add	r7, sp, #16
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	607a      	str	r2, [r7, #4]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	460b      	mov	r3, r1
 80086ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");
 80086d0:	4b26      	ldr	r3, [pc, #152]	; (800876c <VL53L0X_GetInterruptThresholds+0xb0>)
 80086d2:	681c      	ldr	r4, [r3, #0]
 80086d4:	f003 fd8a 	bl	800c1ec <HAL_GetTick>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	4b24      	ldr	r3, [pc, #144]	; (8008770 <VL53L0X_GetInterruptThresholds+0xb4>)
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	9200      	str	r2, [sp, #0]
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <VL53L0X_GetInterruptThresholds+0xb8>)
 80086e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80086e8:	4621      	mov	r1, r4
 80086ea:	2001      	movs	r0, #1
 80086ec:	f003 fd00 	bl	800c0f0 <trace_print_module_function>

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80086f0:	f107 0314 	add.w	r3, r7, #20
 80086f4:	461a      	mov	r2, r3
 80086f6:	210e      	movs	r1, #14
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7fd fe25 	bl	8006348 <VL53L0X_RdWord>
 80086fe:	4603      	mov	r3, r0
 8008700:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008702:	8abb      	ldrh	r3, [r7, #20]
 8008704:	045b      	lsls	r3, r3, #17
 8008706:	461a      	mov	r2, r3
 8008708:	4b1b      	ldr	r3, [pc, #108]	; (8008778 <VL53L0X_GetInterruptThresholds+0xbc>)
 800870a:	4013      	ands	r3, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008710:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10f      	bne.n	8008738 <VL53L0X_GetInterruptThresholds+0x7c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008718:	f107 0314 	add.w	r3, r7, #20
 800871c:	461a      	mov	r2, r3
 800871e:	210c      	movs	r1, #12
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f7fd fe11 	bl	8006348 <VL53L0X_RdWord>
 8008726:	4603      	mov	r3, r0
 8008728:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800872a:	8abb      	ldrh	r3, [r7, #20]
 800872c:	045b      	lsls	r3, r3, #17
 800872e:	461a      	mov	r2, r3
 8008730:	4b11      	ldr	r3, [pc, #68]	; (8008778 <VL53L0X_GetInterruptThresholds+0xbc>)
 8008732:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
 8008738:	4b0c      	ldr	r3, [pc, #48]	; (800876c <VL53L0X_GetInterruptThresholds+0xb0>)
 800873a:	681c      	ldr	r4, [r3, #0]
 800873c:	f003 fd56 	bl	800c1ec <HAL_GetTick>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
 8008744:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008748:	9302      	str	r3, [sp, #8]
 800874a:	4b09      	ldr	r3, [pc, #36]	; (8008770 <VL53L0X_GetInterruptThresholds+0xb4>)
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	9200      	str	r2, [sp, #0]
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <VL53L0X_GetInterruptThresholds+0xc0>)
 8008752:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008756:	4621      	mov	r1, r4
 8008758:	2001      	movs	r0, #1
 800875a:	f003 fcc9 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800875e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008762:	4618      	mov	r0, r3
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	bd90      	pop	{r4, r7, pc}
 800876a:	bf00      	nop
 800876c:	20000634 	.word	0x20000634
 8008770:	080116ac 	.word	0x080116ac
 8008774:	08010f5c 	.word	0x08010f5c
 8008778:	1ffe0000 	.word	0x1ffe0000
 800877c:	08010f70 	.word	0x08010f70

08008780 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008780:	b590      	push	{r4, r7, lr}
 8008782:	b089      	sub	sp, #36	; 0x24
 8008784:	af04      	add	r7, sp, #16
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");
 800878e:	4b2e      	ldr	r3, [pc, #184]	; (8008848 <VL53L0X_ClearInterruptMask+0xc8>)
 8008790:	681c      	ldr	r4, [r3, #0]
 8008792:	f003 fd2b 	bl	800c1ec <HAL_GetTick>
 8008796:	4603      	mov	r3, r0
 8008798:	461a      	mov	r2, r3
 800879a:	4b2c      	ldr	r3, [pc, #176]	; (800884c <VL53L0X_ClearInterruptMask+0xcc>)
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	9200      	str	r2, [sp, #0]
 80087a0:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <VL53L0X_ClearInterruptMask+0xd0>)
 80087a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80087a6:	4621      	mov	r1, r4
 80087a8:	2001      	movs	r0, #1
 80087aa:	f003 fca1 	bl	800c0f0 <trace_print_module_function>

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80087b2:	2201      	movs	r2, #1
 80087b4:	210b      	movs	r1, #11
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fd fd1a 	bl	80061f0 <VL53L0X_WrByte>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80087c0:	2200      	movs	r2, #0
 80087c2:	210b      	movs	r1, #11
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7fd fd13 	bl	80061f0 <VL53L0X_WrByte>
 80087ca:	4603      	mov	r3, r0
 80087cc:	461a      	mov	r2, r3
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80087d4:	f107 030d 	add.w	r3, r7, #13
 80087d8:	461a      	mov	r2, r3
 80087da:	2113      	movs	r1, #19
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7fd fd89 	bl	80062f4 <VL53L0X_RdByte>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	3301      	adds	r3, #1
 80087f0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80087f2:	7b7b      	ldrb	r3, [r7, #13]
 80087f4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <VL53L0X_ClearInterruptMask+0x8a>
			&& (LoopCount < 3)
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d803      	bhi.n	800880a <VL53L0X_ClearInterruptMask+0x8a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0d3      	beq.n	80087b2 <VL53L0X_ClearInterruptMask+0x32>


	if (LoopCount >= 3)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <VL53L0X_ClearInterruptMask+0x94>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008810:	23f4      	movs	r3, #244	; 0xf4
 8008812:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 8008814:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <VL53L0X_ClearInterruptMask+0xc8>)
 8008816:	681c      	ldr	r4, [r3, #0]
 8008818:	f003 fce8 	bl	800c1ec <HAL_GetTick>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008824:	9302      	str	r3, [sp, #8]
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <VL53L0X_ClearInterruptMask+0xcc>)
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	9200      	str	r2, [sp, #0]
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <VL53L0X_ClearInterruptMask+0xd4>)
 800882e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008832:	4621      	mov	r1, r4
 8008834:	2001      	movs	r0, #1
 8008836:	f003 fc5b 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800883a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	bd90      	pop	{r4, r7, pc}
 8008846:	bf00      	nop
 8008848:	20000634 	.word	0x20000634
 800884c:	080116cc 	.word	0x080116cc
 8008850:	08010f5c 	.word	0x08010f5c
 8008854:	08010f70 	.word	0x08010f70

08008858 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008858:	b590      	push	{r4, r7, lr}
 800885a:	b089      	sub	sp, #36	; 0x24
 800885c:	af04      	add	r7, sp, #16
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");
 8008866:	4b1f      	ldr	r3, [pc, #124]	; (80088e4 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 8008868:	681c      	ldr	r4, [r3, #0]
 800886a:	f003 fcbf 	bl	800c1ec <HAL_GetTick>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <VL53L0X_GetInterruptMaskStatus+0x90>)
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	9200      	str	r2, [sp, #0]
 8008878:	4b1c      	ldr	r3, [pc, #112]	; (80088ec <VL53L0X_GetInterruptMaskStatus+0x94>)
 800887a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800887e:	4621      	mov	r1, r4
 8008880:	2001      	movs	r0, #1
 8008882:	f003 fc35 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008886:	f107 030e 	add.w	r3, r7, #14
 800888a:	461a      	mov	r2, r3
 800888c:	2113      	movs	r1, #19
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fd fd30 	bl	80062f4 <VL53L0X_RdByte>
 8008894:	4603      	mov	r3, r0
 8008896:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008898:	7bbb      	ldrb	r3, [r7, #14]
 800889a:	f003 0207 	and.w	r2, r3, #7
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	f003 0318 	and.w	r3, r3, #24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <VL53L0X_GetInterruptMaskStatus+0x58>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80088ac:	23fa      	movs	r3, #250	; 0xfa
 80088ae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
 80088b0:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <VL53L0X_GetInterruptMaskStatus+0x8c>)
 80088b2:	681c      	ldr	r4, [r3, #0]
 80088b4:	f003 fc9a 	bl	800c1ec <HAL_GetTick>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088c0:	9302      	str	r3, [sp, #8]
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <VL53L0X_GetInterruptMaskStatus+0x90>)
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	9200      	str	r2, [sp, #0]
 80088c8:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <VL53L0X_GetInterruptMaskStatus+0x98>)
 80088ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80088ce:	4621      	mov	r1, r4
 80088d0:	2001      	movs	r0, #1
 80088d2:	f003 fc0d 	bl	800c0f0 <trace_print_module_function>
	return Status;
 80088d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd90      	pop	{r4, r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000634 	.word	0x20000634
 80088e8:	080116e8 	.word	0x080116e8
 80088ec:	08010f5c 	.word	0x08010f5c
 80088f0:	08010f70 	.word	0x08010f70

080088f4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b08b      	sub	sp, #44	; 0x2c
 80088f8:	af04      	add	r7, sp, #16
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008900:	2300      	movs	r3, #0
 8008902:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");
 8008904:	4b17      	ldr	r3, [pc, #92]	; (8008964 <VL53L0X_PerformRefSpadManagement+0x70>)
 8008906:	681c      	ldr	r4, [r3, #0]
 8008908:	f003 fc70 	bl	800c1ec <HAL_GetTick>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	4b15      	ldr	r3, [pc, #84]	; (8008968 <VL53L0X_PerformRefSpadManagement+0x74>)
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	9200      	str	r2, [sp, #0]
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <VL53L0X_PerformRefSpadManagement+0x78>)
 8008918:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800891c:	4621      	mov	r1, r4
 800891e:	2001      	movs	r0, #1
 8008920:	f003 fbe6 	bl	800c0f0 <trace_print_module_function>

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	68b9      	ldr	r1, [r7, #8]
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fa1f 	bl	8008d6c <VL53L0X_perform_ref_spad_management>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <VL53L0X_PerformRefSpadManagement+0x70>)
 8008934:	681c      	ldr	r4, [r3, #0]
 8008936:	f003 fc59 	bl	800c1ec <HAL_GetTick>
 800893a:	4603      	mov	r3, r0
 800893c:	461a      	mov	r2, r3
 800893e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008942:	9302      	str	r3, [sp, #8]
 8008944:	4b08      	ldr	r3, [pc, #32]	; (8008968 <VL53L0X_PerformRefSpadManagement+0x74>)
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	9200      	str	r2, [sp, #0]
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <VL53L0X_PerformRefSpadManagement+0x7c>)
 800894c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008950:	4621      	mov	r1, r4
 8008952:	2001      	movs	r0, #1
 8008954:	f003 fbcc 	bl	800c0f0 <trace_print_module_function>

	return Status;
 8008958:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800895c:	4618      	mov	r0, r3
 800895e:	371c      	adds	r7, #28
 8008960:	46bd      	mov	sp, r7
 8008962:	bd90      	pop	{r4, r7, pc}
 8008964:	20000634 	.word	0x20000634
 8008968:	08011708 	.word	0x08011708
 800896c:	08010f5c 	.word	0x08010f5c
 8008970:	08010f70 	.word	0x08010f70

08008974 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008982:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008986:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800898c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	461a      	mov	r2, r3
 8008994:	2128      	movs	r1, #40	; 0x28
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7fd fcd6 	bl	8006348 <VL53L0X_RdWord>
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80089a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d11e      	bne.n	80089e6 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80089a8:	893b      	ldrh	r3, [r7, #8]
 80089aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80089b2:	893b      	ldrh	r3, [r7, #8]
 80089b4:	461a      	mov	r2, r3
 80089b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	dd0b      	ble.n	80089d6 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80089be:	893a      	ldrh	r2, [r7, #8]
 80089c0:	897b      	ldrh	r3, [r7, #10]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	b21b      	sxth	r3, r3
 80089c8:	461a      	mov	r2, r3
					* 250;
 80089ca:	23fa      	movs	r3, #250	; 0xfa
 80089cc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e007      	b.n	80089e6 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80089d6:	893b      	ldrh	r3, [r7, #8]
 80089d8:	b21b      	sxth	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	23fa      	movs	r3, #250	; 0xfa
 80089de:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80089e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b08b      	sub	sp, #44	; 0x2c
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	60f8      	str	r0, [r7, #12]
 80089fa:	60b9      	str	r1, [r7, #8]
 80089fc:	607a      	str	r2, [r7, #4]
 80089fe:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008a00:	2308      	movs	r3, #8
 8008a02:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0e:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a18:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a22:	69b9      	ldr	r1, [r7, #24]
 8008a24:	fb01 f202 	mul.w	r2, r1, r2
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a30:	e030      	b.n	8008a94 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	4413      	add	r3, r2
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d11e      	bne.n	8008a86 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8008a48:	7ffa      	ldrb	r2, [r7, #31]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	fa42 f303 	asr.w	r3, r2, r3
 8008a50:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008a56:	e016      	b.n	8008a86 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008a58:	7ffb      	ldrb	r3, [r7, #31]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00b      	beq.n	8008a7a <get_next_good_spad+0x88>
				success = 1;
 8008a62:	2301      	movs	r3, #1
 8008a64:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	fb03 f202 	mul.w	r2, r3, r2
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	4413      	add	r3, r2
 8008a72:	461a      	mov	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	601a      	str	r2, [r3, #0]
				break;
 8008a78:	e009      	b.n	8008a8e <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008a7a:	7ffb      	ldrb	r3, [r7, #31]
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	3301      	adds	r3, #1
 8008a84:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008a86:	6a3a      	ldr	r2, [r7, #32]
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d3e4      	bcc.n	8008a58 <get_next_good_spad+0x66>
				coarseIndex++) {
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	3301      	adds	r3, #1
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d202      	bcs.n	8008aa2 <get_next_good_spad+0xb0>
 8008a9c:	7fbb      	ldrb	r3, [r7, #30]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0c7      	beq.n	8008a32 <get_next_good_spad+0x40>
		}
	}
}
 8008aa2:	bf00      	nop
 8008aa4:	372c      	adds	r7, #44	; 0x2c
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	099b      	lsrs	r3, r3, #6
 8008ac0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008ac2:	4a07      	ldr	r2, [pc, #28]	; (8008ae0 <is_aperture+0x30>)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <is_aperture+0x22>
		isAperture = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20000624 	.word	0x20000624

08008ae4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b089      	sub	sp, #36	; 0x24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008af4:	2308      	movs	r3, #8
 8008af6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b0a:	69b9      	ldr	r1, [r7, #24]
 8008b0c:	fb01 f202 	mul.w	r2, r1, r2
 8008b10:	1a9b      	subs	r3, r3, r2
 8008b12:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d302      	bcc.n	8008b22 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008b1c:	23ce      	movs	r3, #206	; 0xce
 8008b1e:	77fb      	strb	r3, [r7, #31]
 8008b20:	e010      	b.n	8008b44 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	4413      	add	r3, r2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b25a      	sxtb	r2, r3
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	fa01 f303 	lsl.w	r3, r1, r3
 8008b34:	b25b      	sxtb	r3, r3
 8008b36:	4313      	orrs	r3, r2
 8008b38:	b259      	sxtb	r1, r3
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	4413      	add	r3, r2
 8008b40:	b2ca      	uxtb	r2, r1
 8008b42:	701a      	strb	r2, [r3, #0]

	return status;
 8008b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3724      	adds	r7, #36	; 0x24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008b5e:	2306      	movs	r3, #6
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	21b0      	movs	r1, #176	; 0xb0
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7fd fae7 	bl	8006138 <VL53L0X_WriteMulti>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008b84:	2306      	movs	r3, #6
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	21b0      	movs	r1, #176	; 0xb0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fd fb04 	bl	8006198 <VL53L0X_ReadMulti>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08c      	sub	sp, #48	; 0x30
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	460b      	mov	r3, r1
 8008bae:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bbc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bc2:	e02b      	b.n	8008c1c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008bc4:	f107 031c 	add.w	r3, r7, #28
 8008bc8:	6a3a      	ldr	r2, [r7, #32]
 8008bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff ff10 	bl	80089f2 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd8:	d103      	bne.n	8008be2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008bda:	23ce      	movs	r3, #206	; 0xce
 8008bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008be0:	e020      	b.n	8008c24 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	4413      	add	r3, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff ff60 	bl	8008ab0 <is_aperture>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	7afb      	ldrb	r3, [r7, #11]
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008bfa:	23ce      	movs	r3, #206	; 0xce
 8008bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008c00:	e010      	b.n	8008c24 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008c06:	6a3a      	ldr	r2, [r7, #32]
 8008c08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c0a:	6838      	ldr	r0, [r7, #0]
 8008c0c:	f7ff ff6a 	bl	8008ae4 <enable_spad_bit>
		currentSpad++;
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	3301      	adds	r3, #1
 8008c14:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	3301      	adds	r3, #1
 8008c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d3cf      	bcc.n	8008bc4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c26:	6a3a      	ldr	r2, [r7, #32]
 8008c28:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008c2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7ff ff8d 	bl	8008b54 <set_ref_spad_map>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008c40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d121      	bne.n	8008c8c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008c48:	f107 0314 	add.w	r3, r7, #20
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff ff93 	bl	8008b7a <get_ref_spad_map>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008c5e:	e011      	b.n	8008c84 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	4413      	add	r3, r2
 8008c66:	781a      	ldrb	r2, [r3, #0]
 8008c68:	f107 0114 	add.w	r1, r7, #20
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	440b      	add	r3, r1
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d003      	beq.n	8008c7e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008c76:	23ce      	movs	r3, #206	; 0xce
 8008c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8008c7c:	e006      	b.n	8008c8c <enable_ref_spads+0xec>
			}
			i++;
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	3301      	adds	r3, #1
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d3e9      	bcc.n	8008c60 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8008c8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3730      	adds	r7, #48	; 0x30
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	; 0x28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008cb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8008cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d107      	bne.n	8008cd0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008cc0:	22c0      	movs	r2, #192	; 0xc0
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7fd fa93 	bl	80061f0 <VL53L0X_WrByte>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d108      	bne.n	8008cea <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008cd8:	f107 0308 	add.w	r3, r7, #8
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff fb3e 	bl	8008360 <VL53L0X_PerformSingleRangingMeasurement>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8008cea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d107      	bne.n	8008d02 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	21ff      	movs	r1, #255	; 0xff
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7fd fa7a 	bl	80061f0 <VL53L0X_WrByte>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008d02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d107      	bne.n	8008d1a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	21b6      	movs	r1, #182	; 0xb6
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fd fb1a 	bl	8006348 <VL53L0X_RdWord>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8008d1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d22:	2200      	movs	r2, #0
 8008d24:	21ff      	movs	r1, #255	; 0xff
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fd fa62 	bl	80061f0 <VL53L0X_WrByte>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008d32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d112      	bne.n	8008d60 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2101      	movs	r1, #1
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fd fa54 	bl	80061f0 <VL53L0X_WrByte>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008d4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d5c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3728      	adds	r7, #40	; 0x28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8008d6c:	b590      	push	{r4, r7, lr}
 8008d6e:	b09d      	sub	sp, #116	; 0x74
 8008d70:	af06      	add	r7, sp, #24
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8008d7e:	23b4      	movs	r3, #180	; 0xb4
 8008d80:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008d84:	2303      	movs	r3, #3
 8008d86:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008d88:	232c      	movs	r3, #44	; 0x2c
 8008d8a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008d98:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008d9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8008da6:	2306      	movs	r3, #6
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008dd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dd6:	e009      	b.n	8008dec <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008de2:	2200      	movs	r2, #0
 8008de4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008de8:	3301      	adds	r3, #1
 8008dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d3f1      	bcc.n	8008dd8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008df4:	2201      	movs	r2, #1
 8008df6:	21ff      	movs	r1, #255	; 0xff
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7fd f9f9 	bl	80061f0 <VL53L0X_WrByte>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008e04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d107      	bne.n	8008e1c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	214f      	movs	r1, #79	; 0x4f
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7fd f9ed 	bl	80061f0 <VL53L0X_WrByte>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008e1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d107      	bne.n	8008e34 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008e24:	222c      	movs	r2, #44	; 0x2c
 8008e26:	214e      	movs	r1, #78	; 0x4e
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7fd f9e1 	bl	80061f0 <VL53L0X_WrByte>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008e34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d107      	bne.n	8008e4c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	21ff      	movs	r1, #255	; 0xff
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7fd f9d5 	bl	80061f0 <VL53L0X_WrByte>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008e4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d109      	bne.n	8008e68 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008e54:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008e58:	461a      	mov	r2, r3
 8008e5a:	21b6      	movs	r1, #182	; 0xb6
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7fd f9c7 	bl	80061f0 <VL53L0X_WrByte>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008e68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d107      	bne.n	8008e80 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008e70:	2200      	movs	r2, #0
 8008e72:	2180      	movs	r1, #128	; 0x80
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7fd f9bb 	bl	80061f0 <VL53L0X_WrByte>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008e80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008e88:	f107 0210 	add.w	r2, r7, #16
 8008e8c:	f107 0111 	add.w	r1, r7, #17
 8008e90:	2300      	movs	r3, #0
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 fbbb 	bl	800960e <VL53L0X_perform_ref_calibration>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008e9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d121      	bne.n	8008eea <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eac:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008ec2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008ec6:	f107 0218 	add.w	r2, r7, #24
 8008eca:	9204      	str	r2, [sp, #16]
 8008ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ece:	9203      	str	r2, [sp, #12]
 8008ed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ed2:	9202      	str	r2, [sp, #8]
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	4623      	mov	r3, r4
 8008edc:	4602      	mov	r2, r0
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fe5e 	bl	8008ba0 <enable_ref_spads>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008eea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d174      	bne.n	8008fdc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008ef6:	f107 0312 	add.w	r3, r7, #18
 8008efa:	4619      	mov	r1, r3
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff fecb 	bl	8008c98 <perform_ref_signal_measurement>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008f08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d161      	bne.n	8008fd4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008f10:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008f12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d25d      	bcs.n	8008fd4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f1c:	e009      	b.n	8008f32 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f2e:	3301      	adds	r3, #1
 8008f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d3f1      	bcc.n	8008f1e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008f3a:	e002      	b.n	8008f42 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f3e:	3301      	adds	r3, #1
 8008f40:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008f42:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f48:	4413      	add	r3, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff fdb0 	bl	8008ab0 <is_aperture>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d103      	bne.n	8008f5e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008f56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d3ee      	bcc.n	8008f3c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f64:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008f72:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008f76:	f107 0218 	add.w	r2, r7, #24
 8008f7a:	9204      	str	r2, [sp, #16]
 8008f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f7e:	9203      	str	r2, [sp, #12]
 8008f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f82:	9202      	str	r2, [sp, #8]
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	4623      	mov	r3, r4
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff fe06 	bl	8008ba0 <enable_ref_spads>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008f9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11b      	bne.n	8008fda <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008fa6:	f107 0312 	add.w	r3, r7, #18
 8008faa:	4619      	mov	r1, r3
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7ff fe73 	bl	8008c98 <perform_ref_signal_measurement>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008fb8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10c      	bne.n	8008fda <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008fc0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008fc2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d208      	bcs.n	8008fda <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008fd2:	e002      	b.n	8008fda <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd8:	e000      	b.n	8008fdc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008fda:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008fdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 80af 	bne.w	8009144 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008fe6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008fe8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008fea:	429a      	cmp	r2, r3
 8008fec:	f240 80aa 	bls.w	8009144 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009000:	f107 031c 	add.w	r3, r7, #28
 8009004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009006:	4618      	mov	r0, r3
 8009008:	f006 fd2c 	bl	800fa64 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800900c:	8a7b      	ldrh	r3, [r7, #18]
 800900e:	461a      	mov	r2, r3
 8009010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	bfb8      	it	lt
 8009018:	425b      	neglt	r3, r3
 800901a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009022:	e086      	b.n	8009132 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800902a:	f107 0314 	add.w	r3, r7, #20
 800902e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009032:	f7ff fcde 	bl	80089f2 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903c:	d103      	bne.n	8009046 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800903e:	23ce      	movs	r3, #206	; 0xce
 8009040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009044:	e07e      	b.n	8009144 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009046:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4413      	add	r3, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fd2e 	bl	8008ab0 <is_aperture>
 8009054:	4603      	mov	r3, r0
 8009056:	461a      	mov	r2, r3
 8009058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009064:	e06e      	b.n	8009144 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009068:	3301      	adds	r3, #1
 800906a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009076:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff fd32 	bl	8008ae4 <enable_spad_bit>
 8009080:	4603      	mov	r3, r0
 8009082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009086:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10c      	bne.n	80090a8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800908e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009090:	3301      	adds	r3, #1
 8009092:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800909a:	4619      	mov	r1, r3
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7ff fd59 	bl	8008b54 <set_ref_spad_map>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80090a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d146      	bne.n	800913e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80090b0:	f107 0312 	add.w	r3, r7, #18
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fdee 	bl	8008c98 <perform_ref_signal_measurement>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80090c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d13b      	bne.n	8009142 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80090ca:	8a7b      	ldrh	r3, [r7, #18]
 80090cc:	461a      	mov	r2, r3
 80090ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bfb8      	it	lt
 80090d6:	425b      	neglt	r3, r3
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80090da:	8a7b      	ldrh	r3, [r7, #18]
 80090dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090de:	429a      	cmp	r2, r3
 80090e0:	d21c      	bcs.n	800911c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80090e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d914      	bls.n	8009114 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80090ea:	f107 031c 	add.w	r3, r7, #28
 80090ee:	4619      	mov	r1, r3
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff fd2f 	bl	8008b54 <set_ref_spad_map>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009102:	f107 011c 	add.w	r1, r7, #28
 8009106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009108:	4618      	mov	r0, r3
 800910a:	f006 fcab 	bl	800fa64 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800910e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009110:	3b01      	subs	r3, #1
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800911a:	e00a      	b.n	8009132 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009126:	f107 031c 	add.w	r3, r7, #28
 800912a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800912c:	4618      	mov	r0, r3
 800912e:	f006 fc99 	bl	800fa64 <memcpy>
		while (!complete) {
 8009132:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009136:	2b00      	cmp	r3, #0
 8009138:	f43f af74 	beq.w	8009024 <VL53L0X_perform_ref_spad_management+0x2b8>
 800913c:	e002      	b.n	8009144 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009142:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009144:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009148:	2b00      	cmp	r3, #0
 800914a:	d115      	bne.n	8009178 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009150:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009158:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	781a      	ldrb	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8009178:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800917c:	4618      	mov	r0, r3
 800917e:	375c      	adds	r7, #92	; 0x5c
 8009180:	46bd      	mov	sp, r7
 8009182:	bd90      	pop	{r4, r7, pc}

08009184 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009184:	b590      	push	{r4, r7, lr}
 8009186:	b093      	sub	sp, #76	; 0x4c
 8009188:	af06      	add	r7, sp, #24
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009192:	2300      	movs	r3, #0
 8009194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800919c:	23b4      	movs	r3, #180	; 0xb4
 800919e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80091a2:	2306      	movs	r3, #6
 80091a4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80091a6:	232c      	movs	r3, #44	; 0x2c
 80091a8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80091aa:	2201      	movs	r2, #1
 80091ac:	21ff      	movs	r1, #255	; 0xff
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7fd f81e 	bl	80061f0 <VL53L0X_WrByte>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80091ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d107      	bne.n	80091d2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80091c2:	2200      	movs	r2, #0
 80091c4:	214f      	movs	r1, #79	; 0x4f
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7fd f812 	bl	80061f0 <VL53L0X_WrByte>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80091d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d107      	bne.n	80091ea <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80091da:	222c      	movs	r2, #44	; 0x2c
 80091dc:	214e      	movs	r1, #78	; 0x4e
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7fd f806 	bl	80061f0 <VL53L0X_WrByte>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80091ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d107      	bne.n	8009202 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091f2:	2200      	movs	r2, #0
 80091f4:	21ff      	movs	r1, #255	; 0xff
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7fc fffa 	bl	80061f0 <VL53L0X_WrByte>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009202:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800920a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800920e:	461a      	mov	r2, r3
 8009210:	21b6      	movs	r1, #182	; 0xb6
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f7fc ffec 	bl	80061f0 <VL53L0X_WrByte>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800921e:	2300      	movs	r3, #0
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
 8009222:	e009      	b.n	8009238 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	4413      	add	r3, r2
 800922a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	3301      	adds	r3, #1
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
 8009238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	429a      	cmp	r2, r3
 800923e:	d3f1      	bcc.n	8009224 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d011      	beq.n	800926a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009246:	e002      	b.n	800924e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	3301      	adds	r3, #1
 800924c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800924e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	4413      	add	r3, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff fc2a 	bl	8008ab0 <is_aperture>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <VL53L0X_set_reference_spads+0xe6>
 8009262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	429a      	cmp	r2, r3
 8009268:	d3ee      	bcc.n	8009248 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8009276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800927a:	79f9      	ldrb	r1, [r7, #7]
 800927c:	f107 0214 	add.w	r2, r7, #20
 8009280:	9204      	str	r2, [sp, #16]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	9203      	str	r2, [sp, #12]
 8009286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009288:	9202      	str	r2, [sp, #8]
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	4623      	mov	r3, r4
 8009292:	4602      	mov	r2, r0
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff fc83 	bl	8008ba0 <enable_ref_spads>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80092a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10c      	bne.n	80092c2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	79fa      	ldrb	r2, [r7, #7]
 80092be:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80092c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3734      	adds	r7, #52	; 0x34
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd90      	pop	{r4, r7, pc}

080092ce <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80092de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	f043 0301 	orr.w	r3, r3, #1
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	461a      	mov	r2, r3
 80092f0:	2100      	movs	r1, #0
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7fc ff7c 	bl	80061f0 <VL53L0X_WrByte>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80092fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d104      	bne.n	800930e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9bf 	bl	8009688 <VL53L0X_measurement_poll_for_completion>
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800930e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009316:	2100      	movs	r1, #0
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff fa31 	bl	8008780 <VL53L0X_ClearInterruptMask>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d106      	bne.n	8009338 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800932a:	2200      	movs	r2, #0
 800932c:	2100      	movs	r1, #0
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7fc ff5e 	bl	80061f0 <VL53L0X_WrByte>
 8009334:	4603      	mov	r3, r0
 8009336:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	461a      	mov	r2, r3
 8009352:	4603      	mov	r3, r0
 8009354:	70fb      	strb	r3, [r7, #3]
 8009356:	460b      	mov	r3, r1
 8009358:	70bb      	strb	r3, [r7, #2]
 800935a:	4613      	mov	r3, r2
 800935c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800935e:	2300      	movs	r3, #0
 8009360:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009362:	2300      	movs	r3, #0
 8009364:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009366:	2201      	movs	r2, #1
 8009368:	21ff      	movs	r1, #255	; 0xff
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7fc ff40 	bl	80061f0 <VL53L0X_WrByte>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	4313      	orrs	r3, r2
 8009378:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800937a:	2200      	movs	r2, #0
 800937c:	2100      	movs	r1, #0
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7fc ff36 	bl	80061f0 <VL53L0X_WrByte>
 8009384:	4603      	mov	r3, r0
 8009386:	461a      	mov	r2, r3
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	4313      	orrs	r3, r2
 800938c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800938e:	2200      	movs	r2, #0
 8009390:	21ff      	movs	r1, #255	; 0xff
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7fc ff2c 	bl	80061f0 <VL53L0X_WrByte>
 8009398:	4603      	mov	r3, r0
 800939a:	461a      	mov	r2, r3
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	4313      	orrs	r3, r2
 80093a0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01e      	beq.n	80093e6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80093a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d009      	beq.n	80093c4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	21cb      	movs	r1, #203	; 0xcb
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fc ff9d 	bl	80062f4 <VL53L0X_RdByte>
 80093ba:	4603      	mov	r3, r0
 80093bc:	461a      	mov	r2, r3
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80093c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d02a      	beq.n	8009422 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80093cc:	f107 030e 	add.w	r3, r7, #14
 80093d0:	461a      	mov	r2, r3
 80093d2:	21ee      	movs	r1, #238	; 0xee
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7fc ff8d 	bl	80062f4 <VL53L0X_RdByte>
 80093da:	4603      	mov	r3, r0
 80093dc:	461a      	mov	r2, r3
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	73fb      	strb	r3, [r7, #15]
 80093e4:	e01d      	b.n	8009422 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80093e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80093ee:	78bb      	ldrb	r3, [r7, #2]
 80093f0:	461a      	mov	r2, r3
 80093f2:	21cb      	movs	r1, #203	; 0xcb
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7fc fefb 	bl	80061f0 <VL53L0X_WrByte>
 80093fa:	4603      	mov	r3, r0
 80093fc:	461a      	mov	r2, r3
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4313      	orrs	r3, r2
 8009402:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800940c:	787b      	ldrb	r3, [r7, #1]
 800940e:	2280      	movs	r2, #128	; 0x80
 8009410:	21ee      	movs	r1, #238	; 0xee
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fc ff3a 	bl	800628c <VL53L0X_UpdateByte>
 8009418:	4603      	mov	r3, r0
 800941a:	461a      	mov	r2, r3
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4313      	orrs	r3, r2
 8009420:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009422:	2201      	movs	r2, #1
 8009424:	21ff      	movs	r1, #255	; 0xff
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7fc fee2 	bl	80061f0 <VL53L0X_WrByte>
 800942c:	4603      	mov	r3, r0
 800942e:	461a      	mov	r2, r3
 8009430:	7bfb      	ldrb	r3, [r7, #15]
 8009432:	4313      	orrs	r3, r2
 8009434:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009436:	2201      	movs	r2, #1
 8009438:	2100      	movs	r1, #0
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7fc fed8 	bl	80061f0 <VL53L0X_WrByte>
 8009440:	4603      	mov	r3, r0
 8009442:	461a      	mov	r2, r3
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	4313      	orrs	r3, r2
 8009448:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800944a:	2200      	movs	r2, #0
 800944c:	21ff      	movs	r1, #255	; 0xff
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fc fece 	bl	80061f0 <VL53L0X_WrByte>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	4313      	orrs	r3, r2
 800945c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	f023 0310 	bic.w	r3, r3, #16
 8009464:	b2da      	uxtb	r2, r3
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	701a      	strb	r2, [r3, #0]

	return Status;
 800946a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b08a      	sub	sp, #40	; 0x28
 800947a:	af04      	add	r7, sp, #16
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	4611      	mov	r1, r2
 8009482:	461a      	mov	r2, r3
 8009484:	460b      	mov	r3, r1
 8009486:	71fb      	strb	r3, [r7, #7]
 8009488:	4613      	mov	r3, r2
 800948a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800948c:	2300      	movs	r3, #0
 800948e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80094a0:	79bb      	ldrb	r3, [r7, #6]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80094ac:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80094ae:	2201      	movs	r2, #1
 80094b0:	2101      	movs	r1, #1
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7fc fe9c 	bl	80061f0 <VL53L0X_WrByte>
 80094b8:	4603      	mov	r3, r0
 80094ba:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80094bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80094c4:	2140      	movs	r1, #64	; 0x40
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff ff01 	bl	80092ce <VL53L0X_perform_single_ref_calibration>
 80094cc:	4603      	mov	r3, r0
 80094ce:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80094d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d115      	bne.n	8009504 <VL53L0X_perform_vhv_calibration+0x8e>
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d112      	bne.n	8009504 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80094de:	7d39      	ldrb	r1, [r7, #20]
 80094e0:	7d7a      	ldrb	r2, [r7, #21]
 80094e2:	2300      	movs	r3, #0
 80094e4:	9303      	str	r3, [sp, #12]
 80094e6:	2301      	movs	r3, #1
 80094e8:	9302      	str	r3, [sp, #8]
 80094ea:	f107 0313 	add.w	r3, r7, #19
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	460b      	mov	r3, r1
 80094f6:	2101      	movs	r1, #1
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff ff23 	bl	8009344 <VL53L0X_ref_calibration_io>
 80094fe:	4603      	mov	r3, r0
 8009500:	75fb      	strb	r3, [r7, #23]
 8009502:	e002      	b.n	800950a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2200      	movs	r2, #0
 8009508:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800950a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d112      	bne.n	8009538 <VL53L0X_perform_vhv_calibration+0xc2>
 8009512:	79bb      	ldrb	r3, [r7, #6]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00f      	beq.n	8009538 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009518:	7dbb      	ldrb	r3, [r7, #22]
 800951a:	461a      	mov	r2, r3
 800951c:	2101      	movs	r1, #1
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7fc fe66 	bl	80061f0 <VL53L0X_WrByte>
 8009524:	4603      	mov	r3, r0
 8009526:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d103      	bne.n	8009538 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	7dba      	ldrb	r2, [r7, #22]
 8009534:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009538:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08a      	sub	sp, #40	; 0x28
 8009548:	af04      	add	r7, sp, #16
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4611      	mov	r1, r2
 8009550:	461a      	mov	r2, r3
 8009552:	460b      	mov	r3, r1
 8009554:	71fb      	strb	r3, [r7, #7]
 8009556:	4613      	mov	r3, r2
 8009558:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800956a:	79bb      	ldrb	r3, [r7, #6]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d003      	beq.n	8009578 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009576:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009578:	2202      	movs	r2, #2
 800957a:	2101      	movs	r1, #1
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f7fc fe37 	bl	80061f0 <VL53L0X_WrByte>
 8009582:	4603      	mov	r3, r0
 8009584:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d105      	bne.n	800959a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800958e:	2100      	movs	r1, #0
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f7ff fe9c 	bl	80092ce <VL53L0X_perform_single_ref_calibration>
 8009596:	4603      	mov	r3, r0
 8009598:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800959a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d115      	bne.n	80095ce <VL53L0X_perform_phase_calibration+0x8a>
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d112      	bne.n	80095ce <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80095a8:	7d39      	ldrb	r1, [r7, #20]
 80095aa:	7d7a      	ldrb	r2, [r7, #21]
 80095ac:	2301      	movs	r3, #1
 80095ae:	9303      	str	r3, [sp, #12]
 80095b0:	2300      	movs	r3, #0
 80095b2:	9302      	str	r3, [sp, #8]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	f107 0313 	add.w	r3, r7, #19
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	460b      	mov	r3, r1
 80095c0:	2101      	movs	r1, #1
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff febe 	bl	8009344 <VL53L0X_ref_calibration_io>
 80095c8:	4603      	mov	r3, r0
 80095ca:	75fb      	strb	r3, [r7, #23]
 80095cc:	e002      	b.n	80095d4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2200      	movs	r2, #0
 80095d2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80095d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d112      	bne.n	8009602 <VL53L0X_perform_phase_calibration+0xbe>
 80095dc:	79bb      	ldrb	r3, [r7, #6]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00f      	beq.n	8009602 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80095e2:	7dbb      	ldrb	r3, [r7, #22]
 80095e4:	461a      	mov	r2, r3
 80095e6:	2101      	movs	r1, #1
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7fc fe01 	bl	80061f0 <VL53L0X_WrByte>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80095f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d103      	bne.n	8009602 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	7dba      	ldrb	r2, [r7, #22]
 80095fe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800961c:	2300      	movs	r3, #0
 800961e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800962a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	2300      	movs	r3, #0
 8009630:	68b9      	ldr	r1, [r7, #8]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7ff ff1f 	bl	8009476 <VL53L0X_perform_vhv_calibration>
 8009638:	4603      	mov	r3, r0
 800963a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800963c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d107      	bne.n	8009654 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	2300      	movs	r3, #0
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f7ff ff7a 	bl	8009544 <VL53L0X_perform_phase_calibration>
 8009650:	4603      	mov	r3, r0
 8009652:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10f      	bne.n	800967c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800965c:	7dbb      	ldrb	r3, [r7, #22]
 800965e:	461a      	mov	r2, r3
 8009660:	2101      	movs	r1, #1
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7fc fdc4 	bl	80061f0 <VL53L0X_WrByte>
 8009668:	4603      	mov	r3, r0
 800966a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800966c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d103      	bne.n	800967c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	7dba      	ldrb	r2, [r7, #22]
 8009678:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800967c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009688:	b590      	push	{r4, r7, lr}
 800968a:	b08b      	sub	sp, #44	; 0x2c
 800968c:	af04      	add	r7, sp, #16
 800968e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009690:	2300      	movs	r3, #0
 8009692:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");
 8009698:	4b25      	ldr	r3, [pc, #148]	; (8009730 <VL53L0X_measurement_poll_for_completion+0xa8>)
 800969a:	681c      	ldr	r4, [r3, #0]
 800969c:	f002 fda6 	bl	800c1ec <HAL_GetTick>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	4b23      	ldr	r3, [pc, #140]	; (8009734 <VL53L0X_measurement_poll_for_completion+0xac>)
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	9200      	str	r2, [sp, #0]
 80096aa:	4b23      	ldr	r3, [pc, #140]	; (8009738 <VL53L0X_measurement_poll_for_completion+0xb0>)
 80096ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80096b0:	4621      	mov	r1, r4
 80096b2:	2001      	movs	r0, #1
 80096b4:	f002 fd1c 	bl	800c0f0 <trace_print_module_function>

	LoopNb = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80096bc:	f107 030f 	add.w	r3, r7, #15
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fe fc90 	bl	8007fe8 <VL53L0X_GetMeasurementDataReady>
 80096c8:	4603      	mov	r3, r0
 80096ca:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80096cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d110      	bne.n	80096f6 <VL53L0X_measurement_poll_for_completion+0x6e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d00f      	beq.n	80096fa <VL53L0X_measurement_poll_for_completion+0x72>
			break; /* done note that status == 0 */

		LoopNb++;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	3301      	adds	r3, #1
 80096de:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80096e6:	d302      	bcc.n	80096ee <VL53L0X_measurement_poll_for_completion+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80096e8:	23f9      	movs	r3, #249	; 0xf9
 80096ea:	75fb      	strb	r3, [r7, #23]
			break;
 80096ec:	e006      	b.n	80096fc <VL53L0X_measurement_poll_for_completion+0x74>
		}

		VL53L0X_PollingDelay(Dev);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7fc fe9e 	bl	8006430 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80096f4:	e7e2      	b.n	80096bc <VL53L0X_measurement_poll_for_completion+0x34>
			break; /* the error is set */
 80096f6:	bf00      	nop
 80096f8:	e000      	b.n	80096fc <VL53L0X_measurement_poll_for_completion+0x74>
			break; /* done note that status == 0 */
 80096fa:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);
 80096fc:	4b0c      	ldr	r3, [pc, #48]	; (8009730 <VL53L0X_measurement_poll_for_completion+0xa8>)
 80096fe:	681c      	ldr	r4, [r3, #0]
 8009700:	f002 fd74 	bl	800c1ec <HAL_GetTick>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800970c:	9302      	str	r3, [sp, #8]
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <VL53L0X_measurement_poll_for_completion+0xac>)
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	9200      	str	r2, [sp, #0]
 8009714:	4b09      	ldr	r3, [pc, #36]	; (800973c <VL53L0X_measurement_poll_for_completion+0xb4>)
 8009716:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800971a:	4621      	mov	r1, r4
 800971c:	2001      	movs	r0, #1
 800971e:	f002 fce7 	bl	800c0f0 <trace_print_module_function>

	return Status;
 8009722:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009726:	4618      	mov	r0, r3
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	bd90      	pop	{r4, r7, pc}
 800972e:	bf00      	nop
 8009730:	20000634 	.word	0x20000634
 8009734:	0801172c 	.word	0x0801172c
 8009738:	08010f94 	.word	0x08010f94
 800973c:	08010fa8 	.word	0x08010fa8

08009740 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	3301      	adds	r3, #1
 8009752:	b2db      	uxtb	r3, r3
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	4603      	mov	r3, r0
 800976e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	085b      	lsrs	r3, r3, #1
 8009778:	b2db      	uxtb	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800977e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800979c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800979e:	e002      	b.n	80097a6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	089b      	lsrs	r3, r3, #2
 80097a4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d8f8      	bhi.n	80097a0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80097ae:	e017      	b.n	80097e0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4413      	add	r3, r2
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d30b      	bcc.n	80097d4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	4413      	add	r3, r2
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	085b      	lsrs	r3, r3, #1
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	4413      	add	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	e002      	b.n	80097da <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	085b      	lsrs	r3, r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	089b      	lsrs	r3, r3, #2
 80097de:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e4      	bne.n	80097b0 <VL53L0X_isqrt+0x24>
	}

	return res;
 80097e6:	68fb      	ldr	r3, [r7, #12]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b08b      	sub	sp, #44	; 0x2c
 80097f8:	af04      	add	r7, sp, #16
 80097fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");
 8009800:	4b2f      	ldr	r3, [pc, #188]	; (80098c0 <VL53L0X_device_read_strobe+0xcc>)
 8009802:	681c      	ldr	r4, [r3, #0]
 8009804:	f002 fcf2 	bl	800c1ec <HAL_GetTick>
 8009808:	4603      	mov	r3, r0
 800980a:	461a      	mov	r2, r3
 800980c:	4b2d      	ldr	r3, [pc, #180]	; (80098c4 <VL53L0X_device_read_strobe+0xd0>)
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	9200      	str	r2, [sp, #0]
 8009812:	4b2d      	ldr	r3, [pc, #180]	; (80098c8 <VL53L0X_device_read_strobe+0xd4>)
 8009814:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009818:	4621      	mov	r1, r4
 800981a:	2001      	movs	r0, #1
 800981c:	f002 fc68 	bl	800c0f0 <trace_print_module_function>

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009820:	2200      	movs	r2, #0
 8009822:	2183      	movs	r1, #131	; 0x83
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7fc fce3 	bl	80061f0 <VL53L0X_WrByte>
 800982a:	4603      	mov	r3, r0
 800982c:	461a      	mov	r2, r3
 800982e:	7dfb      	ldrb	r3, [r7, #23]
 8009830:	4313      	orrs	r3, r2
 8009832:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d11e      	bne.n	800987a <VL53L0X_device_read_strobe+0x86>
		LoopNb = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009840:	f107 030f 	add.w	r3, r7, #15
 8009844:	461a      	mov	r2, r3
 8009846:	2183      	movs	r1, #131	; 0x83
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7fc fd53 	bl	80062f4 <VL53L0X_RdByte>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <VL53L0X_device_read_strobe+0x7a>
 8009858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <VL53L0X_device_read_strobe+0x7a>
					break;

			LoopNb = LoopNb + 1;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	3301      	adds	r3, #1
 8009864:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800986c:	d3e8      	bcc.n	8009840 <VL53L0X_device_read_strobe+0x4c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009874:	d301      	bcc.n	800987a <VL53L0X_device_read_strobe+0x86>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009876:	23f9      	movs	r3, #249	; 0xf9
 8009878:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800987a:	2201      	movs	r2, #1
 800987c:	2183      	movs	r1, #131	; 0x83
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7fc fcb6 	bl	80061f0 <VL53L0X_WrByte>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	4313      	orrs	r3, r2
 800988c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
 800988e:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <VL53L0X_device_read_strobe+0xcc>)
 8009890:	681c      	ldr	r4, [r3, #0]
 8009892:	f002 fcab 	bl	800c1ec <HAL_GetTick>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800989e:	9302      	str	r3, [sp, #8]
 80098a0:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <VL53L0X_device_read_strobe+0xd0>)
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	9200      	str	r2, [sp, #0]
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <VL53L0X_device_read_strobe+0xd8>)
 80098a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80098ac:	4621      	mov	r1, r4
 80098ae:	2001      	movs	r0, #1
 80098b0:	f002 fc1e 	bl	800c0f0 <trace_print_module_function>
	return Status;
 80098b4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80098b8:	4618      	mov	r0, r3
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd90      	pop	{r4, r7, pc}
 80098c0:	20000634 	.word	0x20000634
 80098c4:	08011754 	.word	0x08011754
 80098c8:	08010f94 	.word	0x08010f94
 80098cc:	08010fa8 	.word	0x08010fa8

080098d0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80098d0:	b590      	push	{r4, r7, lr}
 80098d2:	b09d      	sub	sp, #116	; 0x74
 80098d4:	af04      	add	r7, sp, #16
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009900:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009904:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
	int i;


	LOG_FUNCTION_START("");
 8009912:	4b9b      	ldr	r3, [pc, #620]	; (8009b80 <VL53L0X_get_info_from_device+0x2b0>)
 8009914:	681c      	ldr	r4, [r3, #0]
 8009916:	f002 fc69 	bl	800c1ec <HAL_GetTick>
 800991a:	4603      	mov	r3, r0
 800991c:	461a      	mov	r2, r3
 800991e:	4b99      	ldr	r3, [pc, #612]	; (8009b84 <VL53L0X_get_info_from_device+0x2b4>)
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	9200      	str	r2, [sp, #0]
 8009924:	4b98      	ldr	r3, [pc, #608]	; (8009b88 <VL53L0X_get_info_from_device+0x2b8>)
 8009926:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800992a:	4621      	mov	r1, r4
 800992c:	2001      	movs	r0, #1
 800992e:	f002 fbdf 	bl	800c0f0 <trace_print_module_function>

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800993c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009940:	2b07      	cmp	r3, #7
 8009942:	f000 8410 	beq.w	800a166 <VL53L0X_get_info_from_device+0x896>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009946:	2201      	movs	r2, #1
 8009948:	2180      	movs	r1, #128	; 0x80
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fc fc50 	bl	80061f0 <VL53L0X_WrByte>
 8009950:	4603      	mov	r3, r0
 8009952:	461a      	mov	r2, r3
 8009954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009958:	4313      	orrs	r3, r2
 800995a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800995e:	2201      	movs	r2, #1
 8009960:	21ff      	movs	r1, #255	; 0xff
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7fc fc44 	bl	80061f0 <VL53L0X_WrByte>
 8009968:	4603      	mov	r3, r0
 800996a:	461a      	mov	r2, r3
 800996c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009970:	4313      	orrs	r3, r2
 8009972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009976:	2200      	movs	r2, #0
 8009978:	2100      	movs	r1, #0
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7fc fc38 	bl	80061f0 <VL53L0X_WrByte>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009988:	4313      	orrs	r3, r2
 800998a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800998e:	2206      	movs	r2, #6
 8009990:	21ff      	movs	r1, #255	; 0xff
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7fc fc2c 	bl	80061f0 <VL53L0X_WrByte>
 8009998:	4603      	mov	r3, r0
 800999a:	461a      	mov	r2, r3
 800999c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099a0:	4313      	orrs	r3, r2
 80099a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80099a6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80099aa:	461a      	mov	r2, r3
 80099ac:	2183      	movs	r1, #131	; 0x83
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7fc fca0 	bl	80062f4 <VL53L0X_RdByte>
 80099b4:	4603      	mov	r3, r0
 80099b6:	461a      	mov	r2, r3
 80099b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099bc:	4313      	orrs	r3, r2
 80099be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80099c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099c6:	f043 0304 	orr.w	r3, r3, #4
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	461a      	mov	r2, r3
 80099ce:	2183      	movs	r1, #131	; 0x83
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7fc fc0d 	bl	80061f0 <VL53L0X_WrByte>
 80099d6:	4603      	mov	r3, r0
 80099d8:	461a      	mov	r2, r3
 80099da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099de:	4313      	orrs	r3, r2
 80099e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80099e4:	2207      	movs	r2, #7
 80099e6:	21ff      	movs	r1, #255	; 0xff
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fc fc01 	bl	80061f0 <VL53L0X_WrByte>
 80099ee:	4603      	mov	r3, r0
 80099f0:	461a      	mov	r2, r3
 80099f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099f6:	4313      	orrs	r3, r2
 80099f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80099fc:	2201      	movs	r2, #1
 80099fe:	2181      	movs	r1, #129	; 0x81
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7fc fbf5 	bl	80061f0 <VL53L0X_WrByte>
 8009a06:	4603      	mov	r3, r0
 8009a08:	461a      	mov	r2, r3
 8009a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7fc fd0b 	bl	8006430 <VL53L0X_PollingDelay>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a22:	4313      	orrs	r3, r2
 8009a24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009a28:	2201      	movs	r2, #1
 8009a2a:	2180      	movs	r1, #128	; 0x80
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7fc fbdf 	bl	80061f0 <VL53L0X_WrByte>
 8009a32:	4603      	mov	r3, r0
 8009a34:	461a      	mov	r2, r3
 8009a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 80a0 	beq.w	8009b8c <VL53L0X_get_info_from_device+0x2bc>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009a4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a50:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 8099 	bne.w	8009b8c <VL53L0X_get_info_from_device+0x2bc>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009a5a:	226b      	movs	r2, #107	; 0x6b
 8009a5c:	2194      	movs	r1, #148	; 0x94
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7fc fbc6 	bl	80061f0 <VL53L0X_WrByte>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff febe 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a80:	4313      	orrs	r3, r2
 8009a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	2190      	movs	r1, #144	; 0x90
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fc fc92 	bl	80063b8 <VL53L0X_RdDWord>
 8009a94:	4603      	mov	r3, r0
 8009a96:	461a      	mov	r2, r3
 8009a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	0a1b      	lsrs	r3, r3, #8
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aac:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	0bdb      	lsrs	r3, r3, #15
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009abe:	2224      	movs	r2, #36	; 0x24
 8009ac0:	2194      	movs	r1, #148	; 0x94
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fc fb94 	bl	80061f0 <VL53L0X_WrByte>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff fe8c 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009aee:	461a      	mov	r2, r3
 8009af0:	2190      	movs	r1, #144	; 0x90
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7fc fc60 	bl	80063b8 <VL53L0X_RdDWord>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b00:	4313      	orrs	r3, r2
 8009b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	0e1b      	lsrs	r3, r3, #24
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b10:	0c1b      	lsrs	r3, r3, #16
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	0a1b      	lsrs	r3, r3, #8
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009b24:	2225      	movs	r2, #37	; 0x25
 8009b26:	2194      	movs	r1, #148	; 0x94
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7fc fb61 	bl	80061f0 <VL53L0X_WrByte>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	461a      	mov	r2, r3
 8009b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b36:	4313      	orrs	r3, r2
 8009b38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff fe59 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009b42:	4603      	mov	r3, r0
 8009b44:	461a      	mov	r2, r3
 8009b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b54:	461a      	mov	r2, r3
 8009b56:	2190      	movs	r1, #144	; 0x90
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7fc fc2d 	bl	80063b8 <VL53L0X_RdDWord>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	461a      	mov	r2, r3
 8009b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b66:	4313      	orrs	r3, r2
 8009b68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	0e1b      	lsrs	r3, r3, #24
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	0c1b      	lsrs	r3, r3, #16
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	737b      	strb	r3, [r7, #13]
 8009b7c:	e006      	b.n	8009b8c <VL53L0X_get_info_from_device+0x2bc>
 8009b7e:	bf00      	nop
 8009b80:	20000634 	.word	0x20000634
 8009b84:	08011770 	.word	0x08011770
 8009b88:	08010f94 	.word	0x08010f94
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	f003 0302 	and.w	r3, r3, #2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 8189 	beq.w	8009eaa <VL53L0X_get_info_from_device+0x5da>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b9c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f040 8182 	bne.w	8009eaa <VL53L0X_get_info_from_device+0x5da>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	2194      	movs	r1, #148	; 0x94
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7fc fb20 	bl	80061f0 <VL53L0X_WrByte>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff fe18 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009bd2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2190      	movs	r1, #144	; 0x90
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7fc fb8a 	bl	80062f4 <VL53L0X_RdByte>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009bee:	227b      	movs	r2, #123	; 0x7b
 8009bf0:	2194      	movs	r1, #148	; 0x94
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7fc fafc 	bl	80061f0 <VL53L0X_WrByte>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c00:	4313      	orrs	r3, r2
 8009c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fdf4 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c14:	4313      	orrs	r3, r2
 8009c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009c1a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009c1e:	461a      	mov	r2, r3
 8009c20:	2190      	movs	r1, #144	; 0x90
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7fc fb66 	bl	80062f4 <VL53L0X_RdByte>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c30:	4313      	orrs	r3, r2
 8009c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009c36:	2277      	movs	r2, #119	; 0x77
 8009c38:	2194      	movs	r1, #148	; 0x94
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fc fad8 	bl	80061f0 <VL53L0X_WrByte>
 8009c40:	4603      	mov	r3, r0
 8009c42:	461a      	mov	r2, r3
 8009c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff fdd0 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461a      	mov	r2, r3
 8009c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c66:	461a      	mov	r2, r3
 8009c68:	2190      	movs	r1, #144	; 0x90
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7fc fba4 	bl	80063b8 <VL53L0X_RdDWord>
 8009c70:	4603      	mov	r3, r0
 8009c72:	461a      	mov	r2, r3
 8009c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	0e5b      	lsrs	r3, r3, #25
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	0c9b      	lsrs	r3, r3, #18
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	0adb      	lsrs	r3, r3, #11
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	091b      	lsrs	r3, r3, #4
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8009cc8:	2278      	movs	r2, #120	; 0x78
 8009cca:	2194      	movs	r1, #148	; 0x94
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7fc fa8f 	bl	80061f0 <VL53L0X_WrByte>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff fd87 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2190      	movs	r1, #144	; 0x90
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7fc fb5b 	bl	80063b8 <VL53L0X_RdDWord>
 8009d02:	4603      	mov	r3, r0
 8009d04:	461a      	mov	r2, r3
 8009d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d12:	0f5b      	lsrs	r3, r3, #29
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d20:	4413      	add	r3, r2
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	0d9b      	lsrs	r3, r3, #22
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	0bdb      	lsrs	r3, r3, #15
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	0a1b      	lsrs	r3, r3, #8
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	085b      	lsrs	r3, r3, #1
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	019b      	lsls	r3, r3, #6
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009d70:	2279      	movs	r2, #121	; 0x79
 8009d72:	2194      	movs	r1, #148	; 0x94
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7fc fa3b 	bl	80061f0 <VL53L0X_WrByte>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d82:	4313      	orrs	r3, r2
 8009d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff fd33 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d96:	4313      	orrs	r3, r2
 8009d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009da0:	461a      	mov	r2, r3
 8009da2:	2190      	movs	r1, #144	; 0x90
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7fc fb07 	bl	80063b8 <VL53L0X_RdDWord>
 8009daa:	4603      	mov	r3, r0
 8009dac:	461a      	mov	r2, r3
 8009dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	0e9b      	lsrs	r3, r3, #26
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc2:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dc8:	4413      	add	r3, r2
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd0:	0cdb      	lsrs	r3, r3, #19
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	0b1b      	lsrs	r3, r3, #12
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	095b      	lsrs	r3, r3, #5
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009e0a:	227a      	movs	r2, #122	; 0x7a
 8009e0c:	2194      	movs	r1, #148	; 0x94
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7fc f9ee 	bl	80061f0 <VL53L0X_WrByte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff fce6 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e30:	4313      	orrs	r3, r2
 8009e32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	2190      	movs	r1, #144	; 0x90
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7fc faba 	bl	80063b8 <VL53L0X_RdDWord>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	0f9b      	lsrs	r3, r3, #30
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009e5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e62:	4413      	add	r3, r2
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	0ddb      	lsrs	r3, r3, #23
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	0c1b      	lsrs	r3, r3, #16
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	0a5b      	lsrs	r3, r3, #9
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	089b      	lsrs	r3, r3, #2
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009eaa:	78fb      	ldrb	r3, [r7, #3]
 8009eac:	f003 0304 	and.w	r3, r3, #4
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 80f1 	beq.w	800a098 <VL53L0X_get_info_from_device+0x7c8>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009eb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eba:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f040 80ea 	bne.w	800a098 <VL53L0X_get_info_from_device+0x7c8>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009ec4:	227b      	movs	r2, #123	; 0x7b
 8009ec6:	2194      	movs	r1, #148	; 0x94
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7fc f991 	bl	80061f0 <VL53L0X_WrByte>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff fc89 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009eea:	4313      	orrs	r3, r2
 8009eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	2190      	movs	r1, #144	; 0x90
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7fc fa5d 	bl	80063b8 <VL53L0X_RdDWord>
 8009efe:	4603      	mov	r3, r0
 8009f00:	461a      	mov	r2, r3
 8009f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f06:	4313      	orrs	r3, r2
 8009f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009f0c:	227c      	movs	r2, #124	; 0x7c
 8009f0e:	2194      	movs	r1, #148	; 0x94
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7fc f96d 	bl	80061f0 <VL53L0X_WrByte>
 8009f16:	4603      	mov	r3, r0
 8009f18:	461a      	mov	r2, r3
 8009f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff fc65 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f32:	4313      	orrs	r3, r2
 8009f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	2190      	movs	r1, #144	; 0x90
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7fc fa39 	bl	80063b8 <VL53L0X_RdDWord>
 8009f46:	4603      	mov	r3, r0
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009f54:	2273      	movs	r2, #115	; 0x73
 8009f56:	2194      	movs	r1, #148	; 0x94
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fc f949 	bl	80061f0 <VL53L0X_WrByte>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	461a      	mov	r2, r3
 8009f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff fc41 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009f72:	4603      	mov	r3, r0
 8009f74:	461a      	mov	r2, r3
 8009f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009f80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f84:	461a      	mov	r2, r3
 8009f86:	2190      	movs	r1, #144	; 0x90
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fc fa15 	bl	80063b8 <VL53L0X_RdDWord>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	461a      	mov	r2, r3
 8009f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f96:	4313      	orrs	r3, r2
 8009f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009fa4:	2274      	movs	r2, #116	; 0x74
 8009fa6:	2194      	movs	r1, #148	; 0x94
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7fc f921 	bl	80061f0 <VL53L0X_WrByte>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff fc19 	bl	80097f4 <VL53L0X_device_read_strobe>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	2190      	movs	r1, #144	; 0x90
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7fc f9ed 	bl	80063b8 <VL53L0X_RdDWord>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009ff0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009ff6:	2275      	movs	r2, #117	; 0x75
 8009ff8:	2194      	movs	r1, #148	; 0x94
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7fc f8f8 	bl	80061f0 <VL53L0X_WrByte>
 800a000:	4603      	mov	r3, r0
 800a002:	461a      	mov	r2, r3
 800a004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a008:	4313      	orrs	r3, r2
 800a00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff fbf0 	bl	80097f4 <VL53L0X_device_read_strobe>
 800a014:	4603      	mov	r3, r0
 800a016:	461a      	mov	r2, r3
 800a018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a01c:	4313      	orrs	r3, r2
 800a01e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a026:	461a      	mov	r2, r3
 800a028:	2190      	movs	r1, #144	; 0x90
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7fc f9c4 	bl	80063b8 <VL53L0X_RdDWord>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a038:	4313      	orrs	r3, r2
 800a03a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a042:	b29b      	uxth	r3, r3
 800a044:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a046:	2276      	movs	r2, #118	; 0x76
 800a048:	2194      	movs	r1, #148	; 0x94
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7fc f8d0 	bl	80061f0 <VL53L0X_WrByte>
 800a050:	4603      	mov	r3, r0
 800a052:	461a      	mov	r2, r3
 800a054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a058:	4313      	orrs	r3, r2
 800a05a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fbc8 	bl	80097f4 <VL53L0X_device_read_strobe>
 800a064:	4603      	mov	r3, r0
 800a066:	461a      	mov	r2, r3
 800a068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a06c:	4313      	orrs	r3, r2
 800a06e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a076:	461a      	mov	r2, r3
 800a078:	2190      	movs	r1, #144	; 0x90
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7fc f99c 	bl	80063b8 <VL53L0X_RdDWord>
 800a080:	4603      	mov	r3, r0
 800a082:	461a      	mov	r2, r3
 800a084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a088:	4313      	orrs	r3, r2
 800a08a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a094:	4313      	orrs	r3, r2
 800a096:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a098:	2200      	movs	r2, #0
 800a09a:	2181      	movs	r1, #129	; 0x81
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7fc f8a7 	bl	80061f0 <VL53L0X_WrByte>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a0b0:	2206      	movs	r2, #6
 800a0b2:	21ff      	movs	r1, #255	; 0xff
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7fc f89b 	bl	80061f0 <VL53L0X_WrByte>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a0c8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2183      	movs	r1, #131	; 0x83
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7fc f90f 	bl	80062f4 <VL53L0X_RdByte>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	461a      	mov	r2, r3
 800a0da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a0e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0e8:	f023 0304 	bic.w	r3, r3, #4
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	2183      	movs	r1, #131	; 0x83
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7fc f87c 	bl	80061f0 <VL53L0X_WrByte>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a100:	4313      	orrs	r3, r2
 800a102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a106:	2201      	movs	r2, #1
 800a108:	21ff      	movs	r1, #255	; 0xff
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7fc f870 	bl	80061f0 <VL53L0X_WrByte>
 800a110:	4603      	mov	r3, r0
 800a112:	461a      	mov	r2, r3
 800a114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a118:	4313      	orrs	r3, r2
 800a11a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a11e:	2201      	movs	r2, #1
 800a120:	2100      	movs	r1, #0
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fc f864 	bl	80061f0 <VL53L0X_WrByte>
 800a128:	4603      	mov	r3, r0
 800a12a:	461a      	mov	r2, r3
 800a12c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a130:	4313      	orrs	r3, r2
 800a132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a136:	2200      	movs	r2, #0
 800a138:	21ff      	movs	r1, #255	; 0xff
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fc f858 	bl	80061f0 <VL53L0X_WrByte>
 800a140:	4603      	mov	r3, r0
 800a142:	461a      	mov	r2, r3
 800a144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a148:	4313      	orrs	r3, r2
 800a14a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a14e:	2200      	movs	r2, #0
 800a150:	2180      	movs	r1, #128	; 0x80
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7fc f84c 	bl	80061f0 <VL53L0X_WrByte>
 800a158:	4603      	mov	r3, r0
 800a15a:	461a      	mov	r2, r3
 800a15c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a160:	4313      	orrs	r3, r2
 800a162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a166:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f040 808f 	bne.w	800a28e <VL53L0X_get_info_from_device+0x9be>
 800a170:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a174:	2b07      	cmp	r3, #7
 800a176:	f000 808a 	beq.w	800a28e <VL53L0X_get_info_from_device+0x9be>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a17a:	78fb      	ldrb	r3, [r7, #3]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d024      	beq.n	800a1ce <VL53L0X_get_info_from_device+0x8fe>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a184:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a188:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d11e      	bne.n	800a1ce <VL53L0X_get_info_from_device+0x8fe>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a196:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800a1a0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1a8:	e00e      	b.n	800a1c8 <VL53L0X_get_info_from_device+0x8f8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a1aa:	f107 0208 	add.w	r2, r7, #8
 800a1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b0:	4413      	add	r3, r2
 800a1b2:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800a1be:	460a      	mov	r2, r1
 800a1c0:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ca:	2b05      	cmp	r3, #5
 800a1cc:	dded      	ble.n	800a1aa <VL53L0X_get_info_from_device+0x8da>
			}
		}

		if (((option & 2) == 2) &&
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	f003 0302 	and.w	r3, r3, #2
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d018      	beq.n	800a20a <VL53L0X_get_info_from_device+0x93a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a1d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a1dc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d112      	bne.n	800a20a <VL53L0X_get_info_from_device+0x93a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1ee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	33f3      	adds	r3, #243	; 0xf3
 800a1fc:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a1fe:	f107 0310 	add.w	r3, r7, #16
 800a202:	4619      	mov	r1, r3
 800a204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a206:	f005 fc7d 	bl	800fb04 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a20a:	78fb      	ldrb	r3, [r7, #3]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d030      	beq.n	800a276 <VL53L0X_get_info_from_device+0x9a6>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a214:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a218:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d12a      	bne.n	800a276 <VL53L0X_get_info_from_device+0x9a6>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a232:	025b      	lsls	r3, r3, #9
 800a234:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a23a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a246:	2b00      	cmp	r3, #0
 800a248:	d011      	beq.n	800a26e <VL53L0X_get_info_from_device+0x99e>
					OffsetFixed1104_mm =
 800a24a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a258:	fb02 f303 	mul.w	r3, r2, r3
 800a25c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a25e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800a262:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800a266:	425b      	negs	r3, r3
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800a26e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a276:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a284:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
 800a28e:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <VL53L0X_get_info_from_device+0x9f0>)
 800a290:	681c      	ldr	r4, [r3, #0]
 800a292:	f001 ffab 	bl	800c1ec <HAL_GetTick>
 800a296:	4603      	mov	r3, r0
 800a298:	461a      	mov	r2, r3
 800a29a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800a29e:	9302      	str	r3, [sp, #8]
 800a2a0:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <VL53L0X_get_info_from_device+0x9f4>)
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	9200      	str	r2, [sp, #0]
 800a2a6:	4b08      	ldr	r3, [pc, #32]	; (800a2c8 <VL53L0X_get_info_from_device+0x9f8>)
 800a2a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	f001 ff1e 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800a2b4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3764      	adds	r7, #100	; 0x64
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd90      	pop	{r4, r7, pc}
 800a2c0:	20000634 	.word	0x20000634
 800a2c4:	08011770 	.word	0x08011770
 800a2c8:	08010fa8 	.word	0x08010fa8

0800a2cc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b08b      	sub	sp, #44	; 0x2c
 800a2d0:	af04      	add	r7, sp, #16
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
	uint64_t PLL_period_ps;
	uint32_t macro_period_vclks;
	uint32_t macro_period_ps;

	LOG_FUNCTION_START("");
 800a2d8:	4b1b      	ldr	r3, [pc, #108]	; (800a348 <VL53L0X_calc_macro_period_ps+0x7c>)
 800a2da:	681c      	ldr	r4, [r3, #0]
 800a2dc:	f001 ff86 	bl	800c1ec <HAL_GetTick>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4b19      	ldr	r3, [pc, #100]	; (800a34c <VL53L0X_calc_macro_period_ps+0x80>)
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	9200      	str	r2, [sp, #0]
 800a2ea:	4b19      	ldr	r3, [pc, #100]	; (800a350 <VL53L0X_calc_macro_period_ps+0x84>)
 800a2ec:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	f001 fefc 	bl	800c0f0 <trace_print_module_function>

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a2f8:	f240 6277 	movw	r2, #1655	; 0x677
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a304:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a308:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	fb02 f303 	mul.w	r3, r2, r3
 800a318:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
 800a31a:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <VL53L0X_calc_macro_period_ps+0x7c>)
 800a31c:	681c      	ldr	r4, [r3, #0]
 800a31e:	f001 ff65 	bl	800c1ec <HAL_GetTick>
 800a322:	4603      	mov	r3, r0
 800a324:	461a      	mov	r2, r3
 800a326:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <VL53L0X_calc_macro_period_ps+0x88>)
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	4b08      	ldr	r3, [pc, #32]	; (800a34c <VL53L0X_calc_macro_period_ps+0x80>)
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	9200      	str	r2, [sp, #0]
 800a330:	4b09      	ldr	r3, [pc, #36]	; (800a358 <VL53L0X_calc_macro_period_ps+0x8c>)
 800a332:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a336:	4621      	mov	r1, r4
 800a338:	2001      	movs	r0, #1
 800a33a:	f001 fed9 	bl	800c0f0 <trace_print_module_function>
	return macro_period_ps;
 800a33e:	68bb      	ldr	r3, [r7, #8]
}
 800a340:	4618      	mov	r0, r3
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}
 800a348:	20000634 	.word	0x20000634
 800a34c:	08011790 	.word	0x08011790
 800a350:	08010f94 	.word	0x08010f94
 800a354:	08010fb8 	.word	0x08010fb8
 800a358:	08010fa8 	.word	0x08010fa8

0800a35c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d017      	beq.n	800a3a6 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3b01      	subs	r3, #1
 800a37a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a37c:	e005      	b.n	800a38a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	085b      	lsrs	r3, r3, #1
 800a382:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a384:	89fb      	ldrh	r3, [r7, #14]
 800a386:	3301      	adds	r3, #1
 800a388:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1f4      	bne.n	800a37e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a394:	89fb      	ldrh	r3, [r7, #14]
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a3a2:	4413      	add	r3, r2
 800a3a4:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a3a6:	8afb      	ldrh	r3, [r7, #22]

}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	371c      	adds	r7, #28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a3c6:	88fa      	ldrh	r2, [r7, #6]
 800a3c8:	0a12      	lsrs	r2, r2, #8
 800a3ca:	b292      	uxth	r2, r2
 800a3cc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b088      	sub	sp, #32
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7ff ff68 	bl	800a2cc <VL53L0X_calc_macro_period_ps>
 800a3fc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a404:	4a0a      	ldr	r2, [pc, #40]	; (800a430 <VL53L0X_calc_timeout_mclks+0x50>)
 800a406:	fba2 2303 	umull	r2, r3, r2, r3
 800a40a:	099b      	lsrs	r3, r3, #6
 800a40c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a414:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	085b      	lsrs	r3, r3, #1
 800a41c:	441a      	add	r2, r3
	timeout_period_mclks =
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	fbb2 f3f3 	udiv	r3, r2, r3
 800a424:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a426:	69fb      	ldr	r3, [r7, #28]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3720      	adds	r7, #32
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	10624dd3 	.word	0x10624dd3

0800a434 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	807b      	strh	r3, [r7, #2]
 800a440:	4613      	mov	r3, r2
 800a442:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a448:	787b      	ldrb	r3, [r7, #1]
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff ff3d 	bl	800a2cc <VL53L0X_calc_macro_period_ps>
 800a452:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a45a:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <VL53L0X_calc_timeout_us+0x50>)
 800a45c:	fba2 2303 	umull	r2, r3, r2, r3
 800a460:	099b      	lsrs	r3, r3, #6
 800a462:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a464:	887b      	ldrh	r3, [r7, #2]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	fb02 f303 	mul.w	r3, r2, r3
 800a46c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a470:	4a04      	ldr	r2, [pc, #16]	; (800a484 <VL53L0X_calc_timeout_us+0x50>)
 800a472:	fba2 2303 	umull	r2, r3, r2, r3
 800a476:	099b      	lsrs	r3, r3, #6
 800a478:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a47a:	697b      	ldr	r3, [r7, #20]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	10624dd3 	.word	0x10624dd3

0800a488 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08c      	sub	sp, #48	; 0x30
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	460b      	mov	r3, r1
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a496:	2300      	movs	r3, #0
 800a498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <get_sequence_step_timeout+0x38>
 800a4b4:	7afb      	ldrb	r3, [r7, #11]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d002      	beq.n	800a4c0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d128      	bne.n	800a512 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a4c0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f7fc fde5 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a4d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d109      	bne.n	800a4f0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a4dc:	f107 0320 	add.w	r3, r7, #32
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	2146      	movs	r1, #70	; 0x46
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f7fb ff05 	bl	80062f4 <VL53L0X_RdByte>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a4f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff ff5c 	bl	800a3b4 <VL53L0X_decode_timeout>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a500:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7ff ff93 	bl	800a434 <VL53L0X_calc_timeout_us>
 800a50e:	62b8      	str	r0, [r7, #40]	; 0x28
 800a510:	e092      	b.n	800a638 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	2b03      	cmp	r3, #3
 800a516:	d135      	bne.n	800a584 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a518:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a51c:	461a      	mov	r2, r3
 800a51e:	2100      	movs	r1, #0
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7fc fdb9 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a526:	4603      	mov	r3, r0
 800a528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a52c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a530:	2b00      	cmp	r3, #0
 800a532:	f040 8081 	bne.w	800a638 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a536:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a53a:	461a      	mov	r2, r3
 800a53c:	2100      	movs	r1, #0
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7fc fdaa 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a544:	4603      	mov	r3, r0
 800a546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a54a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d109      	bne.n	800a566 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a552:	f107 031e 	add.w	r3, r7, #30
 800a556:	461a      	mov	r2, r3
 800a558:	2151      	movs	r1, #81	; 0x51
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7fb fef4 	bl	8006348 <VL53L0X_RdWord>
 800a560:	4603      	mov	r3, r0
 800a562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a566:	8bfb      	ldrh	r3, [r7, #30]
 800a568:	4618      	mov	r0, r3
 800a56a:	f7ff ff23 	bl	800a3b4 <VL53L0X_decode_timeout>
 800a56e:	4603      	mov	r3, r0
 800a570:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a572:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a576:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a578:	4619      	mov	r1, r3
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f7ff ff5a 	bl	800a434 <VL53L0X_calc_timeout_us>
 800a580:	62b8      	str	r0, [r7, #40]	; 0x28
 800a582:	e059      	b.n	800a638 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a584:	7afb      	ldrb	r3, [r7, #11]
 800a586:	2b04      	cmp	r3, #4
 800a588:	d156      	bne.n	800a638 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a58a:	f107 0314 	add.w	r3, r7, #20
 800a58e:	4619      	mov	r1, r3
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7fc ff0d 	bl	80073b0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01d      	beq.n	800a5dc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a5a0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7fc fd75 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a5b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10f      	bne.n	800a5dc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a5bc:	f107 031e 	add.w	r3, r7, #30
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	2151      	movs	r1, #81	; 0x51
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7fb febf 	bl	8006348 <VL53L0X_RdWord>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a5d0:	8bfb      	ldrh	r3, [r7, #30]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff feee 	bl	800a3b4 <VL53L0X_decode_timeout>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a5dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a5e4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f7fc fd53 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a5f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10f      	bne.n	800a620 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a600:	f107 031c 	add.w	r3, r7, #28
 800a604:	461a      	mov	r2, r3
 800a606:	2171      	movs	r1, #113	; 0x71
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f7fb fe9d 	bl	8006348 <VL53L0X_RdWord>
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a614:	8bbb      	ldrh	r3, [r7, #28]
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fecc 	bl	800a3b4 <VL53L0X_decode_timeout>
 800a61c:	4603      	mov	r3, r0
 800a61e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a622:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a628:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a62e:	4619      	mov	r1, r3
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff feff 	bl	800a434 <VL53L0X_calc_timeout_us>
 800a636:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a63c:	601a      	str	r2, [r3, #0]

	return Status;
 800a63e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a642:	4618      	mov	r0, r3
 800a644:	3730      	adds	r7, #48	; 0x30
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b08a      	sub	sp, #40	; 0x28
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	460b      	mov	r3, r1
 800a654:	607a      	str	r2, [r7, #4]
 800a656:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a658:	2300      	movs	r3, #0
 800a65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <set_sequence_step_timeout+0x26>
 800a664:	7afb      	ldrb	r3, [r7, #11]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d002      	beq.n	800a670 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a66a:	7afb      	ldrb	r3, [r7, #11]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d138      	bne.n	800a6e2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a670:	f107 031b 	add.w	r3, r7, #27
 800a674:	461a      	mov	r2, r3
 800a676:	2100      	movs	r1, #0
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7fc fd0d 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a67e:	4603      	mov	r3, r0
 800a680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a684:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d11a      	bne.n	800a6c2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a68c:	7efb      	ldrb	r3, [r7, #27]
 800a68e:	461a      	mov	r2, r3
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f7ff fea4 	bl	800a3e0 <VL53L0X_calc_timeout_mclks>
 800a698:	4603      	mov	r3, r0
 800a69a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a69c:	8bbb      	ldrh	r3, [r7, #28]
 800a69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a2:	d903      	bls.n	800a6ac <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a6a4:	23ff      	movs	r3, #255	; 0xff
 800a6a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6aa:	e004      	b.n	800a6b6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a6ac:	8bbb      	ldrh	r3, [r7, #28]
 800a6ae:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a6b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a6c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f040 80ab 	bne.w	800a822 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a6cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2146      	movs	r1, #70	; 0x46
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7fb fd8b 	bl	80061f0 <VL53L0X_WrByte>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a6e0:	e09f      	b.n	800a822 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a6e2:	7afb      	ldrb	r3, [r7, #11]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d135      	bne.n	800a754 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a6e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d11b      	bne.n	800a728 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a6f0:	f107 031b 	add.w	r3, r7, #27
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7fc fccd 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a704:	7efb      	ldrb	r3, [r7, #27]
 800a706:	461a      	mov	r2, r3
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff fe68 	bl	800a3e0 <VL53L0X_calc_timeout_mclks>
 800a710:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a712:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff fe20 	bl	800a35c <VL53L0X_encode_timeout>
 800a71c:	4603      	mov	r3, r0
 800a71e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a720:	8b3a      	ldrh	r2, [r7, #24]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a728:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a730:	8b3b      	ldrh	r3, [r7, #24]
 800a732:	461a      	mov	r2, r3
 800a734:	2151      	movs	r1, #81	; 0x51
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7fb fd7e 	bl	8006238 <VL53L0X_WrWord>
 800a73c:	4603      	mov	r3, r0
 800a73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a742:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a746:	2b00      	cmp	r3, #0
 800a748:	d16b      	bne.n	800a822 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a752:	e066      	b.n	800a822 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a754:	7afb      	ldrb	r3, [r7, #11]
 800a756:	2b04      	cmp	r3, #4
 800a758:	d160      	bne.n	800a81c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a75a:	f107 0310 	add.w	r3, r7, #16
 800a75e:	4619      	mov	r1, r3
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7fc fe25 	bl	80073b0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a76a:	7cfb      	ldrb	r3, [r7, #19]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01d      	beq.n	800a7ac <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a770:	f107 031b 	add.w	r3, r7, #27
 800a774:	461a      	mov	r2, r3
 800a776:	2100      	movs	r1, #0
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f7fc fc8d 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a77e:	4603      	mov	r3, r0
 800a780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a784:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10f      	bne.n	800a7ac <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a78c:	f107 0318 	add.w	r3, r7, #24
 800a790:	461a      	mov	r2, r3
 800a792:	2151      	movs	r1, #81	; 0x51
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7fb fdd7 	bl	8006348 <VL53L0X_RdWord>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a7a0:	8b3b      	ldrh	r3, [r7, #24]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff fe06 	bl	800a3b4 <VL53L0X_decode_timeout>
 800a7a8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a7aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a7ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d109      	bne.n	800a7c8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a7b4:	f107 031b 	add.w	r3, r7, #27
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7fc fc6b 	bl	8007098 <VL53L0X_GetVcselPulsePeriod>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a7c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d128      	bne.n	800a822 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a7d0:	7efb      	ldrb	r3, [r7, #27]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	6879      	ldr	r1, [r7, #4]
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f7ff fe02 	bl	800a3e0 <VL53L0X_calc_timeout_mclks>
 800a7dc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a7de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7e0:	6a3a      	ldr	r2, [r7, #32]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a7e6:	6a38      	ldr	r0, [r7, #32]
 800a7e8:	f7ff fdb8 	bl	800a35c <VL53L0X_encode_timeout>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a7f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d108      	bne.n	800a80a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a7f8:	8bfb      	ldrh	r3, [r7, #30]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	2171      	movs	r1, #113	; 0x71
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7fb fd1a 	bl	8006238 <VL53L0X_WrWord>
 800a804:	4603      	mov	r3, r0
 800a806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a80a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d107      	bne.n	800a822 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a81a:	e002      	b.n	800a822 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a81c:	23fc      	movs	r3, #252	; 0xfc
 800a81e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a826:	4618      	mov	r0, r3
 800a828:	3728      	adds	r7, #40	; 0x28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b08a      	sub	sp, #40	; 0x28
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	460b      	mov	r3, r1
 800a838:	70fb      	strb	r3, [r7, #3]
 800a83a:	4613      	mov	r3, r2
 800a83c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a83e:	2300      	movs	r3, #0
 800a840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a844:	230c      	movs	r3, #12
 800a846:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a84a:	2312      	movs	r3, #18
 800a84c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a850:	2308      	movs	r3, #8
 800a852:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a856:	230e      	movs	r3, #14
 800a858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a860:	78bb      	ldrb	r3, [r7, #2]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a86c:	23fc      	movs	r3, #252	; 0xfc
 800a86e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a872:	e020      	b.n	800a8b6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a874:	78fb      	ldrb	r3, [r7, #3]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10d      	bne.n	800a896 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a87a:	78ba      	ldrb	r2, [r7, #2]
 800a87c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a880:	429a      	cmp	r2, r3
 800a882:	d304      	bcc.n	800a88e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a884:	78ba      	ldrb	r2, [r7, #2]
 800a886:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d903      	bls.n	800a896 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a88e:	23fc      	movs	r3, #252	; 0xfc
 800a890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a894:	e00f      	b.n	800a8b6 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a896:	78fb      	ldrb	r3, [r7, #3]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d10c      	bne.n	800a8b6 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a89c:	78ba      	ldrb	r2, [r7, #2]
 800a89e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d304      	bcc.n	800a8b0 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a8a6:	78ba      	ldrb	r2, [r7, #2]
 800a8a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d902      	bls.n	800a8b6 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8b0:	23fc      	movs	r3, #252	; 0xfc
 800a8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a8b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a8be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8c2:	e239      	b.n	800ad38 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d150      	bne.n	800a96c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a8ca:	78bb      	ldrb	r3, [r7, #2]
 800a8cc:	2b0c      	cmp	r3, #12
 800a8ce:	d110      	bne.n	800a8f2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a8d0:	2218      	movs	r2, #24
 800a8d2:	2157      	movs	r1, #87	; 0x57
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7fb fc8b 	bl	80061f0 <VL53L0X_WrByte>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	2156      	movs	r1, #86	; 0x56
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7fb fc83 	bl	80061f0 <VL53L0X_WrByte>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8f0:	e17f      	b.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a8f2:	78bb      	ldrb	r3, [r7, #2]
 800a8f4:	2b0e      	cmp	r3, #14
 800a8f6:	d110      	bne.n	800a91a <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a8f8:	2230      	movs	r2, #48	; 0x30
 800a8fa:	2157      	movs	r1, #87	; 0x57
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7fb fc77 	bl	80061f0 <VL53L0X_WrByte>
 800a902:	4603      	mov	r3, r0
 800a904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a908:	2208      	movs	r2, #8
 800a90a:	2156      	movs	r1, #86	; 0x56
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7fb fc6f 	bl	80061f0 <VL53L0X_WrByte>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a918:	e16b      	b.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a91a:	78bb      	ldrb	r3, [r7, #2]
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d110      	bne.n	800a942 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a920:	2240      	movs	r2, #64	; 0x40
 800a922:	2157      	movs	r1, #87	; 0x57
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7fb fc63 	bl	80061f0 <VL53L0X_WrByte>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a930:	2208      	movs	r2, #8
 800a932:	2156      	movs	r1, #86	; 0x56
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7fb fc5b 	bl	80061f0 <VL53L0X_WrByte>
 800a93a:	4603      	mov	r3, r0
 800a93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a940:	e157      	b.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a942:	78bb      	ldrb	r3, [r7, #2]
 800a944:	2b12      	cmp	r3, #18
 800a946:	f040 8154 	bne.w	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a94a:	2250      	movs	r2, #80	; 0x50
 800a94c:	2157      	movs	r1, #87	; 0x57
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7fb fc4e 	bl	80061f0 <VL53L0X_WrByte>
 800a954:	4603      	mov	r3, r0
 800a956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a95a:	2208      	movs	r2, #8
 800a95c:	2156      	movs	r1, #86	; 0x56
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7fb fc46 	bl	80061f0 <VL53L0X_WrByte>
 800a964:	4603      	mov	r3, r0
 800a966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a96a:	e142      	b.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a96c:	78fb      	ldrb	r3, [r7, #3]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	f040 813f 	bne.w	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a974:	78bb      	ldrb	r3, [r7, #2]
 800a976:	2b08      	cmp	r3, #8
 800a978:	d14c      	bne.n	800aa14 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a97a:	2210      	movs	r2, #16
 800a97c:	2148      	movs	r1, #72	; 0x48
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7fb fc36 	bl	80061f0 <VL53L0X_WrByte>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a98a:	2208      	movs	r2, #8
 800a98c:	2147      	movs	r1, #71	; 0x47
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7fb fc2e 	bl	80061f0 <VL53L0X_WrByte>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a99a:	2202      	movs	r2, #2
 800a99c:	2132      	movs	r1, #50	; 0x32
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7fb fc26 	bl	80061f0 <VL53L0X_WrByte>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a9b2:	220c      	movs	r2, #12
 800a9b4:	2130      	movs	r1, #48	; 0x30
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7fb fc1a 	bl	80061f0 <VL53L0X_WrByte>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	21ff      	movs	r1, #255	; 0xff
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7fb fc0e 	bl	80061f0 <VL53L0X_WrByte>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a9e2:	2230      	movs	r2, #48	; 0x30
 800a9e4:	2130      	movs	r1, #48	; 0x30
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7fb fc02 	bl	80061f0 <VL53L0X_WrByte>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	21ff      	movs	r1, #255	; 0xff
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7fb fbf6 	bl	80061f0 <VL53L0X_WrByte>
 800aa04:	4603      	mov	r3, r0
 800aa06:	461a      	mov	r2, r3
 800aa08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa12:	e0ee      	b.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800aa14:	78bb      	ldrb	r3, [r7, #2]
 800aa16:	2b0a      	cmp	r3, #10
 800aa18:	d14c      	bne.n	800aab4 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800aa1a:	2228      	movs	r2, #40	; 0x28
 800aa1c:	2148      	movs	r1, #72	; 0x48
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7fb fbe6 	bl	80061f0 <VL53L0X_WrByte>
 800aa24:	4603      	mov	r3, r0
 800aa26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	2147      	movs	r1, #71	; 0x47
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7fb fbde 	bl	80061f0 <VL53L0X_WrByte>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aa3a:	2203      	movs	r2, #3
 800aa3c:	2132      	movs	r1, #50	; 0x32
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7fb fbd6 	bl	80061f0 <VL53L0X_WrByte>
 800aa44:	4603      	mov	r3, r0
 800aa46:	461a      	mov	r2, r3
 800aa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aa52:	2209      	movs	r2, #9
 800aa54:	2130      	movs	r1, #48	; 0x30
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7fb fbca 	bl	80061f0 <VL53L0X_WrByte>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	461a      	mov	r2, r3
 800aa60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa64:	4313      	orrs	r3, r2
 800aa66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	21ff      	movs	r1, #255	; 0xff
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7fb fbbe 	bl	80061f0 <VL53L0X_WrByte>
 800aa74:	4603      	mov	r3, r0
 800aa76:	461a      	mov	r2, r3
 800aa78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800aa82:	2220      	movs	r2, #32
 800aa84:	2130      	movs	r1, #48	; 0x30
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7fb fbb2 	bl	80061f0 <VL53L0X_WrByte>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa94:	4313      	orrs	r3, r2
 800aa96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	21ff      	movs	r1, #255	; 0xff
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7fb fba6 	bl	80061f0 <VL53L0X_WrByte>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaac:	4313      	orrs	r3, r2
 800aaae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aab2:	e09e      	b.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800aab4:	78bb      	ldrb	r3, [r7, #2]
 800aab6:	2b0c      	cmp	r3, #12
 800aab8:	d14c      	bne.n	800ab54 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800aaba:	2238      	movs	r2, #56	; 0x38
 800aabc:	2148      	movs	r1, #72	; 0x48
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7fb fb96 	bl	80061f0 <VL53L0X_WrByte>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800aaca:	2208      	movs	r2, #8
 800aacc:	2147      	movs	r1, #71	; 0x47
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7fb fb8e 	bl	80061f0 <VL53L0X_WrByte>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800aada:	2203      	movs	r2, #3
 800aadc:	2132      	movs	r1, #50	; 0x32
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7fb fb86 	bl	80061f0 <VL53L0X_WrByte>
 800aae4:	4603      	mov	r3, r0
 800aae6:	461a      	mov	r2, r3
 800aae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaec:	4313      	orrs	r3, r2
 800aaee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aaf2:	2208      	movs	r2, #8
 800aaf4:	2130      	movs	r1, #48	; 0x30
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7fb fb7a 	bl	80061f0 <VL53L0X_WrByte>
 800aafc:	4603      	mov	r3, r0
 800aafe:	461a      	mov	r2, r3
 800ab00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab04:	4313      	orrs	r3, r2
 800ab06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	21ff      	movs	r1, #255	; 0xff
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7fb fb6e 	bl	80061f0 <VL53L0X_WrByte>
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ab22:	2220      	movs	r2, #32
 800ab24:	2130      	movs	r1, #48	; 0x30
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7fb fb62 	bl	80061f0 <VL53L0X_WrByte>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab34:	4313      	orrs	r3, r2
 800ab36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	21ff      	movs	r1, #255	; 0xff
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7fb fb56 	bl	80061f0 <VL53L0X_WrByte>
 800ab44:	4603      	mov	r3, r0
 800ab46:	461a      	mov	r2, r3
 800ab48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ab52:	e04e      	b.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ab54:	78bb      	ldrb	r3, [r7, #2]
 800ab56:	2b0e      	cmp	r3, #14
 800ab58:	d14b      	bne.n	800abf2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ab5a:	2248      	movs	r2, #72	; 0x48
 800ab5c:	2148      	movs	r1, #72	; 0x48
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fb fb46 	bl	80061f0 <VL53L0X_WrByte>
 800ab64:	4603      	mov	r3, r0
 800ab66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	2147      	movs	r1, #71	; 0x47
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7fb fb3e 	bl	80061f0 <VL53L0X_WrByte>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	2132      	movs	r1, #50	; 0x32
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7fb fb36 	bl	80061f0 <VL53L0X_WrByte>
 800ab84:	4603      	mov	r3, r0
 800ab86:	461a      	mov	r2, r3
 800ab88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ab92:	2207      	movs	r2, #7
 800ab94:	2130      	movs	r1, #48	; 0x30
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f7fb fb2a 	bl	80061f0 <VL53L0X_WrByte>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	461a      	mov	r2, r3
 800aba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba4:	4313      	orrs	r3, r2
 800aba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800abaa:	2201      	movs	r2, #1
 800abac:	21ff      	movs	r1, #255	; 0xff
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7fb fb1e 	bl	80061f0 <VL53L0X_WrByte>
 800abb4:	4603      	mov	r3, r0
 800abb6:	461a      	mov	r2, r3
 800abb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800abc2:	2220      	movs	r2, #32
 800abc4:	2130      	movs	r1, #48	; 0x30
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fb fb12 	bl	80061f0 <VL53L0X_WrByte>
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abd4:	4313      	orrs	r3, r2
 800abd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800abda:	2200      	movs	r2, #0
 800abdc:	21ff      	movs	r1, #255	; 0xff
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7fb fb06 	bl	80061f0 <VL53L0X_WrByte>
 800abe4:	4603      	mov	r3, r0
 800abe6:	461a      	mov	r2, r3
 800abe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abec:	4313      	orrs	r3, r2
 800abee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800abf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d17f      	bne.n	800acfa <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800abfa:	78bb      	ldrb	r3, [r7, #2]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe fdb2 	bl	8009766 <VL53L0X_encode_vcsel_period>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d045      	beq.n	800ac9e <VL53L0X_set_vcsel_pulse_period+0x470>
 800ac12:	e06e      	b.n	800acf2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ac14:	f107 0314 	add.w	r3, r7, #20
 800ac18:	461a      	mov	r2, r3
 800ac1a:	2103      	movs	r1, #3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff fc33 	bl	800a488 <get_sequence_step_timeout>
 800ac22:	4603      	mov	r3, r0
 800ac24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ac28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d109      	bne.n	800ac44 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ac30:	f107 0310 	add.w	r3, r7, #16
 800ac34:	461a      	mov	r2, r3
 800ac36:	2102      	movs	r1, #2
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7ff fc25 	bl	800a488 <get_sequence_step_timeout>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ac44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d109      	bne.n	800ac60 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ac4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ac50:	461a      	mov	r2, r3
 800ac52:	2150      	movs	r1, #80	; 0x50
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7fb facb 	bl	80061f0 <VL53L0X_WrByte>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ac60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d108      	bne.n	800ac7a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	2103      	movs	r1, #3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f7ff fceb 	bl	800a64a <set_sequence_step_timeout>
 800ac74:	4603      	mov	r3, r0
 800ac76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ac7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d108      	bne.n	800ac94 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	461a      	mov	r2, r3
 800ac86:	2102      	movs	r1, #2
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff fcde 	bl	800a64a <set_sequence_step_timeout>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	78ba      	ldrb	r2, [r7, #2]
 800ac98:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ac9c:	e02e      	b.n	800acfc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ac9e:	f107 0318 	add.w	r3, r7, #24
 800aca2:	461a      	mov	r2, r3
 800aca4:	2104      	movs	r1, #4
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fbee 	bl	800a488 <get_sequence_step_timeout>
 800acac:	4603      	mov	r3, r0
 800acae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800acb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d109      	bne.n	800acce <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800acba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800acbe:	461a      	mov	r2, r3
 800acc0:	2170      	movs	r1, #112	; 0x70
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7fb fa94 	bl	80061f0 <VL53L0X_WrByte>
 800acc8:	4603      	mov	r3, r0
 800acca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800acce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d108      	bne.n	800ace8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	461a      	mov	r2, r3
 800acda:	2104      	movs	r1, #4
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff fcb4 	bl	800a64a <set_sequence_step_timeout>
 800ace2:	4603      	mov	r3, r0
 800ace4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	78ba      	ldrb	r2, [r7, #2]
 800acec:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800acf0:	e004      	b.n	800acfc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acf2:	23fc      	movs	r3, #252	; 0xfc
 800acf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acf8:	e000      	b.n	800acfc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800acfa:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800acfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d109      	bne.n	800ad18 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	695b      	ldr	r3, [r3, #20]
 800ad08:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ad0a:	69f9      	ldr	r1, [r7, #28]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7fc f903 	bl	8006f18 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ad18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d109      	bne.n	800ad34 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800ad20:	f107 010f 	add.w	r1, r7, #15
 800ad24:	2301      	movs	r3, #1
 800ad26:	2200      	movs	r2, #0
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7fe fc0b 	bl	8009544 <VL53L0X_perform_phase_calibration>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ad34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3728      	adds	r7, #40	; 0x28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ad52:	7afb      	ldrb	r3, [r7, #11]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d00a      	beq.n	800ad72 <VL53L0X_get_vcsel_pulse_period+0x32>
 800ad5c:	e013      	b.n	800ad86 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad5e:	f107 0316 	add.w	r3, r7, #22
 800ad62:	461a      	mov	r2, r3
 800ad64:	2150      	movs	r1, #80	; 0x50
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7fb fac4 	bl	80062f4 <VL53L0X_RdByte>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad70:	e00b      	b.n	800ad8a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ad72:	f107 0316 	add.w	r3, r7, #22
 800ad76:	461a      	mov	r2, r3
 800ad78:	2170      	movs	r1, #112	; 0x70
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7fb faba 	bl	80062f4 <VL53L0X_RdByte>
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ad84:	e001      	b.n	800ad8a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad86:	23fc      	movs	r3, #252	; 0xfc
 800ad88:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ad8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d107      	bne.n	800ada2 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ad92:	7dbb      	ldrb	r3, [r7, #22]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fe fcd3 	bl	8009740 <VL53L0X_decode_vcsel_period>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	701a      	strb	r2, [r3, #0]

	return Status;
 800ada2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
	...

0800adb0 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800adb0:	b590      	push	{r4, r7, lr}
 800adb2:	b097      	sub	sp, #92	; 0x5c
 800adb4:	af04      	add	r7, sp, #16
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adba:	2300      	movs	r3, #0
 800adbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800adc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800adc4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800adc6:	f240 7376 	movw	r3, #1910	; 0x776
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800adcc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800add0:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800add2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800add6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800add8:	f240 234e 	movw	r3, #590	; 0x24e
 800addc:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800adde:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ade2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ade4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ade8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800adea:	f240 2326 	movw	r3, #550	; 0x226
 800adee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800adf4:	f644 6320 	movw	r3, #20000	; 0x4e20
 800adf8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");
 800adfe:	4b81      	ldr	r3, [pc, #516]	; (800b004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 800ae00:	681c      	ldr	r4, [r3, #0]
 800ae02:	f001 f9f3 	bl	800c1ec <HAL_GetTick>
 800ae06:	4603      	mov	r3, r0
 800ae08:	461a      	mov	r2, r3
 800ae0a:	4b7f      	ldr	r3, [pc, #508]	; (800b008 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	9200      	str	r2, [sp, #0]
 800ae10:	4b7e      	ldr	r3, [pc, #504]	; (800b00c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x25c>)
 800ae12:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ae16:	4621      	mov	r1, r4
 800ae18:	2001      	movs	r0, #1
 800ae1a:	f001 f969 	bl	800c0f0 <trace_print_module_function>

	if (MeasurementTimingBudgetMicroSeconds
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d205      	bcs.n	800ae32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x82>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ae26:	23fc      	movs	r3, #252	; 0xfc
 800ae28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ae2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae30:	e0e3      	b.n	800affa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ae32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ae3e:	f107 0314 	add.w	r3, r7, #20
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7fc fab3 	bl	80073b0 <VL53L0X_GetSequenceStepEnables>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ae50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d16e      	bne.n	800af36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
		(SchedulerSequenceSteps.TccOn  ||
 800ae58:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d105      	bne.n	800ae6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.MsrcOn ||
 800ae5e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xba>
		SchedulerSequenceSteps.DssOn)) {
 800ae64:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d065      	beq.n	800af36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ae6a:	f107 0310 	add.w	r3, r7, #16
 800ae6e:	461a      	mov	r2, r3
 800ae70:	2102      	movs	r1, #2
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff fb08 	bl	800a488 <get_sequence_step_timeout>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ae7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d002      	beq.n	800ae8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
			return Status;
 800ae86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ae8a:	e0b6      	b.n	800affa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ae8c:	7d3b      	ldrb	r3, [r7, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00f      	beq.n	800aeb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ae92:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ae94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae96:	4413      	add	r3, r2
 800ae98:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d204      	bcs.n	800aeac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800aea2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	643b      	str	r3, [r7, #64]	; 0x40
 800aeaa:	e002      	b.n	800aeb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aeac:	23fc      	movs	r3, #252	; 0xfc
 800aeae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800aeb2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d015      	beq.n	800aee6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x136>
			LOG_FUNCTION_END(Status);
 800aeba:	4b52      	ldr	r3, [pc, #328]	; (800b004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 800aebc:	681c      	ldr	r4, [r3, #0]
 800aebe:	f001 f995 	bl	800c1ec <HAL_GetTick>
 800aec2:	4603      	mov	r3, r0
 800aec4:	461a      	mov	r2, r3
 800aec6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aeca:	9302      	str	r3, [sp, #8]
 800aecc:	4b4e      	ldr	r3, [pc, #312]	; (800b008 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	9200      	str	r2, [sp, #0]
 800aed2:	4b4f      	ldr	r3, [pc, #316]	; (800b010 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 800aed4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800aed8:	4621      	mov	r1, r4
 800aeda:	2001      	movs	r0, #1
 800aedc:	f001 f908 	bl	800c0f0 <trace_print_module_function>
			return Status;
 800aee0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aee4:	e089      	b.n	800affa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800aee6:	7dbb      	ldrb	r3, [r7, #22]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d011      	beq.n	800af10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x160>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	4413      	add	r3, r2
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800aef6:	69fa      	ldr	r2, [r7, #28]
 800aef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d204      	bcs.n	800af08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x158>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800aefe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	643b      	str	r3, [r7, #64]	; 0x40
 800af06:	e016      	b.n	800af36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af08:	23fc      	movs	r3, #252	; 0xfc
 800af0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800af0e:	e012      	b.n	800af36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800af10:	7d7b      	ldrb	r3, [r7, #21]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00f      	beq.n	800af36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af1a:	4413      	add	r3, r2
 800af1c:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af22:	429a      	cmp	r2, r3
 800af24:	d204      	bcs.n	800af30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x180>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800af26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	643b      	str	r3, [r7, #64]	; 0x40
 800af2e:	e002      	b.n	800af36 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af30:	23fc      	movs	r3, #252	; 0xfc
 800af32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800af36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d015      	beq.n	800af6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ba>
		LOG_FUNCTION_END(Status);
 800af3e:	4b31      	ldr	r3, [pc, #196]	; (800b004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 800af40:	681c      	ldr	r4, [r3, #0]
 800af42:	f001 f953 	bl	800c1ec <HAL_GetTick>
 800af46:	4603      	mov	r3, r0
 800af48:	461a      	mov	r2, r3
 800af4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af4e:	9302      	str	r3, [sp, #8]
 800af50:	4b2d      	ldr	r3, [pc, #180]	; (800b008 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	9200      	str	r2, [sp, #0]
 800af56:	4b2e      	ldr	r3, [pc, #184]	; (800b010 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 800af58:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800af5c:	4621      	mov	r1, r4
 800af5e:	2001      	movs	r0, #1
 800af60:	f001 f8c6 	bl	800c0f0 <trace_print_module_function>
		return Status;
 800af64:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800af68:	e047      	b.n	800affa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24a>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d019      	beq.n	800afa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800af70:	f107 030c 	add.w	r3, r7, #12
 800af74:	461a      	mov	r2, r3
 800af76:	2103      	movs	r1, #3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff fa85 	bl	800a488 <get_sequence_step_timeout>
 800af7e:	4603      	mov	r3, r0
 800af80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af88:	4413      	add	r3, r2
 800af8a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800af8c:	69fa      	ldr	r2, [r7, #28]
 800af8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af90:	429a      	cmp	r2, r3
 800af92:	d204      	bcs.n	800af9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1ee>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800af94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	643b      	str	r3, [r7, #64]	; 0x40
 800af9c:	e002      	b.n	800afa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1f4>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800af9e:	23fc      	movs	r3, #252	; 0xfc
 800afa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800afa4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d111      	bne.n	800afd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>
		SchedulerSequenceSteps.FinalRangeOn) {
 800afac:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00e      	beq.n	800afd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x220>

		FinalRangeTimingBudgetMicroSeconds -=
 800afb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800afba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afbc:	2104      	movs	r1, #4
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff fb43 	bl	800a64a <set_sequence_step_timeout>
 800afc4:	4603      	mov	r3, r0
 800afc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	683a      	ldr	r2, [r7, #0]
 800afce:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 800afd0:	4b0c      	ldr	r3, [pc, #48]	; (800b004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x254>)
 800afd2:	681c      	ldr	r4, [r3, #0]
 800afd4:	f001 f90a 	bl	800c1ec <HAL_GetTick>
 800afd8:	4603      	mov	r3, r0
 800afda:	461a      	mov	r2, r3
 800afdc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800afe0:	9302      	str	r3, [sp, #8]
 800afe2:	4b09      	ldr	r3, [pc, #36]	; (800b008 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x258>)
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	9200      	str	r2, [sp, #0]
 800afe8:	4b09      	ldr	r3, [pc, #36]	; (800b010 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x260>)
 800afea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800afee:	4621      	mov	r1, r4
 800aff0:	2001      	movs	r0, #1
 800aff2:	f001 f87d 	bl	800c0f0 <trace_print_module_function>

	return Status;
 800aff6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800affa:	4618      	mov	r0, r3
 800affc:	374c      	adds	r7, #76	; 0x4c
 800affe:	46bd      	mov	sp, r7
 800b000:	bd90      	pop	{r4, r7, pc}
 800b002:	bf00      	nop
 800b004:	20000634 	.word	0x20000634
 800b008:	080117b0 	.word	0x080117b0
 800b00c:	08010f94 	.word	0x08010f94
 800b010:	08010fa8 	.word	0x08010fa8

0800b014 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b014:	b590      	push	{r4, r7, lr}
 800b016:	b095      	sub	sp, #84	; 0x54
 800b018:	af04      	add	r7, sp, #16
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b01e:	2300      	movs	r3, #0
 800b020:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b024:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b028:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b02a:	f240 7376 	movw	r3, #1910	; 0x776
 800b02e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b030:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b036:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b03a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b03c:	f240 234e 	movw	r3, #590	; 0x24e
 800b040:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b042:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b046:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b048:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b04e:	f240 2326 	movw	r3, #550	; 0x226
 800b052:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");
 800b058:	4b62      	ldr	r3, [pc, #392]	; (800b1e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 800b05a:	681c      	ldr	r4, [r3, #0]
 800b05c:	f001 f8c6 	bl	800c1ec <HAL_GetTick>
 800b060:	4603      	mov	r3, r0
 800b062:	461a      	mov	r2, r3
 800b064:	4b60      	ldr	r3, [pc, #384]	; (800b1e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	9200      	str	r2, [sp, #0]
 800b06a:	4b60      	ldr	r3, [pc, #384]	; (800b1ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d8>)
 800b06c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b070:	4621      	mov	r1, r4
 800b072:	2001      	movs	r0, #1
 800b074:	f001 f83c 	bl	800c0f0 <trace_print_module_function>

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07c:	441a      	add	r2, r3
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b082:	f107 0318 	add.w	r3, r7, #24
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7fc f991 	bl	80073b0 <VL53L0X_GetSequenceStepEnables>
 800b08e:	4603      	mov	r3, r0
 800b090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800b094:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d015      	beq.n	800b0c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb4>
		LOG_FUNCTION_END(Status);
 800b09c:	4b51      	ldr	r3, [pc, #324]	; (800b1e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 800b09e:	681c      	ldr	r4, [r3, #0]
 800b0a0:	f001 f8a4 	bl	800c1ec <HAL_GetTick>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	4b4e      	ldr	r3, [pc, #312]	; (800b1e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	9200      	str	r2, [sp, #0]
 800b0b4:	4b4e      	ldr	r3, [pc, #312]	; (800b1f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 800b0b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	2001      	movs	r0, #1
 800b0be:	f001 f817 	bl	800c0f0 <trace_print_module_function>
		return Status;
 800b0c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0c6:	e088      	b.n	800b1da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c6>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b0c8:	7e3b      	ldrb	r3, [r7, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d105      	bne.n	800b0da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.MsrcOn ||
 800b0ce:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d102      	bne.n	800b0da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		SchedulerSequenceSteps.DssOn) {
 800b0d4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d030      	beq.n	800b13c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>

		Status = get_sequence_step_timeout(Dev,
 800b0da:	f107 0310 	add.w	r3, r7, #16
 800b0de:	461a      	mov	r2, r3
 800b0e0:	2102      	movs	r1, #2
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7ff f9d0 	bl	800a488 <get_sequence_step_timeout>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b0ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d122      	bne.n	800b13c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			if (SchedulerSequenceSteps.TccOn) {
 800b0f6:	7e3b      	ldrb	r3, [r7, #24]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d007      	beq.n	800b10c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf8>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b100:	6939      	ldr	r1, [r7, #16]
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b106:	441a      	add	r2, r3
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b10c:	7ebb      	ldrb	r3, [r7, #26]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d009      	beq.n	800b126 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x112>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b116:	6939      	ldr	r1, [r7, #16]
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	440b      	add	r3, r1
 800b11c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b11e:	441a      	add	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	e00a      	b.n	800b13c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b126:	7e7b      	ldrb	r3, [r7, #25]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d007      	beq.n	800b13c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b130:	6939      	ldr	r1, [r7, #16]
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b136:	441a      	add	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b13c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b140:	2b00      	cmp	r3, #0
 800b142:	d114      	bne.n	800b16e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b144:	7efb      	ldrb	r3, [r7, #27]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d011      	beq.n	800b16e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
			Status = get_sequence_step_timeout(Dev,
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	461a      	mov	r2, r3
 800b150:	2103      	movs	r1, #3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff f998 	bl	800a488 <get_sequence_step_timeout>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b162:	68f9      	ldr	r1, [r7, #12]
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b166:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b168:	441a      	add	r2, r3
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b16e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b172:	2b00      	cmp	r3, #0
 800b174:	d114      	bne.n	800b1a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b176:	7f3b      	ldrb	r3, [r7, #28]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d011      	beq.n	800b1a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x18c>
			Status = get_sequence_step_timeout(Dev,
 800b17c:	f107 0314 	add.w	r3, r7, #20
 800b180:	461a      	mov	r2, r3
 800b182:	2104      	movs	r1, #4
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff f97f 	bl	800a488 <get_sequence_step_timeout>
 800b18a:	4603      	mov	r3, r0
 800b18c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b194:	6979      	ldr	r1, [r7, #20]
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b19a:	441a      	add	r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b1a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d103      	bne.n	800b1b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x19c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
 800b1b0:	4b0c      	ldr	r3, [pc, #48]	; (800b1e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d0>)
 800b1b2:	681c      	ldr	r4, [r3, #0]
 800b1b4:	f001 f81a 	bl	800c1ec <HAL_GetTick>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1c0:	9302      	str	r3, [sp, #8]
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1d4>)
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	9200      	str	r2, [sp, #0]
 800b1c8:	4b09      	ldr	r3, [pc, #36]	; (800b1f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1dc>)
 800b1ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	f000 ff8d 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800b1d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3744      	adds	r7, #68	; 0x44
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd90      	pop	{r4, r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000634 	.word	0x20000634
 800b1e8:	080117e4 	.word	0x080117e4
 800b1ec:	08010f94 	.word	0x08010f94
 800b1f0:	08010fa8 	.word	0x08010fa8

0800b1f4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b1f4:	b590      	push	{r4, r7, lr}
 800b1f6:	b08d      	sub	sp, #52	; 0x34
 800b1f8:	af04      	add	r7, sp, #16
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	77fb      	strb	r3, [r7, #31]
	uint8_t NumberOfWrites;
	uint8_t Address;
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");
 800b202:	4b7f      	ldr	r3, [pc, #508]	; (800b400 <VL53L0X_load_tuning_settings+0x20c>)
 800b204:	681c      	ldr	r4, [r3, #0]
 800b206:	f000 fff1 	bl	800c1ec <HAL_GetTick>
 800b20a:	4603      	mov	r3, r0
 800b20c:	461a      	mov	r2, r3
 800b20e:	4b7d      	ldr	r3, [pc, #500]	; (800b404 <VL53L0X_load_tuning_settings+0x210>)
 800b210:	9301      	str	r3, [sp, #4]
 800b212:	9200      	str	r2, [sp, #0]
 800b214:	4b7c      	ldr	r3, [pc, #496]	; (800b408 <VL53L0X_load_tuning_settings+0x214>)
 800b216:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b21a:	4621      	mov	r1, r4
 800b21c:	2001      	movs	r0, #1
 800b21e:	f000 ff67 	bl	800c0f0 <trace_print_module_function>

	Index = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b226:	e0c6      	b.n	800b3b6 <VL53L0X_load_tuning_settings+0x1c2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	4413      	add	r3, r2
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	3301      	adds	r3, #1
 800b236:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b238:	7cfb      	ldrb	r3, [r7, #19]
 800b23a:	2bff      	cmp	r3, #255	; 0xff
 800b23c:	f040 808d 	bne.w	800b35a <VL53L0X_load_tuning_settings+0x166>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	4413      	add	r3, r2
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	747b      	strb	r3, [r7, #17]
			Index++;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	3301      	adds	r3, #1
 800b24e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b250:	7c7b      	ldrb	r3, [r7, #17]
 800b252:	2b03      	cmp	r3, #3
 800b254:	d87e      	bhi.n	800b354 <VL53L0X_load_tuning_settings+0x160>
 800b256:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <VL53L0X_load_tuning_settings+0x68>)
 800b258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25c:	0800b26d 	.word	0x0800b26d
 800b260:	0800b2a7 	.word	0x0800b2a7
 800b264:	0800b2e1 	.word	0x0800b2e1
 800b268:	0800b31b 	.word	0x0800b31b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	4413      	add	r3, r2
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	743b      	strb	r3, [r7, #16]
				Index++;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	3301      	adds	r3, #1
 800b27a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	4413      	add	r3, r2
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	3301      	adds	r3, #1
 800b28a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b28c:	7c3b      	ldrb	r3, [r7, #16]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	021b      	lsls	r3, r3, #8
 800b292:	b29a      	uxth	r2, r3
 800b294:	7bfb      	ldrb	r3, [r7, #15]
 800b296:	b29b      	uxth	r3, r3
 800b298:	4413      	add	r3, r2
 800b29a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	89ba      	ldrh	r2, [r7, #12]
 800b2a0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b2a4:	e087      	b.n	800b3b6 <VL53L0X_load_tuning_settings+0x1c2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	743b      	strb	r3, [r7, #16]
				Index++;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b2c6:	7c3b      	ldrb	r3, [r7, #16]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	021b      	lsls	r3, r3, #8
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	4413      	add	r3, r2
 800b2d4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	89ba      	ldrh	r2, [r7, #12]
 800b2da:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b2de:	e06a      	b.n	800b3b6 <VL53L0X_load_tuning_settings+0x1c2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	743b      	strb	r3, [r7, #16]
				Index++;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b300:	7c3b      	ldrb	r3, [r7, #16]
 800b302:	b29b      	uxth	r3, r3
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	b29a      	uxth	r2, r3
 800b308:	7bfb      	ldrb	r3, [r7, #15]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	4413      	add	r3, r2
 800b30e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	89ba      	ldrh	r2, [r7, #12]
 800b314:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b318:	e04d      	b.n	800b3b6 <VL53L0X_load_tuning_settings+0x1c2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	4413      	add	r3, r2
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	743b      	strb	r3, [r7, #16]
				Index++;
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	3301      	adds	r3, #1
 800b328:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	3301      	adds	r3, #1
 800b338:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b33a:	7c3b      	ldrb	r3, [r7, #16]
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	021b      	lsls	r3, r3, #8
 800b340:	b29a      	uxth	r2, r3
 800b342:	7bfb      	ldrb	r3, [r7, #15]
 800b344:	b29b      	uxth	r3, r3
 800b346:	4413      	add	r3, r2
 800b348:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	89ba      	ldrh	r2, [r7, #12]
 800b34e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b352:	e030      	b.n	800b3b6 <VL53L0X_load_tuning_settings+0x1c2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b354:	23fc      	movs	r3, #252	; 0xfc
 800b356:	77fb      	strb	r3, [r7, #31]
 800b358:	e02d      	b.n	800b3b6 <VL53L0X_load_tuning_settings+0x1c2>
			}

		} else if (NumberOfWrites <= 4) {
 800b35a:	7cfb      	ldrb	r3, [r7, #19]
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d828      	bhi.n	800b3b2 <VL53L0X_load_tuning_settings+0x1be>
			Address = *(pTuningSettingBuffer + Index);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	4413      	add	r3, r2
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	3301      	adds	r3, #1
 800b36e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b370:	2300      	movs	r3, #0
 800b372:	61bb      	str	r3, [r7, #24]
 800b374:	e00f      	b.n	800b396 <VL53L0X_load_tuning_settings+0x1a2>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	4413      	add	r3, r2
 800b37c:	7819      	ldrb	r1, [r3, #0]
 800b37e:	f107 0208 	add.w	r2, r7, #8
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	4413      	add	r3, r2
 800b386:	460a      	mov	r2, r1
 800b388:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	3301      	adds	r3, #1
 800b38e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	3301      	adds	r3, #1
 800b394:	61bb      	str	r3, [r7, #24]
 800b396:	7cfb      	ldrb	r3, [r7, #19]
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	dbeb      	blt.n	800b376 <VL53L0X_load_tuning_settings+0x182>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b39e:	7cfb      	ldrb	r3, [r7, #19]
 800b3a0:	f107 0208 	add.w	r2, r7, #8
 800b3a4:	7cb9      	ldrb	r1, [r7, #18]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7fa fec6 	bl	8006138 <VL53L0X_WriteMulti>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	77fb      	strb	r3, [r7, #31]
 800b3b0:	e001      	b.n	800b3b6 <VL53L0X_load_tuning_settings+0x1c2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b3b2:	23fc      	movs	r3, #252	; 0xfc
 800b3b4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d004      	beq.n	800b3cc <VL53L0X_load_tuning_settings+0x1d8>
 800b3c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f43f af2e 	beq.w	800b228 <VL53L0X_load_tuning_settings+0x34>
		}
	}

	LOG_FUNCTION_END(Status);
 800b3cc:	4b0c      	ldr	r3, [pc, #48]	; (800b400 <VL53L0X_load_tuning_settings+0x20c>)
 800b3ce:	681c      	ldr	r4, [r3, #0]
 800b3d0:	f000 ff0c 	bl	800c1ec <HAL_GetTick>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3dc:	9302      	str	r3, [sp, #8]
 800b3de:	4b09      	ldr	r3, [pc, #36]	; (800b404 <VL53L0X_load_tuning_settings+0x210>)
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	9200      	str	r2, [sp, #0]
 800b3e4:	4b09      	ldr	r3, [pc, #36]	; (800b40c <VL53L0X_load_tuning_settings+0x218>)
 800b3e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	f000 fe7f 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800b3f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3724      	adds	r7, #36	; 0x24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd90      	pop	{r4, r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20000634 	.word	0x20000634
 800b404:	08011818 	.word	0x08011818
 800b408:	08010f94 	.word	0x08010f94
 800b40c:	08010fa8 	.word	0x08010fa8

0800b410 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b088      	sub	sp, #32
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b41c:	2300      	movs	r3, #0
 800b41e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b426:	f107 0313 	add.w	r3, r7, #19
 800b42a:	4619      	mov	r1, r3
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7fc f8a3 	bl	8007578 <VL53L0X_GetXTalkCompensationEnable>
 800b432:	4603      	mov	r3, r0
 800b434:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b436:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d111      	bne.n	800b462 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b43e:	7cfb      	ldrb	r3, [r7, #19]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00e      	beq.n	800b462 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	8a9b      	ldrh	r3, [r3, #20]
 800b44e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	fb02 f303 	mul.w	r3, r2, r3
 800b456:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	3380      	adds	r3, #128	; 0x80
 800b45c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b462:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b470:	b590      	push	{r4, r7, lr}
 800b472:	b089      	sub	sp, #36	; 0x24
 800b474:	af02      	add	r7, sp, #8
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");
 800b480:	4b16      	ldr	r3, [pc, #88]	; (800b4dc <VL53L0X_get_total_signal_rate+0x6c>)
 800b482:	681c      	ldr	r4, [r3, #0]
 800b484:	f000 feb2 	bl	800c1ec <HAL_GetTick>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	4b14      	ldr	r3, [pc, #80]	; (800b4e0 <VL53L0X_get_total_signal_rate+0x70>)
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	9200      	str	r2, [sp, #0]
 800b492:	4b14      	ldr	r3, [pc, #80]	; (800b4e4 <VL53L0X_get_total_signal_rate+0x74>)
 800b494:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b498:	4621      	mov	r1, r4
 800b49a:	2001      	movs	r0, #1
 800b49c:	f000 fe28 	bl	800c0f0 <trace_print_module_function>

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b4a8:	f107 0310 	add.w	r3, r7, #16
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7ff ffad 	bl	800b410 <VL53L0X_get_total_xtalk_rate>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b4ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d105      	bne.n	800b4ce <VL53L0X_get_total_signal_rate+0x5e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	441a      	add	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]

	return Status;
 800b4ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd90      	pop	{r4, r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20000634 	.word	0x20000634
 800b4e0:	08011838 	.word	0x08011838
 800b4e4:	08010f94 	.word	0x08010f94

0800b4e8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b4e8:	b590      	push	{r4, r7, lr}
 800b4ea:	b09f      	sub	sp, #124	; 0x7c
 800b4ec:	af04      	add	r7, sp, #16
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b4f6:	2312      	movs	r3, #18
 800b4f8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b4fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4fe:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b500:	2342      	movs	r3, #66	; 0x42
 800b502:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b504:	2306      	movs	r3, #6
 800b506:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b508:	2307      	movs	r3, #7
 800b50a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b50c:	2300      	movs	r3, #0
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");
 800b512:	4b94      	ldr	r3, [pc, #592]	; (800b764 <VL53L0X_calc_dmax+0x27c>)
 800b514:	681c      	ldr	r4, [r3, #0]
 800b516:	f000 fe69 	bl	800c1ec <HAL_GetTick>
 800b51a:	4603      	mov	r3, r0
 800b51c:	461a      	mov	r2, r3
 800b51e:	4b92      	ldr	r3, [pc, #584]	; (800b768 <VL53L0X_calc_dmax+0x280>)
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	9200      	str	r2, [sp, #0]
 800b524:	4b91      	ldr	r3, [pc, #580]	; (800b76c <VL53L0X_calc_dmax+0x284>)
 800b526:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b52a:	4621      	mov	r1, r4
 800b52c:	2001      	movs	r0, #1
 800b52e:	f000 fddf 	bl	800c0f0 <trace_print_module_function>

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800b538:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b540:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b546:	fb02 f303 	mul.w	r3, r2, r3
 800b54a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54e:	3380      	adds	r3, #128	; 0x80
 800b550:	0a1b      	lsrs	r3, r3, #8
 800b552:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b558:	fb02 f303 	mul.w	r3, r2, r3
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d01a      	beq.n	800b59e <VL53L0X_calc_dmax+0xb6>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	029b      	lsls	r3, r3, #10
 800b56c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b574:	4413      	add	r3, r2
 800b576:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b578:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b580:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b582:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b584:	4613      	mov	r3, r2
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	4413      	add	r3, r2
 800b58a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b58e:	fb03 f303 	mul.w	r3, r3, r3
 800b592:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b596:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b59a:	0c1b      	lsrs	r3, r3, #16
 800b59c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5a2:	fb02 f303 	mul.w	r3, r2, r3
 800b5a6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b5ae:	0c1b      	lsrs	r3, r3, #16
 800b5b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b4:	fb03 f303 	mul.w	r3, r3, r3
 800b5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b5ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b5bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b5c0:	0c1b      	lsrs	r3, r3, #16
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c6:	085a      	lsrs	r2, r3, #1
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	441a      	add	r2, r3
 800b5cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d8:	fb02 f303 	mul.w	r3, r2, r3
 800b5dc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5e4:	d302      	bcc.n	800b5ec <VL53L0X_calc_dmax+0x104>
		minSignalNeeded_p3 = 0xfff00000;
 800b5e6:	4b62      	ldr	r3, [pc, #392]	; (800b770 <VL53L0X_calc_dmax+0x288>)
 800b5e8:	663b      	str	r3, [r7, #96]	; 0x60
 800b5ea:	e015      	b.n	800b618 <VL53L0X_calc_dmax+0x130>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ee:	085a      	lsrs	r2, r3, #1
 800b5f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b5f2:	441a      	add	r2, r3
 800b5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5fa:	67fb      	str	r3, [r7, #124]	; 0x7c
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b5fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b5fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b600:	fb02 f303 	mul.w	r3, r2, r3
 800b604:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b608:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b60c:	0c1b      	lsrs	r3, r3, #16
 800b60e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b612:	fb03 f303 	mul.w	r3, r3, r3
 800b616:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b61a:	039b      	lsls	r3, r3, #14
 800b61c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b620:	4a54      	ldr	r2, [pc, #336]	; (800b774 <VL53L0X_calc_dmax+0x28c>)
 800b622:	fba2 2303 	umull	r2, r3, r2, r3
 800b626:	099b      	lsrs	r3, r3, #6
 800b628:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62c:	fb03 f303 	mul.w	r3, r3, r3
 800b630:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b634:	fb03 f303 	mul.w	r3, r3, r3
 800b638:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b63a:	6a3b      	ldr	r3, [r7, #32]
 800b63c:	3308      	adds	r3, #8
 800b63e:	091b      	lsrs	r3, r3, #4
 800b640:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b644:	6a3b      	ldr	r3, [r7, #32]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b64c:	4613      	mov	r3, r2
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	4413      	add	r3, r2
 800b652:	011b      	lsls	r3, r3, #4
 800b654:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b65c:	0b9b      	lsrs	r3, r3, #14
 800b65e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b664:	4413      	add	r3, r2
 800b666:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b66c:	085b      	lsrs	r3, r3, #1
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	4413      	add	r3, r2
 800b672:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b674:	69ba      	ldr	r2, [r7, #24]
 800b676:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b67e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	039b      	lsls	r3, r3, #14
 800b684:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	085b      	lsrs	r3, r3, #1
 800b68a:	69ba      	ldr	r2, [r7, #24]
 800b68c:	4413      	add	r3, r2
 800b68e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b690:	69ba      	ldr	r2, [r7, #24]
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	fbb2 f3f3 	udiv	r3, r2, r3
 800b698:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b69e:	fb02 f303 	mul.w	r3, r2, r3
 800b6a2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b6aa:	4a32      	ldr	r2, [pc, #200]	; (800b774 <VL53L0X_calc_dmax+0x28c>)
 800b6ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b0:	099b      	lsrs	r3, r3, #6
 800b6b2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	011b      	lsls	r3, r3, #4
 800b6b8:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b6c0:	4a2c      	ldr	r2, [pc, #176]	; (800b774 <VL53L0X_calc_dmax+0x28c>)
 800b6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c6:	099b      	lsrs	r3, r3, #6
 800b6c8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b6ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6cc:	3380      	adds	r3, #128	; 0x80
 800b6ce:	0a1b      	lsrs	r3, r3, #8
 800b6d0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d008      	beq.n	800b6ea <VL53L0X_calc_dmax+0x202>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	085a      	lsrs	r2, r3, #1
 800b6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6de:	441a      	add	r2, r3
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6e8:	e001      	b.n	800b6ee <VL53L0X_calc_dmax+0x206>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800b6ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b6f0:	f7fe f84c 	bl	800978c <VL53L0X_isqrt>
 800b6f4:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d008      	beq.n	800b70e <VL53L0X_calc_dmax+0x226>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	085a      	lsrs	r2, r3, #1
 800b700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b702:	441a      	add	r2, r3
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b70c:	e001      	b.n	800b712 <VL53L0X_calc_dmax+0x22a>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b712:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b714:	f7fe f83a 	bl	800978c <VL53L0X_isqrt>
 800b718:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b71a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b726:	429a      	cmp	r2, r3
 800b728:	d903      	bls.n	800b732 <VL53L0X_calc_dmax+0x24a>
		*pdmax_mm = dmaxAmbient;
 800b72a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b72e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b730:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
 800b732:	4b0c      	ldr	r3, [pc, #48]	; (800b764 <VL53L0X_calc_dmax+0x27c>)
 800b734:	681c      	ldr	r4, [r3, #0]
 800b736:	f000 fd59 	bl	800c1ec <HAL_GetTick>
 800b73a:	4603      	mov	r3, r0
 800b73c:	461a      	mov	r2, r3
 800b73e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 800b742:	9302      	str	r3, [sp, #8]
 800b744:	4b08      	ldr	r3, [pc, #32]	; (800b768 <VL53L0X_calc_dmax+0x280>)
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	9200      	str	r2, [sp, #0]
 800b74a:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <VL53L0X_calc_dmax+0x290>)
 800b74c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b750:	4621      	mov	r1, r4
 800b752:	2001      	movs	r0, #1
 800b754:	f000 fccc 	bl	800c0f0 <trace_print_module_function>

	return Status;
 800b758:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	376c      	adds	r7, #108	; 0x6c
 800b760:	46bd      	mov	sp, r7
 800b762:	bd90      	pop	{r4, r7, pc}
 800b764:	20000634 	.word	0x20000634
 800b768:	08011858 	.word	0x08011858
 800b76c:	08010f94 	.word	0x08010f94
 800b770:	fff00000 	.word	0xfff00000
 800b774:	10624dd3 	.word	0x10624dd3
 800b778:	08010fa8 	.word	0x08010fa8

0800b77c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b77c:	b590      	push	{r4, r7, lr}
 800b77e:	b0b5      	sub	sp, #212	; 0xd4
 800b780:	af04      	add	r7, sp, #16
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b78a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b78e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b792:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b79a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b79e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b7a2:	f241 235c 	movw	r3, #4700	; 0x125c
 800b7a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b7aa:	4baf      	ldr	r3, [pc, #700]	; (800ba68 <VL53L0X_calc_sigma_estimate+0x2ec>)
 800b7ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b7b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b7b4:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b7b6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b7ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c2:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b7c4:	4ba9      	ldr	r3, [pc, #676]	; (800ba6c <VL53L0X_calc_sigma_estimate+0x2f0>)
 800b7c6:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b7c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7cc:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b7ce:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b7d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b7d4:	f240 6377 	movw	r3, #1655	; 0x677
 800b7d8:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * @{
	 *
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");
 800b7e0:	4ba3      	ldr	r3, [pc, #652]	; (800ba70 <VL53L0X_calc_sigma_estimate+0x2f4>)
 800b7e2:	681c      	ldr	r4, [r3, #0]
 800b7e4:	f000 fd02 	bl	800c1ec <HAL_GetTick>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	4ba1      	ldr	r3, [pc, #644]	; (800ba74 <VL53L0X_calc_sigma_estimate+0x2f8>)
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	9200      	str	r2, [sp, #0]
 800b7f2:	4ba1      	ldr	r3, [pc, #644]	; (800ba78 <VL53L0X_calc_sigma_estimate+0x2fc>)
 800b7f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	f000 fc78 	bl	800c0f0 <trace_print_module_function>

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6a1b      	ldr	r3, [r3, #32]
 800b804:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b812:	0c1b      	lsrs	r3, r3, #16
 800b814:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b81c:	f107 0310 	add.w	r3, r7, #16
 800b820:	461a      	mov	r2, r3
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f7ff fe23 	bl	800b470 <VL53L0X_get_total_signal_rate>
 800b82a:	4603      	mov	r3, r0
 800b82c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b830:	f107 0314 	add.w	r3, r7, #20
 800b834:	461a      	mov	r2, r3
 800b836:	68b9      	ldr	r1, [r7, #8]
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff fde9 	bl	800b410 <VL53L0X_get_total_xtalk_rate>
 800b83e:	4603      	mov	r3, r0
 800b840:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b84a:	fb02 f303 	mul.w	r3, r2, r3
 800b84e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b852:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b856:	0c1b      	lsrs	r3, r3, #16
 800b858:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b860:	fb02 f303 	mul.w	r3, r2, r3
 800b864:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b868:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b86c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b86e:	429a      	cmp	r2, r3
 800b870:	d902      	bls.n	800b878 <VL53L0X_calc_sigma_estimate+0xfc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b874:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b878:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d168      	bne.n	800b952 <VL53L0X_calc_sigma_estimate+0x1d6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b886:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b890:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b894:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b898:	461a      	mov	r2, r3
 800b89a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7fe fd9e 	bl	800a3e0 <VL53L0X_calc_timeout_mclks>
 800b8a4:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b8ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b8b6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b8ba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7fe fd8b 	bl	800a3e0 <VL53L0X_calc_timeout_mclks>
 800b8ca:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b8d2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b8d6:	2b08      	cmp	r3, #8
 800b8d8:	d102      	bne.n	800b8e0 <VL53L0X_calc_sigma_estimate+0x164>
			vcselWidth = 2;
 800b8da:	2302      	movs	r3, #2
 800b8dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b8e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8e4:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b8e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	02db      	lsls	r3, r3, #11
 800b8f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b8f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b8fc:	4a5f      	ldr	r2, [pc, #380]	; (800ba7c <VL53L0X_calc_sigma_estimate+0x300>)
 800b8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b902:	099b      	lsrs	r3, r3, #6
 800b904:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b90c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b90e:	fb02 f303 	mul.w	r3, r2, r3
 800b912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b91a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b91e:	4a57      	ldr	r2, [pc, #348]	; (800ba7c <VL53L0X_calc_sigma_estimate+0x300>)
 800b920:	fba2 2303 	umull	r2, r3, r2, r3
 800b924:	099b      	lsrs	r3, r3, #6
 800b926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	3380      	adds	r3, #128	; 0x80
 800b92e:	0a1b      	lsrs	r3, r3, #8
 800b930:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b938:	fb02 f303 	mul.w	r3, r2, r3
 800b93c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b944:	3380      	adds	r3, #128	; 0x80
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	021b      	lsls	r3, r3, #8
 800b950:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b952:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b956:	2b00      	cmp	r3, #0
 800b958:	d015      	beq.n	800b986 <VL53L0X_calc_sigma_estimate+0x20a>
		LOG_FUNCTION_END(Status);
 800b95a:	4b45      	ldr	r3, [pc, #276]	; (800ba70 <VL53L0X_calc_sigma_estimate+0x2f4>)
 800b95c:	681c      	ldr	r4, [r3, #0]
 800b95e:	f000 fc45 	bl	800c1ec <HAL_GetTick>
 800b962:	4603      	mov	r3, r0
 800b964:	461a      	mov	r2, r3
 800b966:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b96a:	9302      	str	r3, [sp, #8]
 800b96c:	4b41      	ldr	r3, [pc, #260]	; (800ba74 <VL53L0X_calc_sigma_estimate+0x2f8>)
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	9200      	str	r2, [sp, #0]
 800b972:	4b43      	ldr	r3, [pc, #268]	; (800ba80 <VL53L0X_calc_sigma_estimate+0x304>)
 800b974:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b978:	4621      	mov	r1, r4
 800b97a:	2001      	movs	r0, #1
 800b97c:	f000 fbb8 	bl	800c0f0 <trace_print_module_function>
		return Status;
 800b980:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b984:	e178      	b.n	800bc78 <VL53L0X_calc_sigma_estimate+0x4fc>
	}

	if (peakSignalRate_kcps == 0) {
 800b986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10c      	bne.n	800b9a6 <VL53L0X_calc_sigma_estimate+0x22a>
		*pSigmaEstimate = cSigmaEstMax;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b992:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b99a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	e153      	b.n	800bc4e <VL53L0X_calc_sigma_estimate+0x4d2>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b9a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d102      	bne.n	800b9b4 <VL53L0X_calc_sigma_estimate+0x238>
			vcselTotalEventsRtn = 1;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b9b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9b8:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b9ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9bc:	041a      	lsls	r2, r3, #16
 800b9be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b9c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d902      	bls.n	800b9d8 <VL53L0X_calc_sigma_estimate+0x25c>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b9d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b9d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b9e0:	fb02 f303 	mul.w	r3, r2, r3
 800b9e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b9e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fd fec9 	bl	800978c <VL53L0X_isqrt>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	891b      	ldrh	r3, [r3, #8]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba08:	fb02 f303 	mul.w	r3, r2, r3
 800ba0c:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ba0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba10:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ba12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba16:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ba18:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ba1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ba1e:	4a17      	ldr	r2, [pc, #92]	; (800ba7c <VL53L0X_calc_sigma_estimate+0x300>)
 800ba20:	fba2 2303 	umull	r2, r3, r2, r3
 800ba24:	099b      	lsrs	r3, r3, #6
 800ba26:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ba28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ba30:	4a12      	ldr	r2, [pc, #72]	; (800ba7c <VL53L0X_calc_sigma_estimate+0x300>)
 800ba32:	fba2 2303 	umull	r2, r3, r2, r3
 800ba36:	099b      	lsrs	r3, r3, #6
 800ba38:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800ba3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ba40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	bfb8      	it	lt
 800ba4c:	425b      	neglt	r3, r3
 800ba4e:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ba50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba52:	021b      	lsls	r3, r3, #8
 800ba54:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	7e1b      	ldrb	r3, [r3, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d012      	beq.n	800ba84 <VL53L0X_calc_sigma_estimate+0x308>
			pwMult = 1 << 16;
 800ba5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba66:	e03a      	b.n	800bade <VL53L0X_calc_sigma_estimate+0x362>
 800ba68:	028f87ae 	.word	0x028f87ae
 800ba6c:	0006999a 	.word	0x0006999a
 800ba70:	20000634 	.word	0x20000634
 800ba74:	0801186c 	.word	0x0801186c
 800ba78:	08010f94 	.word	0x08010f94
 800ba7c:	10624dd3 	.word	0x10624dd3
 800ba80:	08010fa8 	.word	0x08010fa8
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800ba84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ba92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba94:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800ba98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba9c:	fb02 f303 	mul.w	r3, r2, r3
 800baa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800baa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800baa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baaa:	4413      	add	r3, r2
 800baac:	0c1b      	lsrs	r3, r3, #16
 800baae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800bab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bab6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800baba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800babe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bac2:	085b      	lsrs	r3, r3, #1
 800bac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800bac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bacc:	fb03 f303 	mul.w	r3, r3, r3
 800bad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800bad4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bad8:	0b9b      	lsrs	r3, r3, #14
 800bada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800bade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bae4:	fb02 f303 	mul.w	r3, r2, r3
 800bae8:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800baf0:	0c1b      	lsrs	r3, r3, #16
 800baf2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	fb03 f303 	mul.w	r3, r3, r3
 800bafa:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800bafc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bb00:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bb08:	0c1b      	lsrs	r3, r3, #16
 800bb0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	fb03 f303 	mul.w	r3, r3, r3
 800bb12:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800bb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb18:	4413      	add	r3, r2
 800bb1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800bb1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb1e:	f7fd fe35 	bl	800978c <VL53L0X_isqrt>
 800bb22:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	041b      	lsls	r3, r3, #16
 800bb28:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	3332      	adds	r3, #50	; 0x32
 800bb2e:	4a54      	ldr	r2, [pc, #336]	; (800bc80 <VL53L0X_calc_sigma_estimate+0x504>)
 800bb30:	fba2 2303 	umull	r2, r3, r2, r3
 800bb34:	095a      	lsrs	r2, r3, #5
 800bb36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb38:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800bb40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb44:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800bb48:	fb02 f303 	mul.w	r3, r2, r3
 800bb4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800bb50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb54:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800bb58:	3308      	adds	r3, #8
 800bb5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800bb5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb62:	4a48      	ldr	r2, [pc, #288]	; (800bc84 <VL53L0X_calc_sigma_estimate+0x508>)
 800bb64:	fba2 2303 	umull	r2, r3, r2, r3
 800bb68:	0b5b      	lsrs	r3, r3, #13
 800bb6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800bb6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d902      	bls.n	800bb7e <VL53L0X_calc_sigma_estimate+0x402>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800bb78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800bb7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800bb8c:	4a3e      	ldr	r2, [pc, #248]	; (800bc88 <VL53L0X_calc_sigma_estimate+0x50c>)
 800bb8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb92:	099b      	lsrs	r3, r3, #6
 800bb94:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800bb9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb9e:	441a      	add	r2, r3
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd fdf0 	bl	800978c <VL53L0X_isqrt>
 800bbac:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	021b      	lsls	r3, r3, #8
 800bbb2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bbba:	4a33      	ldr	r2, [pc, #204]	; (800bc88 <VL53L0X_calc_sigma_estimate+0x50c>)
 800bbbc:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc0:	099b      	lsrs	r3, r3, #6
 800bbc2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800bbc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbc8:	fb03 f303 	mul.w	r3, r3, r3
 800bbcc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	fb03 f303 	mul.w	r3, r3, r3
 800bbd4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800bbd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbda:	4413      	add	r3, r2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fd fdd5 	bl	800978c <VL53L0X_isqrt>
 800bbe2:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbea:	fb02 f303 	mul.w	r3, r2, r3
 800bbee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800bbf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d009      	beq.n	800bc0c <VL53L0X_calc_sigma_estimate+0x490>
 800bbf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d005      	beq.n	800bc0c <VL53L0X_calc_sigma_estimate+0x490>
 800bc00:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bc04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d903      	bls.n	800bc14 <VL53L0X_calc_sigma_estimate+0x498>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800bc0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bc1a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800bc26:	6939      	ldr	r1, [r7, #16]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	9303      	str	r3, [sp, #12]
 800bc2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bc30:	9302      	str	r3, [sp, #8]
 800bc32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bc36:	9301      	str	r3, [sp, #4]
 800bc38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7ff fc50 	bl	800b4e8 <VL53L0X_calc_dmax>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			sigmaEstimateP2,
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <VL53L0X_calc_sigma_estimate+0x510>)
 800bc50:	681c      	ldr	r4, [r3, #0]
 800bc52:	f000 facb 	bl	800c1ec <HAL_GetTick>
 800bc56:	4603      	mov	r3, r0
 800bc58:	461a      	mov	r2, r3
 800bc5a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <VL53L0X_calc_sigma_estimate+0x514>)
 800bc62:	9301      	str	r3, [sp, #4]
 800bc64:	9200      	str	r2, [sp, #0]
 800bc66:	4b0b      	ldr	r3, [pc, #44]	; (800bc94 <VL53L0X_calc_sigma_estimate+0x518>)
 800bc68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	2001      	movs	r0, #1
 800bc70:	f000 fa3e 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800bc74:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	37c4      	adds	r7, #196	; 0xc4
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd90      	pop	{r4, r7, pc}
 800bc80:	51eb851f 	.word	0x51eb851f
 800bc84:	d1b71759 	.word	0xd1b71759
 800bc88:	10624dd3 	.word	0x10624dd3
 800bc8c:	20000634 	.word	0x20000634
 800bc90:	0801186c 	.word	0x0801186c
 800bc94:	08010fa8 	.word	0x08010fa8

0800bc98 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800bc98:	b590      	push	{r4, r7, lr}
 800bc9a:	b095      	sub	sp, #84	; 0x54
 800bc9c:	af04      	add	r7, sp, #16
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	607a      	str	r2, [r7, #4]
 800bca2:	461a      	mov	r2, r3
 800bca4:	460b      	mov	r3, r1
 800bca6:	72fb      	strb	r3, [r7, #11]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcac:	2300      	movs	r3, #0
 800bcae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800bcca:	2300      	movs	r3, #0
 800bccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	613b      	str	r3, [r7, #16]
	FixPoint1616_t LastSignalRefMcps;

	LOG_FUNCTION_START("");
 800bcea:	4baa      	ldr	r3, [pc, #680]	; (800bf94 <VL53L0X_get_pal_range_status+0x2fc>)
 800bcec:	681c      	ldr	r4, [r3, #0]
 800bcee:	f000 fa7d 	bl	800c1ec <HAL_GetTick>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4ba8      	ldr	r3, [pc, #672]	; (800bf98 <VL53L0X_get_pal_range_status+0x300>)
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	9200      	str	r2, [sp, #0]
 800bcfc:	4ba7      	ldr	r3, [pc, #668]	; (800bf9c <VL53L0X_get_pal_range_status+0x304>)
 800bcfe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bd02:	4621      	mov	r1, r4
 800bd04:	2001      	movs	r0, #1
 800bd06:	f000 f9f3 	bl	800c0f0 <trace_print_module_function>
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800bd0a:	7afb      	ldrb	r3, [r7, #11]
 800bd0c:	10db      	asrs	r3, r3, #3
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800bd18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d017      	beq.n	800bd50 <VL53L0X_get_pal_range_status+0xb8>
 800bd20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd24:	2b05      	cmp	r3, #5
 800bd26:	d013      	beq.n	800bd50 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 5 ||
 800bd28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd2c:	2b07      	cmp	r3, #7
 800bd2e:	d00f      	beq.n	800bd50 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 7 ||
 800bd30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd34:	2b0c      	cmp	r3, #12
 800bd36:	d00b      	beq.n	800bd50 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 12 ||
 800bd38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd3c:	2b0d      	cmp	r3, #13
 800bd3e:	d007      	beq.n	800bd50 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 13 ||
 800bd40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd44:	2b0e      	cmp	r3, #14
 800bd46:	d003      	beq.n	800bd50 <VL53L0X_get_pal_range_status+0xb8>
		DeviceRangeStatusInternal == 14 ||
 800bd48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bd4c:	2b0f      	cmp	r3, #15
 800bd4e:	d103      	bne.n	800bd58 <VL53L0X_get_pal_range_status+0xc0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800bd50:	2301      	movs	r3, #1
 800bd52:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800bd56:	e002      	b.n	800bd5e <VL53L0X_get_pal_range_status+0xc6>
	} else {
		NoneFlag = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bd5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d109      	bne.n	800bd7a <VL53L0X_get_pal_range_status+0xe2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bd66:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	68f8      	ldr	r0, [r7, #12]
 800bd70:	f7fb fd56 	bl	8007820 <VL53L0X_GetLimitCheckEnable>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800bd7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d02e      	beq.n	800bde0 <VL53L0X_get_pal_range_status+0x148>
 800bd82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d12a      	bne.n	800bde0 <VL53L0X_get_pal_range_status+0x148>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800bd8a:	f107 0310 	add.w	r3, r7, #16
 800bd8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bd92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f7ff fcf1 	bl	800b77c <VL53L0X_calc_sigma_estimate>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800bda0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d103      	bne.n	800bdb0 <VL53L0X_get_pal_range_status+0x118>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdae:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800bdb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d113      	bne.n	800bde0 <VL53L0X_get_pal_range_status+0x148>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800bdb8:	f107 0320 	add.w	r3, r7, #32
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f7fb fe05 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d006      	beq.n	800bde0 <VL53L0X_get_pal_range_status+0x148>
				(SigmaEstimate > SigmaLimitValue))
 800bdd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d902      	bls.n	800bde0 <VL53L0X_get_pal_range_status+0x148>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800bdda:	2301      	movs	r3, #1
 800bddc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bde0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d109      	bne.n	800bdfc <VL53L0X_get_pal_range_status+0x164>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bde8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800bdec:	461a      	mov	r2, r3
 800bdee:	2102      	movs	r1, #2
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f7fb fd15 	bl	8007820 <VL53L0X_GetLimitCheckEnable>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bdfc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800be00:	2b00      	cmp	r3, #0
 800be02:	d044      	beq.n	800be8e <VL53L0X_get_pal_range_status+0x1f6>
 800be04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d140      	bne.n	800be8e <VL53L0X_get_pal_range_status+0x1f6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800be0c:	f107 031c 	add.w	r3, r7, #28
 800be10:	461a      	mov	r2, r3
 800be12:	2102      	movs	r1, #2
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f7fb fddb 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800be20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be24:	2b00      	cmp	r3, #0
 800be26:	d107      	bne.n	800be38 <VL53L0X_get_pal_range_status+0x1a0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800be28:	2201      	movs	r2, #1
 800be2a:	21ff      	movs	r1, #255	; 0xff
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f7fa f9df 	bl	80061f0 <VL53L0X_WrByte>
 800be32:	4603      	mov	r3, r0
 800be34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800be38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d109      	bne.n	800be54 <VL53L0X_get_pal_range_status+0x1bc>
			Status = VL53L0X_RdWord(Dev,
 800be40:	f107 0316 	add.w	r3, r7, #22
 800be44:	461a      	mov	r2, r3
 800be46:	21b6      	movs	r1, #182	; 0xb6
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f7fa fa7d 	bl	8006348 <VL53L0X_RdWord>
 800be4e:	4603      	mov	r3, r0
 800be50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800be54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d107      	bne.n	800be6c <VL53L0X_get_pal_range_status+0x1d4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800be5c:	2200      	movs	r2, #0
 800be5e:	21ff      	movs	r1, #255	; 0xff
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f7fa f9c5 	bl	80061f0 <VL53L0X_WrByte>
 800be66:	4603      	mov	r3, r0
 800be68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800be6c:	8afb      	ldrh	r3, [r7, #22]
 800be6e:	025b      	lsls	r3, r3, #9
 800be70:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be76:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d006      	beq.n	800be8e <VL53L0X_get_pal_range_status+0x1f6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800be80:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800be82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be84:	429a      	cmp	r2, r3
 800be86:	d902      	bls.n	800be8e <VL53L0X_get_pal_range_status+0x1f6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800be88:	2301      	movs	r3, #1
 800be8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800be8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800be92:	2b00      	cmp	r3, #0
 800be94:	d109      	bne.n	800beaa <VL53L0X_get_pal_range_status+0x212>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800be96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be9a:	461a      	mov	r2, r3
 800be9c:	2103      	movs	r1, #3
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f7fb fcbe 	bl	8007820 <VL53L0X_GetLimitCheckEnable>
 800bea4:	4603      	mov	r3, r0
 800bea6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800beaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d023      	beq.n	800befa <VL53L0X_get_pal_range_status+0x262>
 800beb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d11f      	bne.n	800befa <VL53L0X_get_pal_range_status+0x262>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800beba:	893b      	ldrh	r3, [r7, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <VL53L0X_get_pal_range_status+0x22e>
			SignalRatePerSpad = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	637b      	str	r3, [r7, #52]	; 0x34
 800bec4:	e005      	b.n	800bed2 <VL53L0X_get_pal_range_status+0x23a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	021a      	lsls	r2, r3, #8
 800beca:	893b      	ldrh	r3, [r7, #8]
 800becc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bed2:	f107 0318 	add.w	r3, r7, #24
 800bed6:	461a      	mov	r2, r3
 800bed8:	2103      	movs	r1, #3
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f7fb fd78 	bl	80079d0 <VL53L0X_GetLimitCheckValue>
 800bee0:	4603      	mov	r3, r0
 800bee2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d006      	beq.n	800befa <VL53L0X_get_pal_range_status+0x262>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800beec:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800beee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d202      	bcs.n	800befa <VL53L0X_get_pal_range_status+0x262>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bef4:	2301      	movs	r3, #1
 800bef6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800befa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d151      	bne.n	800bfa6 <VL53L0X_get_pal_range_status+0x30e>
		if (NoneFlag == 1) {
 800bf02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d103      	bne.n	800bf12 <VL53L0X_get_pal_range_status+0x27a>
			*pPalRangeStatus = 255;	 /* NONE */
 800bf0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0c:	22ff      	movs	r2, #255	; 0xff
 800bf0e:	701a      	strb	r2, [r3, #0]
 800bf10:	e049      	b.n	800bfa6 <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bf12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d007      	beq.n	800bf2a <VL53L0X_get_pal_range_status+0x292>
 800bf1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d003      	beq.n	800bf2a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 2 ||
 800bf22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d103      	bne.n	800bf32 <VL53L0X_get_pal_range_status+0x29a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bf2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf2c:	2205      	movs	r2, #5
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	e039      	b.n	800bfa6 <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bf32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf36:	2b06      	cmp	r3, #6
 800bf38:	d003      	beq.n	800bf42 <VL53L0X_get_pal_range_status+0x2aa>
 800bf3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf3e:	2b09      	cmp	r3, #9
 800bf40:	d103      	bne.n	800bf4a <VL53L0X_get_pal_range_status+0x2b2>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bf42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf44:	2204      	movs	r2, #4
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	e02d      	b.n	800bfa6 <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bf4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf4e:	2b08      	cmp	r3, #8
 800bf50:	d007      	beq.n	800bf62 <VL53L0X_get_pal_range_status+0x2ca>
 800bf52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf56:	2b0a      	cmp	r3, #10
 800bf58:	d003      	beq.n	800bf62 <VL53L0X_get_pal_range_status+0x2ca>
					DeviceRangeStatusInternal == 10 ||
 800bf5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d103      	bne.n	800bf6a <VL53L0X_get_pal_range_status+0x2d2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bf62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf64:	2203      	movs	r2, #3
 800bf66:	701a      	strb	r2, [r3, #0]
 800bf68:	e01d      	b.n	800bfa6 <VL53L0X_get_pal_range_status+0x30e>
		} else if (DeviceRangeStatusInternal == 4 ||
 800bf6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bf6e:	2b04      	cmp	r3, #4
 800bf70:	d003      	beq.n	800bf7a <VL53L0X_get_pal_range_status+0x2e2>
 800bf72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d103      	bne.n	800bf82 <VL53L0X_get_pal_range_status+0x2ea>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bf7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf7c:	2202      	movs	r2, #2
 800bf7e:	701a      	strb	r2, [r3, #0]
 800bf80:	e011      	b.n	800bfa6 <VL53L0X_get_pal_range_status+0x30e>
		} else if (SigmaLimitflag == 1) {
 800bf82:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d10a      	bne.n	800bfa0 <VL53L0X_get_pal_range_status+0x308>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bf8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	701a      	strb	r2, [r3, #0]
 800bf90:	e009      	b.n	800bfa6 <VL53L0X_get_pal_range_status+0x30e>
 800bf92:	bf00      	nop
 800bf94:	20000634 	.word	0x20000634
 800bf98:	08011888 	.word	0x08011888
 800bf9c:	08010f94 	.word	0x08010f94
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bfa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800bfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d102      	bne.n	800bfb4 <VL53L0X_get_pal_range_status+0x31c>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800bfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bfb4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800bfb8:	461a      	mov	r2, r3
 800bfba:	2101      	movs	r1, #1
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7fb fc2f 	bl	8007820 <VL53L0X_GetLimitCheckEnable>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bfc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d14f      	bne.n	800c070 <VL53L0X_get_pal_range_status+0x3d8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bfd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <VL53L0X_get_pal_range_status+0x348>
 800bfd8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d103      	bne.n	800bfe8 <VL53L0X_get_pal_range_status+0x350>
			Temp8 = 1;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bfe6:	e002      	b.n	800bfee <VL53L0X_get_pal_range_status+0x356>
		else
			Temp8 = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bff4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bff8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800bffc:	2b04      	cmp	r3, #4
 800bffe:	d003      	beq.n	800c008 <VL53L0X_get_pal_range_status+0x370>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c000:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c004:	2b00      	cmp	r3, #0
 800c006:	d103      	bne.n	800c010 <VL53L0X_get_pal_range_status+0x378>
			Temp8 = 1;
 800c008:	2301      	movs	r3, #1
 800c00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c00e:	e002      	b.n	800c016 <VL53L0X_get_pal_range_status+0x37e>
		else
			Temp8 = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c01c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c020:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c024:	2b00      	cmp	r3, #0
 800c026:	d003      	beq.n	800c030 <VL53L0X_get_pal_range_status+0x398>
 800c028:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d103      	bne.n	800c038 <VL53L0X_get_pal_range_status+0x3a0>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c030:	2301      	movs	r3, #1
 800c032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c036:	e002      	b.n	800c03e <VL53L0X_get_pal_range_status+0x3a6>
		else
			Temp8 = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c048:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <VL53L0X_get_pal_range_status+0x3c0>
 800c050:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c054:	2b01      	cmp	r3, #1
 800c056:	d103      	bne.n	800c060 <VL53L0X_get_pal_range_status+0x3c8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c058:	2301      	movs	r3, #1
 800c05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c05e:	e002      	b.n	800c066 <VL53L0X_get_pal_range_status+0x3ce>
		else
			Temp8 = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c06c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
 800c070:	4b0c      	ldr	r3, [pc, #48]	; (800c0a4 <VL53L0X_get_pal_range_status+0x40c>)
 800c072:	681c      	ldr	r4, [r3, #0]
 800c074:	f000 f8ba 	bl	800c1ec <HAL_GetTick>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c080:	9302      	str	r3, [sp, #8]
 800c082:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <VL53L0X_get_pal_range_status+0x410>)
 800c084:	9301      	str	r3, [sp, #4]
 800c086:	9200      	str	r2, [sp, #0]
 800c088:	4b08      	ldr	r3, [pc, #32]	; (800c0ac <VL53L0X_get_pal_range_status+0x414>)
 800c08a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c08e:	4621      	mov	r1, r4
 800c090:	2001      	movs	r0, #1
 800c092:	f000 f82d 	bl	800c0f0 <trace_print_module_function>
	return Status;
 800c096:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3744      	adds	r7, #68	; 0x44
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd90      	pop	{r4, r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000634 	.word	0x20000634
 800c0a8:	08011888 	.word	0x08011888
 800c0ac:	08010fa8 	.word	0x08010fa8

0800c0b0 <VL53L0X_trace_config>:
uint32_t _trace_modules = TRACE_MODULE_NONE;
uint32_t _trace_functions = TRACE_FUNCTION_NONE;

#if defined(VL53L0X_LOG_ENABLE) && (TRACE_UART==1)
int32_t VL53L0X_trace_config(char *filename, uint32_t modules, uint32_t level, uint32_t functions)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
 800c0bc:	603b      	str	r3, [r7, #0]
    int STATUS = 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	617b      	str	r3, [r7, #20]

    _trace_functions = functions;
 800c0c2:	4a08      	ldr	r2, [pc, #32]	; (800c0e4 <VL53L0X_trace_config+0x34>)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	6013      	str	r3, [r2, #0]
    _trace_level = level;
 800c0c8:	4a07      	ldr	r2, [pc, #28]	; (800c0e8 <VL53L0X_trace_config+0x38>)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6013      	str	r3, [r2, #0]
    _trace_modules = modules;
 800c0ce:	4a07      	ldr	r2, [pc, #28]	; (800c0ec <VL53L0X_trace_config+0x3c>)
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	6013      	str	r3, [r2, #0]

    return STATUS;
 800c0d4:	697b      	ldr	r3, [r7, #20]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	371c      	adds	r7, #28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	200019a8 	.word	0x200019a8
 800c0e8:	20000634 	.word	0x20000634
 800c0ec:	200019a4 	.word	0x200019a4

0800c0f0 <trace_print_module_function>:


void trace_print_module_function(uint32_t module, uint32_t level, uint32_t function, const char *format, ...)
{
 800c0f0:	b408      	push	{r3}
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b087      	sub	sp, #28
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	60f8      	str	r0, [r7, #12]
 800c0fa:	60b9      	str	r1, [r7, #8]
 800c0fc:	607a      	str	r2, [r7, #4]
    if ( ((level <=_trace_level) && ((module & _trace_modules) > 0))
 800c0fe:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <trace_print_module_function+0x4c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	429a      	cmp	r2, r3
 800c106:	d805      	bhi.n	800c114 <trace_print_module_function+0x24>
 800c108:	4b0d      	ldr	r3, [pc, #52]	; (800c140 <trace_print_module_function+0x50>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	4013      	ands	r3, r2
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <trace_print_module_function+0x30>
        || ((function & _trace_functions) > 0) )
 800c114:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <trace_print_module_function+0x54>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4013      	ands	r3, r2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d006      	beq.n	800c12e <trace_print_module_function+0x3e>
    {
    	va_list arg_list;
        va_start(arg_list, format);
 800c120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c124:	617b      	str	r3, [r7, #20]
        trace_vprintf( format, arg_list);
 800c126:	6979      	ldr	r1, [r7, #20]
 800c128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c12a:	f7f9 ff2b 	bl	8005f84 <uart_vprintf>
        va_end(arg_list);
    }
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c138:	b001      	add	sp, #4
 800c13a:	4770      	bx	lr
 800c13c:	20000634 	.word	0x20000634
 800c140:	200019a4 	.word	0x200019a4
 800c144:	200019a8 	.word	0x200019a8

0800c148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c14c:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <HAL_Init+0x40>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a0d      	ldr	r2, [pc, #52]	; (800c188 <HAL_Init+0x40>)
 800c152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c158:	4b0b      	ldr	r3, [pc, #44]	; (800c188 <HAL_Init+0x40>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a0a      	ldr	r2, [pc, #40]	; (800c188 <HAL_Init+0x40>)
 800c15e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c164:	4b08      	ldr	r3, [pc, #32]	; (800c188 <HAL_Init+0x40>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a07      	ldr	r2, [pc, #28]	; (800c188 <HAL_Init+0x40>)
 800c16a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c16e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c170:	2003      	movs	r0, #3
 800c172:	f000 f917 	bl	800c3a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c176:	2000      	movs	r0, #0
 800c178:	f000 f808 	bl	800c18c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c17c:	f7f6 fb7c 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	40023c00 	.word	0x40023c00

0800c18c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c194:	4b12      	ldr	r3, [pc, #72]	; (800c1e0 <HAL_InitTick+0x54>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	4b12      	ldr	r3, [pc, #72]	; (800c1e4 <HAL_InitTick+0x58>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	4619      	mov	r1, r3
 800c19e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c1a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 f92f 	bl	800c40e <HAL_SYSTICK_Config>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e00e      	b.n	800c1d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b0f      	cmp	r3, #15
 800c1be:	d80a      	bhi.n	800c1d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c8:	f000 f8f7 	bl	800c3ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c1cc:	4a06      	ldr	r2, [pc, #24]	; (800c1e8 <HAL_InitTick+0x5c>)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e000      	b.n	800c1d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	20000358 	.word	0x20000358
 800c1e4:	2000063c 	.word	0x2000063c
 800c1e8:	20000638 	.word	0x20000638

0800c1ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	af00      	add	r7, sp, #0
  return uwTick;
 800c1f0:	4b03      	ldr	r3, [pc, #12]	; (800c200 <HAL_GetTick+0x14>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	200019ac 	.word	0x200019ac

0800c204 <__NVIC_SetPriorityGrouping>:
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f003 0307 	and.w	r3, r3, #7
 800c212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c214:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <__NVIC_SetPriorityGrouping+0x44>)
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c220:	4013      	ands	r3, r2
 800c222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c22c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c236:	4a04      	ldr	r2, [pc, #16]	; (800c248 <__NVIC_SetPriorityGrouping+0x44>)
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	60d3      	str	r3, [r2, #12]
}
 800c23c:	bf00      	nop
 800c23e:	3714      	adds	r7, #20
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	e000ed00 	.word	0xe000ed00

0800c24c <__NVIC_GetPriorityGrouping>:
{
 800c24c:	b480      	push	{r7}
 800c24e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c250:	4b04      	ldr	r3, [pc, #16]	; (800c264 <__NVIC_GetPriorityGrouping+0x18>)
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	0a1b      	lsrs	r3, r3, #8
 800c256:	f003 0307 	and.w	r3, r3, #7
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	e000ed00 	.word	0xe000ed00

0800c268 <__NVIC_EnableIRQ>:
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c276:	2b00      	cmp	r3, #0
 800c278:	db0b      	blt.n	800c292 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	f003 021f 	and.w	r2, r3, #31
 800c280:	4907      	ldr	r1, [pc, #28]	; (800c2a0 <__NVIC_EnableIRQ+0x38>)
 800c282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c286:	095b      	lsrs	r3, r3, #5
 800c288:	2001      	movs	r0, #1
 800c28a:	fa00 f202 	lsl.w	r2, r0, r2
 800c28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	e000e100 	.word	0xe000e100

0800c2a4 <__NVIC_SetPriority>:
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	6039      	str	r1, [r7, #0]
 800c2ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c2b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	db0a      	blt.n	800c2ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	490c      	ldr	r1, [pc, #48]	; (800c2f0 <__NVIC_SetPriority+0x4c>)
 800c2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2c2:	0112      	lsls	r2, r2, #4
 800c2c4:	b2d2      	uxtb	r2, r2
 800c2c6:	440b      	add	r3, r1
 800c2c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c2cc:	e00a      	b.n	800c2e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	b2da      	uxtb	r2, r3
 800c2d2:	4908      	ldr	r1, [pc, #32]	; (800c2f4 <__NVIC_SetPriority+0x50>)
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	f003 030f 	and.w	r3, r3, #15
 800c2da:	3b04      	subs	r3, #4
 800c2dc:	0112      	lsls	r2, r2, #4
 800c2de:	b2d2      	uxtb	r2, r2
 800c2e0:	440b      	add	r3, r1
 800c2e2:	761a      	strb	r2, [r3, #24]
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	e000e100 	.word	0xe000e100
 800c2f4:	e000ed00 	.word	0xe000ed00

0800c2f8 <NVIC_EncodePriority>:
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b089      	sub	sp, #36	; 0x24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f003 0307 	and.w	r3, r3, #7
 800c30a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	f1c3 0307 	rsb	r3, r3, #7
 800c312:	2b04      	cmp	r3, #4
 800c314:	bf28      	it	cs
 800c316:	2304      	movcs	r3, #4
 800c318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	3304      	adds	r3, #4
 800c31e:	2b06      	cmp	r3, #6
 800c320:	d902      	bls.n	800c328 <NVIC_EncodePriority+0x30>
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	3b03      	subs	r3, #3
 800c326:	e000      	b.n	800c32a <NVIC_EncodePriority+0x32>
 800c328:	2300      	movs	r3, #0
 800c32a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c32c:	f04f 32ff 	mov.w	r2, #4294967295
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	fa02 f303 	lsl.w	r3, r2, r3
 800c336:	43da      	mvns	r2, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	401a      	ands	r2, r3
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c340:	f04f 31ff 	mov.w	r1, #4294967295
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	fa01 f303 	lsl.w	r3, r1, r3
 800c34a:	43d9      	mvns	r1, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c350:	4313      	orrs	r3, r2
}
 800c352:	4618      	mov	r0, r3
 800c354:	3724      	adds	r7, #36	; 0x24
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
	...

0800c360 <SysTick_Config>:
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c370:	d301      	bcc.n	800c376 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c372:	2301      	movs	r3, #1
 800c374:	e00f      	b.n	800c396 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c376:	4a0a      	ldr	r2, [pc, #40]	; (800c3a0 <SysTick_Config+0x40>)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c37e:	210f      	movs	r1, #15
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	f7ff ff8e 	bl	800c2a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c388:	4b05      	ldr	r3, [pc, #20]	; (800c3a0 <SysTick_Config+0x40>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c38e:	4b04      	ldr	r3, [pc, #16]	; (800c3a0 <SysTick_Config+0x40>)
 800c390:	2207      	movs	r2, #7
 800c392:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	e000e010 	.word	0xe000e010

0800c3a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff ff29 	bl	800c204 <__NVIC_SetPriorityGrouping>
}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b086      	sub	sp, #24
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	60b9      	str	r1, [r7, #8]
 800c3c4:	607a      	str	r2, [r7, #4]
 800c3c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c3cc:	f7ff ff3e 	bl	800c24c <__NVIC_GetPriorityGrouping>
 800c3d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	6978      	ldr	r0, [r7, #20]
 800c3d8:	f7ff ff8e 	bl	800c2f8 <NVIC_EncodePriority>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff ff5d 	bl	800c2a4 <__NVIC_SetPriority>
}
 800c3ea:	bf00      	nop
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c3fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff ff31 	bl	800c268 <__NVIC_EnableIRQ>
}
 800c406:	bf00      	nop
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b082      	sub	sp, #8
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7ff ffa2 	bl	800c360 <SysTick_Config>
 800c41c:	4603      	mov	r3, r0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c430:	2300      	movs	r3, #0
 800c432:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c434:	f7ff feda 	bl	800c1ec <HAL_GetTick>
 800c438:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	e099      	b.n	800c578 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2202      	movs	r2, #2
 800c448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f022 0201 	bic.w	r2, r2, #1
 800c462:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c464:	e00f      	b.n	800c486 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c466:	f7ff fec1 	bl	800c1ec <HAL_GetTick>
 800c46a:	4602      	mov	r2, r0
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	2b05      	cmp	r3, #5
 800c472:	d908      	bls.n	800c486 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2220      	movs	r2, #32
 800c478:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2203      	movs	r2, #3
 800c47e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c482:	2303      	movs	r3, #3
 800c484:	e078      	b.n	800c578 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e8      	bne.n	800c466 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c49c:	697a      	ldr	r2, [r7, #20]
 800c49e:	4b38      	ldr	r3, [pc, #224]	; (800c580 <HAL_DMA_Init+0x158>)
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c4b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c4be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c4ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a1b      	ldr	r3, [r3, #32]
 800c4d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c4d2:	697a      	ldr	r2, [r7, #20]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	d107      	bne.n	800c4f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	f023 0307 	bic.w	r3, r3, #7
 800c506:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	4313      	orrs	r3, r2
 800c510:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c516:	2b04      	cmp	r3, #4
 800c518:	d117      	bne.n	800c54a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	4313      	orrs	r3, r2
 800c522:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00e      	beq.n	800c54a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fa6f 	bl	800ca10 <DMA_CheckFifoParam>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d008      	beq.n	800c54a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2240      	movs	r2, #64	; 0x40
 800c53c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c546:	2301      	movs	r3, #1
 800c548:	e016      	b.n	800c578 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fa26 	bl	800c9a4 <DMA_CalcBaseAndBitshift>
 800c558:	4603      	mov	r3, r0
 800c55a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c560:	223f      	movs	r2, #63	; 0x3f
 800c562:	409a      	lsls	r2, r3
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	f010803f 	.word	0xf010803f

0800c584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	607a      	str	r2, [r7, #4]
 800c590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c59a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d101      	bne.n	800c5aa <HAL_DMA_Start_IT+0x26>
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e040      	b.n	800c62c <HAL_DMA_Start_IT+0xa8>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d12f      	bne.n	800c61e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	68b9      	ldr	r1, [r7, #8]
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f000 f9b8 	bl	800c948 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5dc:	223f      	movs	r2, #63	; 0x3f
 800c5de:	409a      	lsls	r2, r3
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 0216 	orr.w	r2, r2, #22
 800c5f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d007      	beq.n	800c60c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f042 0208 	orr.w	r2, r2, #8
 800c60a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f042 0201 	orr.w	r2, r2, #1
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	e005      	b.n	800c62a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c626:	2302      	movs	r3, #2
 800c628:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3718      	adds	r7, #24
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c640:	4b8e      	ldr	r3, [pc, #568]	; (800c87c <HAL_DMA_IRQHandler+0x248>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a8e      	ldr	r2, [pc, #568]	; (800c880 <HAL_DMA_IRQHandler+0x24c>)
 800c646:	fba2 2303 	umull	r2, r3, r2, r3
 800c64a:	0a9b      	lsrs	r3, r3, #10
 800c64c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c652:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c65e:	2208      	movs	r2, #8
 800c660:	409a      	lsls	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	4013      	ands	r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	d01a      	beq.n	800c6a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0304 	and.w	r3, r3, #4
 800c674:	2b00      	cmp	r3, #0
 800c676:	d013      	beq.n	800c6a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 0204 	bic.w	r2, r2, #4
 800c686:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c68c:	2208      	movs	r2, #8
 800c68e:	409a      	lsls	r2, r3
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c698:	f043 0201 	orr.w	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	409a      	lsls	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d012      	beq.n	800c6d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	695b      	ldr	r3, [r3, #20]
 800c6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	409a      	lsls	r2, r3
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ce:	f043 0202 	orr.w	r2, r3, #2
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6da:	2204      	movs	r2, #4
 800c6dc:	409a      	lsls	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d012      	beq.n	800c70c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f8:	2204      	movs	r2, #4
 800c6fa:	409a      	lsls	r2, r3
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c704:	f043 0204 	orr.w	r2, r3, #4
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c710:	2210      	movs	r2, #16
 800c712:	409a      	lsls	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4013      	ands	r3, r2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d043      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 0308 	and.w	r3, r3, #8
 800c726:	2b00      	cmp	r3, #0
 800c728:	d03c      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c72e:	2210      	movs	r2, #16
 800c730:	409a      	lsls	r2, r3
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d018      	beq.n	800c776 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d108      	bne.n	800c764 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c756:	2b00      	cmp	r3, #0
 800c758:	d024      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	4798      	blx	r3
 800c762:	e01f      	b.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01b      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	4798      	blx	r3
 800c774:	e016      	b.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c780:	2b00      	cmp	r3, #0
 800c782:	d107      	bne.n	800c794 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f022 0208 	bic.w	r2, r2, #8
 800c792:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	409a      	lsls	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 808f 	beq.w	800c8d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0310 	and.w	r3, r3, #16
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 8087 	beq.w	800c8d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ca:	2220      	movs	r2, #32
 800c7cc:	409a      	lsls	r2, r3
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b05      	cmp	r3, #5
 800c7dc:	d136      	bne.n	800c84c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0216 	bic.w	r2, r2, #22
 800c7ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	695a      	ldr	r2, [r3, #20]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c802:	2b00      	cmp	r3, #0
 800c804:	d103      	bne.n	800c80e <HAL_DMA_IRQHandler+0x1da>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d007      	beq.n	800c81e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f022 0208 	bic.w	r2, r2, #8
 800c81c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c822:	223f      	movs	r2, #63	; 0x3f
 800c824:	409a      	lsls	r2, r3
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d07e      	beq.n	800c940 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	4798      	blx	r3
        }
        return;
 800c84a:	e079      	b.n	800c940 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d01d      	beq.n	800c896 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10d      	bne.n	800c884 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d031      	beq.n	800c8d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	4798      	blx	r3
 800c878:	e02c      	b.n	800c8d4 <HAL_DMA_IRQHandler+0x2a0>
 800c87a:	bf00      	nop
 800c87c:	20000358 	.word	0x20000358
 800c880:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d023      	beq.n	800c8d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	4798      	blx	r3
 800c894:	e01e      	b.n	800c8d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10f      	bne.n	800c8c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f022 0210 	bic.w	r2, r2, #16
 800c8b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d003      	beq.n	800c8d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d032      	beq.n	800c942 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d022      	beq.n	800c92e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2205      	movs	r2, #5
 800c8ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f022 0201 	bic.w	r2, r2, #1
 800c8fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	3301      	adds	r3, #1
 800c904:	60bb      	str	r3, [r7, #8]
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d307      	bcc.n	800c91c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 0301 	and.w	r3, r3, #1
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1f2      	bne.n	800c900 <HAL_DMA_IRQHandler+0x2cc>
 800c91a:	e000      	b.n	800c91e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800c91c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c932:	2b00      	cmp	r3, #0
 800c934:	d005      	beq.n	800c942 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	4798      	blx	r3
 800c93e:	e000      	b.n	800c942 <HAL_DMA_IRQHandler+0x30e>
        return;
 800c940:	bf00      	nop
    }
  }
}
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c964:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	683a      	ldr	r2, [r7, #0]
 800c96c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	689b      	ldr	r3, [r3, #8]
 800c972:	2b40      	cmp	r3, #64	; 0x40
 800c974:	d108      	bne.n	800c988 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c986:	e007      	b.n	800c998 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	60da      	str	r2, [r3, #12]
}
 800c998:	bf00      	nop
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	3b10      	subs	r3, #16
 800c9b4:	4a14      	ldr	r2, [pc, #80]	; (800ca08 <DMA_CalcBaseAndBitshift+0x64>)
 800c9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ba:	091b      	lsrs	r3, r3, #4
 800c9bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c9be:	4a13      	ldr	r2, [pc, #76]	; (800ca0c <DMA_CalcBaseAndBitshift+0x68>)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d909      	bls.n	800c9e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c9da:	f023 0303 	bic.w	r3, r3, #3
 800c9de:	1d1a      	adds	r2, r3, #4
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	659a      	str	r2, [r3, #88]	; 0x58
 800c9e4:	e007      	b.n	800c9f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c9ee:	f023 0303 	bic.w	r3, r3, #3
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	aaaaaaab 	.word	0xaaaaaaab
 800ca0c:	080118a8 	.word	0x080118a8

0800ca10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d11f      	bne.n	800ca6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b03      	cmp	r3, #3
 800ca2e:	d856      	bhi.n	800cade <DMA_CheckFifoParam+0xce>
 800ca30:	a201      	add	r2, pc, #4	; (adr r2, 800ca38 <DMA_CheckFifoParam+0x28>)
 800ca32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800ca49 	.word	0x0800ca49
 800ca3c:	0800ca5b 	.word	0x0800ca5b
 800ca40:	0800ca49 	.word	0x0800ca49
 800ca44:	0800cadf 	.word	0x0800cadf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d046      	beq.n	800cae2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca58:	e043      	b.n	800cae2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ca62:	d140      	bne.n	800cae6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca68:	e03d      	b.n	800cae6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca72:	d121      	bne.n	800cab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d837      	bhi.n	800caea <DMA_CheckFifoParam+0xda>
 800ca7a:	a201      	add	r2, pc, #4	; (adr r2, 800ca80 <DMA_CheckFifoParam+0x70>)
 800ca7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca80:	0800ca91 	.word	0x0800ca91
 800ca84:	0800ca97 	.word	0x0800ca97
 800ca88:	0800ca91 	.word	0x0800ca91
 800ca8c:	0800caa9 	.word	0x0800caa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	73fb      	strb	r3, [r7, #15]
      break;
 800ca94:	e030      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d025      	beq.n	800caee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800caa6:	e022      	b.n	800caee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800cab0:	d11f      	bne.n	800caf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cab6:	e01c      	b.n	800caf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d903      	bls.n	800cac6 <DMA_CheckFifoParam+0xb6>
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	d003      	beq.n	800cacc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cac4:	e018      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	73fb      	strb	r3, [r7, #15]
      break;
 800caca:	e015      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00e      	beq.n	800caf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
      break;
 800cadc:	e00b      	b.n	800caf6 <DMA_CheckFifoParam+0xe6>
      break;
 800cade:	bf00      	nop
 800cae0:	e00a      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      break;
 800cae2:	bf00      	nop
 800cae4:	e008      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      break;
 800cae6:	bf00      	nop
 800cae8:	e006      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      break;
 800caea:	bf00      	nop
 800caec:	e004      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      break;
 800caee:	bf00      	nop
 800caf0:	e002      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      break;   
 800caf2:	bf00      	nop
 800caf4:	e000      	b.n	800caf8 <DMA_CheckFifoParam+0xe8>
      break;
 800caf6:	bf00      	nop
    }
  } 
  
  return status; 
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop

0800cb08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b089      	sub	sp, #36	; 0x24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cb16:	2300      	movs	r3, #0
 800cb18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61fb      	str	r3, [r7, #28]
 800cb22:	e159      	b.n	800cdd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cb24:	2201      	movs	r2, #1
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	fa02 f303 	lsl.w	r3, r2, r3
 800cb2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	4013      	ands	r3, r2
 800cb36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cb38:	693a      	ldr	r2, [r7, #16]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	f040 8148 	bne.w	800cdd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f003 0303 	and.w	r3, r3, #3
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d005      	beq.n	800cb5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d130      	bne.n	800cbbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	2203      	movs	r2, #3
 800cb66:	fa02 f303 	lsl.w	r3, r2, r3
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	69ba      	ldr	r2, [r7, #24]
 800cb6e:	4013      	ands	r3, r2
 800cb70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	69ba      	ldr	r2, [r7, #24]
 800cb88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb90:	2201      	movs	r2, #1
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	fa02 f303 	lsl.w	r3, r2, r3
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	091b      	lsrs	r3, r3, #4
 800cba6:	f003 0201 	and.w	r2, r3, #1
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb0:	69ba      	ldr	r2, [r7, #24]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	69ba      	ldr	r2, [r7, #24]
 800cbba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	f003 0303 	and.w	r3, r3, #3
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	d017      	beq.n	800cbf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	005b      	lsls	r3, r3, #1
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd8:	43db      	mvns	r3, r3
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	4013      	ands	r3, r2
 800cbde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	689a      	ldr	r2, [r3, #8]
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbec:	69ba      	ldr	r2, [r7, #24]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69ba      	ldr	r2, [r7, #24]
 800cbf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	f003 0303 	and.w	r3, r3, #3
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d123      	bne.n	800cc4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	08da      	lsrs	r2, r3, #3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3208      	adds	r2, #8
 800cc0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	f003 0307 	and.w	r3, r3, #7
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	220f      	movs	r2, #15
 800cc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc20:	43db      	mvns	r3, r3
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	4013      	ands	r3, r2
 800cc26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	691a      	ldr	r2, [r3, #16]
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	f003 0307 	and.w	r3, r3, #7
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	fa02 f303 	lsl.w	r3, r2, r3
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	08da      	lsrs	r2, r3, #3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3208      	adds	r2, #8
 800cc46:	69b9      	ldr	r1, [r7, #24]
 800cc48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	2203      	movs	r2, #3
 800cc58:	fa02 f303 	lsl.w	r3, r2, r3
 800cc5c:	43db      	mvns	r3, r3
 800cc5e:	69ba      	ldr	r2, [r7, #24]
 800cc60:	4013      	ands	r3, r2
 800cc62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	f003 0203 	and.w	r2, r3, #3
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	fa02 f303 	lsl.w	r3, r2, r3
 800cc74:	69ba      	ldr	r2, [r7, #24]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	69ba      	ldr	r2, [r7, #24]
 800cc7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 80a2 	beq.w	800cdd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60fb      	str	r3, [r7, #12]
 800cc92:	4b57      	ldr	r3, [pc, #348]	; (800cdf0 <HAL_GPIO_Init+0x2e8>)
 800cc94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc96:	4a56      	ldr	r2, [pc, #344]	; (800cdf0 <HAL_GPIO_Init+0x2e8>)
 800cc98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc9c:	6453      	str	r3, [r2, #68]	; 0x44
 800cc9e:	4b54      	ldr	r3, [pc, #336]	; (800cdf0 <HAL_GPIO_Init+0x2e8>)
 800cca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ccaa:	4a52      	ldr	r2, [pc, #328]	; (800cdf4 <HAL_GPIO_Init+0x2ec>)
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	089b      	lsrs	r3, r3, #2
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	f003 0303 	and.w	r3, r3, #3
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	220f      	movs	r2, #15
 800ccc2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc6:	43db      	mvns	r3, r3
 800ccc8:	69ba      	ldr	r2, [r7, #24]
 800ccca:	4013      	ands	r3, r2
 800cccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4a49      	ldr	r2, [pc, #292]	; (800cdf8 <HAL_GPIO_Init+0x2f0>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d019      	beq.n	800cd0a <HAL_GPIO_Init+0x202>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a48      	ldr	r2, [pc, #288]	; (800cdfc <HAL_GPIO_Init+0x2f4>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d013      	beq.n	800cd06 <HAL_GPIO_Init+0x1fe>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a47      	ldr	r2, [pc, #284]	; (800ce00 <HAL_GPIO_Init+0x2f8>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d00d      	beq.n	800cd02 <HAL_GPIO_Init+0x1fa>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4a46      	ldr	r2, [pc, #280]	; (800ce04 <HAL_GPIO_Init+0x2fc>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d007      	beq.n	800ccfe <HAL_GPIO_Init+0x1f6>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	4a45      	ldr	r2, [pc, #276]	; (800ce08 <HAL_GPIO_Init+0x300>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d101      	bne.n	800ccfa <HAL_GPIO_Init+0x1f2>
 800ccf6:	2304      	movs	r3, #4
 800ccf8:	e008      	b.n	800cd0c <HAL_GPIO_Init+0x204>
 800ccfa:	2307      	movs	r3, #7
 800ccfc:	e006      	b.n	800cd0c <HAL_GPIO_Init+0x204>
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e004      	b.n	800cd0c <HAL_GPIO_Init+0x204>
 800cd02:	2302      	movs	r3, #2
 800cd04:	e002      	b.n	800cd0c <HAL_GPIO_Init+0x204>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e000      	b.n	800cd0c <HAL_GPIO_Init+0x204>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	69fa      	ldr	r2, [r7, #28]
 800cd0e:	f002 0203 	and.w	r2, r2, #3
 800cd12:	0092      	lsls	r2, r2, #2
 800cd14:	4093      	lsls	r3, r2
 800cd16:	69ba      	ldr	r2, [r7, #24]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cd1c:	4935      	ldr	r1, [pc, #212]	; (800cdf4 <HAL_GPIO_Init+0x2ec>)
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	089b      	lsrs	r3, r3, #2
 800cd22:	3302      	adds	r3, #2
 800cd24:	69ba      	ldr	r2, [r7, #24]
 800cd26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cd2a:	4b38      	ldr	r3, [pc, #224]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	43db      	mvns	r3, r3
 800cd34:	69ba      	ldr	r2, [r7, #24]
 800cd36:	4013      	ands	r3, r2
 800cd38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cd46:	69ba      	ldr	r2, [r7, #24]
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cd4e:	4a2f      	ldr	r2, [pc, #188]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cd54:	4b2d      	ldr	r3, [pc, #180]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	43db      	mvns	r3, r3
 800cd5e:	69ba      	ldr	r2, [r7, #24]
 800cd60:	4013      	ands	r3, r2
 800cd62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cd70:	69ba      	ldr	r2, [r7, #24]
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cd78:	4a24      	ldr	r2, [pc, #144]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cd7e:	4b23      	ldr	r3, [pc, #140]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	43db      	mvns	r3, r3
 800cd88:	69ba      	ldr	r2, [r7, #24]
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cd9a:	69ba      	ldr	r2, [r7, #24]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cda2:	4a1a      	ldr	r2, [pc, #104]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cda8:	4b18      	ldr	r3, [pc, #96]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	43db      	mvns	r3, r3
 800cdb2:	69ba      	ldr	r2, [r7, #24]
 800cdb4:	4013      	ands	r3, r2
 800cdb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d003      	beq.n	800cdcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cdc4:	69ba      	ldr	r2, [r7, #24]
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cdcc:	4a0f      	ldr	r2, [pc, #60]	; (800ce0c <HAL_GPIO_Init+0x304>)
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	61fb      	str	r3, [r7, #28]
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	2b0f      	cmp	r3, #15
 800cddc:	f67f aea2 	bls.w	800cb24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	3724      	adds	r7, #36	; 0x24
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	40023800 	.word	0x40023800
 800cdf4:	40013800 	.word	0x40013800
 800cdf8:	40020000 	.word	0x40020000
 800cdfc:	40020400 	.word	0x40020400
 800ce00:	40020800 	.word	0x40020800
 800ce04:	40020c00 	.word	0x40020c00
 800ce08:	40021000 	.word	0x40021000
 800ce0c:	40013c00 	.word	0x40013c00

0800ce10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	807b      	strh	r3, [r7, #2]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ce20:	787b      	ldrb	r3, [r7, #1]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d003      	beq.n	800ce2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce26:	887a      	ldrh	r2, [r7, #2]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ce2c:	e003      	b.n	800ce36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ce2e:	887b      	ldrh	r3, [r7, #2]
 800ce30:	041a      	lsls	r2, r3, #16
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	619a      	str	r2, [r3, #24]
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
	...

0800ce44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ce4e:	4b08      	ldr	r3, [pc, #32]	; (800ce70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ce50:	695a      	ldr	r2, [r3, #20]
 800ce52:	88fb      	ldrh	r3, [r7, #6]
 800ce54:	4013      	ands	r3, r2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d006      	beq.n	800ce68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ce5a:	4a05      	ldr	r2, [pc, #20]	; (800ce70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ce60:	88fb      	ldrh	r3, [r7, #6]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f9 f8ef 	bl	8006046 <HAL_GPIO_EXTI_Callback>
  }
}
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	40013c00 	.word	0x40013c00

0800ce74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d101      	bne.n	800ce86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e12b      	b.n	800d0de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d106      	bne.n	800cea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7f5 fd14 	bl	80028c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2224      	movs	r2, #36	; 0x24
 800cea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f022 0201 	bic.w	r2, r2, #1
 800ceb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ced6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ced8:	f001 fbd2 	bl	800e680 <HAL_RCC_GetPCLK1Freq>
 800cedc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	4a81      	ldr	r2, [pc, #516]	; (800d0e8 <HAL_I2C_Init+0x274>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d807      	bhi.n	800cef8 <HAL_I2C_Init+0x84>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	4a80      	ldr	r2, [pc, #512]	; (800d0ec <HAL_I2C_Init+0x278>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	bf94      	ite	ls
 800cef0:	2301      	movls	r3, #1
 800cef2:	2300      	movhi	r3, #0
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	e006      	b.n	800cf06 <HAL_I2C_Init+0x92>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4a7d      	ldr	r2, [pc, #500]	; (800d0f0 <HAL_I2C_Init+0x27c>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	bf94      	ite	ls
 800cf00:	2301      	movls	r3, #1
 800cf02:	2300      	movhi	r3, #0
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e0e7      	b.n	800d0de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4a78      	ldr	r2, [pc, #480]	; (800d0f4 <HAL_I2C_Init+0x280>)
 800cf12:	fba2 2303 	umull	r2, r3, r2, r3
 800cf16:	0c9b      	lsrs	r3, r3, #18
 800cf18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	4a6a      	ldr	r2, [pc, #424]	; (800d0e8 <HAL_I2C_Init+0x274>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d802      	bhi.n	800cf48 <HAL_I2C_Init+0xd4>
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	3301      	adds	r3, #1
 800cf46:	e009      	b.n	800cf5c <HAL_I2C_Init+0xe8>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cf4e:	fb02 f303 	mul.w	r3, r2, r3
 800cf52:	4a69      	ldr	r2, [pc, #420]	; (800d0f8 <HAL_I2C_Init+0x284>)
 800cf54:	fba2 2303 	umull	r2, r3, r2, r3
 800cf58:	099b      	lsrs	r3, r3, #6
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	6812      	ldr	r2, [r2, #0]
 800cf60:	430b      	orrs	r3, r1
 800cf62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cf6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	495c      	ldr	r1, [pc, #368]	; (800d0e8 <HAL_I2C_Init+0x274>)
 800cf78:	428b      	cmp	r3, r1
 800cf7a:	d819      	bhi.n	800cfb0 <HAL_I2C_Init+0x13c>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	1e59      	subs	r1, r3, #1
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	005b      	lsls	r3, r3, #1
 800cf86:	fbb1 f3f3 	udiv	r3, r1, r3
 800cf8a:	1c59      	adds	r1, r3, #1
 800cf8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cf90:	400b      	ands	r3, r1
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00a      	beq.n	800cfac <HAL_I2C_Init+0x138>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	1e59      	subs	r1, r3, #1
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	fbb1 f3f3 	udiv	r3, r1, r3
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfaa:	e051      	b.n	800d050 <HAL_I2C_Init+0x1dc>
 800cfac:	2304      	movs	r3, #4
 800cfae:	e04f      	b.n	800d050 <HAL_I2C_Init+0x1dc>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d111      	bne.n	800cfdc <HAL_I2C_Init+0x168>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	1e58      	subs	r0, r3, #1
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6859      	ldr	r1, [r3, #4]
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	440b      	add	r3, r1
 800cfc6:	fbb0 f3f3 	udiv	r3, r0, r3
 800cfca:	3301      	adds	r3, #1
 800cfcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	bf0c      	ite	eq
 800cfd4:	2301      	moveq	r3, #1
 800cfd6:	2300      	movne	r3, #0
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	e012      	b.n	800d002 <HAL_I2C_Init+0x18e>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	1e58      	subs	r0, r3, #1
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6859      	ldr	r1, [r3, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	440b      	add	r3, r1
 800cfea:	0099      	lsls	r1, r3, #2
 800cfec:	440b      	add	r3, r1
 800cfee:	fbb0 f3f3 	udiv	r3, r0, r3
 800cff2:	3301      	adds	r3, #1
 800cff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	bf0c      	ite	eq
 800cffc:	2301      	moveq	r3, #1
 800cffe:	2300      	movne	r3, #0
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <HAL_I2C_Init+0x196>
 800d006:	2301      	movs	r3, #1
 800d008:	e022      	b.n	800d050 <HAL_I2C_Init+0x1dc>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10e      	bne.n	800d030 <HAL_I2C_Init+0x1bc>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	1e58      	subs	r0, r3, #1
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6859      	ldr	r1, [r3, #4]
 800d01a:	460b      	mov	r3, r1
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	440b      	add	r3, r1
 800d020:	fbb0 f3f3 	udiv	r3, r0, r3
 800d024:	3301      	adds	r3, #1
 800d026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d02a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d02e:	e00f      	b.n	800d050 <HAL_I2C_Init+0x1dc>
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	1e58      	subs	r0, r3, #1
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6859      	ldr	r1, [r3, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	440b      	add	r3, r1
 800d03e:	0099      	lsls	r1, r3, #2
 800d040:	440b      	add	r3, r1
 800d042:	fbb0 f3f3 	udiv	r3, r0, r3
 800d046:	3301      	adds	r3, #1
 800d048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d04c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	6809      	ldr	r1, [r1, #0]
 800d054:	4313      	orrs	r3, r2
 800d056:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	69da      	ldr	r2, [r3, #28]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	431a      	orrs	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	430a      	orrs	r2, r1
 800d072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d07e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	6911      	ldr	r1, [r2, #16]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	68d2      	ldr	r2, [r2, #12]
 800d08a:	4311      	orrs	r1, r2
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	6812      	ldr	r2, [r2, #0]
 800d090:	430b      	orrs	r3, r1
 800d092:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	695a      	ldr	r2, [r3, #20]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f042 0201 	orr.w	r2, r2, #1
 800d0be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2220      	movs	r2, #32
 800d0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	000186a0 	.word	0x000186a0
 800d0ec:	001e847f 	.word	0x001e847f
 800d0f0:	003d08ff 	.word	0x003d08ff
 800d0f4:	431bde83 	.word	0x431bde83
 800d0f8:	10624dd3 	.word	0x10624dd3

0800d0fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b088      	sub	sp, #32
 800d100:	af02      	add	r7, sp, #8
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	607a      	str	r2, [r7, #4]
 800d106:	461a      	mov	r2, r3
 800d108:	460b      	mov	r3, r1
 800d10a:	817b      	strh	r3, [r7, #10]
 800d10c:	4613      	mov	r3, r2
 800d10e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d110:	f7ff f86c 	bl	800c1ec <HAL_GetTick>
 800d114:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b20      	cmp	r3, #32
 800d120:	f040 80e0 	bne.w	800d2e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	2319      	movs	r3, #25
 800d12a:	2201      	movs	r2, #1
 800d12c:	4970      	ldr	r1, [pc, #448]	; (800d2f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 fc58 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d13a:	2302      	movs	r3, #2
 800d13c:	e0d3      	b.n	800d2e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d144:	2b01      	cmp	r3, #1
 800d146:	d101      	bne.n	800d14c <HAL_I2C_Master_Transmit+0x50>
 800d148:	2302      	movs	r3, #2
 800d14a:	e0cc      	b.n	800d2e6 <HAL_I2C_Master_Transmit+0x1ea>
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f003 0301 	and.w	r3, r3, #1
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d007      	beq.n	800d172 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f042 0201 	orr.w	r2, r2, #1
 800d170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d180:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2221      	movs	r2, #33	; 0x21
 800d186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2210      	movs	r2, #16
 800d18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	893a      	ldrh	r2, [r7, #8]
 800d1a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	4a50      	ldr	r2, [pc, #320]	; (800d2f4 <HAL_I2C_Master_Transmit+0x1f8>)
 800d1b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d1b4:	8979      	ldrh	r1, [r7, #10]
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	6a3a      	ldr	r2, [r7, #32]
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f000 fac2 	bl	800d744 <I2C_MasterRequestWrite>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e08d      	b.n	800d2e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	613b      	str	r3, [r7, #16]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	613b      	str	r3, [r7, #16]
 800d1de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d1e0:	e066      	b.n	800d2b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	6a39      	ldr	r1, [r7, #32]
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 fcd2 	bl	800db90 <I2C_WaitOnTXEFlagUntilTimeout>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00d      	beq.n	800d20e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f6:	2b04      	cmp	r3, #4
 800d1f8:	d107      	bne.n	800d20a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d208:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e06b      	b.n	800d2e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d212:	781a      	ldrb	r2, [r3, #0]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d228:	b29b      	uxth	r3, r3
 800d22a:	3b01      	subs	r3, #1
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d236:	3b01      	subs	r3, #1
 800d238:	b29a      	uxth	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	f003 0304 	and.w	r3, r3, #4
 800d248:	2b04      	cmp	r3, #4
 800d24a:	d11b      	bne.n	800d284 <HAL_I2C_Master_Transmit+0x188>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d250:	2b00      	cmp	r3, #0
 800d252:	d017      	beq.n	800d284 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d258:	781a      	ldrb	r2, [r3, #0]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d26e:	b29b      	uxth	r3, r3
 800d270:	3b01      	subs	r3, #1
 800d272:	b29a      	uxth	r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d27c:	3b01      	subs	r3, #1
 800d27e:	b29a      	uxth	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	6a39      	ldr	r1, [r7, #32]
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f000 fcc2 	bl	800dc12 <I2C_WaitOnBTFFlagUntilTimeout>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00d      	beq.n	800d2b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d298:	2b04      	cmp	r3, #4
 800d29a:	d107      	bne.n	800d2ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e01a      	b.n	800d2e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d194      	bne.n	800d1e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2220      	movs	r2, #32
 800d2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	e000      	b.n	800d2e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d2e4:	2302      	movs	r3, #2
  }
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	00100002 	.word	0x00100002
 800d2f4:	ffff0000 	.word	0xffff0000

0800d2f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08c      	sub	sp, #48	; 0x30
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	607a      	str	r2, [r7, #4]
 800d302:	461a      	mov	r2, r3
 800d304:	460b      	mov	r3, r1
 800d306:	817b      	strh	r3, [r7, #10]
 800d308:	4613      	mov	r3, r2
 800d30a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d30c:	f7fe ff6e 	bl	800c1ec <HAL_GetTick>
 800d310:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b20      	cmp	r3, #32
 800d31c:	f040 820b 	bne.w	800d736 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	2319      	movs	r3, #25
 800d326:	2201      	movs	r2, #1
 800d328:	497c      	ldr	r1, [pc, #496]	; (800d51c <HAL_I2C_Master_Receive+0x224>)
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f000 fb5a 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d336:	2302      	movs	r3, #2
 800d338:	e1fe      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d340:	2b01      	cmp	r3, #1
 800d342:	d101      	bne.n	800d348 <HAL_I2C_Master_Receive+0x50>
 800d344:	2302      	movs	r3, #2
 800d346:	e1f7      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d007      	beq.n	800d36e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f042 0201 	orr.w	r2, r2, #1
 800d36c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d37c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2222      	movs	r2, #34	; 0x22
 800d382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2210      	movs	r2, #16
 800d38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	893a      	ldrh	r2, [r7, #8]
 800d39e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4a5c      	ldr	r2, [pc, #368]	; (800d520 <HAL_I2C_Master_Receive+0x228>)
 800d3ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d3b0:	8979      	ldrh	r1, [r7, #10]
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f000 fa46 	bl	800d848 <I2C_MasterRequestRead>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e1b8      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d113      	bne.n	800d3f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	623b      	str	r3, [r7, #32]
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	623b      	str	r3, [r7, #32]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	623b      	str	r3, [r7, #32]
 800d3e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	e18c      	b.n	800d710 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d11b      	bne.n	800d436 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d40c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d40e:	2300      	movs	r3, #0
 800d410:	61fb      	str	r3, [r7, #28]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	61fb      	str	r3, [r7, #28]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	61fb      	str	r3, [r7, #28]
 800d422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	e16c      	b.n	800d710 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d11b      	bne.n	800d476 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d44c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d45c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d45e:	2300      	movs	r3, #0
 800d460:	61bb      	str	r3, [r7, #24]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	695b      	ldr	r3, [r3, #20]
 800d468:	61bb      	str	r3, [r7, #24]
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	699b      	ldr	r3, [r3, #24]
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	e14c      	b.n	800d710 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d486:	2300      	movs	r3, #0
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	695b      	ldr	r3, [r3, #20]
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	617b      	str	r3, [r7, #20]
 800d49a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d49c:	e138      	b.n	800d710 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4a2:	2b03      	cmp	r3, #3
 800d4a4:	f200 80f1 	bhi.w	800d68a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d123      	bne.n	800d4f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f000 fbed 	bl	800dc94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e139      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	691a      	ldr	r2, [r3, #16]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ec:	b29b      	uxth	r3, r3
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4f6:	e10b      	b.n	800d710 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d14e      	bne.n	800d59e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d506:	2200      	movs	r2, #0
 800d508:	4906      	ldr	r1, [pc, #24]	; (800d524 <HAL_I2C_Master_Receive+0x22c>)
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f000 fa6a 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d008      	beq.n	800d528 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e10e      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
 800d51a:	bf00      	nop
 800d51c:	00100002 	.word	0x00100002
 800d520:	ffff0000 	.word	0xffff0000
 800d524:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	691a      	ldr	r2, [r3, #16]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d542:	b2d2      	uxtb	r2, r2
 800d544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d554:	3b01      	subs	r3, #1
 800d556:	b29a      	uxth	r2, r3
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d560:	b29b      	uxth	r3, r3
 800d562:	3b01      	subs	r3, #1
 800d564:	b29a      	uxth	r2, r3
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	691a      	ldr	r2, [r3, #16]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	b2d2      	uxtb	r2, r2
 800d576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d586:	3b01      	subs	r3, #1
 800d588:	b29a      	uxth	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d592:	b29b      	uxth	r3, r3
 800d594:	3b01      	subs	r3, #1
 800d596:	b29a      	uxth	r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d59c:	e0b8      	b.n	800d710 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	4966      	ldr	r1, [pc, #408]	; (800d740 <HAL_I2C_Master_Receive+0x448>)
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f000 fa1b 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e0bf      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	691a      	ldr	r2, [r3, #16]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d2:	b2d2      	uxtb	r2, r2
 800d5d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5da:	1c5a      	adds	r2, r3, #1
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d600:	2200      	movs	r2, #0
 800d602:	494f      	ldr	r1, [pc, #316]	; (800d740 <HAL_I2C_Master_Receive+0x448>)
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 f9ed 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e091      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62e:	b2d2      	uxtb	r2, r2
 800d630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d640:	3b01      	subs	r3, #1
 800d642:	b29a      	uxth	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	3b01      	subs	r3, #1
 800d650:	b29a      	uxth	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	691a      	ldr	r2, [r3, #16]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	b2d2      	uxtb	r2, r2
 800d662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d672:	3b01      	subs	r3, #1
 800d674:	b29a      	uxth	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d67e:	b29b      	uxth	r3, r3
 800d680:	3b01      	subs	r3, #1
 800d682:	b29a      	uxth	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d688:	e042      	b.n	800d710 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d68a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d68c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f000 fb00 	bl	800dc94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d001      	beq.n	800d69e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e04c      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	691a      	ldr	r2, [r3, #16]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a8:	b2d2      	uxtb	r2, r2
 800d6aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	695b      	ldr	r3, [r3, #20]
 800d6d6:	f003 0304 	and.w	r3, r3, #4
 800d6da:	2b04      	cmp	r3, #4
 800d6dc:	d118      	bne.n	800d710 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	691a      	ldr	r2, [r3, #16]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e8:	b2d2      	uxtb	r2, r2
 800d6ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	b29a      	uxth	r2, r3
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d706:	b29b      	uxth	r3, r3
 800d708:	3b01      	subs	r3, #1
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d714:	2b00      	cmp	r3, #0
 800d716:	f47f aec2 	bne.w	800d49e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2220      	movs	r2, #32
 800d71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d732:	2300      	movs	r3, #0
 800d734:	e000      	b.n	800d738 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d736:	2302      	movs	r3, #2
  }
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3728      	adds	r7, #40	; 0x28
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	00010004 	.word	0x00010004

0800d744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b088      	sub	sp, #32
 800d748:	af02      	add	r7, sp, #8
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	607a      	str	r2, [r7, #4]
 800d74e:	603b      	str	r3, [r7, #0]
 800d750:	460b      	mov	r3, r1
 800d752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b08      	cmp	r3, #8
 800d75e:	d006      	beq.n	800d76e <I2C_MasterRequestWrite+0x2a>
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d003      	beq.n	800d76e <I2C_MasterRequestWrite+0x2a>
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d76c:	d108      	bne.n	800d780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	e00b      	b.n	800d798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d784:	2b12      	cmp	r3, #18
 800d786:	d107      	bne.n	800d798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f91d 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00d      	beq.n	800d7cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7be:	d103      	bne.n	800d7c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e035      	b.n	800d838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7d4:	d108      	bne.n	800d7e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d7d6:	897b      	ldrh	r3, [r7, #10]
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	461a      	mov	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d7e4:	611a      	str	r2, [r3, #16]
 800d7e6:	e01b      	b.n	800d820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d7e8:	897b      	ldrh	r3, [r7, #10]
 800d7ea:	11db      	asrs	r3, r3, #7
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f003 0306 	and.w	r3, r3, #6
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	f063 030f 	orn	r3, r3, #15
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	490e      	ldr	r1, [pc, #56]	; (800d840 <I2C_MasterRequestWrite+0xfc>)
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 f943 	bl	800da92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d001      	beq.n	800d816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	e010      	b.n	800d838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d816:	897b      	ldrh	r3, [r7, #10]
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	4907      	ldr	r1, [pc, #28]	; (800d844 <I2C_MasterRequestWrite+0x100>)
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 f933 	bl	800da92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	e000      	b.n	800d838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	00010008 	.word	0x00010008
 800d844:	00010002 	.word	0x00010002

0800d848 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af02      	add	r7, sp, #8
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	607a      	str	r2, [r7, #4]
 800d852:	603b      	str	r3, [r7, #0]
 800d854:	460b      	mov	r3, r1
 800d856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d86c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b08      	cmp	r3, #8
 800d872:	d006      	beq.n	800d882 <I2C_MasterRequestRead+0x3a>
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d003      	beq.n	800d882 <I2C_MasterRequestRead+0x3a>
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d880:	d108      	bne.n	800d894 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	e00b      	b.n	800d8ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d898:	2b11      	cmp	r3, #17
 800d89a:	d107      	bne.n	800d8ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f000 f893 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00d      	beq.n	800d8e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8d2:	d103      	bne.n	800d8dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e079      	b.n	800d9d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d8e8:	d108      	bne.n	800d8fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d8ea:	897b      	ldrh	r3, [r7, #10]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	f043 0301 	orr.w	r3, r3, #1
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	611a      	str	r2, [r3, #16]
 800d8fa:	e05f      	b.n	800d9bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d8fc:	897b      	ldrh	r3, [r7, #10]
 800d8fe:	11db      	asrs	r3, r3, #7
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 0306 	and.w	r3, r3, #6
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f063 030f 	orn	r3, r3, #15
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	4930      	ldr	r1, [pc, #192]	; (800d9dc <I2C_MasterRequestRead+0x194>)
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 f8b9 	bl	800da92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d001      	beq.n	800d92a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d926:	2301      	movs	r3, #1
 800d928:	e054      	b.n	800d9d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d92a:	897b      	ldrh	r3, [r7, #10]
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	687a      	ldr	r2, [r7, #4]
 800d938:	4929      	ldr	r1, [pc, #164]	; (800d9e0 <I2C_MasterRequestRead+0x198>)
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f000 f8a9 	bl	800da92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d001      	beq.n	800d94a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	e044      	b.n	800d9d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d94a:	2300      	movs	r3, #0
 800d94c:	613b      	str	r3, [r7, #16]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	613b      	str	r3, [r7, #16]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	613b      	str	r3, [r7, #16]
 800d95e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d96e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 f831 	bl	800d9e4 <I2C_WaitOnFlagUntilTimeout>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00d      	beq.n	800d9a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d996:	d103      	bne.n	800d9a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d99e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	e017      	b.n	800d9d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d9a4:	897b      	ldrh	r3, [r7, #10]
 800d9a6:	11db      	asrs	r3, r3, #7
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	f003 0306 	and.w	r3, r3, #6
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f063 030e 	orn	r3, r3, #14
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	4907      	ldr	r1, [pc, #28]	; (800d9e0 <I2C_MasterRequestRead+0x198>)
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f000 f865 	bl	800da92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e000      	b.n	800d9d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	00010008 	.word	0x00010008
 800d9e0:	00010002 	.word	0x00010002

0800d9e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	603b      	str	r3, [r7, #0]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d9f4:	e025      	b.n	800da42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fc:	d021      	beq.n	800da42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9fe:	f7fe fbf5 	bl	800c1ec <HAL_GetTick>
 800da02:	4602      	mov	r2, r0
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	683a      	ldr	r2, [r7, #0]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d302      	bcc.n	800da14 <I2C_WaitOnFlagUntilTimeout+0x30>
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d116      	bne.n	800da42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2220      	movs	r2, #32
 800da1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2200      	movs	r2, #0
 800da26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da2e:	f043 0220 	orr.w	r2, r3, #32
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	e023      	b.n	800da8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	0c1b      	lsrs	r3, r3, #16
 800da46:	b2db      	uxtb	r3, r3
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d10d      	bne.n	800da68 <I2C_WaitOnFlagUntilTimeout+0x84>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	695b      	ldr	r3, [r3, #20]
 800da52:	43da      	mvns	r2, r3
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	4013      	ands	r3, r2
 800da58:	b29b      	uxth	r3, r3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	bf0c      	ite	eq
 800da5e:	2301      	moveq	r3, #1
 800da60:	2300      	movne	r3, #0
 800da62:	b2db      	uxtb	r3, r3
 800da64:	461a      	mov	r2, r3
 800da66:	e00c      	b.n	800da82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	43da      	mvns	r2, r3
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	4013      	ands	r3, r2
 800da74:	b29b      	uxth	r3, r3
 800da76:	2b00      	cmp	r3, #0
 800da78:	bf0c      	ite	eq
 800da7a:	2301      	moveq	r3, #1
 800da7c:	2300      	movne	r3, #0
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	461a      	mov	r2, r3
 800da82:	79fb      	ldrb	r3, [r7, #7]
 800da84:	429a      	cmp	r2, r3
 800da86:	d0b6      	beq.n	800d9f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b084      	sub	sp, #16
 800da96:	af00      	add	r7, sp, #0
 800da98:	60f8      	str	r0, [r7, #12]
 800da9a:	60b9      	str	r1, [r7, #8]
 800da9c:	607a      	str	r2, [r7, #4]
 800da9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800daa0:	e051      	b.n	800db46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800daac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dab0:	d123      	bne.n	800dafa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dac0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800daca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2220      	movs	r2, #32
 800dad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae6:	f043 0204 	orr.w	r2, r3, #4
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e046      	b.n	800db88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db00:	d021      	beq.n	800db46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db02:	f7fe fb73 	bl	800c1ec <HAL_GetTick>
 800db06:	4602      	mov	r2, r0
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d302      	bcc.n	800db18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d116      	bne.n	800db46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2220      	movs	r2, #32
 800db22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db32:	f043 0220 	orr.w	r2, r3, #32
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800db42:	2301      	movs	r3, #1
 800db44:	e020      	b.n	800db88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	0c1b      	lsrs	r3, r3, #16
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d10c      	bne.n	800db6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	43da      	mvns	r2, r3
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	4013      	ands	r3, r2
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	bf14      	ite	ne
 800db62:	2301      	movne	r3, #1
 800db64:	2300      	moveq	r3, #0
 800db66:	b2db      	uxtb	r3, r3
 800db68:	e00b      	b.n	800db82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	43da      	mvns	r2, r3
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	4013      	ands	r3, r2
 800db76:	b29b      	uxth	r3, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	bf14      	ite	ne
 800db7c:	2301      	movne	r3, #1
 800db7e:	2300      	moveq	r3, #0
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b00      	cmp	r3, #0
 800db84:	d18d      	bne.n	800daa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db9c:	e02d      	b.n	800dbfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f000 f8ce 	bl	800dd40 <I2C_IsAcknowledgeFailed>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e02d      	b.n	800dc0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb4:	d021      	beq.n	800dbfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbb6:	f7fe fb19 	bl	800c1ec <HAL_GetTick>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d302      	bcc.n	800dbcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d116      	bne.n	800dbfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2220      	movs	r2, #32
 800dbd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe6:	f043 0220 	orr.w	r2, r3, #32
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e007      	b.n	800dc0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	695b      	ldr	r3, [r3, #20]
 800dc00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc04:	2b80      	cmp	r3, #128	; 0x80
 800dc06:	d1ca      	bne.n	800db9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b084      	sub	sp, #16
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	60b9      	str	r1, [r7, #8]
 800dc1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dc1e:	e02d      	b.n	800dc7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f000 f88d 	bl	800dd40 <I2C_IsAcknowledgeFailed>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d001      	beq.n	800dc30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e02d      	b.n	800dc8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc36:	d021      	beq.n	800dc7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc38:	f7fe fad8 	bl	800c1ec <HAL_GetTick>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d302      	bcc.n	800dc4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d116      	bne.n	800dc7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2200      	movs	r2, #0
 800dc52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2220      	movs	r2, #32
 800dc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc68:	f043 0220 	orr.w	r2, r3, #32
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2200      	movs	r2, #0
 800dc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e007      	b.n	800dc8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	695b      	ldr	r3, [r3, #20]
 800dc82:	f003 0304 	and.w	r3, r3, #4
 800dc86:	2b04      	cmp	r3, #4
 800dc88:	d1ca      	bne.n	800dc20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dca0:	e042      	b.n	800dd28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	695b      	ldr	r3, [r3, #20]
 800dca8:	f003 0310 	and.w	r3, r3, #16
 800dcac:	2b10      	cmp	r3, #16
 800dcae:	d119      	bne.n	800dce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f06f 0210 	mvn.w	r2, #16
 800dcb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2220      	movs	r2, #32
 800dcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dce0:	2301      	movs	r3, #1
 800dce2:	e029      	b.n	800dd38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dce4:	f7fe fa82 	bl	800c1ec <HAL_GetTick>
 800dce8:	4602      	mov	r2, r0
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d302      	bcc.n	800dcfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d116      	bne.n	800dd28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2220      	movs	r2, #32
 800dd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd14:	f043 0220 	orr.w	r2, r3, #32
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e007      	b.n	800dd38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd32:	2b40      	cmp	r3, #64	; 0x40
 800dd34:	d1b5      	bne.n	800dca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd56:	d11b      	bne.n	800dd90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800dd60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2220      	movs	r2, #32
 800dd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd7c:	f043 0204 	orr.w	r2, r3, #4
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e000      	b.n	800dd92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	370c      	adds	r7, #12
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
	...

0800dda0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d101      	bne.n	800ddb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e267      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f003 0301 	and.w	r3, r3, #1
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d075      	beq.n	800deaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ddbe:	4b88      	ldr	r3, [pc, #544]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	f003 030c 	and.w	r3, r3, #12
 800ddc6:	2b04      	cmp	r3, #4
 800ddc8:	d00c      	beq.n	800dde4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ddca:	4b85      	ldr	r3, [pc, #532]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ddd2:	2b08      	cmp	r3, #8
 800ddd4:	d112      	bne.n	800ddfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ddd6:	4b82      	ldr	r3, [pc, #520]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dde2:	d10b      	bne.n	800ddfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dde4:	4b7e      	ldr	r3, [pc, #504]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d05b      	beq.n	800dea8 <HAL_RCC_OscConfig+0x108>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d157      	bne.n	800dea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e242      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de04:	d106      	bne.n	800de14 <HAL_RCC_OscConfig+0x74>
 800de06:	4b76      	ldr	r3, [pc, #472]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a75      	ldr	r2, [pc, #468]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	e01d      	b.n	800de50 <HAL_RCC_OscConfig+0xb0>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800de1c:	d10c      	bne.n	800de38 <HAL_RCC_OscConfig+0x98>
 800de1e:	4b70      	ldr	r3, [pc, #448]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4a6f      	ldr	r2, [pc, #444]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	4b6d      	ldr	r3, [pc, #436]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a6c      	ldr	r2, [pc, #432]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de34:	6013      	str	r3, [r2, #0]
 800de36:	e00b      	b.n	800de50 <HAL_RCC_OscConfig+0xb0>
 800de38:	4b69      	ldr	r3, [pc, #420]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a68      	ldr	r2, [pc, #416]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de42:	6013      	str	r3, [r2, #0]
 800de44:	4b66      	ldr	r3, [pc, #408]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a65      	ldr	r2, [pc, #404]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d013      	beq.n	800de80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de58:	f7fe f9c8 	bl	800c1ec <HAL_GetTick>
 800de5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800de5e:	e008      	b.n	800de72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800de60:	f7fe f9c4 	bl	800c1ec <HAL_GetTick>
 800de64:	4602      	mov	r2, r0
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	2b64      	cmp	r3, #100	; 0x64
 800de6c:	d901      	bls.n	800de72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800de6e:	2303      	movs	r3, #3
 800de70:	e207      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800de72:	4b5b      	ldr	r3, [pc, #364]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d0f0      	beq.n	800de60 <HAL_RCC_OscConfig+0xc0>
 800de7e:	e014      	b.n	800deaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de80:	f7fe f9b4 	bl	800c1ec <HAL_GetTick>
 800de84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800de86:	e008      	b.n	800de9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800de88:	f7fe f9b0 	bl	800c1ec <HAL_GetTick>
 800de8c:	4602      	mov	r2, r0
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	1ad3      	subs	r3, r2, r3
 800de92:	2b64      	cmp	r3, #100	; 0x64
 800de94:	d901      	bls.n	800de9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800de96:	2303      	movs	r3, #3
 800de98:	e1f3      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800de9a:	4b51      	ldr	r3, [pc, #324]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1f0      	bne.n	800de88 <HAL_RCC_OscConfig+0xe8>
 800dea6:	e000      	b.n	800deaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d063      	beq.n	800df7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800deb6:	4b4a      	ldr	r3, [pc, #296]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800deb8:	689b      	ldr	r3, [r3, #8]
 800deba:	f003 030c 	and.w	r3, r3, #12
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00b      	beq.n	800deda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dec2:	4b47      	ldr	r3, [pc, #284]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800deca:	2b08      	cmp	r3, #8
 800decc:	d11c      	bne.n	800df08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dece:	4b44      	ldr	r3, [pc, #272]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d116      	bne.n	800df08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800deda:	4b41      	ldr	r3, [pc, #260]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f003 0302 	and.w	r3, r3, #2
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d005      	beq.n	800def2 <HAL_RCC_OscConfig+0x152>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d001      	beq.n	800def2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	e1c7      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800def2:	4b3b      	ldr	r3, [pc, #236]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	00db      	lsls	r3, r3, #3
 800df00:	4937      	ldr	r1, [pc, #220]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800df02:	4313      	orrs	r3, r2
 800df04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800df06:	e03a      	b.n	800df7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d020      	beq.n	800df52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800df10:	4b34      	ldr	r3, [pc, #208]	; (800dfe4 <HAL_RCC_OscConfig+0x244>)
 800df12:	2201      	movs	r2, #1
 800df14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df16:	f7fe f969 	bl	800c1ec <HAL_GetTick>
 800df1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800df1c:	e008      	b.n	800df30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800df1e:	f7fe f965 	bl	800c1ec <HAL_GetTick>
 800df22:	4602      	mov	r2, r0
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	2b02      	cmp	r3, #2
 800df2a:	d901      	bls.n	800df30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800df2c:	2303      	movs	r3, #3
 800df2e:	e1a8      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800df30:	4b2b      	ldr	r3, [pc, #172]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 0302 	and.w	r3, r3, #2
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0f0      	beq.n	800df1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800df3c:	4b28      	ldr	r3, [pc, #160]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	00db      	lsls	r3, r3, #3
 800df4a:	4925      	ldr	r1, [pc, #148]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800df4c:	4313      	orrs	r3, r2
 800df4e:	600b      	str	r3, [r1, #0]
 800df50:	e015      	b.n	800df7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800df52:	4b24      	ldr	r3, [pc, #144]	; (800dfe4 <HAL_RCC_OscConfig+0x244>)
 800df54:	2200      	movs	r2, #0
 800df56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df58:	f7fe f948 	bl	800c1ec <HAL_GetTick>
 800df5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800df5e:	e008      	b.n	800df72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800df60:	f7fe f944 	bl	800c1ec <HAL_GetTick>
 800df64:	4602      	mov	r2, r0
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	1ad3      	subs	r3, r2, r3
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	d901      	bls.n	800df72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800df6e:	2303      	movs	r3, #3
 800df70:	e187      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800df72:	4b1b      	ldr	r3, [pc, #108]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 0302 	and.w	r3, r3, #2
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d1f0      	bne.n	800df60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f003 0308 	and.w	r3, r3, #8
 800df86:	2b00      	cmp	r3, #0
 800df88:	d036      	beq.n	800dff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d016      	beq.n	800dfc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800df92:	4b15      	ldr	r3, [pc, #84]	; (800dfe8 <HAL_RCC_OscConfig+0x248>)
 800df94:	2201      	movs	r2, #1
 800df96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df98:	f7fe f928 	bl	800c1ec <HAL_GetTick>
 800df9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800df9e:	e008      	b.n	800dfb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dfa0:	f7fe f924 	bl	800c1ec <HAL_GetTick>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	2b02      	cmp	r3, #2
 800dfac:	d901      	bls.n	800dfb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e167      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dfb2:	4b0b      	ldr	r3, [pc, #44]	; (800dfe0 <HAL_RCC_OscConfig+0x240>)
 800dfb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d0f0      	beq.n	800dfa0 <HAL_RCC_OscConfig+0x200>
 800dfbe:	e01b      	b.n	800dff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dfc0:	4b09      	ldr	r3, [pc, #36]	; (800dfe8 <HAL_RCC_OscConfig+0x248>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dfc6:	f7fe f911 	bl	800c1ec <HAL_GetTick>
 800dfca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dfcc:	e00e      	b.n	800dfec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dfce:	f7fe f90d 	bl	800c1ec <HAL_GetTick>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d907      	bls.n	800dfec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e150      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
 800dfe0:	40023800 	.word	0x40023800
 800dfe4:	42470000 	.word	0x42470000
 800dfe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dfec:	4b88      	ldr	r3, [pc, #544]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800dfee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dff0:	f003 0302 	and.w	r3, r3, #2
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d1ea      	bne.n	800dfce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f003 0304 	and.w	r3, r3, #4
 800e000:	2b00      	cmp	r3, #0
 800e002:	f000 8097 	beq.w	800e134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e006:	2300      	movs	r3, #0
 800e008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e00a:	4b81      	ldr	r3, [pc, #516]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e00e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e012:	2b00      	cmp	r3, #0
 800e014:	d10f      	bne.n	800e036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e016:	2300      	movs	r3, #0
 800e018:	60bb      	str	r3, [r7, #8]
 800e01a:	4b7d      	ldr	r3, [pc, #500]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e01e:	4a7c      	ldr	r2, [pc, #496]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e024:	6413      	str	r3, [r2, #64]	; 0x40
 800e026:	4b7a      	ldr	r3, [pc, #488]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e02a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e02e:	60bb      	str	r3, [r7, #8]
 800e030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e032:	2301      	movs	r3, #1
 800e034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e036:	4b77      	ldr	r3, [pc, #476]	; (800e214 <HAL_RCC_OscConfig+0x474>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d118      	bne.n	800e074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e042:	4b74      	ldr	r3, [pc, #464]	; (800e214 <HAL_RCC_OscConfig+0x474>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a73      	ldr	r2, [pc, #460]	; (800e214 <HAL_RCC_OscConfig+0x474>)
 800e048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e04c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e04e:	f7fe f8cd 	bl	800c1ec <HAL_GetTick>
 800e052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e054:	e008      	b.n	800e068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e056:	f7fe f8c9 	bl	800c1ec <HAL_GetTick>
 800e05a:	4602      	mov	r2, r0
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	2b02      	cmp	r3, #2
 800e062:	d901      	bls.n	800e068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e064:	2303      	movs	r3, #3
 800e066:	e10c      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e068:	4b6a      	ldr	r3, [pc, #424]	; (800e214 <HAL_RCC_OscConfig+0x474>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e070:	2b00      	cmp	r3, #0
 800e072:	d0f0      	beq.n	800e056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d106      	bne.n	800e08a <HAL_RCC_OscConfig+0x2ea>
 800e07c:	4b64      	ldr	r3, [pc, #400]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e07e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e080:	4a63      	ldr	r2, [pc, #396]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e082:	f043 0301 	orr.w	r3, r3, #1
 800e086:	6713      	str	r3, [r2, #112]	; 0x70
 800e088:	e01c      	b.n	800e0c4 <HAL_RCC_OscConfig+0x324>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	2b05      	cmp	r3, #5
 800e090:	d10c      	bne.n	800e0ac <HAL_RCC_OscConfig+0x30c>
 800e092:	4b5f      	ldr	r3, [pc, #380]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e096:	4a5e      	ldr	r2, [pc, #376]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e098:	f043 0304 	orr.w	r3, r3, #4
 800e09c:	6713      	str	r3, [r2, #112]	; 0x70
 800e09e:	4b5c      	ldr	r3, [pc, #368]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0a2:	4a5b      	ldr	r2, [pc, #364]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e0a4:	f043 0301 	orr.w	r3, r3, #1
 800e0a8:	6713      	str	r3, [r2, #112]	; 0x70
 800e0aa:	e00b      	b.n	800e0c4 <HAL_RCC_OscConfig+0x324>
 800e0ac:	4b58      	ldr	r3, [pc, #352]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0b0:	4a57      	ldr	r2, [pc, #348]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e0b2:	f023 0301 	bic.w	r3, r3, #1
 800e0b6:	6713      	str	r3, [r2, #112]	; 0x70
 800e0b8:	4b55      	ldr	r3, [pc, #340]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0bc:	4a54      	ldr	r2, [pc, #336]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e0be:	f023 0304 	bic.w	r3, r3, #4
 800e0c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d015      	beq.n	800e0f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0cc:	f7fe f88e 	bl	800c1ec <HAL_GetTick>
 800e0d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e0d2:	e00a      	b.n	800e0ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e0d4:	f7fe f88a 	bl	800c1ec <HAL_GetTick>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d901      	bls.n	800e0ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e0e6:	2303      	movs	r3, #3
 800e0e8:	e0cb      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e0ea:	4b49      	ldr	r3, [pc, #292]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ee:	f003 0302 	and.w	r3, r3, #2
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d0ee      	beq.n	800e0d4 <HAL_RCC_OscConfig+0x334>
 800e0f6:	e014      	b.n	800e122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e0f8:	f7fe f878 	bl	800c1ec <HAL_GetTick>
 800e0fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e0fe:	e00a      	b.n	800e116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e100:	f7fe f874 	bl	800c1ec <HAL_GetTick>
 800e104:	4602      	mov	r2, r0
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e10e:	4293      	cmp	r3, r2
 800e110:	d901      	bls.n	800e116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e112:	2303      	movs	r3, #3
 800e114:	e0b5      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e116:	4b3e      	ldr	r3, [pc, #248]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11a:	f003 0302 	and.w	r3, r3, #2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1ee      	bne.n	800e100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d105      	bne.n	800e134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e128:	4b39      	ldr	r3, [pc, #228]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12c:	4a38      	ldr	r2, [pc, #224]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e12e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f000 80a1 	beq.w	800e280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e13e:	4b34      	ldr	r3, [pc, #208]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e140:	689b      	ldr	r3, [r3, #8]
 800e142:	f003 030c 	and.w	r3, r3, #12
 800e146:	2b08      	cmp	r3, #8
 800e148:	d05c      	beq.n	800e204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d141      	bne.n	800e1d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e152:	4b31      	ldr	r3, [pc, #196]	; (800e218 <HAL_RCC_OscConfig+0x478>)
 800e154:	2200      	movs	r2, #0
 800e156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e158:	f7fe f848 	bl	800c1ec <HAL_GetTick>
 800e15c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e15e:	e008      	b.n	800e172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e160:	f7fe f844 	bl	800c1ec <HAL_GetTick>
 800e164:	4602      	mov	r2, r0
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	1ad3      	subs	r3, r2, r3
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d901      	bls.n	800e172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e087      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e172:	4b27      	ldr	r3, [pc, #156]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1f0      	bne.n	800e160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	69da      	ldr	r2, [r3, #28]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a1b      	ldr	r3, [r3, #32]
 800e186:	431a      	orrs	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18c:	019b      	lsls	r3, r3, #6
 800e18e:	431a      	orrs	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e194:	085b      	lsrs	r3, r3, #1
 800e196:	3b01      	subs	r3, #1
 800e198:	041b      	lsls	r3, r3, #16
 800e19a:	431a      	orrs	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a0:	061b      	lsls	r3, r3, #24
 800e1a2:	491b      	ldr	r1, [pc, #108]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e1a8:	4b1b      	ldr	r3, [pc, #108]	; (800e218 <HAL_RCC_OscConfig+0x478>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e1ae:	f7fe f81d 	bl	800c1ec <HAL_GetTick>
 800e1b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e1b4:	e008      	b.n	800e1c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e1b6:	f7fe f819 	bl	800c1ec <HAL_GetTick>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	1ad3      	subs	r3, r2, r3
 800e1c0:	2b02      	cmp	r3, #2
 800e1c2:	d901      	bls.n	800e1c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	e05c      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e1c8:	4b11      	ldr	r3, [pc, #68]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0f0      	beq.n	800e1b6 <HAL_RCC_OscConfig+0x416>
 800e1d4:	e054      	b.n	800e280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e1d6:	4b10      	ldr	r3, [pc, #64]	; (800e218 <HAL_RCC_OscConfig+0x478>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e1dc:	f7fe f806 	bl	800c1ec <HAL_GetTick>
 800e1e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e1e2:	e008      	b.n	800e1f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e1e4:	f7fe f802 	bl	800c1ec <HAL_GetTick>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d901      	bls.n	800e1f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	e045      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e1f6:	4b06      	ldr	r3, [pc, #24]	; (800e210 <HAL_RCC_OscConfig+0x470>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1f0      	bne.n	800e1e4 <HAL_RCC_OscConfig+0x444>
 800e202:	e03d      	b.n	800e280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	699b      	ldr	r3, [r3, #24]
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d107      	bne.n	800e21c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e038      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
 800e210:	40023800 	.word	0x40023800
 800e214:	40007000 	.word	0x40007000
 800e218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e21c:	4b1b      	ldr	r3, [pc, #108]	; (800e28c <HAL_RCC_OscConfig+0x4ec>)
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	2b01      	cmp	r3, #1
 800e228:	d028      	beq.n	800e27c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e234:	429a      	cmp	r2, r3
 800e236:	d121      	bne.n	800e27c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e242:	429a      	cmp	r2, r3
 800e244:	d11a      	bne.n	800e27c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e246:	68fa      	ldr	r2, [r7, #12]
 800e248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e24c:	4013      	ands	r3, r2
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e254:	4293      	cmp	r3, r2
 800e256:	d111      	bne.n	800e27c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e262:	085b      	lsrs	r3, r3, #1
 800e264:	3b01      	subs	r3, #1
 800e266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e268:	429a      	cmp	r2, r3
 800e26a:	d107      	bne.n	800e27c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e278:	429a      	cmp	r2, r3
 800e27a:	d001      	beq.n	800e280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800e27c:	2301      	movs	r3, #1
 800e27e:	e000      	b.n	800e282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e280:	2300      	movs	r3, #0
}
 800e282:	4618      	mov	r0, r3
 800e284:	3718      	adds	r7, #24
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	40023800 	.word	0x40023800

0800e290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d101      	bne.n	800e2a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e0cc      	b.n	800e43e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e2a4:	4b68      	ldr	r3, [pc, #416]	; (800e448 <HAL_RCC_ClockConfig+0x1b8>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f003 0307 	and.w	r3, r3, #7
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d90c      	bls.n	800e2cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e2b2:	4b65      	ldr	r3, [pc, #404]	; (800e448 <HAL_RCC_ClockConfig+0x1b8>)
 800e2b4:	683a      	ldr	r2, [r7, #0]
 800e2b6:	b2d2      	uxtb	r2, r2
 800e2b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2ba:	4b63      	ldr	r3, [pc, #396]	; (800e448 <HAL_RCC_ClockConfig+0x1b8>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f003 0307 	and.w	r3, r3, #7
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d001      	beq.n	800e2cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e0b8      	b.n	800e43e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f003 0302 	and.w	r3, r3, #2
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d020      	beq.n	800e31a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f003 0304 	and.w	r3, r3, #4
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e2e4:	4b59      	ldr	r3, [pc, #356]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	4a58      	ldr	r2, [pc, #352]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e2ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e2ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f003 0308 	and.w	r3, r3, #8
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d005      	beq.n	800e308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e2fc:	4b53      	ldr	r3, [pc, #332]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	4a52      	ldr	r2, [pc, #328]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e308:	4b50      	ldr	r3, [pc, #320]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	494d      	ldr	r1, [pc, #308]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e316:	4313      	orrs	r3, r2
 800e318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	2b00      	cmp	r3, #0
 800e324:	d044      	beq.n	800e3b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d107      	bne.n	800e33e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e32e:	4b47      	ldr	r3, [pc, #284]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e336:	2b00      	cmp	r3, #0
 800e338:	d119      	bne.n	800e36e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e07f      	b.n	800e43e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	2b02      	cmp	r3, #2
 800e344:	d003      	beq.n	800e34e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e34a:	2b03      	cmp	r3, #3
 800e34c:	d107      	bne.n	800e35e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e34e:	4b3f      	ldr	r3, [pc, #252]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e356:	2b00      	cmp	r3, #0
 800e358:	d109      	bne.n	800e36e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e35a:	2301      	movs	r3, #1
 800e35c:	e06f      	b.n	800e43e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e35e:	4b3b      	ldr	r3, [pc, #236]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f003 0302 	and.w	r3, r3, #2
 800e366:	2b00      	cmp	r3, #0
 800e368:	d101      	bne.n	800e36e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	e067      	b.n	800e43e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e36e:	4b37      	ldr	r3, [pc, #220]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	f023 0203 	bic.w	r2, r3, #3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	4934      	ldr	r1, [pc, #208]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e37c:	4313      	orrs	r3, r2
 800e37e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e380:	f7fd ff34 	bl	800c1ec <HAL_GetTick>
 800e384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e386:	e00a      	b.n	800e39e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e388:	f7fd ff30 	bl	800c1ec <HAL_GetTick>
 800e38c:	4602      	mov	r2, r0
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	f241 3288 	movw	r2, #5000	; 0x1388
 800e396:	4293      	cmp	r3, r2
 800e398:	d901      	bls.n	800e39e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e39a:	2303      	movs	r3, #3
 800e39c:	e04f      	b.n	800e43e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e39e:	4b2b      	ldr	r3, [pc, #172]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	f003 020c 	and.w	r2, r3, #12
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d1eb      	bne.n	800e388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e3b0:	4b25      	ldr	r3, [pc, #148]	; (800e448 <HAL_RCC_ClockConfig+0x1b8>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f003 0307 	and.w	r3, r3, #7
 800e3b8:	683a      	ldr	r2, [r7, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d20c      	bcs.n	800e3d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3be:	4b22      	ldr	r3, [pc, #136]	; (800e448 <HAL_RCC_ClockConfig+0x1b8>)
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	b2d2      	uxtb	r2, r2
 800e3c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e3c6:	4b20      	ldr	r3, [pc, #128]	; (800e448 <HAL_RCC_ClockConfig+0x1b8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f003 0307 	and.w	r3, r3, #7
 800e3ce:	683a      	ldr	r2, [r7, #0]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d001      	beq.n	800e3d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e032      	b.n	800e43e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f003 0304 	and.w	r3, r3, #4
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d008      	beq.n	800e3f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e3e4:	4b19      	ldr	r3, [pc, #100]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	4916      	ldr	r1, [pc, #88]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f003 0308 	and.w	r3, r3, #8
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d009      	beq.n	800e416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e402:	4b12      	ldr	r3, [pc, #72]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	691b      	ldr	r3, [r3, #16]
 800e40e:	00db      	lsls	r3, r3, #3
 800e410:	490e      	ldr	r1, [pc, #56]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e412:	4313      	orrs	r3, r2
 800e414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e416:	f000 f821 	bl	800e45c <HAL_RCC_GetSysClockFreq>
 800e41a:	4602      	mov	r2, r0
 800e41c:	4b0b      	ldr	r3, [pc, #44]	; (800e44c <HAL_RCC_ClockConfig+0x1bc>)
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	091b      	lsrs	r3, r3, #4
 800e422:	f003 030f 	and.w	r3, r3, #15
 800e426:	490a      	ldr	r1, [pc, #40]	; (800e450 <HAL_RCC_ClockConfig+0x1c0>)
 800e428:	5ccb      	ldrb	r3, [r1, r3]
 800e42a:	fa22 f303 	lsr.w	r3, r2, r3
 800e42e:	4a09      	ldr	r2, [pc, #36]	; (800e454 <HAL_RCC_ClockConfig+0x1c4>)
 800e430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e432:	4b09      	ldr	r3, [pc, #36]	; (800e458 <HAL_RCC_ClockConfig+0x1c8>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4618      	mov	r0, r3
 800e438:	f7fd fea8 	bl	800c18c <HAL_InitTick>

  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	40023c00 	.word	0x40023c00
 800e44c:	40023800 	.word	0x40023800
 800e450:	08011024 	.word	0x08011024
 800e454:	20000358 	.word	0x20000358
 800e458:	20000638 	.word	0x20000638

0800e45c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e45c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e460:	b094      	sub	sp, #80	; 0x50
 800e462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e464:	2300      	movs	r3, #0
 800e466:	647b      	str	r3, [r7, #68]	; 0x44
 800e468:	2300      	movs	r3, #0
 800e46a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e46c:	2300      	movs	r3, #0
 800e46e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800e470:	2300      	movs	r3, #0
 800e472:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e474:	4b79      	ldr	r3, [pc, #484]	; (800e65c <HAL_RCC_GetSysClockFreq+0x200>)
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	f003 030c 	and.w	r3, r3, #12
 800e47c:	2b08      	cmp	r3, #8
 800e47e:	d00d      	beq.n	800e49c <HAL_RCC_GetSysClockFreq+0x40>
 800e480:	2b08      	cmp	r3, #8
 800e482:	f200 80e1 	bhi.w	800e648 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e486:	2b00      	cmp	r3, #0
 800e488:	d002      	beq.n	800e490 <HAL_RCC_GetSysClockFreq+0x34>
 800e48a:	2b04      	cmp	r3, #4
 800e48c:	d003      	beq.n	800e496 <HAL_RCC_GetSysClockFreq+0x3a>
 800e48e:	e0db      	b.n	800e648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e490:	4b73      	ldr	r3, [pc, #460]	; (800e660 <HAL_RCC_GetSysClockFreq+0x204>)
 800e492:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800e494:	e0db      	b.n	800e64e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e496:	4b73      	ldr	r3, [pc, #460]	; (800e664 <HAL_RCC_GetSysClockFreq+0x208>)
 800e498:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e49a:	e0d8      	b.n	800e64e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e49c:	4b6f      	ldr	r3, [pc, #444]	; (800e65c <HAL_RCC_GetSysClockFreq+0x200>)
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e4a6:	4b6d      	ldr	r3, [pc, #436]	; (800e65c <HAL_RCC_GetSysClockFreq+0x200>)
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d063      	beq.n	800e57a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e4b2:	4b6a      	ldr	r3, [pc, #424]	; (800e65c <HAL_RCC_GetSysClockFreq+0x200>)
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	099b      	lsrs	r3, r3, #6
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e4ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e4ce:	4622      	mov	r2, r4
 800e4d0:	462b      	mov	r3, r5
 800e4d2:	f04f 0000 	mov.w	r0, #0
 800e4d6:	f04f 0100 	mov.w	r1, #0
 800e4da:	0159      	lsls	r1, r3, #5
 800e4dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4e0:	0150      	lsls	r0, r2, #5
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	1a51      	subs	r1, r2, r1
 800e4ea:	6139      	str	r1, [r7, #16]
 800e4ec:	4629      	mov	r1, r5
 800e4ee:	eb63 0301 	sbc.w	r3, r3, r1
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	f04f 0200 	mov.w	r2, #0
 800e4f8:	f04f 0300 	mov.w	r3, #0
 800e4fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e500:	4659      	mov	r1, fp
 800e502:	018b      	lsls	r3, r1, #6
 800e504:	4651      	mov	r1, sl
 800e506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e50a:	4651      	mov	r1, sl
 800e50c:	018a      	lsls	r2, r1, #6
 800e50e:	4651      	mov	r1, sl
 800e510:	ebb2 0801 	subs.w	r8, r2, r1
 800e514:	4659      	mov	r1, fp
 800e516:	eb63 0901 	sbc.w	r9, r3, r1
 800e51a:	f04f 0200 	mov.w	r2, #0
 800e51e:	f04f 0300 	mov.w	r3, #0
 800e522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e52a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e52e:	4690      	mov	r8, r2
 800e530:	4699      	mov	r9, r3
 800e532:	4623      	mov	r3, r4
 800e534:	eb18 0303 	adds.w	r3, r8, r3
 800e538:	60bb      	str	r3, [r7, #8]
 800e53a:	462b      	mov	r3, r5
 800e53c:	eb49 0303 	adc.w	r3, r9, r3
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	f04f 0200 	mov.w	r2, #0
 800e546:	f04f 0300 	mov.w	r3, #0
 800e54a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e54e:	4629      	mov	r1, r5
 800e550:	024b      	lsls	r3, r1, #9
 800e552:	4621      	mov	r1, r4
 800e554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e558:	4621      	mov	r1, r4
 800e55a:	024a      	lsls	r2, r1, #9
 800e55c:	4610      	mov	r0, r2
 800e55e:	4619      	mov	r1, r3
 800e560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e562:	2200      	movs	r2, #0
 800e564:	62bb      	str	r3, [r7, #40]	; 0x28
 800e566:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e56c:	f7f1 fea0 	bl	80002b0 <__aeabi_uldivmod>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	4613      	mov	r3, r2
 800e576:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e578:	e058      	b.n	800e62c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e57a:	4b38      	ldr	r3, [pc, #224]	; (800e65c <HAL_RCC_GetSysClockFreq+0x200>)
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	099b      	lsrs	r3, r3, #6
 800e580:	2200      	movs	r2, #0
 800e582:	4618      	mov	r0, r3
 800e584:	4611      	mov	r1, r2
 800e586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e58a:	623b      	str	r3, [r7, #32]
 800e58c:	2300      	movs	r3, #0
 800e58e:	627b      	str	r3, [r7, #36]	; 0x24
 800e590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e594:	4642      	mov	r2, r8
 800e596:	464b      	mov	r3, r9
 800e598:	f04f 0000 	mov.w	r0, #0
 800e59c:	f04f 0100 	mov.w	r1, #0
 800e5a0:	0159      	lsls	r1, r3, #5
 800e5a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e5a6:	0150      	lsls	r0, r2, #5
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	4641      	mov	r1, r8
 800e5ae:	ebb2 0a01 	subs.w	sl, r2, r1
 800e5b2:	4649      	mov	r1, r9
 800e5b4:	eb63 0b01 	sbc.w	fp, r3, r1
 800e5b8:	f04f 0200 	mov.w	r2, #0
 800e5bc:	f04f 0300 	mov.w	r3, #0
 800e5c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e5c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e5c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e5cc:	ebb2 040a 	subs.w	r4, r2, sl
 800e5d0:	eb63 050b 	sbc.w	r5, r3, fp
 800e5d4:	f04f 0200 	mov.w	r2, #0
 800e5d8:	f04f 0300 	mov.w	r3, #0
 800e5dc:	00eb      	lsls	r3, r5, #3
 800e5de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e5e2:	00e2      	lsls	r2, r4, #3
 800e5e4:	4614      	mov	r4, r2
 800e5e6:	461d      	mov	r5, r3
 800e5e8:	4643      	mov	r3, r8
 800e5ea:	18e3      	adds	r3, r4, r3
 800e5ec:	603b      	str	r3, [r7, #0]
 800e5ee:	464b      	mov	r3, r9
 800e5f0:	eb45 0303 	adc.w	r3, r5, r3
 800e5f4:	607b      	str	r3, [r7, #4]
 800e5f6:	f04f 0200 	mov.w	r2, #0
 800e5fa:	f04f 0300 	mov.w	r3, #0
 800e5fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e602:	4629      	mov	r1, r5
 800e604:	028b      	lsls	r3, r1, #10
 800e606:	4621      	mov	r1, r4
 800e608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e60c:	4621      	mov	r1, r4
 800e60e:	028a      	lsls	r2, r1, #10
 800e610:	4610      	mov	r0, r2
 800e612:	4619      	mov	r1, r3
 800e614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e616:	2200      	movs	r2, #0
 800e618:	61bb      	str	r3, [r7, #24]
 800e61a:	61fa      	str	r2, [r7, #28]
 800e61c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e620:	f7f1 fe46 	bl	80002b0 <__aeabi_uldivmod>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	4613      	mov	r3, r2
 800e62a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e62c:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <HAL_RCC_GetSysClockFreq+0x200>)
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	0c1b      	lsrs	r3, r3, #16
 800e632:	f003 0303 	and.w	r3, r3, #3
 800e636:	3301      	adds	r3, #1
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800e63c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e63e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e640:	fbb2 f3f3 	udiv	r3, r2, r3
 800e644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e646:	e002      	b.n	800e64e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e648:	4b05      	ldr	r3, [pc, #20]	; (800e660 <HAL_RCC_GetSysClockFreq+0x204>)
 800e64a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800e64c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800e650:	4618      	mov	r0, r3
 800e652:	3750      	adds	r7, #80	; 0x50
 800e654:	46bd      	mov	sp, r7
 800e656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e65a:	bf00      	nop
 800e65c:	40023800 	.word	0x40023800
 800e660:	00f42400 	.word	0x00f42400
 800e664:	007a1200 	.word	0x007a1200

0800e668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e668:	b480      	push	{r7}
 800e66a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e66c:	4b03      	ldr	r3, [pc, #12]	; (800e67c <HAL_RCC_GetHCLKFreq+0x14>)
 800e66e:	681b      	ldr	r3, [r3, #0]
}
 800e670:	4618      	mov	r0, r3
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	20000358 	.word	0x20000358

0800e680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e684:	f7ff fff0 	bl	800e668 <HAL_RCC_GetHCLKFreq>
 800e688:	4602      	mov	r2, r0
 800e68a:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	0a9b      	lsrs	r3, r3, #10
 800e690:	f003 0307 	and.w	r3, r3, #7
 800e694:	4903      	ldr	r1, [pc, #12]	; (800e6a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e696:	5ccb      	ldrb	r3, [r1, r3]
 800e698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	40023800 	.word	0x40023800
 800e6a4:	08011034 	.word	0x08011034

0800e6a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e6ac:	f7ff ffdc 	bl	800e668 <HAL_RCC_GetHCLKFreq>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	4b05      	ldr	r3, [pc, #20]	; (800e6c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	0b5b      	lsrs	r3, r3, #13
 800e6b8:	f003 0307 	and.w	r3, r3, #7
 800e6bc:	4903      	ldr	r1, [pc, #12]	; (800e6cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e6be:	5ccb      	ldrb	r3, [r1, r3]
 800e6c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	40023800 	.word	0x40023800
 800e6cc:	08011034 	.word	0x08011034

0800e6d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e041      	b.n	800e766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d106      	bne.n	800e6fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7f4 f9a8 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2202      	movs	r2, #2
 800e700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4610      	mov	r0, r2
 800e710:	f000 fa6c 	bl	800ebec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
	...

0800e770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e770:	b480      	push	{r7}
 800e772:	b085      	sub	sp, #20
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b01      	cmp	r3, #1
 800e782:	d001      	beq.n	800e788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	e044      	b.n	800e812 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2202      	movs	r2, #2
 800e78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68da      	ldr	r2, [r3, #12]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f042 0201 	orr.w	r2, r2, #1
 800e79e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a1e      	ldr	r2, [pc, #120]	; (800e820 <HAL_TIM_Base_Start_IT+0xb0>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d018      	beq.n	800e7dc <HAL_TIM_Base_Start_IT+0x6c>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7b2:	d013      	beq.n	800e7dc <HAL_TIM_Base_Start_IT+0x6c>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a1a      	ldr	r2, [pc, #104]	; (800e824 <HAL_TIM_Base_Start_IT+0xb4>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d00e      	beq.n	800e7dc <HAL_TIM_Base_Start_IT+0x6c>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a19      	ldr	r2, [pc, #100]	; (800e828 <HAL_TIM_Base_Start_IT+0xb8>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d009      	beq.n	800e7dc <HAL_TIM_Base_Start_IT+0x6c>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a17      	ldr	r2, [pc, #92]	; (800e82c <HAL_TIM_Base_Start_IT+0xbc>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d004      	beq.n	800e7dc <HAL_TIM_Base_Start_IT+0x6c>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a16      	ldr	r2, [pc, #88]	; (800e830 <HAL_TIM_Base_Start_IT+0xc0>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d111      	bne.n	800e800 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	f003 0307 	and.w	r3, r3, #7
 800e7e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2b06      	cmp	r3, #6
 800e7ec:	d010      	beq.n	800e810 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f042 0201 	orr.w	r2, r2, #1
 800e7fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7fe:	e007      	b.n	800e810 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f042 0201 	orr.w	r2, r2, #1
 800e80e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3714      	adds	r7, #20
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr
 800e81e:	bf00      	nop
 800e820:	40010000 	.word	0x40010000
 800e824:	40000400 	.word	0x40000400
 800e828:	40000800 	.word	0x40000800
 800e82c:	40000c00 	.word	0x40000c00
 800e830:	40014000 	.word	0x40014000

0800e834 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d101      	bne.n	800e846 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800e842:	2301      	movs	r3, #1
 800e844:	e041      	b.n	800e8ca <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d106      	bne.n	800e860 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7f4 f8d4 	bl	8002a08 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2202      	movs	r2, #2
 800e864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3304      	adds	r3, #4
 800e870:	4619      	mov	r1, r3
 800e872:	4610      	mov	r0, r2
 800e874:	f000 f9ba 	bl	800ebec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2201      	movs	r2, #1
 800e884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b082      	sub	sp, #8
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	f003 0302 	and.w	r3, r3, #2
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	d122      	bne.n	800e92e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	f003 0302 	and.w	r3, r3, #2
 800e8f2:	2b02      	cmp	r3, #2
 800e8f4:	d11b      	bne.n	800e92e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f06f 0202 	mvn.w	r2, #2
 800e8fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	699b      	ldr	r3, [r3, #24]
 800e90c:	f003 0303 	and.w	r3, r3, #3
 800e910:	2b00      	cmp	r3, #0
 800e912:	d003      	beq.n	800e91c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f94b 	bl	800ebb0 <HAL_TIM_IC_CaptureCallback>
 800e91a:	e005      	b.n	800e928 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 f93d 	bl	800eb9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 f94e 	bl	800ebc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	f003 0304 	and.w	r3, r3, #4
 800e938:	2b04      	cmp	r3, #4
 800e93a:	d122      	bne.n	800e982 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	f003 0304 	and.w	r3, r3, #4
 800e946:	2b04      	cmp	r3, #4
 800e948:	d11b      	bne.n	800e982 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f06f 0204 	mvn.w	r2, #4
 800e952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2202      	movs	r2, #2
 800e958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e964:	2b00      	cmp	r3, #0
 800e966:	d003      	beq.n	800e970 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 f921 	bl	800ebb0 <HAL_TIM_IC_CaptureCallback>
 800e96e:	e005      	b.n	800e97c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 f913 	bl	800eb9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f924 	bl	800ebc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	f003 0308 	and.w	r3, r3, #8
 800e98c:	2b08      	cmp	r3, #8
 800e98e:	d122      	bne.n	800e9d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	68db      	ldr	r3, [r3, #12]
 800e996:	f003 0308 	and.w	r3, r3, #8
 800e99a:	2b08      	cmp	r3, #8
 800e99c:	d11b      	bne.n	800e9d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f06f 0208 	mvn.w	r2, #8
 800e9a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2204      	movs	r2, #4
 800e9ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69db      	ldr	r3, [r3, #28]
 800e9b4:	f003 0303 	and.w	r3, r3, #3
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 f8f7 	bl	800ebb0 <HAL_TIM_IC_CaptureCallback>
 800e9c2:	e005      	b.n	800e9d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f8e9 	bl	800eb9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f8fa 	bl	800ebc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	691b      	ldr	r3, [r3, #16]
 800e9dc:	f003 0310 	and.w	r3, r3, #16
 800e9e0:	2b10      	cmp	r3, #16
 800e9e2:	d122      	bne.n	800ea2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	f003 0310 	and.w	r3, r3, #16
 800e9ee:	2b10      	cmp	r3, #16
 800e9f0:	d11b      	bne.n	800ea2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f06f 0210 	mvn.w	r2, #16
 800e9fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2208      	movs	r2, #8
 800ea00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	69db      	ldr	r3, [r3, #28]
 800ea08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d003      	beq.n	800ea18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f000 f8cd 	bl	800ebb0 <HAL_TIM_IC_CaptureCallback>
 800ea16:	e005      	b.n	800ea24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f8bf 	bl	800eb9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 f8d0 	bl	800ebc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2200      	movs	r2, #0
 800ea28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	f003 0301 	and.w	r3, r3, #1
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d10e      	bne.n	800ea56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d107      	bne.n	800ea56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f06f 0201 	mvn.w	r2, #1
 800ea4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7f3 facf 	bl	8001ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	691b      	ldr	r3, [r3, #16]
 800ea5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea60:	2b80      	cmp	r3, #128	; 0x80
 800ea62:	d10e      	bne.n	800ea82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea6e:	2b80      	cmp	r3, #128	; 0x80
 800ea70:	d107      	bne.n	800ea82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ea7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fb39 	bl	800f0f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea8c:	2b40      	cmp	r3, #64	; 0x40
 800ea8e:	d10e      	bne.n	800eaae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea9a:	2b40      	cmp	r3, #64	; 0x40
 800ea9c:	d107      	bne.n	800eaae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eaa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f895 	bl	800ebd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	691b      	ldr	r3, [r3, #16]
 800eab4:	f003 0320 	and.w	r3, r3, #32
 800eab8:	2b20      	cmp	r3, #32
 800eaba:	d10e      	bne.n	800eada <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	68db      	ldr	r3, [r3, #12]
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b20      	cmp	r3, #32
 800eac8:	d107      	bne.n	800eada <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f06f 0220 	mvn.w	r2, #32
 800ead2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fb03 	bl	800f0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eada:	bf00      	nop
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
	...

0800eae4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eafa:	2b01      	cmp	r3, #1
 800eafc:	d101      	bne.n	800eb02 <HAL_TIM_OC_ConfigChannel+0x1e>
 800eafe:	2302      	movs	r3, #2
 800eb00:	e048      	b.n	800eb94 <HAL_TIM_OC_ConfigChannel+0xb0>
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b0c      	cmp	r3, #12
 800eb0e:	d839      	bhi.n	800eb84 <HAL_TIM_OC_ConfigChannel+0xa0>
 800eb10:	a201      	add	r2, pc, #4	; (adr r2, 800eb18 <HAL_TIM_OC_ConfigChannel+0x34>)
 800eb12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb16:	bf00      	nop
 800eb18:	0800eb4d 	.word	0x0800eb4d
 800eb1c:	0800eb85 	.word	0x0800eb85
 800eb20:	0800eb85 	.word	0x0800eb85
 800eb24:	0800eb85 	.word	0x0800eb85
 800eb28:	0800eb5b 	.word	0x0800eb5b
 800eb2c:	0800eb85 	.word	0x0800eb85
 800eb30:	0800eb85 	.word	0x0800eb85
 800eb34:	0800eb85 	.word	0x0800eb85
 800eb38:	0800eb69 	.word	0x0800eb69
 800eb3c:	0800eb85 	.word	0x0800eb85
 800eb40:	0800eb85 	.word	0x0800eb85
 800eb44:	0800eb85 	.word	0x0800eb85
 800eb48:	0800eb77 	.word	0x0800eb77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68b9      	ldr	r1, [r7, #8]
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 f8ca 	bl	800ecec <TIM_OC1_SetConfig>
      break;
 800eb58:	e017      	b.n	800eb8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68b9      	ldr	r1, [r7, #8]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f000 f929 	bl	800edb8 <TIM_OC2_SetConfig>
      break;
 800eb66:	e010      	b.n	800eb8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	68b9      	ldr	r1, [r7, #8]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 f98e 	bl	800ee90 <TIM_OC3_SetConfig>
      break;
 800eb74:	e009      	b.n	800eb8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68b9      	ldr	r1, [r7, #8]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 f9f1 	bl	800ef64 <TIM_OC4_SetConfig>
      break;
 800eb82:	e002      	b.n	800eb8a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	75fb      	strb	r3, [r7, #23]
      break;
 800eb88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4a34      	ldr	r2, [pc, #208]	; (800ecd0 <TIM_Base_SetConfig+0xe4>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d00f      	beq.n	800ec24 <TIM_Base_SetConfig+0x38>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec0a:	d00b      	beq.n	800ec24 <TIM_Base_SetConfig+0x38>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	4a31      	ldr	r2, [pc, #196]	; (800ecd4 <TIM_Base_SetConfig+0xe8>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d007      	beq.n	800ec24 <TIM_Base_SetConfig+0x38>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	4a30      	ldr	r2, [pc, #192]	; (800ecd8 <TIM_Base_SetConfig+0xec>)
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d003      	beq.n	800ec24 <TIM_Base_SetConfig+0x38>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	4a2f      	ldr	r2, [pc, #188]	; (800ecdc <TIM_Base_SetConfig+0xf0>)
 800ec20:	4293      	cmp	r3, r2
 800ec22:	d108      	bne.n	800ec36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4a25      	ldr	r2, [pc, #148]	; (800ecd0 <TIM_Base_SetConfig+0xe4>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d01b      	beq.n	800ec76 <TIM_Base_SetConfig+0x8a>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec44:	d017      	beq.n	800ec76 <TIM_Base_SetConfig+0x8a>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	4a22      	ldr	r2, [pc, #136]	; (800ecd4 <TIM_Base_SetConfig+0xe8>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d013      	beq.n	800ec76 <TIM_Base_SetConfig+0x8a>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	4a21      	ldr	r2, [pc, #132]	; (800ecd8 <TIM_Base_SetConfig+0xec>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d00f      	beq.n	800ec76 <TIM_Base_SetConfig+0x8a>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4a20      	ldr	r2, [pc, #128]	; (800ecdc <TIM_Base_SetConfig+0xf0>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d00b      	beq.n	800ec76 <TIM_Base_SetConfig+0x8a>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4a1f      	ldr	r2, [pc, #124]	; (800ece0 <TIM_Base_SetConfig+0xf4>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d007      	beq.n	800ec76 <TIM_Base_SetConfig+0x8a>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4a1e      	ldr	r2, [pc, #120]	; (800ece4 <TIM_Base_SetConfig+0xf8>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d003      	beq.n	800ec76 <TIM_Base_SetConfig+0x8a>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4a1d      	ldr	r2, [pc, #116]	; (800ece8 <TIM_Base_SetConfig+0xfc>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d108      	bne.n	800ec88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	4313      	orrs	r3, r2
 800ec86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	4313      	orrs	r3, r2
 800ec94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	689a      	ldr	r2, [r3, #8]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4a08      	ldr	r2, [pc, #32]	; (800ecd0 <TIM_Base_SetConfig+0xe4>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d103      	bne.n	800ecbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	691a      	ldr	r2, [r3, #16]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	615a      	str	r2, [r3, #20]
}
 800ecc2:	bf00      	nop
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr
 800ecce:	bf00      	nop
 800ecd0:	40010000 	.word	0x40010000
 800ecd4:	40000400 	.word	0x40000400
 800ecd8:	40000800 	.word	0x40000800
 800ecdc:	40000c00 	.word	0x40000c00
 800ece0:	40014000 	.word	0x40014000
 800ece4:	40014400 	.word	0x40014400
 800ece8:	40014800 	.word	0x40014800

0800ecec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b087      	sub	sp, #28
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6a1b      	ldr	r3, [r3, #32]
 800ecfa:	f023 0201 	bic.w	r2, r3, #1
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a1b      	ldr	r3, [r3, #32]
 800ed06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f023 0303 	bic.w	r3, r3, #3
 800ed22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f023 0302 	bic.w	r3, r3, #2
 800ed34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	4a1c      	ldr	r2, [pc, #112]	; (800edb4 <TIM_OC1_SetConfig+0xc8>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d10c      	bne.n	800ed62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	f023 0308 	bic.w	r3, r3, #8
 800ed4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	f023 0304 	bic.w	r3, r3, #4
 800ed60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4a13      	ldr	r2, [pc, #76]	; (800edb4 <TIM_OC1_SetConfig+0xc8>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d111      	bne.n	800ed8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ed78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	4313      	orrs	r3, r2
 800ed82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	693a      	ldr	r2, [r7, #16]
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	693a      	ldr	r2, [r7, #16]
 800ed92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	685a      	ldr	r2, [r3, #4]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	697a      	ldr	r2, [r7, #20]
 800eda6:	621a      	str	r2, [r3, #32]
}
 800eda8:	bf00      	nop
 800edaa:	371c      	adds	r7, #28
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	40010000 	.word	0x40010000

0800edb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800edb8:	b480      	push	{r7}
 800edba:	b087      	sub	sp, #28
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a1b      	ldr	r3, [r3, #32]
 800edc6:	f023 0210 	bic.w	r2, r3, #16
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	699b      	ldr	r3, [r3, #24]
 800edde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ede6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	021b      	lsls	r3, r3, #8
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	f023 0320 	bic.w	r3, r3, #32
 800ee02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	011b      	lsls	r3, r3, #4
 800ee0a:	697a      	ldr	r2, [r7, #20]
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a1e      	ldr	r2, [pc, #120]	; (800ee8c <TIM_OC2_SetConfig+0xd4>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d10d      	bne.n	800ee34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	011b      	lsls	r3, r3, #4
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	4a15      	ldr	r2, [pc, #84]	; (800ee8c <TIM_OC2_SetConfig+0xd4>)
 800ee38:	4293      	cmp	r3, r2
 800ee3a:	d113      	bne.n	800ee64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ee42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	4313      	orrs	r3, r2
 800ee56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	693a      	ldr	r2, [r7, #16]
 800ee60:	4313      	orrs	r3, r2
 800ee62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	693a      	ldr	r2, [r7, #16]
 800ee68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	685a      	ldr	r2, [r3, #4]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	621a      	str	r2, [r3, #32]
}
 800ee7e:	bf00      	nop
 800ee80:	371c      	adds	r7, #28
 800ee82:	46bd      	mov	sp, r7
 800ee84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee88:	4770      	bx	lr
 800ee8a:	bf00      	nop
 800ee8c:	40010000 	.word	0x40010000

0800ee90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b087      	sub	sp, #28
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	69db      	ldr	r3, [r3, #28]
 800eeb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f023 0303 	bic.w	r3, r3, #3
 800eec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	68fa      	ldr	r2, [r7, #12]
 800eece:	4313      	orrs	r3, r2
 800eed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	021b      	lsls	r3, r3, #8
 800eee0:	697a      	ldr	r2, [r7, #20]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a1d      	ldr	r2, [pc, #116]	; (800ef60 <TIM_OC3_SetConfig+0xd0>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d10d      	bne.n	800ef0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	021b      	lsls	r3, r3, #8
 800eefc:	697a      	ldr	r2, [r7, #20]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4a14      	ldr	r2, [pc, #80]	; (800ef60 <TIM_OC3_SetConfig+0xd0>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d113      	bne.n	800ef3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ef20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	011b      	lsls	r3, r3, #4
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	011b      	lsls	r3, r3, #4
 800ef34:	693a      	ldr	r2, [r7, #16]
 800ef36:	4313      	orrs	r3, r2
 800ef38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	685a      	ldr	r2, [r3, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	697a      	ldr	r2, [r7, #20]
 800ef52:	621a      	str	r2, [r3, #32]
}
 800ef54:	bf00      	nop
 800ef56:	371c      	adds	r7, #28
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr
 800ef60:	40010000 	.word	0x40010000

0800ef64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b087      	sub	sp, #28
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a1b      	ldr	r3, [r3, #32]
 800ef7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	69db      	ldr	r3, [r3, #28]
 800ef8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	021b      	lsls	r3, r3, #8
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	4313      	orrs	r3, r2
 800efa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800efae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	031b      	lsls	r3, r3, #12
 800efb6:	693a      	ldr	r2, [r7, #16]
 800efb8:	4313      	orrs	r3, r2
 800efba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a10      	ldr	r2, [pc, #64]	; (800f000 <TIM_OC4_SetConfig+0x9c>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d109      	bne.n	800efd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	695b      	ldr	r3, [r3, #20]
 800efd0:	019b      	lsls	r3, r3, #6
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	693a      	ldr	r2, [r7, #16]
 800eff0:	621a      	str	r2, [r3, #32]
}
 800eff2:	bf00      	nop
 800eff4:	371c      	adds	r7, #28
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	40010000 	.word	0x40010000

0800f004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f014:	2b01      	cmp	r3, #1
 800f016:	d101      	bne.n	800f01c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f018:	2302      	movs	r3, #2
 800f01a:	e050      	b.n	800f0be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2202      	movs	r2, #2
 800f028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	689b      	ldr	r3, [r3, #8]
 800f03a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f042:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a1c      	ldr	r2, [pc, #112]	; (800f0cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d018      	beq.n	800f092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f068:	d013      	beq.n	800f092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4a18      	ldr	r2, [pc, #96]	; (800f0d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d00e      	beq.n	800f092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a16      	ldr	r2, [pc, #88]	; (800f0d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d009      	beq.n	800f092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4a15      	ldr	r2, [pc, #84]	; (800f0d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d004      	beq.n	800f092 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a13      	ldr	r2, [pc, #76]	; (800f0dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d10c      	bne.n	800f0ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	68ba      	ldr	r2, [r7, #8]
 800f0aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f0bc:	2300      	movs	r3, #0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3714      	adds	r7, #20
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	40010000 	.word	0x40010000
 800f0d0:	40000400 	.word	0x40000400
 800f0d4:	40000800 	.word	0x40000800
 800f0d8:	40000c00 	.word	0x40000c00
 800f0dc:	40014000 	.word	0x40014000

0800f0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0e8:	bf00      	nop
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f116:	2301      	movs	r3, #1
 800f118:	e03f      	b.n	800f19a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d106      	bne.n	800f134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7f3 fcee 	bl	8002b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2224      	movs	r2, #36	; 0x24
 800f138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68da      	ldr	r2, [r3, #12]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f14a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 f9eb 	bl	800f528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	691a      	ldr	r2, [r3, #16]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	695a      	ldr	r2, [r3, #20]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68da      	ldr	r2, [r3, #12]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2220      	movs	r2, #32
 800f194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
	...

0800f1a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d165      	bne.n	800f28a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <HAL_UART_Transmit_DMA+0x26>
 800f1c4:	88fb      	ldrh	r3, [r7, #6]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d101      	bne.n	800f1ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e05e      	b.n	800f28c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d101      	bne.n	800f1dc <HAL_UART_Transmit_DMA+0x38>
 800f1d8:	2302      	movs	r3, #2
 800f1da:	e057      	b.n	800f28c <HAL_UART_Transmit_DMA+0xe8>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	88fa      	ldrh	r2, [r7, #6]
 800f1ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	88fa      	ldrh	r2, [r7, #6]
 800f1f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2221      	movs	r2, #33	; 0x21
 800f200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f208:	4a22      	ldr	r2, [pc, #136]	; (800f294 <HAL_UART_Transmit_DMA+0xf0>)
 800f20a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f210:	4a21      	ldr	r2, [pc, #132]	; (800f298 <HAL_UART_Transmit_DMA+0xf4>)
 800f212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f218:	4a20      	ldr	r2, [pc, #128]	; (800f29c <HAL_UART_Transmit_DMA+0xf8>)
 800f21a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f220:	2200      	movs	r2, #0
 800f222:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f224:	f107 0308 	add.w	r3, r7, #8
 800f228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f230:	6819      	ldr	r1, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3304      	adds	r3, #4
 800f238:	461a      	mov	r2, r3
 800f23a:	88fb      	ldrh	r3, [r7, #6]
 800f23c:	f7fd f9a2 	bl	800c584 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f248:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	3314      	adds	r3, #20
 800f258:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	e853 3f00 	ldrex	r3, [r3]
 800f260:	617b      	str	r3, [r7, #20]
   return(result);
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f268:	62bb      	str	r3, [r7, #40]	; 0x28
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	3314      	adds	r3, #20
 800f270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f272:	627a      	str	r2, [r7, #36]	; 0x24
 800f274:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f276:	6a39      	ldr	r1, [r7, #32]
 800f278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27a:	e841 2300 	strex	r3, r2, [r1]
 800f27e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1e5      	bne.n	800f252 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	e000      	b.n	800f28c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800f28a:	2302      	movs	r3, #2
  }
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3730      	adds	r7, #48	; 0x30
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	0800f2c9 	.word	0x0800f2c9
 800f298:	0800f363 	.word	0x0800f363
 800f29c:	0800f37f 	.word	0x0800f37f

0800f2a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f2a8:	bf00      	nop
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b090      	sub	sp, #64	; 0x40
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d137      	bne.n	800f354 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	3314      	adds	r3, #20
 800f2f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f4:	e853 3f00 	ldrex	r3, [r3]
 800f2f8:	623b      	str	r3, [r7, #32]
   return(result);
 800f2fa:	6a3b      	ldr	r3, [r7, #32]
 800f2fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f300:	63bb      	str	r3, [r7, #56]	; 0x38
 800f302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3314      	adds	r3, #20
 800f308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f30a:	633a      	str	r2, [r7, #48]	; 0x30
 800f30c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f312:	e841 2300 	strex	r3, r2, [r1]
 800f316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1e5      	bne.n	800f2ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	330c      	adds	r3, #12
 800f324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	e853 3f00 	ldrex	r3, [r3]
 800f32c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f334:	637b      	str	r3, [r7, #52]	; 0x34
 800f336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	330c      	adds	r3, #12
 800f33c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f33e:	61fa      	str	r2, [r7, #28]
 800f340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f342:	69b9      	ldr	r1, [r7, #24]
 800f344:	69fa      	ldr	r2, [r7, #28]
 800f346:	e841 2300 	strex	r3, r2, [r1]
 800f34a:	617b      	str	r3, [r7, #20]
   return(result);
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1e5      	bne.n	800f31e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f352:	e002      	b.n	800f35a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f354:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f356:	f7f6 fdfd 	bl	8005f54 <HAL_UART_TxCpltCallback>
}
 800f35a:	bf00      	nop
 800f35c:	3740      	adds	r7, #64	; 0x40
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}

0800f362 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f362:	b580      	push	{r7, lr}
 800f364:	b084      	sub	sp, #16
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f36e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f7ff ff95 	bl	800f2a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f376:	bf00      	nop
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b084      	sub	sp, #16
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f386:	2300      	movs	r3, #0
 800f388:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f38e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	695b      	ldr	r3, [r3, #20]
 800f396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f39a:	2b80      	cmp	r3, #128	; 0x80
 800f39c:	bf0c      	ite	eq
 800f39e:	2301      	moveq	r3, #1
 800f3a0:	2300      	movne	r3, #0
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	2b21      	cmp	r3, #33	; 0x21
 800f3b0:	d108      	bne.n	800f3c4 <UART_DMAError+0x46>
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d005      	beq.n	800f3c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f3be:	68b8      	ldr	r0, [r7, #8]
 800f3c0:	f000 f827 	bl	800f412 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3ce:	2b40      	cmp	r3, #64	; 0x40
 800f3d0:	bf0c      	ite	eq
 800f3d2:	2301      	moveq	r3, #1
 800f3d4:	2300      	movne	r3, #0
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	2b22      	cmp	r3, #34	; 0x22
 800f3e4:	d108      	bne.n	800f3f8 <UART_DMAError+0x7a>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d005      	beq.n	800f3f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f3f2:	68b8      	ldr	r0, [r7, #8]
 800f3f4:	f000 f835 	bl	800f462 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3fc:	f043 0210 	orr.w	r2, r3, #16
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f404:	68b8      	ldr	r0, [r7, #8]
 800f406:	f7ff ff55 	bl	800f2b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f40a:	bf00      	nop
 800f40c:	3710      	adds	r7, #16
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f412:	b480      	push	{r7}
 800f414:	b089      	sub	sp, #36	; 0x24
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	330c      	adds	r3, #12
 800f420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	e853 3f00 	ldrex	r3, [r3]
 800f428:	60bb      	str	r3, [r7, #8]
   return(result);
 800f42a:	68bb      	ldr	r3, [r7, #8]
 800f42c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f430:	61fb      	str	r3, [r7, #28]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	330c      	adds	r3, #12
 800f438:	69fa      	ldr	r2, [r7, #28]
 800f43a:	61ba      	str	r2, [r7, #24]
 800f43c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43e:	6979      	ldr	r1, [r7, #20]
 800f440:	69ba      	ldr	r2, [r7, #24]
 800f442:	e841 2300 	strex	r3, r2, [r1]
 800f446:	613b      	str	r3, [r7, #16]
   return(result);
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1e5      	bne.n	800f41a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2220      	movs	r2, #32
 800f452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800f456:	bf00      	nop
 800f458:	3724      	adds	r7, #36	; 0x24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr

0800f462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f462:	b480      	push	{r7}
 800f464:	b095      	sub	sp, #84	; 0x54
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	330c      	adds	r3, #12
 800f470:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f474:	e853 3f00 	ldrex	r3, [r3]
 800f478:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f480:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	330c      	adds	r3, #12
 800f488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f48a:	643a      	str	r2, [r7, #64]	; 0x40
 800f48c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f492:	e841 2300 	strex	r3, r2, [r1]
 800f496:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d1e5      	bne.n	800f46a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	3314      	adds	r3, #20
 800f4a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a6:	6a3b      	ldr	r3, [r7, #32]
 800f4a8:	e853 3f00 	ldrex	r3, [r3]
 800f4ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	f023 0301 	bic.w	r3, r3, #1
 800f4b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	3314      	adds	r3, #20
 800f4bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f4c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4c6:	e841 2300 	strex	r3, r2, [r1]
 800f4ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1e5      	bne.n	800f49e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d119      	bne.n	800f50e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	330c      	adds	r3, #12
 800f4e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	e853 3f00 	ldrex	r3, [r3]
 800f4e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f023 0310 	bic.w	r3, r3, #16
 800f4f0:	647b      	str	r3, [r7, #68]	; 0x44
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	330c      	adds	r3, #12
 800f4f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4fa:	61ba      	str	r2, [r7, #24]
 800f4fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fe:	6979      	ldr	r1, [r7, #20]
 800f500:	69ba      	ldr	r2, [r7, #24]
 800f502:	e841 2300 	strex	r3, r2, [r1]
 800f506:	613b      	str	r3, [r7, #16]
   return(result);
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1e5      	bne.n	800f4da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2220      	movs	r2, #32
 800f512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800f51c:	bf00      	nop
 800f51e:	3754      	adds	r7, #84	; 0x54
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f52c:	b0c0      	sub	sp, #256	; 0x100
 800f52e:	af00      	add	r7, sp, #0
 800f530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800f540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f544:	68d9      	ldr	r1, [r3, #12]
 800f546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	ea40 0301 	orr.w	r3, r0, r1
 800f550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f556:	689a      	ldr	r2, [r3, #8]
 800f558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	431a      	orrs	r2, r3
 800f560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	431a      	orrs	r2, r3
 800f568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f56c:	69db      	ldr	r3, [r3, #28]
 800f56e:	4313      	orrs	r3, r2
 800f570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800f574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800f580:	f021 010c 	bic.w	r1, r1, #12
 800f584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f58e:	430b      	orrs	r3, r1
 800f590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800f59e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f5a2:	6999      	ldr	r1, [r3, #24]
 800f5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	ea40 0301 	orr.w	r3, r0, r1
 800f5ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	4b8f      	ldr	r3, [pc, #572]	; (800f7f4 <UART_SetConfig+0x2cc>)
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d005      	beq.n	800f5c8 <UART_SetConfig+0xa0>
 800f5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	4b8d      	ldr	r3, [pc, #564]	; (800f7f8 <UART_SetConfig+0x2d0>)
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d104      	bne.n	800f5d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f5c8:	f7ff f86e 	bl	800e6a8 <HAL_RCC_GetPCLK2Freq>
 800f5cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800f5d0:	e003      	b.n	800f5da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f5d2:	f7ff f855 	bl	800e680 <HAL_RCC_GetPCLK1Freq>
 800f5d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f5de:	69db      	ldr	r3, [r3, #28]
 800f5e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5e4:	f040 810c 	bne.w	800f800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f5e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f5f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800f5f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	462b      	mov	r3, r5
 800f5fe:	1891      	adds	r1, r2, r2
 800f600:	65b9      	str	r1, [r7, #88]	; 0x58
 800f602:	415b      	adcs	r3, r3
 800f604:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800f60a:	4621      	mov	r1, r4
 800f60c:	eb12 0801 	adds.w	r8, r2, r1
 800f610:	4629      	mov	r1, r5
 800f612:	eb43 0901 	adc.w	r9, r3, r1
 800f616:	f04f 0200 	mov.w	r2, #0
 800f61a:	f04f 0300 	mov.w	r3, #0
 800f61e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f62a:	4690      	mov	r8, r2
 800f62c:	4699      	mov	r9, r3
 800f62e:	4623      	mov	r3, r4
 800f630:	eb18 0303 	adds.w	r3, r8, r3
 800f634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f638:	462b      	mov	r3, r5
 800f63a:	eb49 0303 	adc.w	r3, r9, r3
 800f63e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	2200      	movs	r2, #0
 800f64a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f64e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800f652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f656:	460b      	mov	r3, r1
 800f658:	18db      	adds	r3, r3, r3
 800f65a:	653b      	str	r3, [r7, #80]	; 0x50
 800f65c:	4613      	mov	r3, r2
 800f65e:	eb42 0303 	adc.w	r3, r2, r3
 800f662:	657b      	str	r3, [r7, #84]	; 0x54
 800f664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800f668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800f66c:	f7f0 fe20 	bl	80002b0 <__aeabi_uldivmod>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4b61      	ldr	r3, [pc, #388]	; (800f7fc <UART_SetConfig+0x2d4>)
 800f676:	fba3 2302 	umull	r2, r3, r3, r2
 800f67a:	095b      	lsrs	r3, r3, #5
 800f67c:	011c      	lsls	r4, r3, #4
 800f67e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f682:	2200      	movs	r2, #0
 800f684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800f68c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800f690:	4642      	mov	r2, r8
 800f692:	464b      	mov	r3, r9
 800f694:	1891      	adds	r1, r2, r2
 800f696:	64b9      	str	r1, [r7, #72]	; 0x48
 800f698:	415b      	adcs	r3, r3
 800f69a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f69c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f6a0:	4641      	mov	r1, r8
 800f6a2:	eb12 0a01 	adds.w	sl, r2, r1
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	eb43 0b01 	adc.w	fp, r3, r1
 800f6ac:	f04f 0200 	mov.w	r2, #0
 800f6b0:	f04f 0300 	mov.w	r3, #0
 800f6b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f6b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f6bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f6c0:	4692      	mov	sl, r2
 800f6c2:	469b      	mov	fp, r3
 800f6c4:	4643      	mov	r3, r8
 800f6c6:	eb1a 0303 	adds.w	r3, sl, r3
 800f6ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f6ce:	464b      	mov	r3, r9
 800f6d0:	eb4b 0303 	adc.w	r3, fp, r3
 800f6d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f6e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800f6e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	18db      	adds	r3, r3, r3
 800f6f0:	643b      	str	r3, [r7, #64]	; 0x40
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	eb42 0303 	adc.w	r3, r2, r3
 800f6f8:	647b      	str	r3, [r7, #68]	; 0x44
 800f6fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f6fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800f702:	f7f0 fdd5 	bl	80002b0 <__aeabi_uldivmod>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	4611      	mov	r1, r2
 800f70c:	4b3b      	ldr	r3, [pc, #236]	; (800f7fc <UART_SetConfig+0x2d4>)
 800f70e:	fba3 2301 	umull	r2, r3, r3, r1
 800f712:	095b      	lsrs	r3, r3, #5
 800f714:	2264      	movs	r2, #100	; 0x64
 800f716:	fb02 f303 	mul.w	r3, r2, r3
 800f71a:	1acb      	subs	r3, r1, r3
 800f71c:	00db      	lsls	r3, r3, #3
 800f71e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800f722:	4b36      	ldr	r3, [pc, #216]	; (800f7fc <UART_SetConfig+0x2d4>)
 800f724:	fba3 2302 	umull	r2, r3, r3, r2
 800f728:	095b      	lsrs	r3, r3, #5
 800f72a:	005b      	lsls	r3, r3, #1
 800f72c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f730:	441c      	add	r4, r3
 800f732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f736:	2200      	movs	r2, #0
 800f738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f73c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800f744:	4642      	mov	r2, r8
 800f746:	464b      	mov	r3, r9
 800f748:	1891      	adds	r1, r2, r2
 800f74a:	63b9      	str	r1, [r7, #56]	; 0x38
 800f74c:	415b      	adcs	r3, r3
 800f74e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f754:	4641      	mov	r1, r8
 800f756:	1851      	adds	r1, r2, r1
 800f758:	6339      	str	r1, [r7, #48]	; 0x30
 800f75a:	4649      	mov	r1, r9
 800f75c:	414b      	adcs	r3, r1
 800f75e:	637b      	str	r3, [r7, #52]	; 0x34
 800f760:	f04f 0200 	mov.w	r2, #0
 800f764:	f04f 0300 	mov.w	r3, #0
 800f768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f76c:	4659      	mov	r1, fp
 800f76e:	00cb      	lsls	r3, r1, #3
 800f770:	4651      	mov	r1, sl
 800f772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f776:	4651      	mov	r1, sl
 800f778:	00ca      	lsls	r2, r1, #3
 800f77a:	4610      	mov	r0, r2
 800f77c:	4619      	mov	r1, r3
 800f77e:	4603      	mov	r3, r0
 800f780:	4642      	mov	r2, r8
 800f782:	189b      	adds	r3, r3, r2
 800f784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f788:	464b      	mov	r3, r9
 800f78a:	460a      	mov	r2, r1
 800f78c:	eb42 0303 	adc.w	r3, r2, r3
 800f790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f7a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f7a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f7a8:	460b      	mov	r3, r1
 800f7aa:	18db      	adds	r3, r3, r3
 800f7ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	eb42 0303 	adc.w	r3, r2, r3
 800f7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f7ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f7be:	f7f0 fd77 	bl	80002b0 <__aeabi_uldivmod>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	4b0d      	ldr	r3, [pc, #52]	; (800f7fc <UART_SetConfig+0x2d4>)
 800f7c8:	fba3 1302 	umull	r1, r3, r3, r2
 800f7cc:	095b      	lsrs	r3, r3, #5
 800f7ce:	2164      	movs	r1, #100	; 0x64
 800f7d0:	fb01 f303 	mul.w	r3, r1, r3
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	00db      	lsls	r3, r3, #3
 800f7d8:	3332      	adds	r3, #50	; 0x32
 800f7da:	4a08      	ldr	r2, [pc, #32]	; (800f7fc <UART_SetConfig+0x2d4>)
 800f7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f7e0:	095b      	lsrs	r3, r3, #5
 800f7e2:	f003 0207 	and.w	r2, r3, #7
 800f7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	4422      	add	r2, r4
 800f7ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f7f0:	e105      	b.n	800f9fe <UART_SetConfig+0x4d6>
 800f7f2:	bf00      	nop
 800f7f4:	40011000 	.word	0x40011000
 800f7f8:	40011400 	.word	0x40011400
 800f7fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f804:	2200      	movs	r2, #0
 800f806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f80a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f80e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f812:	4642      	mov	r2, r8
 800f814:	464b      	mov	r3, r9
 800f816:	1891      	adds	r1, r2, r2
 800f818:	6239      	str	r1, [r7, #32]
 800f81a:	415b      	adcs	r3, r3
 800f81c:	627b      	str	r3, [r7, #36]	; 0x24
 800f81e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f822:	4641      	mov	r1, r8
 800f824:	1854      	adds	r4, r2, r1
 800f826:	4649      	mov	r1, r9
 800f828:	eb43 0501 	adc.w	r5, r3, r1
 800f82c:	f04f 0200 	mov.w	r2, #0
 800f830:	f04f 0300 	mov.w	r3, #0
 800f834:	00eb      	lsls	r3, r5, #3
 800f836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f83a:	00e2      	lsls	r2, r4, #3
 800f83c:	4614      	mov	r4, r2
 800f83e:	461d      	mov	r5, r3
 800f840:	4643      	mov	r3, r8
 800f842:	18e3      	adds	r3, r4, r3
 800f844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f848:	464b      	mov	r3, r9
 800f84a:	eb45 0303 	adc.w	r3, r5, r3
 800f84e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f85e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f862:	f04f 0200 	mov.w	r2, #0
 800f866:	f04f 0300 	mov.w	r3, #0
 800f86a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f86e:	4629      	mov	r1, r5
 800f870:	008b      	lsls	r3, r1, #2
 800f872:	4621      	mov	r1, r4
 800f874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f878:	4621      	mov	r1, r4
 800f87a:	008a      	lsls	r2, r1, #2
 800f87c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f880:	f7f0 fd16 	bl	80002b0 <__aeabi_uldivmod>
 800f884:	4602      	mov	r2, r0
 800f886:	460b      	mov	r3, r1
 800f888:	4b60      	ldr	r3, [pc, #384]	; (800fa0c <UART_SetConfig+0x4e4>)
 800f88a:	fba3 2302 	umull	r2, r3, r3, r2
 800f88e:	095b      	lsrs	r3, r3, #5
 800f890:	011c      	lsls	r4, r3, #4
 800f892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f896:	2200      	movs	r2, #0
 800f898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f89c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f8a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f8a4:	4642      	mov	r2, r8
 800f8a6:	464b      	mov	r3, r9
 800f8a8:	1891      	adds	r1, r2, r2
 800f8aa:	61b9      	str	r1, [r7, #24]
 800f8ac:	415b      	adcs	r3, r3
 800f8ae:	61fb      	str	r3, [r7, #28]
 800f8b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f8b4:	4641      	mov	r1, r8
 800f8b6:	1851      	adds	r1, r2, r1
 800f8b8:	6139      	str	r1, [r7, #16]
 800f8ba:	4649      	mov	r1, r9
 800f8bc:	414b      	adcs	r3, r1
 800f8be:	617b      	str	r3, [r7, #20]
 800f8c0:	f04f 0200 	mov.w	r2, #0
 800f8c4:	f04f 0300 	mov.w	r3, #0
 800f8c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f8cc:	4659      	mov	r1, fp
 800f8ce:	00cb      	lsls	r3, r1, #3
 800f8d0:	4651      	mov	r1, sl
 800f8d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f8d6:	4651      	mov	r1, sl
 800f8d8:	00ca      	lsls	r2, r1, #3
 800f8da:	4610      	mov	r0, r2
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4603      	mov	r3, r0
 800f8e0:	4642      	mov	r2, r8
 800f8e2:	189b      	adds	r3, r3, r2
 800f8e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f8e8:	464b      	mov	r3, r9
 800f8ea:	460a      	mov	r2, r1
 800f8ec:	eb42 0303 	adc.w	r3, r2, r3
 800f8f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800f8fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f900:	f04f 0200 	mov.w	r2, #0
 800f904:	f04f 0300 	mov.w	r3, #0
 800f908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f90c:	4649      	mov	r1, r9
 800f90e:	008b      	lsls	r3, r1, #2
 800f910:	4641      	mov	r1, r8
 800f912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f916:	4641      	mov	r1, r8
 800f918:	008a      	lsls	r2, r1, #2
 800f91a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f91e:	f7f0 fcc7 	bl	80002b0 <__aeabi_uldivmod>
 800f922:	4602      	mov	r2, r0
 800f924:	460b      	mov	r3, r1
 800f926:	4b39      	ldr	r3, [pc, #228]	; (800fa0c <UART_SetConfig+0x4e4>)
 800f928:	fba3 1302 	umull	r1, r3, r3, r2
 800f92c:	095b      	lsrs	r3, r3, #5
 800f92e:	2164      	movs	r1, #100	; 0x64
 800f930:	fb01 f303 	mul.w	r3, r1, r3
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	011b      	lsls	r3, r3, #4
 800f938:	3332      	adds	r3, #50	; 0x32
 800f93a:	4a34      	ldr	r2, [pc, #208]	; (800fa0c <UART_SetConfig+0x4e4>)
 800f93c:	fba2 2303 	umull	r2, r3, r2, r3
 800f940:	095b      	lsrs	r3, r3, #5
 800f942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f946:	441c      	add	r4, r3
 800f948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f94c:	2200      	movs	r2, #0
 800f94e:	673b      	str	r3, [r7, #112]	; 0x70
 800f950:	677a      	str	r2, [r7, #116]	; 0x74
 800f952:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f956:	4642      	mov	r2, r8
 800f958:	464b      	mov	r3, r9
 800f95a:	1891      	adds	r1, r2, r2
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	415b      	adcs	r3, r3
 800f960:	60fb      	str	r3, [r7, #12]
 800f962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f966:	4641      	mov	r1, r8
 800f968:	1851      	adds	r1, r2, r1
 800f96a:	6039      	str	r1, [r7, #0]
 800f96c:	4649      	mov	r1, r9
 800f96e:	414b      	adcs	r3, r1
 800f970:	607b      	str	r3, [r7, #4]
 800f972:	f04f 0200 	mov.w	r2, #0
 800f976:	f04f 0300 	mov.w	r3, #0
 800f97a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f97e:	4659      	mov	r1, fp
 800f980:	00cb      	lsls	r3, r1, #3
 800f982:	4651      	mov	r1, sl
 800f984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f988:	4651      	mov	r1, sl
 800f98a:	00ca      	lsls	r2, r1, #3
 800f98c:	4610      	mov	r0, r2
 800f98e:	4619      	mov	r1, r3
 800f990:	4603      	mov	r3, r0
 800f992:	4642      	mov	r2, r8
 800f994:	189b      	adds	r3, r3, r2
 800f996:	66bb      	str	r3, [r7, #104]	; 0x68
 800f998:	464b      	mov	r3, r9
 800f99a:	460a      	mov	r2, r1
 800f99c:	eb42 0303 	adc.w	r3, r2, r3
 800f9a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	663b      	str	r3, [r7, #96]	; 0x60
 800f9ac:	667a      	str	r2, [r7, #100]	; 0x64
 800f9ae:	f04f 0200 	mov.w	r2, #0
 800f9b2:	f04f 0300 	mov.w	r3, #0
 800f9b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f9ba:	4649      	mov	r1, r9
 800f9bc:	008b      	lsls	r3, r1, #2
 800f9be:	4641      	mov	r1, r8
 800f9c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f9c4:	4641      	mov	r1, r8
 800f9c6:	008a      	lsls	r2, r1, #2
 800f9c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f9cc:	f7f0 fc70 	bl	80002b0 <__aeabi_uldivmod>
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	4b0d      	ldr	r3, [pc, #52]	; (800fa0c <UART_SetConfig+0x4e4>)
 800f9d6:	fba3 1302 	umull	r1, r3, r3, r2
 800f9da:	095b      	lsrs	r3, r3, #5
 800f9dc:	2164      	movs	r1, #100	; 0x64
 800f9de:	fb01 f303 	mul.w	r3, r1, r3
 800f9e2:	1ad3      	subs	r3, r2, r3
 800f9e4:	011b      	lsls	r3, r3, #4
 800f9e6:	3332      	adds	r3, #50	; 0x32
 800f9e8:	4a08      	ldr	r2, [pc, #32]	; (800fa0c <UART_SetConfig+0x4e4>)
 800f9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ee:	095b      	lsrs	r3, r3, #5
 800f9f0:	f003 020f 	and.w	r2, r3, #15
 800f9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4422      	add	r2, r4
 800f9fc:	609a      	str	r2, [r3, #8]
}
 800f9fe:	bf00      	nop
 800fa00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800fa04:	46bd      	mov	sp, r7
 800fa06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa0a:	bf00      	nop
 800fa0c:	51eb851f 	.word	0x51eb851f

0800fa10 <__errno>:
 800fa10:	4b01      	ldr	r3, [pc, #4]	; (800fa18 <__errno+0x8>)
 800fa12:	6818      	ldr	r0, [r3, #0]
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	20000640 	.word	0x20000640

0800fa1c <__libc_init_array>:
 800fa1c:	b570      	push	{r4, r5, r6, lr}
 800fa1e:	4d0d      	ldr	r5, [pc, #52]	; (800fa54 <__libc_init_array+0x38>)
 800fa20:	4c0d      	ldr	r4, [pc, #52]	; (800fa58 <__libc_init_array+0x3c>)
 800fa22:	1b64      	subs	r4, r4, r5
 800fa24:	10a4      	asrs	r4, r4, #2
 800fa26:	2600      	movs	r6, #0
 800fa28:	42a6      	cmp	r6, r4
 800fa2a:	d109      	bne.n	800fa40 <__libc_init_array+0x24>
 800fa2c:	4d0b      	ldr	r5, [pc, #44]	; (800fa5c <__libc_init_array+0x40>)
 800fa2e:	4c0c      	ldr	r4, [pc, #48]	; (800fa60 <__libc_init_array+0x44>)
 800fa30:	f000 fcd0 	bl	80103d4 <_init>
 800fa34:	1b64      	subs	r4, r4, r5
 800fa36:	10a4      	asrs	r4, r4, #2
 800fa38:	2600      	movs	r6, #0
 800fa3a:	42a6      	cmp	r6, r4
 800fa3c:	d105      	bne.n	800fa4a <__libc_init_array+0x2e>
 800fa3e:	bd70      	pop	{r4, r5, r6, pc}
 800fa40:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa44:	4798      	blx	r3
 800fa46:	3601      	adds	r6, #1
 800fa48:	e7ee      	b.n	800fa28 <__libc_init_array+0xc>
 800fa4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa4e:	4798      	blx	r3
 800fa50:	3601      	adds	r6, #1
 800fa52:	e7f2      	b.n	800fa3a <__libc_init_array+0x1e>
 800fa54:	080118ec 	.word	0x080118ec
 800fa58:	080118ec 	.word	0x080118ec
 800fa5c:	080118ec 	.word	0x080118ec
 800fa60:	080118f0 	.word	0x080118f0

0800fa64 <memcpy>:
 800fa64:	440a      	add	r2, r1
 800fa66:	4291      	cmp	r1, r2
 800fa68:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa6c:	d100      	bne.n	800fa70 <memcpy+0xc>
 800fa6e:	4770      	bx	lr
 800fa70:	b510      	push	{r4, lr}
 800fa72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa7a:	4291      	cmp	r1, r2
 800fa7c:	d1f9      	bne.n	800fa72 <memcpy+0xe>
 800fa7e:	bd10      	pop	{r4, pc}

0800fa80 <memmove>:
 800fa80:	4288      	cmp	r0, r1
 800fa82:	b510      	push	{r4, lr}
 800fa84:	eb01 0402 	add.w	r4, r1, r2
 800fa88:	d902      	bls.n	800fa90 <memmove+0x10>
 800fa8a:	4284      	cmp	r4, r0
 800fa8c:	4623      	mov	r3, r4
 800fa8e:	d807      	bhi.n	800faa0 <memmove+0x20>
 800fa90:	1e43      	subs	r3, r0, #1
 800fa92:	42a1      	cmp	r1, r4
 800fa94:	d008      	beq.n	800faa8 <memmove+0x28>
 800fa96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa9e:	e7f8      	b.n	800fa92 <memmove+0x12>
 800faa0:	4402      	add	r2, r0
 800faa2:	4601      	mov	r1, r0
 800faa4:	428a      	cmp	r2, r1
 800faa6:	d100      	bne.n	800faaa <memmove+0x2a>
 800faa8:	bd10      	pop	{r4, pc}
 800faaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fab2:	e7f7      	b.n	800faa4 <memmove+0x24>

0800fab4 <memset>:
 800fab4:	4402      	add	r2, r0
 800fab6:	4603      	mov	r3, r0
 800fab8:	4293      	cmp	r3, r2
 800faba:	d100      	bne.n	800fabe <memset+0xa>
 800fabc:	4770      	bx	lr
 800fabe:	f803 1b01 	strb.w	r1, [r3], #1
 800fac2:	e7f9      	b.n	800fab8 <memset+0x4>

0800fac4 <siprintf>:
 800fac4:	b40e      	push	{r1, r2, r3}
 800fac6:	b500      	push	{lr}
 800fac8:	b09c      	sub	sp, #112	; 0x70
 800faca:	ab1d      	add	r3, sp, #116	; 0x74
 800facc:	9002      	str	r0, [sp, #8]
 800face:	9006      	str	r0, [sp, #24]
 800fad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fad4:	4809      	ldr	r0, [pc, #36]	; (800fafc <siprintf+0x38>)
 800fad6:	9107      	str	r1, [sp, #28]
 800fad8:	9104      	str	r1, [sp, #16]
 800fada:	4909      	ldr	r1, [pc, #36]	; (800fb00 <siprintf+0x3c>)
 800fadc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae0:	9105      	str	r1, [sp, #20]
 800fae2:	6800      	ldr	r0, [r0, #0]
 800fae4:	9301      	str	r3, [sp, #4]
 800fae6:	a902      	add	r1, sp, #8
 800fae8:	f000 f8aa 	bl	800fc40 <_svfiprintf_r>
 800faec:	9b02      	ldr	r3, [sp, #8]
 800faee:	2200      	movs	r2, #0
 800faf0:	701a      	strb	r2, [r3, #0]
 800faf2:	b01c      	add	sp, #112	; 0x70
 800faf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800faf8:	b003      	add	sp, #12
 800fafa:	4770      	bx	lr
 800fafc:	20000640 	.word	0x20000640
 800fb00:	ffff0208 	.word	0xffff0208

0800fb04 <strcpy>:
 800fb04:	4603      	mov	r3, r0
 800fb06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb0a:	f803 2b01 	strb.w	r2, [r3], #1
 800fb0e:	2a00      	cmp	r2, #0
 800fb10:	d1f9      	bne.n	800fb06 <strcpy+0x2>
 800fb12:	4770      	bx	lr

0800fb14 <_vsniprintf_r>:
 800fb14:	b530      	push	{r4, r5, lr}
 800fb16:	4614      	mov	r4, r2
 800fb18:	2c00      	cmp	r4, #0
 800fb1a:	b09b      	sub	sp, #108	; 0x6c
 800fb1c:	4605      	mov	r5, r0
 800fb1e:	461a      	mov	r2, r3
 800fb20:	da05      	bge.n	800fb2e <_vsniprintf_r+0x1a>
 800fb22:	238b      	movs	r3, #139	; 0x8b
 800fb24:	6003      	str	r3, [r0, #0]
 800fb26:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2a:	b01b      	add	sp, #108	; 0x6c
 800fb2c:	bd30      	pop	{r4, r5, pc}
 800fb2e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fb32:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fb36:	bf14      	ite	ne
 800fb38:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb3c:	4623      	moveq	r3, r4
 800fb3e:	9302      	str	r3, [sp, #8]
 800fb40:	9305      	str	r3, [sp, #20]
 800fb42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb46:	9100      	str	r1, [sp, #0]
 800fb48:	9104      	str	r1, [sp, #16]
 800fb4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fb4e:	4669      	mov	r1, sp
 800fb50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fb52:	f000 f875 	bl	800fc40 <_svfiprintf_r>
 800fb56:	1c43      	adds	r3, r0, #1
 800fb58:	bfbc      	itt	lt
 800fb5a:	238b      	movlt	r3, #139	; 0x8b
 800fb5c:	602b      	strlt	r3, [r5, #0]
 800fb5e:	2c00      	cmp	r4, #0
 800fb60:	d0e3      	beq.n	800fb2a <_vsniprintf_r+0x16>
 800fb62:	9b00      	ldr	r3, [sp, #0]
 800fb64:	2200      	movs	r2, #0
 800fb66:	701a      	strb	r2, [r3, #0]
 800fb68:	e7df      	b.n	800fb2a <_vsniprintf_r+0x16>
	...

0800fb6c <vsniprintf>:
 800fb6c:	b507      	push	{r0, r1, r2, lr}
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	4613      	mov	r3, r2
 800fb72:	460a      	mov	r2, r1
 800fb74:	4601      	mov	r1, r0
 800fb76:	4803      	ldr	r0, [pc, #12]	; (800fb84 <vsniprintf+0x18>)
 800fb78:	6800      	ldr	r0, [r0, #0]
 800fb7a:	f7ff ffcb 	bl	800fb14 <_vsniprintf_r>
 800fb7e:	b003      	add	sp, #12
 800fb80:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb84:	20000640 	.word	0x20000640

0800fb88 <__ssputs_r>:
 800fb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb8c:	688e      	ldr	r6, [r1, #8]
 800fb8e:	429e      	cmp	r6, r3
 800fb90:	4682      	mov	sl, r0
 800fb92:	460c      	mov	r4, r1
 800fb94:	4690      	mov	r8, r2
 800fb96:	461f      	mov	r7, r3
 800fb98:	d838      	bhi.n	800fc0c <__ssputs_r+0x84>
 800fb9a:	898a      	ldrh	r2, [r1, #12]
 800fb9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fba0:	d032      	beq.n	800fc08 <__ssputs_r+0x80>
 800fba2:	6825      	ldr	r5, [r4, #0]
 800fba4:	6909      	ldr	r1, [r1, #16]
 800fba6:	eba5 0901 	sub.w	r9, r5, r1
 800fbaa:	6965      	ldr	r5, [r4, #20]
 800fbac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	444b      	add	r3, r9
 800fbb8:	106d      	asrs	r5, r5, #1
 800fbba:	429d      	cmp	r5, r3
 800fbbc:	bf38      	it	cc
 800fbbe:	461d      	movcc	r5, r3
 800fbc0:	0553      	lsls	r3, r2, #21
 800fbc2:	d531      	bpl.n	800fc28 <__ssputs_r+0xa0>
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	f000 fb3b 	bl	8010240 <_malloc_r>
 800fbca:	4606      	mov	r6, r0
 800fbcc:	b950      	cbnz	r0, 800fbe4 <__ssputs_r+0x5c>
 800fbce:	230c      	movs	r3, #12
 800fbd0:	f8ca 3000 	str.w	r3, [sl]
 800fbd4:	89a3      	ldrh	r3, [r4, #12]
 800fbd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbda:	81a3      	strh	r3, [r4, #12]
 800fbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe4:	6921      	ldr	r1, [r4, #16]
 800fbe6:	464a      	mov	r2, r9
 800fbe8:	f7ff ff3c 	bl	800fa64 <memcpy>
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fbf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbf6:	81a3      	strh	r3, [r4, #12]
 800fbf8:	6126      	str	r6, [r4, #16]
 800fbfa:	6165      	str	r5, [r4, #20]
 800fbfc:	444e      	add	r6, r9
 800fbfe:	eba5 0509 	sub.w	r5, r5, r9
 800fc02:	6026      	str	r6, [r4, #0]
 800fc04:	60a5      	str	r5, [r4, #8]
 800fc06:	463e      	mov	r6, r7
 800fc08:	42be      	cmp	r6, r7
 800fc0a:	d900      	bls.n	800fc0e <__ssputs_r+0x86>
 800fc0c:	463e      	mov	r6, r7
 800fc0e:	6820      	ldr	r0, [r4, #0]
 800fc10:	4632      	mov	r2, r6
 800fc12:	4641      	mov	r1, r8
 800fc14:	f7ff ff34 	bl	800fa80 <memmove>
 800fc18:	68a3      	ldr	r3, [r4, #8]
 800fc1a:	1b9b      	subs	r3, r3, r6
 800fc1c:	60a3      	str	r3, [r4, #8]
 800fc1e:	6823      	ldr	r3, [r4, #0]
 800fc20:	4433      	add	r3, r6
 800fc22:	6023      	str	r3, [r4, #0]
 800fc24:	2000      	movs	r0, #0
 800fc26:	e7db      	b.n	800fbe0 <__ssputs_r+0x58>
 800fc28:	462a      	mov	r2, r5
 800fc2a:	f000 fb7d 	bl	8010328 <_realloc_r>
 800fc2e:	4606      	mov	r6, r0
 800fc30:	2800      	cmp	r0, #0
 800fc32:	d1e1      	bne.n	800fbf8 <__ssputs_r+0x70>
 800fc34:	6921      	ldr	r1, [r4, #16]
 800fc36:	4650      	mov	r0, sl
 800fc38:	f000 fa96 	bl	8010168 <_free_r>
 800fc3c:	e7c7      	b.n	800fbce <__ssputs_r+0x46>
	...

0800fc40 <_svfiprintf_r>:
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	4698      	mov	r8, r3
 800fc46:	898b      	ldrh	r3, [r1, #12]
 800fc48:	061b      	lsls	r3, r3, #24
 800fc4a:	b09d      	sub	sp, #116	; 0x74
 800fc4c:	4607      	mov	r7, r0
 800fc4e:	460d      	mov	r5, r1
 800fc50:	4614      	mov	r4, r2
 800fc52:	d50e      	bpl.n	800fc72 <_svfiprintf_r+0x32>
 800fc54:	690b      	ldr	r3, [r1, #16]
 800fc56:	b963      	cbnz	r3, 800fc72 <_svfiprintf_r+0x32>
 800fc58:	2140      	movs	r1, #64	; 0x40
 800fc5a:	f000 faf1 	bl	8010240 <_malloc_r>
 800fc5e:	6028      	str	r0, [r5, #0]
 800fc60:	6128      	str	r0, [r5, #16]
 800fc62:	b920      	cbnz	r0, 800fc6e <_svfiprintf_r+0x2e>
 800fc64:	230c      	movs	r3, #12
 800fc66:	603b      	str	r3, [r7, #0]
 800fc68:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6c:	e0d1      	b.n	800fe12 <_svfiprintf_r+0x1d2>
 800fc6e:	2340      	movs	r3, #64	; 0x40
 800fc70:	616b      	str	r3, [r5, #20]
 800fc72:	2300      	movs	r3, #0
 800fc74:	9309      	str	r3, [sp, #36]	; 0x24
 800fc76:	2320      	movs	r3, #32
 800fc78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc80:	2330      	movs	r3, #48	; 0x30
 800fc82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fe2c <_svfiprintf_r+0x1ec>
 800fc86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc8a:	f04f 0901 	mov.w	r9, #1
 800fc8e:	4623      	mov	r3, r4
 800fc90:	469a      	mov	sl, r3
 800fc92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc96:	b10a      	cbz	r2, 800fc9c <_svfiprintf_r+0x5c>
 800fc98:	2a25      	cmp	r2, #37	; 0x25
 800fc9a:	d1f9      	bne.n	800fc90 <_svfiprintf_r+0x50>
 800fc9c:	ebba 0b04 	subs.w	fp, sl, r4
 800fca0:	d00b      	beq.n	800fcba <_svfiprintf_r+0x7a>
 800fca2:	465b      	mov	r3, fp
 800fca4:	4622      	mov	r2, r4
 800fca6:	4629      	mov	r1, r5
 800fca8:	4638      	mov	r0, r7
 800fcaa:	f7ff ff6d 	bl	800fb88 <__ssputs_r>
 800fcae:	3001      	adds	r0, #1
 800fcb0:	f000 80aa 	beq.w	800fe08 <_svfiprintf_r+0x1c8>
 800fcb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcb6:	445a      	add	r2, fp
 800fcb8:	9209      	str	r2, [sp, #36]	; 0x24
 800fcba:	f89a 3000 	ldrb.w	r3, [sl]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	f000 80a2 	beq.w	800fe08 <_svfiprintf_r+0x1c8>
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcce:	f10a 0a01 	add.w	sl, sl, #1
 800fcd2:	9304      	str	r3, [sp, #16]
 800fcd4:	9307      	str	r3, [sp, #28]
 800fcd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcda:	931a      	str	r3, [sp, #104]	; 0x68
 800fcdc:	4654      	mov	r4, sl
 800fcde:	2205      	movs	r2, #5
 800fce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fce4:	4851      	ldr	r0, [pc, #324]	; (800fe2c <_svfiprintf_r+0x1ec>)
 800fce6:	f7f0 fa93 	bl	8000210 <memchr>
 800fcea:	9a04      	ldr	r2, [sp, #16]
 800fcec:	b9d8      	cbnz	r0, 800fd26 <_svfiprintf_r+0xe6>
 800fcee:	06d0      	lsls	r0, r2, #27
 800fcf0:	bf44      	itt	mi
 800fcf2:	2320      	movmi	r3, #32
 800fcf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcf8:	0711      	lsls	r1, r2, #28
 800fcfa:	bf44      	itt	mi
 800fcfc:	232b      	movmi	r3, #43	; 0x2b
 800fcfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd02:	f89a 3000 	ldrb.w	r3, [sl]
 800fd06:	2b2a      	cmp	r3, #42	; 0x2a
 800fd08:	d015      	beq.n	800fd36 <_svfiprintf_r+0xf6>
 800fd0a:	9a07      	ldr	r2, [sp, #28]
 800fd0c:	4654      	mov	r4, sl
 800fd0e:	2000      	movs	r0, #0
 800fd10:	f04f 0c0a 	mov.w	ip, #10
 800fd14:	4621      	mov	r1, r4
 800fd16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd1a:	3b30      	subs	r3, #48	; 0x30
 800fd1c:	2b09      	cmp	r3, #9
 800fd1e:	d94e      	bls.n	800fdbe <_svfiprintf_r+0x17e>
 800fd20:	b1b0      	cbz	r0, 800fd50 <_svfiprintf_r+0x110>
 800fd22:	9207      	str	r2, [sp, #28]
 800fd24:	e014      	b.n	800fd50 <_svfiprintf_r+0x110>
 800fd26:	eba0 0308 	sub.w	r3, r0, r8
 800fd2a:	fa09 f303 	lsl.w	r3, r9, r3
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	9304      	str	r3, [sp, #16]
 800fd32:	46a2      	mov	sl, r4
 800fd34:	e7d2      	b.n	800fcdc <_svfiprintf_r+0x9c>
 800fd36:	9b03      	ldr	r3, [sp, #12]
 800fd38:	1d19      	adds	r1, r3, #4
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	9103      	str	r1, [sp, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	bfbb      	ittet	lt
 800fd42:	425b      	neglt	r3, r3
 800fd44:	f042 0202 	orrlt.w	r2, r2, #2
 800fd48:	9307      	strge	r3, [sp, #28]
 800fd4a:	9307      	strlt	r3, [sp, #28]
 800fd4c:	bfb8      	it	lt
 800fd4e:	9204      	strlt	r2, [sp, #16]
 800fd50:	7823      	ldrb	r3, [r4, #0]
 800fd52:	2b2e      	cmp	r3, #46	; 0x2e
 800fd54:	d10c      	bne.n	800fd70 <_svfiprintf_r+0x130>
 800fd56:	7863      	ldrb	r3, [r4, #1]
 800fd58:	2b2a      	cmp	r3, #42	; 0x2a
 800fd5a:	d135      	bne.n	800fdc8 <_svfiprintf_r+0x188>
 800fd5c:	9b03      	ldr	r3, [sp, #12]
 800fd5e:	1d1a      	adds	r2, r3, #4
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	9203      	str	r2, [sp, #12]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	bfb8      	it	lt
 800fd68:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd6c:	3402      	adds	r4, #2
 800fd6e:	9305      	str	r3, [sp, #20]
 800fd70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe3c <_svfiprintf_r+0x1fc>
 800fd74:	7821      	ldrb	r1, [r4, #0]
 800fd76:	2203      	movs	r2, #3
 800fd78:	4650      	mov	r0, sl
 800fd7a:	f7f0 fa49 	bl	8000210 <memchr>
 800fd7e:	b140      	cbz	r0, 800fd92 <_svfiprintf_r+0x152>
 800fd80:	2340      	movs	r3, #64	; 0x40
 800fd82:	eba0 000a 	sub.w	r0, r0, sl
 800fd86:	fa03 f000 	lsl.w	r0, r3, r0
 800fd8a:	9b04      	ldr	r3, [sp, #16]
 800fd8c:	4303      	orrs	r3, r0
 800fd8e:	3401      	adds	r4, #1
 800fd90:	9304      	str	r3, [sp, #16]
 800fd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd96:	4826      	ldr	r0, [pc, #152]	; (800fe30 <_svfiprintf_r+0x1f0>)
 800fd98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd9c:	2206      	movs	r2, #6
 800fd9e:	f7f0 fa37 	bl	8000210 <memchr>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d038      	beq.n	800fe18 <_svfiprintf_r+0x1d8>
 800fda6:	4b23      	ldr	r3, [pc, #140]	; (800fe34 <_svfiprintf_r+0x1f4>)
 800fda8:	bb1b      	cbnz	r3, 800fdf2 <_svfiprintf_r+0x1b2>
 800fdaa:	9b03      	ldr	r3, [sp, #12]
 800fdac:	3307      	adds	r3, #7
 800fdae:	f023 0307 	bic.w	r3, r3, #7
 800fdb2:	3308      	adds	r3, #8
 800fdb4:	9303      	str	r3, [sp, #12]
 800fdb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb8:	4433      	add	r3, r6
 800fdba:	9309      	str	r3, [sp, #36]	; 0x24
 800fdbc:	e767      	b.n	800fc8e <_svfiprintf_r+0x4e>
 800fdbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	2001      	movs	r0, #1
 800fdc6:	e7a5      	b.n	800fd14 <_svfiprintf_r+0xd4>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	3401      	adds	r4, #1
 800fdcc:	9305      	str	r3, [sp, #20]
 800fdce:	4619      	mov	r1, r3
 800fdd0:	f04f 0c0a 	mov.w	ip, #10
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdda:	3a30      	subs	r2, #48	; 0x30
 800fddc:	2a09      	cmp	r2, #9
 800fdde:	d903      	bls.n	800fde8 <_svfiprintf_r+0x1a8>
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d0c5      	beq.n	800fd70 <_svfiprintf_r+0x130>
 800fde4:	9105      	str	r1, [sp, #20]
 800fde6:	e7c3      	b.n	800fd70 <_svfiprintf_r+0x130>
 800fde8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdec:	4604      	mov	r4, r0
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e7f0      	b.n	800fdd4 <_svfiprintf_r+0x194>
 800fdf2:	ab03      	add	r3, sp, #12
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	462a      	mov	r2, r5
 800fdf8:	4b0f      	ldr	r3, [pc, #60]	; (800fe38 <_svfiprintf_r+0x1f8>)
 800fdfa:	a904      	add	r1, sp, #16
 800fdfc:	4638      	mov	r0, r7
 800fdfe:	f3af 8000 	nop.w
 800fe02:	1c42      	adds	r2, r0, #1
 800fe04:	4606      	mov	r6, r0
 800fe06:	d1d6      	bne.n	800fdb6 <_svfiprintf_r+0x176>
 800fe08:	89ab      	ldrh	r3, [r5, #12]
 800fe0a:	065b      	lsls	r3, r3, #25
 800fe0c:	f53f af2c 	bmi.w	800fc68 <_svfiprintf_r+0x28>
 800fe10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe12:	b01d      	add	sp, #116	; 0x74
 800fe14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe18:	ab03      	add	r3, sp, #12
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	462a      	mov	r2, r5
 800fe1e:	4b06      	ldr	r3, [pc, #24]	; (800fe38 <_svfiprintf_r+0x1f8>)
 800fe20:	a904      	add	r1, sp, #16
 800fe22:	4638      	mov	r0, r7
 800fe24:	f000 f87a 	bl	800ff1c <_printf_i>
 800fe28:	e7eb      	b.n	800fe02 <_svfiprintf_r+0x1c2>
 800fe2a:	bf00      	nop
 800fe2c:	080118b0 	.word	0x080118b0
 800fe30:	080118ba 	.word	0x080118ba
 800fe34:	00000000 	.word	0x00000000
 800fe38:	0800fb89 	.word	0x0800fb89
 800fe3c:	080118b6 	.word	0x080118b6

0800fe40 <_printf_common>:
 800fe40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe44:	4616      	mov	r6, r2
 800fe46:	4699      	mov	r9, r3
 800fe48:	688a      	ldr	r2, [r1, #8]
 800fe4a:	690b      	ldr	r3, [r1, #16]
 800fe4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe50:	4293      	cmp	r3, r2
 800fe52:	bfb8      	it	lt
 800fe54:	4613      	movlt	r3, r2
 800fe56:	6033      	str	r3, [r6, #0]
 800fe58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe5c:	4607      	mov	r7, r0
 800fe5e:	460c      	mov	r4, r1
 800fe60:	b10a      	cbz	r2, 800fe66 <_printf_common+0x26>
 800fe62:	3301      	adds	r3, #1
 800fe64:	6033      	str	r3, [r6, #0]
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	0699      	lsls	r1, r3, #26
 800fe6a:	bf42      	ittt	mi
 800fe6c:	6833      	ldrmi	r3, [r6, #0]
 800fe6e:	3302      	addmi	r3, #2
 800fe70:	6033      	strmi	r3, [r6, #0]
 800fe72:	6825      	ldr	r5, [r4, #0]
 800fe74:	f015 0506 	ands.w	r5, r5, #6
 800fe78:	d106      	bne.n	800fe88 <_printf_common+0x48>
 800fe7a:	f104 0a19 	add.w	sl, r4, #25
 800fe7e:	68e3      	ldr	r3, [r4, #12]
 800fe80:	6832      	ldr	r2, [r6, #0]
 800fe82:	1a9b      	subs	r3, r3, r2
 800fe84:	42ab      	cmp	r3, r5
 800fe86:	dc26      	bgt.n	800fed6 <_printf_common+0x96>
 800fe88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe8c:	1e13      	subs	r3, r2, #0
 800fe8e:	6822      	ldr	r2, [r4, #0]
 800fe90:	bf18      	it	ne
 800fe92:	2301      	movne	r3, #1
 800fe94:	0692      	lsls	r2, r2, #26
 800fe96:	d42b      	bmi.n	800fef0 <_printf_common+0xb0>
 800fe98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe9c:	4649      	mov	r1, r9
 800fe9e:	4638      	mov	r0, r7
 800fea0:	47c0      	blx	r8
 800fea2:	3001      	adds	r0, #1
 800fea4:	d01e      	beq.n	800fee4 <_printf_common+0xa4>
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	68e5      	ldr	r5, [r4, #12]
 800feaa:	6832      	ldr	r2, [r6, #0]
 800feac:	f003 0306 	and.w	r3, r3, #6
 800feb0:	2b04      	cmp	r3, #4
 800feb2:	bf08      	it	eq
 800feb4:	1aad      	subeq	r5, r5, r2
 800feb6:	68a3      	ldr	r3, [r4, #8]
 800feb8:	6922      	ldr	r2, [r4, #16]
 800feba:	bf0c      	ite	eq
 800febc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fec0:	2500      	movne	r5, #0
 800fec2:	4293      	cmp	r3, r2
 800fec4:	bfc4      	itt	gt
 800fec6:	1a9b      	subgt	r3, r3, r2
 800fec8:	18ed      	addgt	r5, r5, r3
 800feca:	2600      	movs	r6, #0
 800fecc:	341a      	adds	r4, #26
 800fece:	42b5      	cmp	r5, r6
 800fed0:	d11a      	bne.n	800ff08 <_printf_common+0xc8>
 800fed2:	2000      	movs	r0, #0
 800fed4:	e008      	b.n	800fee8 <_printf_common+0xa8>
 800fed6:	2301      	movs	r3, #1
 800fed8:	4652      	mov	r2, sl
 800feda:	4649      	mov	r1, r9
 800fedc:	4638      	mov	r0, r7
 800fede:	47c0      	blx	r8
 800fee0:	3001      	adds	r0, #1
 800fee2:	d103      	bne.n	800feec <_printf_common+0xac>
 800fee4:	f04f 30ff 	mov.w	r0, #4294967295
 800fee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feec:	3501      	adds	r5, #1
 800feee:	e7c6      	b.n	800fe7e <_printf_common+0x3e>
 800fef0:	18e1      	adds	r1, r4, r3
 800fef2:	1c5a      	adds	r2, r3, #1
 800fef4:	2030      	movs	r0, #48	; 0x30
 800fef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fefa:	4422      	add	r2, r4
 800fefc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff04:	3302      	adds	r3, #2
 800ff06:	e7c7      	b.n	800fe98 <_printf_common+0x58>
 800ff08:	2301      	movs	r3, #1
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	4649      	mov	r1, r9
 800ff0e:	4638      	mov	r0, r7
 800ff10:	47c0      	blx	r8
 800ff12:	3001      	adds	r0, #1
 800ff14:	d0e6      	beq.n	800fee4 <_printf_common+0xa4>
 800ff16:	3601      	adds	r6, #1
 800ff18:	e7d9      	b.n	800fece <_printf_common+0x8e>
	...

0800ff1c <_printf_i>:
 800ff1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff20:	7e0f      	ldrb	r7, [r1, #24]
 800ff22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff24:	2f78      	cmp	r7, #120	; 0x78
 800ff26:	4691      	mov	r9, r2
 800ff28:	4680      	mov	r8, r0
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	469a      	mov	sl, r3
 800ff2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff32:	d807      	bhi.n	800ff44 <_printf_i+0x28>
 800ff34:	2f62      	cmp	r7, #98	; 0x62
 800ff36:	d80a      	bhi.n	800ff4e <_printf_i+0x32>
 800ff38:	2f00      	cmp	r7, #0
 800ff3a:	f000 80d8 	beq.w	80100ee <_printf_i+0x1d2>
 800ff3e:	2f58      	cmp	r7, #88	; 0x58
 800ff40:	f000 80a3 	beq.w	801008a <_printf_i+0x16e>
 800ff44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff4c:	e03a      	b.n	800ffc4 <_printf_i+0xa8>
 800ff4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff52:	2b15      	cmp	r3, #21
 800ff54:	d8f6      	bhi.n	800ff44 <_printf_i+0x28>
 800ff56:	a101      	add	r1, pc, #4	; (adr r1, 800ff5c <_printf_i+0x40>)
 800ff58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff5c:	0800ffb5 	.word	0x0800ffb5
 800ff60:	0800ffc9 	.word	0x0800ffc9
 800ff64:	0800ff45 	.word	0x0800ff45
 800ff68:	0800ff45 	.word	0x0800ff45
 800ff6c:	0800ff45 	.word	0x0800ff45
 800ff70:	0800ff45 	.word	0x0800ff45
 800ff74:	0800ffc9 	.word	0x0800ffc9
 800ff78:	0800ff45 	.word	0x0800ff45
 800ff7c:	0800ff45 	.word	0x0800ff45
 800ff80:	0800ff45 	.word	0x0800ff45
 800ff84:	0800ff45 	.word	0x0800ff45
 800ff88:	080100d5 	.word	0x080100d5
 800ff8c:	0800fff9 	.word	0x0800fff9
 800ff90:	080100b7 	.word	0x080100b7
 800ff94:	0800ff45 	.word	0x0800ff45
 800ff98:	0800ff45 	.word	0x0800ff45
 800ff9c:	080100f7 	.word	0x080100f7
 800ffa0:	0800ff45 	.word	0x0800ff45
 800ffa4:	0800fff9 	.word	0x0800fff9
 800ffa8:	0800ff45 	.word	0x0800ff45
 800ffac:	0800ff45 	.word	0x0800ff45
 800ffb0:	080100bf 	.word	0x080100bf
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	1d1a      	adds	r2, r3, #4
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	602a      	str	r2, [r5, #0]
 800ffbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e0a3      	b.n	8010110 <_printf_i+0x1f4>
 800ffc8:	6820      	ldr	r0, [r4, #0]
 800ffca:	6829      	ldr	r1, [r5, #0]
 800ffcc:	0606      	lsls	r6, r0, #24
 800ffce:	f101 0304 	add.w	r3, r1, #4
 800ffd2:	d50a      	bpl.n	800ffea <_printf_i+0xce>
 800ffd4:	680e      	ldr	r6, [r1, #0]
 800ffd6:	602b      	str	r3, [r5, #0]
 800ffd8:	2e00      	cmp	r6, #0
 800ffda:	da03      	bge.n	800ffe4 <_printf_i+0xc8>
 800ffdc:	232d      	movs	r3, #45	; 0x2d
 800ffde:	4276      	negs	r6, r6
 800ffe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffe4:	485e      	ldr	r0, [pc, #376]	; (8010160 <_printf_i+0x244>)
 800ffe6:	230a      	movs	r3, #10
 800ffe8:	e019      	b.n	801001e <_printf_i+0x102>
 800ffea:	680e      	ldr	r6, [r1, #0]
 800ffec:	602b      	str	r3, [r5, #0]
 800ffee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fff2:	bf18      	it	ne
 800fff4:	b236      	sxthne	r6, r6
 800fff6:	e7ef      	b.n	800ffd8 <_printf_i+0xbc>
 800fff8:	682b      	ldr	r3, [r5, #0]
 800fffa:	6820      	ldr	r0, [r4, #0]
 800fffc:	1d19      	adds	r1, r3, #4
 800fffe:	6029      	str	r1, [r5, #0]
 8010000:	0601      	lsls	r1, r0, #24
 8010002:	d501      	bpl.n	8010008 <_printf_i+0xec>
 8010004:	681e      	ldr	r6, [r3, #0]
 8010006:	e002      	b.n	801000e <_printf_i+0xf2>
 8010008:	0646      	lsls	r6, r0, #25
 801000a:	d5fb      	bpl.n	8010004 <_printf_i+0xe8>
 801000c:	881e      	ldrh	r6, [r3, #0]
 801000e:	4854      	ldr	r0, [pc, #336]	; (8010160 <_printf_i+0x244>)
 8010010:	2f6f      	cmp	r7, #111	; 0x6f
 8010012:	bf0c      	ite	eq
 8010014:	2308      	moveq	r3, #8
 8010016:	230a      	movne	r3, #10
 8010018:	2100      	movs	r1, #0
 801001a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801001e:	6865      	ldr	r5, [r4, #4]
 8010020:	60a5      	str	r5, [r4, #8]
 8010022:	2d00      	cmp	r5, #0
 8010024:	bfa2      	ittt	ge
 8010026:	6821      	ldrge	r1, [r4, #0]
 8010028:	f021 0104 	bicge.w	r1, r1, #4
 801002c:	6021      	strge	r1, [r4, #0]
 801002e:	b90e      	cbnz	r6, 8010034 <_printf_i+0x118>
 8010030:	2d00      	cmp	r5, #0
 8010032:	d04d      	beq.n	80100d0 <_printf_i+0x1b4>
 8010034:	4615      	mov	r5, r2
 8010036:	fbb6 f1f3 	udiv	r1, r6, r3
 801003a:	fb03 6711 	mls	r7, r3, r1, r6
 801003e:	5dc7      	ldrb	r7, [r0, r7]
 8010040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010044:	4637      	mov	r7, r6
 8010046:	42bb      	cmp	r3, r7
 8010048:	460e      	mov	r6, r1
 801004a:	d9f4      	bls.n	8010036 <_printf_i+0x11a>
 801004c:	2b08      	cmp	r3, #8
 801004e:	d10b      	bne.n	8010068 <_printf_i+0x14c>
 8010050:	6823      	ldr	r3, [r4, #0]
 8010052:	07de      	lsls	r6, r3, #31
 8010054:	d508      	bpl.n	8010068 <_printf_i+0x14c>
 8010056:	6923      	ldr	r3, [r4, #16]
 8010058:	6861      	ldr	r1, [r4, #4]
 801005a:	4299      	cmp	r1, r3
 801005c:	bfde      	ittt	le
 801005e:	2330      	movle	r3, #48	; 0x30
 8010060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010068:	1b52      	subs	r2, r2, r5
 801006a:	6122      	str	r2, [r4, #16]
 801006c:	f8cd a000 	str.w	sl, [sp]
 8010070:	464b      	mov	r3, r9
 8010072:	aa03      	add	r2, sp, #12
 8010074:	4621      	mov	r1, r4
 8010076:	4640      	mov	r0, r8
 8010078:	f7ff fee2 	bl	800fe40 <_printf_common>
 801007c:	3001      	adds	r0, #1
 801007e:	d14c      	bne.n	801011a <_printf_i+0x1fe>
 8010080:	f04f 30ff 	mov.w	r0, #4294967295
 8010084:	b004      	add	sp, #16
 8010086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801008a:	4835      	ldr	r0, [pc, #212]	; (8010160 <_printf_i+0x244>)
 801008c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010090:	6829      	ldr	r1, [r5, #0]
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	f851 6b04 	ldr.w	r6, [r1], #4
 8010098:	6029      	str	r1, [r5, #0]
 801009a:	061d      	lsls	r5, r3, #24
 801009c:	d514      	bpl.n	80100c8 <_printf_i+0x1ac>
 801009e:	07df      	lsls	r7, r3, #31
 80100a0:	bf44      	itt	mi
 80100a2:	f043 0320 	orrmi.w	r3, r3, #32
 80100a6:	6023      	strmi	r3, [r4, #0]
 80100a8:	b91e      	cbnz	r6, 80100b2 <_printf_i+0x196>
 80100aa:	6823      	ldr	r3, [r4, #0]
 80100ac:	f023 0320 	bic.w	r3, r3, #32
 80100b0:	6023      	str	r3, [r4, #0]
 80100b2:	2310      	movs	r3, #16
 80100b4:	e7b0      	b.n	8010018 <_printf_i+0xfc>
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	f043 0320 	orr.w	r3, r3, #32
 80100bc:	6023      	str	r3, [r4, #0]
 80100be:	2378      	movs	r3, #120	; 0x78
 80100c0:	4828      	ldr	r0, [pc, #160]	; (8010164 <_printf_i+0x248>)
 80100c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100c6:	e7e3      	b.n	8010090 <_printf_i+0x174>
 80100c8:	0659      	lsls	r1, r3, #25
 80100ca:	bf48      	it	mi
 80100cc:	b2b6      	uxthmi	r6, r6
 80100ce:	e7e6      	b.n	801009e <_printf_i+0x182>
 80100d0:	4615      	mov	r5, r2
 80100d2:	e7bb      	b.n	801004c <_printf_i+0x130>
 80100d4:	682b      	ldr	r3, [r5, #0]
 80100d6:	6826      	ldr	r6, [r4, #0]
 80100d8:	6961      	ldr	r1, [r4, #20]
 80100da:	1d18      	adds	r0, r3, #4
 80100dc:	6028      	str	r0, [r5, #0]
 80100de:	0635      	lsls	r5, r6, #24
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	d501      	bpl.n	80100e8 <_printf_i+0x1cc>
 80100e4:	6019      	str	r1, [r3, #0]
 80100e6:	e002      	b.n	80100ee <_printf_i+0x1d2>
 80100e8:	0670      	lsls	r0, r6, #25
 80100ea:	d5fb      	bpl.n	80100e4 <_printf_i+0x1c8>
 80100ec:	8019      	strh	r1, [r3, #0]
 80100ee:	2300      	movs	r3, #0
 80100f0:	6123      	str	r3, [r4, #16]
 80100f2:	4615      	mov	r5, r2
 80100f4:	e7ba      	b.n	801006c <_printf_i+0x150>
 80100f6:	682b      	ldr	r3, [r5, #0]
 80100f8:	1d1a      	adds	r2, r3, #4
 80100fa:	602a      	str	r2, [r5, #0]
 80100fc:	681d      	ldr	r5, [r3, #0]
 80100fe:	6862      	ldr	r2, [r4, #4]
 8010100:	2100      	movs	r1, #0
 8010102:	4628      	mov	r0, r5
 8010104:	f7f0 f884 	bl	8000210 <memchr>
 8010108:	b108      	cbz	r0, 801010e <_printf_i+0x1f2>
 801010a:	1b40      	subs	r0, r0, r5
 801010c:	6060      	str	r0, [r4, #4]
 801010e:	6863      	ldr	r3, [r4, #4]
 8010110:	6123      	str	r3, [r4, #16]
 8010112:	2300      	movs	r3, #0
 8010114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010118:	e7a8      	b.n	801006c <_printf_i+0x150>
 801011a:	6923      	ldr	r3, [r4, #16]
 801011c:	462a      	mov	r2, r5
 801011e:	4649      	mov	r1, r9
 8010120:	4640      	mov	r0, r8
 8010122:	47d0      	blx	sl
 8010124:	3001      	adds	r0, #1
 8010126:	d0ab      	beq.n	8010080 <_printf_i+0x164>
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	079b      	lsls	r3, r3, #30
 801012c:	d413      	bmi.n	8010156 <_printf_i+0x23a>
 801012e:	68e0      	ldr	r0, [r4, #12]
 8010130:	9b03      	ldr	r3, [sp, #12]
 8010132:	4298      	cmp	r0, r3
 8010134:	bfb8      	it	lt
 8010136:	4618      	movlt	r0, r3
 8010138:	e7a4      	b.n	8010084 <_printf_i+0x168>
 801013a:	2301      	movs	r3, #1
 801013c:	4632      	mov	r2, r6
 801013e:	4649      	mov	r1, r9
 8010140:	4640      	mov	r0, r8
 8010142:	47d0      	blx	sl
 8010144:	3001      	adds	r0, #1
 8010146:	d09b      	beq.n	8010080 <_printf_i+0x164>
 8010148:	3501      	adds	r5, #1
 801014a:	68e3      	ldr	r3, [r4, #12]
 801014c:	9903      	ldr	r1, [sp, #12]
 801014e:	1a5b      	subs	r3, r3, r1
 8010150:	42ab      	cmp	r3, r5
 8010152:	dcf2      	bgt.n	801013a <_printf_i+0x21e>
 8010154:	e7eb      	b.n	801012e <_printf_i+0x212>
 8010156:	2500      	movs	r5, #0
 8010158:	f104 0619 	add.w	r6, r4, #25
 801015c:	e7f5      	b.n	801014a <_printf_i+0x22e>
 801015e:	bf00      	nop
 8010160:	080118c1 	.word	0x080118c1
 8010164:	080118d2 	.word	0x080118d2

08010168 <_free_r>:
 8010168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801016a:	2900      	cmp	r1, #0
 801016c:	d044      	beq.n	80101f8 <_free_r+0x90>
 801016e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010172:	9001      	str	r0, [sp, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f1a1 0404 	sub.w	r4, r1, #4
 801017a:	bfb8      	it	lt
 801017c:	18e4      	addlt	r4, r4, r3
 801017e:	f000 f913 	bl	80103a8 <__malloc_lock>
 8010182:	4a1e      	ldr	r2, [pc, #120]	; (80101fc <_free_r+0x94>)
 8010184:	9801      	ldr	r0, [sp, #4]
 8010186:	6813      	ldr	r3, [r2, #0]
 8010188:	b933      	cbnz	r3, 8010198 <_free_r+0x30>
 801018a:	6063      	str	r3, [r4, #4]
 801018c:	6014      	str	r4, [r2, #0]
 801018e:	b003      	add	sp, #12
 8010190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010194:	f000 b90e 	b.w	80103b4 <__malloc_unlock>
 8010198:	42a3      	cmp	r3, r4
 801019a:	d908      	bls.n	80101ae <_free_r+0x46>
 801019c:	6825      	ldr	r5, [r4, #0]
 801019e:	1961      	adds	r1, r4, r5
 80101a0:	428b      	cmp	r3, r1
 80101a2:	bf01      	itttt	eq
 80101a4:	6819      	ldreq	r1, [r3, #0]
 80101a6:	685b      	ldreq	r3, [r3, #4]
 80101a8:	1949      	addeq	r1, r1, r5
 80101aa:	6021      	streq	r1, [r4, #0]
 80101ac:	e7ed      	b.n	801018a <_free_r+0x22>
 80101ae:	461a      	mov	r2, r3
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	b10b      	cbz	r3, 80101b8 <_free_r+0x50>
 80101b4:	42a3      	cmp	r3, r4
 80101b6:	d9fa      	bls.n	80101ae <_free_r+0x46>
 80101b8:	6811      	ldr	r1, [r2, #0]
 80101ba:	1855      	adds	r5, r2, r1
 80101bc:	42a5      	cmp	r5, r4
 80101be:	d10b      	bne.n	80101d8 <_free_r+0x70>
 80101c0:	6824      	ldr	r4, [r4, #0]
 80101c2:	4421      	add	r1, r4
 80101c4:	1854      	adds	r4, r2, r1
 80101c6:	42a3      	cmp	r3, r4
 80101c8:	6011      	str	r1, [r2, #0]
 80101ca:	d1e0      	bne.n	801018e <_free_r+0x26>
 80101cc:	681c      	ldr	r4, [r3, #0]
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	6053      	str	r3, [r2, #4]
 80101d2:	4421      	add	r1, r4
 80101d4:	6011      	str	r1, [r2, #0]
 80101d6:	e7da      	b.n	801018e <_free_r+0x26>
 80101d8:	d902      	bls.n	80101e0 <_free_r+0x78>
 80101da:	230c      	movs	r3, #12
 80101dc:	6003      	str	r3, [r0, #0]
 80101de:	e7d6      	b.n	801018e <_free_r+0x26>
 80101e0:	6825      	ldr	r5, [r4, #0]
 80101e2:	1961      	adds	r1, r4, r5
 80101e4:	428b      	cmp	r3, r1
 80101e6:	bf04      	itt	eq
 80101e8:	6819      	ldreq	r1, [r3, #0]
 80101ea:	685b      	ldreq	r3, [r3, #4]
 80101ec:	6063      	str	r3, [r4, #4]
 80101ee:	bf04      	itt	eq
 80101f0:	1949      	addeq	r1, r1, r5
 80101f2:	6021      	streq	r1, [r4, #0]
 80101f4:	6054      	str	r4, [r2, #4]
 80101f6:	e7ca      	b.n	801018e <_free_r+0x26>
 80101f8:	b003      	add	sp, #12
 80101fa:	bd30      	pop	{r4, r5, pc}
 80101fc:	200019b0 	.word	0x200019b0

08010200 <sbrk_aligned>:
 8010200:	b570      	push	{r4, r5, r6, lr}
 8010202:	4e0e      	ldr	r6, [pc, #56]	; (801023c <sbrk_aligned+0x3c>)
 8010204:	460c      	mov	r4, r1
 8010206:	6831      	ldr	r1, [r6, #0]
 8010208:	4605      	mov	r5, r0
 801020a:	b911      	cbnz	r1, 8010212 <sbrk_aligned+0x12>
 801020c:	f000 f8bc 	bl	8010388 <_sbrk_r>
 8010210:	6030      	str	r0, [r6, #0]
 8010212:	4621      	mov	r1, r4
 8010214:	4628      	mov	r0, r5
 8010216:	f000 f8b7 	bl	8010388 <_sbrk_r>
 801021a:	1c43      	adds	r3, r0, #1
 801021c:	d00a      	beq.n	8010234 <sbrk_aligned+0x34>
 801021e:	1cc4      	adds	r4, r0, #3
 8010220:	f024 0403 	bic.w	r4, r4, #3
 8010224:	42a0      	cmp	r0, r4
 8010226:	d007      	beq.n	8010238 <sbrk_aligned+0x38>
 8010228:	1a21      	subs	r1, r4, r0
 801022a:	4628      	mov	r0, r5
 801022c:	f000 f8ac 	bl	8010388 <_sbrk_r>
 8010230:	3001      	adds	r0, #1
 8010232:	d101      	bne.n	8010238 <sbrk_aligned+0x38>
 8010234:	f04f 34ff 	mov.w	r4, #4294967295
 8010238:	4620      	mov	r0, r4
 801023a:	bd70      	pop	{r4, r5, r6, pc}
 801023c:	200019b4 	.word	0x200019b4

08010240 <_malloc_r>:
 8010240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010244:	1ccd      	adds	r5, r1, #3
 8010246:	f025 0503 	bic.w	r5, r5, #3
 801024a:	3508      	adds	r5, #8
 801024c:	2d0c      	cmp	r5, #12
 801024e:	bf38      	it	cc
 8010250:	250c      	movcc	r5, #12
 8010252:	2d00      	cmp	r5, #0
 8010254:	4607      	mov	r7, r0
 8010256:	db01      	blt.n	801025c <_malloc_r+0x1c>
 8010258:	42a9      	cmp	r1, r5
 801025a:	d905      	bls.n	8010268 <_malloc_r+0x28>
 801025c:	230c      	movs	r3, #12
 801025e:	603b      	str	r3, [r7, #0]
 8010260:	2600      	movs	r6, #0
 8010262:	4630      	mov	r0, r6
 8010264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010268:	4e2e      	ldr	r6, [pc, #184]	; (8010324 <_malloc_r+0xe4>)
 801026a:	f000 f89d 	bl	80103a8 <__malloc_lock>
 801026e:	6833      	ldr	r3, [r6, #0]
 8010270:	461c      	mov	r4, r3
 8010272:	bb34      	cbnz	r4, 80102c2 <_malloc_r+0x82>
 8010274:	4629      	mov	r1, r5
 8010276:	4638      	mov	r0, r7
 8010278:	f7ff ffc2 	bl	8010200 <sbrk_aligned>
 801027c:	1c43      	adds	r3, r0, #1
 801027e:	4604      	mov	r4, r0
 8010280:	d14d      	bne.n	801031e <_malloc_r+0xde>
 8010282:	6834      	ldr	r4, [r6, #0]
 8010284:	4626      	mov	r6, r4
 8010286:	2e00      	cmp	r6, #0
 8010288:	d140      	bne.n	801030c <_malloc_r+0xcc>
 801028a:	6823      	ldr	r3, [r4, #0]
 801028c:	4631      	mov	r1, r6
 801028e:	4638      	mov	r0, r7
 8010290:	eb04 0803 	add.w	r8, r4, r3
 8010294:	f000 f878 	bl	8010388 <_sbrk_r>
 8010298:	4580      	cmp	r8, r0
 801029a:	d13a      	bne.n	8010312 <_malloc_r+0xd2>
 801029c:	6821      	ldr	r1, [r4, #0]
 801029e:	3503      	adds	r5, #3
 80102a0:	1a6d      	subs	r5, r5, r1
 80102a2:	f025 0503 	bic.w	r5, r5, #3
 80102a6:	3508      	adds	r5, #8
 80102a8:	2d0c      	cmp	r5, #12
 80102aa:	bf38      	it	cc
 80102ac:	250c      	movcc	r5, #12
 80102ae:	4629      	mov	r1, r5
 80102b0:	4638      	mov	r0, r7
 80102b2:	f7ff ffa5 	bl	8010200 <sbrk_aligned>
 80102b6:	3001      	adds	r0, #1
 80102b8:	d02b      	beq.n	8010312 <_malloc_r+0xd2>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	442b      	add	r3, r5
 80102be:	6023      	str	r3, [r4, #0]
 80102c0:	e00e      	b.n	80102e0 <_malloc_r+0xa0>
 80102c2:	6822      	ldr	r2, [r4, #0]
 80102c4:	1b52      	subs	r2, r2, r5
 80102c6:	d41e      	bmi.n	8010306 <_malloc_r+0xc6>
 80102c8:	2a0b      	cmp	r2, #11
 80102ca:	d916      	bls.n	80102fa <_malloc_r+0xba>
 80102cc:	1961      	adds	r1, r4, r5
 80102ce:	42a3      	cmp	r3, r4
 80102d0:	6025      	str	r5, [r4, #0]
 80102d2:	bf18      	it	ne
 80102d4:	6059      	strne	r1, [r3, #4]
 80102d6:	6863      	ldr	r3, [r4, #4]
 80102d8:	bf08      	it	eq
 80102da:	6031      	streq	r1, [r6, #0]
 80102dc:	5162      	str	r2, [r4, r5]
 80102de:	604b      	str	r3, [r1, #4]
 80102e0:	4638      	mov	r0, r7
 80102e2:	f104 060b 	add.w	r6, r4, #11
 80102e6:	f000 f865 	bl	80103b4 <__malloc_unlock>
 80102ea:	f026 0607 	bic.w	r6, r6, #7
 80102ee:	1d23      	adds	r3, r4, #4
 80102f0:	1af2      	subs	r2, r6, r3
 80102f2:	d0b6      	beq.n	8010262 <_malloc_r+0x22>
 80102f4:	1b9b      	subs	r3, r3, r6
 80102f6:	50a3      	str	r3, [r4, r2]
 80102f8:	e7b3      	b.n	8010262 <_malloc_r+0x22>
 80102fa:	6862      	ldr	r2, [r4, #4]
 80102fc:	42a3      	cmp	r3, r4
 80102fe:	bf0c      	ite	eq
 8010300:	6032      	streq	r2, [r6, #0]
 8010302:	605a      	strne	r2, [r3, #4]
 8010304:	e7ec      	b.n	80102e0 <_malloc_r+0xa0>
 8010306:	4623      	mov	r3, r4
 8010308:	6864      	ldr	r4, [r4, #4]
 801030a:	e7b2      	b.n	8010272 <_malloc_r+0x32>
 801030c:	4634      	mov	r4, r6
 801030e:	6876      	ldr	r6, [r6, #4]
 8010310:	e7b9      	b.n	8010286 <_malloc_r+0x46>
 8010312:	230c      	movs	r3, #12
 8010314:	603b      	str	r3, [r7, #0]
 8010316:	4638      	mov	r0, r7
 8010318:	f000 f84c 	bl	80103b4 <__malloc_unlock>
 801031c:	e7a1      	b.n	8010262 <_malloc_r+0x22>
 801031e:	6025      	str	r5, [r4, #0]
 8010320:	e7de      	b.n	80102e0 <_malloc_r+0xa0>
 8010322:	bf00      	nop
 8010324:	200019b0 	.word	0x200019b0

08010328 <_realloc_r>:
 8010328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032c:	4680      	mov	r8, r0
 801032e:	4614      	mov	r4, r2
 8010330:	460e      	mov	r6, r1
 8010332:	b921      	cbnz	r1, 801033e <_realloc_r+0x16>
 8010334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010338:	4611      	mov	r1, r2
 801033a:	f7ff bf81 	b.w	8010240 <_malloc_r>
 801033e:	b92a      	cbnz	r2, 801034c <_realloc_r+0x24>
 8010340:	f7ff ff12 	bl	8010168 <_free_r>
 8010344:	4625      	mov	r5, r4
 8010346:	4628      	mov	r0, r5
 8010348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801034c:	f000 f838 	bl	80103c0 <_malloc_usable_size_r>
 8010350:	4284      	cmp	r4, r0
 8010352:	4607      	mov	r7, r0
 8010354:	d802      	bhi.n	801035c <_realloc_r+0x34>
 8010356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801035a:	d812      	bhi.n	8010382 <_realloc_r+0x5a>
 801035c:	4621      	mov	r1, r4
 801035e:	4640      	mov	r0, r8
 8010360:	f7ff ff6e 	bl	8010240 <_malloc_r>
 8010364:	4605      	mov	r5, r0
 8010366:	2800      	cmp	r0, #0
 8010368:	d0ed      	beq.n	8010346 <_realloc_r+0x1e>
 801036a:	42bc      	cmp	r4, r7
 801036c:	4622      	mov	r2, r4
 801036e:	4631      	mov	r1, r6
 8010370:	bf28      	it	cs
 8010372:	463a      	movcs	r2, r7
 8010374:	f7ff fb76 	bl	800fa64 <memcpy>
 8010378:	4631      	mov	r1, r6
 801037a:	4640      	mov	r0, r8
 801037c:	f7ff fef4 	bl	8010168 <_free_r>
 8010380:	e7e1      	b.n	8010346 <_realloc_r+0x1e>
 8010382:	4635      	mov	r5, r6
 8010384:	e7df      	b.n	8010346 <_realloc_r+0x1e>
	...

08010388 <_sbrk_r>:
 8010388:	b538      	push	{r3, r4, r5, lr}
 801038a:	4d06      	ldr	r5, [pc, #24]	; (80103a4 <_sbrk_r+0x1c>)
 801038c:	2300      	movs	r3, #0
 801038e:	4604      	mov	r4, r0
 8010390:	4608      	mov	r0, r1
 8010392:	602b      	str	r3, [r5, #0]
 8010394:	f7f2 fc7e 	bl	8002c94 <_sbrk>
 8010398:	1c43      	adds	r3, r0, #1
 801039a:	d102      	bne.n	80103a2 <_sbrk_r+0x1a>
 801039c:	682b      	ldr	r3, [r5, #0]
 801039e:	b103      	cbz	r3, 80103a2 <_sbrk_r+0x1a>
 80103a0:	6023      	str	r3, [r4, #0]
 80103a2:	bd38      	pop	{r3, r4, r5, pc}
 80103a4:	200019b8 	.word	0x200019b8

080103a8 <__malloc_lock>:
 80103a8:	4801      	ldr	r0, [pc, #4]	; (80103b0 <__malloc_lock+0x8>)
 80103aa:	f000 b811 	b.w	80103d0 <__retarget_lock_acquire_recursive>
 80103ae:	bf00      	nop
 80103b0:	200019bc 	.word	0x200019bc

080103b4 <__malloc_unlock>:
 80103b4:	4801      	ldr	r0, [pc, #4]	; (80103bc <__malloc_unlock+0x8>)
 80103b6:	f000 b80c 	b.w	80103d2 <__retarget_lock_release_recursive>
 80103ba:	bf00      	nop
 80103bc:	200019bc 	.word	0x200019bc

080103c0 <_malloc_usable_size_r>:
 80103c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103c4:	1f18      	subs	r0, r3, #4
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	bfbc      	itt	lt
 80103ca:	580b      	ldrlt	r3, [r1, r0]
 80103cc:	18c0      	addlt	r0, r0, r3
 80103ce:	4770      	bx	lr

080103d0 <__retarget_lock_acquire_recursive>:
 80103d0:	4770      	bx	lr

080103d2 <__retarget_lock_release_recursive>:
 80103d2:	4770      	bx	lr

080103d4 <_init>:
 80103d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d6:	bf00      	nop
 80103d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103da:	bc08      	pop	{r3}
 80103dc:	469e      	mov	lr, r3
 80103de:	4770      	bx	lr

080103e0 <_fini>:
 80103e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e2:	bf00      	nop
 80103e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103e6:	bc08      	pop	{r3}
 80103e8:	469e      	mov	lr, r3
 80103ea:	4770      	bx	lr
